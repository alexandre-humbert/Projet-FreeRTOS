
2021_FreeRTOS_FISE3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e520  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fdc  0800e6d0  0800e6d0  0001e6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116ac  080116ac  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  080116ac  080116ac  000216ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116b4  080116b4  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116b4  080116b4  000216b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080116b8  080116b8  000216b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080116bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00021ed8  20000238  080118f4  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20022110  080118f4  00032110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f454  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006226  00000000  00000000  0005f6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002128  00000000  00000000  000658e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e78  00000000  00000000  00067a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004b625  00000000  00000000  00069888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000284c7  00000000  00000000  000b4ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f53f7  00000000  00000000  000dd374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001d276b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009954  00000000  00000000  001d283c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000238 	.word	0x20000238
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e6b8 	.word	0x0800e6b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000023c 	.word	0x2000023c
 80001ec:	0800e6b8 	.word	0x0800e6b8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <MX_DMA2D_Init+0x60>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef6:	f003 f80d 	bl	8003f14 <HAL_DMA2D_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f00:	f000 fe72 	bl	8001be8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f04:	2101      	movs	r1, #1
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000f08:	f003 fa72 	bl	80043f0 <HAL_DMA2D_ConfigLayer>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f12:	f000 fe69 	bl	8001be8 <Error_Handler>
  }

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20021c6c 	.word	0x20021c6c
 8000f20:	4002b000 	.word	0x4002b000

08000f24 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_DMA2D_MspInit+0x48>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d115      	bne.n	8000f62 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	205a      	movs	r0, #90	; 0x5a
 8000f58:	f002 fdd2 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f5c:	205a      	movs	r0, #90	; 0x5a
 8000f5e:	f002 fdeb 	bl	8003b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	4002b000 	.word	0x4002b000
 8000f70:	40023800 	.word	0x40023800

08000f74 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_FMC_Init+0x98>)
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <MX_FMC_Init+0x9c>)
 8000f90:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_FMC_Init+0x98>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_FMC_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_FMC_Init+0x98>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_FMC_Init+0x98>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_FMC_Init+0x98>)
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_FMC_Init+0x98>)
 8000fb2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000fb6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_FMC_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_FMC_Init+0x98>)
 8000fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_FMC_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_FMC_Init+0x98>)
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_FMC_Init+0x98>)
 8000ff6:	f005 fe3d 	bl	8006c74 <HAL_SDRAM_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001000:	f000 fdf2 	bl	8001be8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20021cac 	.word	0x20021cac
 8001010:	a0000140 	.word	0xa0000140

08001014 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <HAL_FMC_MspInit+0x104>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d16f      	bne.n	8001110 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_FMC_MspInit+0x104>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_FMC_MspInit+0x108>)
 800103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6393      	str	r3, [r2, #56]	; 0x38
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001052:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001056:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001064:	230c      	movs	r3, #12
 8001066:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	482c      	ldr	r0, [pc, #176]	; (8001120 <HAL_FMC_MspInit+0x10c>)
 800106e:	f003 faed 	bl	800464c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001072:	2301      	movs	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001082:	230c      	movs	r3, #12
 8001084:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4826      	ldr	r0, [pc, #152]	; (8001124 <HAL_FMC_MspInit+0x110>)
 800108c:	f003 fade 	bl	800464c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001090:	f248 1333 	movw	r3, #33075	; 0x8133
 8001094:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	481f      	ldr	r0, [pc, #124]	; (8001128 <HAL_FMC_MspInit+0x114>)
 80010ac:	f003 face 	bl	800464c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010b4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c2:	230c      	movs	r3, #12
 80010c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <HAL_FMC_MspInit+0x118>)
 80010cc:	f003 fabe 	bl	800464c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80010d0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80010d4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e2:	230c      	movs	r3, #12
 80010e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <HAL_FMC_MspInit+0x11c>)
 80010ec:	f003 faae 	bl	800464c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001100:	230c      	movs	r3, #12
 8001102:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <HAL_FMC_MspInit+0x120>)
 800110a:	f003 fa9f 	bl	800464c <HAL_GPIO_Init>
 800110e:	e000      	b.n	8001112 <HAL_FMC_MspInit+0xfe>
    return;
 8001110:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000254 	.word	0x20000254
 800111c:	40023800 	.word	0x40023800
 8001120:	40021400 	.word	0x40021400
 8001124:	40020800 	.word	0x40020800
 8001128:	40021800 	.word	0x40021800
 800112c:	40021000 	.word	0x40021000
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40020400 	.word	0x40020400

08001138 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001140:	f7ff ff68 	bl	8001014 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <vApplicationGetTimerTaskMemory>:
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize )
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <vApplicationGetTimerTaskMemory+0x2c>)
 800115c:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <vApplicationGetTimerTaskMemory+0x30>)
 8001162:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	200004bc 	.word	0x200004bc
 800117c:	20000520 	.word	0x20000520

08001180 <vApplicationGetIdleTaskMemory>:

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a07      	ldr	r2, [pc, #28]	; (80011ac <vApplicationGetIdleTaskMemory+0x2c>)
 8001190:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <vApplicationGetIdleTaskMemory+0x30>)
 8001196:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000258 	.word	0x20000258
 80011b0:	200002bc 	.word	0x200002bc

080011b4 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08e      	sub	sp, #56	; 0x38
 80011b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	4b89      	ldr	r3, [pc, #548]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a88      	ldr	r2, [pc, #544]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b86      	ldr	r3, [pc, #536]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	4b82      	ldr	r3, [pc, #520]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a81      	ldr	r2, [pc, #516]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a7a      	ldr	r2, [pc, #488]	; (80013f4 <MX_GPIO_Init+0x240>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b78      	ldr	r3, [pc, #480]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b74      	ldr	r3, [pc, #464]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a73      	ldr	r2, [pc, #460]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b71      	ldr	r3, [pc, #452]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a6c      	ldr	r2, [pc, #432]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <MX_GPIO_Init+0x240>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <MX_GPIO_Init+0x240>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a5e      	ldr	r2, [pc, #376]	; (80013f4 <MX_GPIO_Init+0x240>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b55      	ldr	r3, [pc, #340]	; (80013f4 <MX_GPIO_Init+0x240>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2116      	movs	r1, #22
 80012ae:	4852      	ldr	r0, [pc, #328]	; (80013f8 <MX_GPIO_Init+0x244>)
 80012b0:	f003 fc84 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	4850      	ldr	r0, [pc, #320]	; (80013fc <MX_GPIO_Init+0x248>)
 80012ba:	f003 fc7f 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80012c4:	484e      	ldr	r0, [pc, #312]	; (8001400 <MX_GPIO_Init+0x24c>)
 80012c6:	f003 fc79 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012d0:	484c      	ldr	r0, [pc, #304]	; (8001404 <MX_GPIO_Init+0x250>)
 80012d2:	f003 fc73 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80012d6:	2316      	movs	r3, #22
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4842      	ldr	r0, [pc, #264]	; (80013f8 <MX_GPIO_Init+0x244>)
 80012ee:	f003 f9ad 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80012f2:	f248 0307 	movw	r3, #32775	; 0x8007
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f8:	4b43      	ldr	r3, [pc, #268]	; (8001408 <MX_GPIO_Init+0x254>)
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	483d      	ldr	r0, [pc, #244]	; (80013fc <MX_GPIO_Init+0x248>)
 8001308:	f003 f9a0 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4836      	ldr	r0, [pc, #216]	; (80013fc <MX_GPIO_Init+0x248>)
 8001324:	f003 f992 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <MX_GPIO_Init+0x254>)
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	482f      	ldr	r0, [pc, #188]	; (80013f8 <MX_GPIO_Init+0x244>)
 800133c:	f003 f986 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001340:	2304      	movs	r3, #4
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	482e      	ldr	r0, [pc, #184]	; (800140c <MX_GPIO_Init+0x258>)
 8001354:	f003 f97a 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001358:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800136a:	230c      	movs	r3, #12
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4825      	ldr	r0, [pc, #148]	; (800140c <MX_GPIO_Init+0x258>)
 8001376:	f003 f969 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_GPIO_Init+0x258>)
 8001390:	f003 f95c 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_GPIO_Init+0x24c>)
 80013aa:	f003 f94f 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80013ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_GPIO_Init+0x24c>)
 80013c8:	f003 f940 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80013cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_GPIO_Init+0x250>)
 80013e6:	f003 f931 	bl	800464c <HAL_GPIO_Init>

}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021800 	.word	0x40021800
 8001408:	10120000 	.word	0x10120000
 800140c:	40020400 	.word	0x40020400

08001410 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_I2C3_Init+0x74>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <MX_I2C3_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_I2C3_Init+0x74>)
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <MX_I2C3_Init+0x7c>)
 800141e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_I2C3_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_I2C3_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_I2C3_Init+0x74>)
 800142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001432:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_I2C3_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C3_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_I2C3_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C3_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_I2C3_Init+0x74>)
 800144e:	f003 fbcf 	bl	8004bf0 <HAL_I2C_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001458:	f000 fbc6 	bl	8001be8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <MX_I2C3_Init+0x74>)
 8001460:	f004 f94f 	bl	8005702 <HAL_I2CEx_ConfigAnalogFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800146a:	f000 fbbd 	bl	8001be8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C3_Init+0x74>)
 8001472:	f004 f982 	bl	800577a <HAL_I2CEx_ConfigDigitalFilter>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800147c:	f000 fbb4 	bl	8001be8 <Error_Handler>
  }

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20021ce0 	.word	0x20021ce0
 8001488:	40005c00 	.word	0x40005c00
 800148c:	000186a0 	.word	0x000186a0

08001490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <HAL_I2C_MspInit+0xc4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d14b      	bne.n	800154a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014fc:	2304      	movs	r3, #4
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4815      	ldr	r0, [pc, #84]	; (800155c <HAL_I2C_MspInit+0xcc>)
 8001508:	f003 f8a0 	bl	800464c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800150c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001512:	2312      	movs	r3, #18
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800151e:	2304      	movs	r3, #4
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <HAL_I2C_MspInit+0xd0>)
 800152a:	f003 f88f 	bl	800464c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005c00 	.word	0x40005c00
 8001558:	40023800 	.word	0x40023800
 800155c:	40020800 	.word	0x40020800
 8001560:	40020000 	.word	0x40020000

08001564 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2234      	movs	r2, #52	; 0x34
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00a fbbf 	bl	800bcf4 <memset>

  hltdc.Instance = LTDC;
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <MX_LTDC_Init+0xf8>)
 8001578:	4a39      	ldr	r2, [pc, #228]	; (8001660 <MX_LTDC_Init+0xfc>)
 800157a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800157c:	4b37      	ldr	r3, [pc, #220]	; (800165c <MX_LTDC_Init+0xf8>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <MX_LTDC_Init+0xf8>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001588:	4b34      	ldr	r3, [pc, #208]	; (800165c <MX_LTDC_Init+0xf8>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <MX_LTDC_Init+0xf8>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <MX_LTDC_Init+0xf8>)
 8001596:	2209      	movs	r2, #9
 8001598:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <MX_LTDC_Init+0xf8>)
 800159c:	2201      	movs	r2, #1
 800159e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <MX_LTDC_Init+0xf8>)
 80015a2:	221d      	movs	r2, #29
 80015a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <MX_LTDC_Init+0xf8>)
 80015a8:	2203      	movs	r2, #3
 80015aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <MX_LTDC_Init+0xf8>)
 80015ae:	f240 120d 	movw	r2, #269	; 0x10d
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <MX_LTDC_Init+0xf8>)
 80015b6:	f240 1243 	movw	r2, #323	; 0x143
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <MX_LTDC_Init+0xf8>)
 80015be:	f240 1217 	movw	r2, #279	; 0x117
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_LTDC_Init+0xf8>)
 80015c6:	f240 1247 	movw	r2, #327	; 0x147
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_LTDC_Init+0xf8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_LTDC_Init+0xf8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_LTDC_Init+0xf8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015e4:	481d      	ldr	r0, [pc, #116]	; (800165c <MX_LTDC_Init+0xf8>)
 80015e6:	f004 f907 	bl	80057f8 <HAL_LTDC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80015f0:	f000 fafa 	bl	8001be8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80015f8:	23f0      	movs	r3, #240	; 0xf0
 80015fa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001600:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001604:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001606:	2302      	movs	r3, #2
 8001608:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001612:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001616:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001618:	2307      	movs	r3, #7
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800161c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001622:	23f0      	movs	r3, #240	; 0xf0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001626:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_LTDC_Init+0xf8>)
 8001646:	f004 fa69 	bl	8005b1c <HAL_LTDC_ConfigLayer>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001650:	f000 faca 	bl	8001be8 <Error_Handler>
  }

}
 8001654:	bf00      	nop
 8001656:	3738      	adds	r7, #56	; 0x38
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20021d34 	.word	0x20021d34
 8001660:	40016800 	.word	0x40016800

08001664 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a7b      	ldr	r2, [pc, #492]	; (8001870 <HAL_LTDC_MspInit+0x20c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	f040 80f0 	bne.w	8001868 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	4b79      	ldr	r3, [pc, #484]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	4a78      	ldr	r2, [pc, #480]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001696:	6453      	str	r3, [r2, #68]	; 0x44
 8001698:	4b76      	ldr	r3, [pc, #472]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	4b72      	ldr	r3, [pc, #456]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4a71      	ldr	r2, [pc, #452]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ae:	f043 0320 	orr.w	r3, r3, #32
 80016b2:	6313      	str	r3, [r2, #48]	; 0x30
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	4b64      	ldr	r3, [pc, #400]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	4a63      	ldr	r2, [pc, #396]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	6313      	str	r3, [r2, #48]	; 0x30
 80016ec:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	4a5c      	ldr	r2, [pc, #368]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001706:	6313      	str	r3, [r2, #48]	; 0x30
 8001708:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b56      	ldr	r3, [pc, #344]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a55      	ldr	r2, [pc, #340]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800175e:	230e      	movs	r3, #14
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4843      	ldr	r0, [pc, #268]	; (8001878 <HAL_LTDC_MspInit+0x214>)
 800176a:	f002 ff6f 	bl	800464c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800176e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001780:	230e      	movs	r3, #14
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	483c      	ldr	r0, [pc, #240]	; (800187c <HAL_LTDC_MspInit+0x218>)
 800178c:	f002 ff5e 	bl	800464c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001790:	2303      	movs	r3, #3
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017a0:	2309      	movs	r3, #9
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4835      	ldr	r0, [pc, #212]	; (8001880 <HAL_LTDC_MspInit+0x21c>)
 80017ac:	f002 ff4e 	bl	800464c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80017b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017c2:	230e      	movs	r3, #14
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	482c      	ldr	r0, [pc, #176]	; (8001880 <HAL_LTDC_MspInit+0x21c>)
 80017ce:	f002 ff3d 	bl	800464c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80017d2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017e4:	230e      	movs	r3, #14
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4825      	ldr	r0, [pc, #148]	; (8001884 <HAL_LTDC_MspInit+0x220>)
 80017f0:	f002 ff2c 	bl	800464c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80017f4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001806:	230e      	movs	r3, #14
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	4619      	mov	r1, r3
 8001810:	481d      	ldr	r0, [pc, #116]	; (8001888 <HAL_LTDC_MspInit+0x224>)
 8001812:	f002 ff1b 	bl	800464c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001816:	2348      	movs	r3, #72	; 0x48
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001826:	230e      	movs	r3, #14
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	4816      	ldr	r0, [pc, #88]	; (800188c <HAL_LTDC_MspInit+0x228>)
 8001832:	f002 ff0b 	bl	800464c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001836:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001848:	2309      	movs	r3, #9
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <HAL_LTDC_MspInit+0x220>)
 8001854:	f002 fefa 	bl	800464c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2105      	movs	r1, #5
 800185c:	2058      	movs	r0, #88	; 0x58
 800185e:	f002 f94f 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001862:	2058      	movs	r0, #88	; 0x58
 8001864:	f002 f968 	bl	8003b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40016800 	.word	0x40016800
 8001874:	40023800 	.word	0x40023800
 8001878:	40021400 	.word	0x40021400
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40021800 	.word	0x40021800
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00

08001890 <RTOS_AppConfigureTimerForRuntimeStats>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t RTOS_RunTimeCounter;

void RTOS_AppConfigureTimerForRuntimeStats(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  RTOS_RunTimeCounter = 0;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <RTOS_AppConfigureTimerForRuntimeStats+0x14>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <RTOS_AppConfigureTimerForRuntimeStats+0x18>)
 800189c:	f006 f81f 	bl	80078de <HAL_TIM_Base_Start_IT>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20021df8 	.word	0x20021df8
 80018a8:	20021fb0 	.word	0x20021fb0

080018ac <RTOS_AppGetRuntimeCounterValueFromISR>:

uint32_t RTOS_AppGetRuntimeCounterValueFromISR(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return RTOS_RunTimeCounter;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <RTOS_AppGetRuntimeCounterValueFromISR+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20021df8 	.word	0x20021df8

080018c4 <__io_putchar>:

/*Redirecting printf to USART1*/
int __io_putchar(int ch)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80018cc:	1d39      	adds	r1, r7, #4
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	2201      	movs	r2, #1
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <__io_putchar+0x20>)
 80018d6:	f006 fc32 	bl	800813e <HAL_UART_Transmit>
	return ch;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20021ef0 	.word	0x20021ef0

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ee:	f001 ffe9 	bl	80038c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f2:	f000 f8dd 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f6:	f7ff fc5d 	bl	80011b4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80018fa:	f7ff fae1 	bl	8000ec0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80018fe:	f7ff fb39 	bl	8000f74 <MX_FMC_Init>
  MX_I2C3_Init();
 8001902:	f7ff fd85 	bl	8001410 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001906:	f7ff fe2d 	bl	8001564 <MX_LTDC_Init>
  MX_SPI5_Init();
 800190a:	f000 f975 	bl	8001bf8 <MX_SPI5_Init>
  MX_TIM1_Init();
 800190e:	f000 fc61 	bl	80021d4 <MX_TIM1_Init>
  MX_TIM7_Init();
 8001912:	f000 fcfd 	bl	8002310 <MX_TIM7_Init>
  MX_TIM5_Init();
 8001916:	f000 fcad 	bl	8002274 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800191a:	f000 fd8b 	bl	8002434 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*LEDs turned on*/
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001924:	4852      	ldr	r0, [pc, #328]	; (8001a70 <main+0x188>)
 8001926:	f003 f949 	bl	8004bbc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001930:	484f      	ldr	r0, [pc, #316]	; (8001a70 <main+0x188>)
 8001932:	f003 f943 	bl	8004bbc <HAL_GPIO_WritePin>

 /*LCD screen initialization and test*/
	BSP_LCD_Init();
 8001936:	f001 f97b 	bl	8002c30 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 800193a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800193e:	2000      	movs	r0, #0
 8001940:	f001 f9f8 	bl	8002d34 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8001944:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001948:	2001      	movs	r0, #1
 800194a:	f001 f9f3 	bl	8002d34 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 800194e:	2001      	movs	r0, #1
 8001950:	f001 fa54 	bl	8002dfc <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001954:	f001 fbee 	bl	8003134 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f001 fac0 	bl	8002ee0 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 8001960:	4844      	ldr	r0, [pc, #272]	; (8001a74 <main+0x18c>)
 8001962:	f001 fa8d 	bl	8002e80 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001966:	f04f 30ff 	mov.w	r0, #4294967295
 800196a:	f001 fa6f 	bl	8002e4c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_B_TELECOM);
 800196e:	4842      	ldr	r0, [pc, #264]	; (8001a78 <main+0x190>)
 8001970:	f001 fa54 	bl	8002e1c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"PROJET", CENTER_MODE);
 8001974:	f001 fa9e 	bl	8002eb4 <BSP_LCD_GetFont>
 8001978:	4603      	mov	r3, r0
 800197a:	88d9      	ldrh	r1, [r3, #6]
 800197c:	2301      	movs	r3, #1
 800197e:	4a3f      	ldr	r2, [pc, #252]	; (8001a7c <main+0x194>)
 8001980:	2000      	movs	r0, #0
 8001982:	f001 fb19 	bl	8002fb8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"SYSTEMES", CENTER_MODE);
 8001986:	f001 fa95 	bl	8002eb4 <BSP_LCD_GetFont>
 800198a:	4603      	mov	r3, r0
 800198c:	88db      	ldrh	r3, [r3, #6]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b299      	uxth	r1, r3
 8001992:	2301      	movs	r3, #1
 8001994:	4a3a      	ldr	r2, [pc, #232]	; (8001a80 <main+0x198>)
 8001996:	2000      	movs	r0, #0
 8001998:	f001 fb0e 	bl	8002fb8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"TEMPS REEL", CENTER_MODE);
 800199c:	f001 fa8a 	bl	8002eb4 <BSP_LCD_GetFont>
 80019a0:	4603      	mov	r3, r0
 80019a2:	88db      	ldrh	r3, [r3, #6]
 80019a4:	461a      	mov	r2, r3
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	b299      	uxth	r1, r3
 80019ac:	2301      	movs	r3, #1
 80019ae:	4a35      	ldr	r2, [pc, #212]	; (8001a84 <main+0x19c>)
 80019b0:	2000      	movs	r0, #0
 80019b2:	f001 fb01 	bl	8002fb8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_G_TELECOM);
 80019b6:	4834      	ldr	r0, [pc, #208]	; (8001a88 <main+0x1a0>)
 80019b8:	f001 fa30 	bl	8002e1c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"2021/2022", CENTER_MODE);
 80019bc:	f001 fa7a 	bl	8002eb4 <BSP_LCD_GetFont>
 80019c0:	4603      	mov	r3, r0
 80019c2:	88db      	ldrh	r3, [r3, #6]
 80019c4:	461a      	mov	r2, r3
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	b299      	uxth	r1, r3
 80019cc:	2301      	movs	r3, #1
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <main+0x1a4>)
 80019d0:	2000      	movs	r0, #0
 80019d2:	f001 faf1 	bl	8002fb8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_R_TELECOM);
 80019d6:	482e      	ldr	r0, [pc, #184]	; (8001a90 <main+0x1a8>)
 80019d8:	f001 fa20 	bl	8002e1c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"TELECOM STE", CENTER_MODE);
 80019dc:	f001 fa6a 	bl	8002eb4 <BSP_LCD_GetFont>
 80019e0:	4603      	mov	r3, r0
 80019e2:	88db      	ldrh	r3, [r3, #6]
 80019e4:	461a      	mov	r2, r3
 80019e6:	00d2      	lsls	r2, r2, #3
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	b299      	uxth	r1, r3
 80019ec:	2301      	movs	r3, #1
 80019ee:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <main+0x1ac>)
 80019f0:	2000      	movs	r0, #0
 80019f2:	f001 fae1 	bl	8002fb8 <BSP_LCD_DisplayStringAt>


	HAL_Delay(2000);
 80019f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019fa:	f001 ffa5 	bl	8003948 <HAL_Delay>
	BSP_LCD_SetFont(&Font12);
 80019fe:	4826      	ldr	r0, [pc, #152]	; (8001a98 <main+0x1b0>)
 8001a00:	f001 fa3e 	bl	8002e80 <BSP_LCD_SetFont>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f001 fa6a 	bl	8002ee0 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a0c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a10:	f001 fa04 	bl	8002e1c <BSP_LCD_SetTextColor>

/*LEDs turned off*/
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1a:	4815      	ldr	r0, [pc, #84]	; (8001a70 <main+0x188>)
 8001a1c:	f003 f8ce 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	4812      	ldr	r0, [pc, #72]	; (8001a70 <main+0x188>)
 8001a28:	f003 f8c8 	bl	8004bbc <HAL_GPIO_WritePin>

/*I2C3 bus scan*/
	I2C_Scan(&hi2c3,I2C_add);
 8001a2c:	491b      	ldr	r1, [pc, #108]	; (8001a9c <main+0x1b4>)
 8001a2e:	481c      	ldr	r0, [pc, #112]	; (8001aa0 <main+0x1b8>)
 8001a30:	f00a f874 	bl	800bb1c <I2C_Scan>

/*Sensors initialization*/
	Init_MPU9250(&hi2c3);
 8001a34:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <main+0x1b8>)
 8001a36:	f00a f8c9 	bl	800bbcc <Init_MPU9250>
	Init_BMP280(&hi2c3);
 8001a3a:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <main+0x1b8>)
 8001a3c:	f00a f896 	bl	800bb6c <Init_BMP280>

/*I2C3 bus scan*/
	I2C_Scan(&hi2c3,I2C_add);
 8001a40:	4916      	ldr	r1, [pc, #88]	; (8001a9c <main+0x1b4>)
 8001a42:	4817      	ldr	r0, [pc, #92]	; (8001aa0 <main+0x1b8>)
 8001a44:	f00a f86a 	bl	800bb1c <I2C_Scan>
/* Start scheduler FreeRTOS*/

	TaskHandle_t xHandleTaskInit;

	/* Create the task init. */
	if( xTaskCreate(
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2300      	movs	r3, #0
 8001a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a56:	4913      	ldr	r1, [pc, #76]	; (8001aa4 <main+0x1bc>)
 8001a58:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <main+0x1c0>)
 8001a5a:	f008 f96a 	bl	8009d32 <xTaskCreate>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <main+0x182>
	1000,
	NULL,
	3,
	&xHandleTaskInit
	) != pdPASS ){
		printf("Init task created");
 8001a64:	4811      	ldr	r0, [pc, #68]	; (8001aac <main+0x1c4>)
 8001a66:	f00a fdb7 	bl	800c5d8 <iprintf>
	}
	vTaskStartScheduler();
 8001a6a:	f008 fb3b 	bl	800a0e4 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <main+0x186>
 8001a70:	40021800 	.word	0x40021800
 8001a74:	20000048 	.word	0x20000048
 8001a78:	ff065784 	.word	0xff065784
 8001a7c:	0800e6d0 	.word	0x0800e6d0
 8001a80:	0800e6d8 	.word	0x0800e6d8
 8001a84:	0800e6e4 	.word	0x0800e6e4
 8001a88:	ff81b835 	.word	0xff81b835
 8001a8c:	0800e6f0 	.word	0x0800e6f0
 8001a90:	ff813c2f 	.word	0xff813c2f
 8001a94:	0800e6fc 	.word	0x0800e6fc
 8001a98:	20000050 	.word	0x20000050
 8001a9c:	20021e08 	.word	0x20021e08
 8001aa0:	20021ce0 	.word	0x20021ce0
 8001aa4:	0800e708 	.word	0x0800e708
 8001aa8:	08002101 	.word	0x08002101
 8001aac:	0800e714 	.word	0x0800e714

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0a0      	sub	sp, #128	; 0x80
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aba:	2230      	movs	r2, #48	; 0x30
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00a f918 	bl	800bcf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2230      	movs	r2, #48	; 0x30
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00a f909 	bl	800bcf4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <SystemClock_Config+0x10c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a34      	ldr	r2, [pc, #208]	; (8001bbc <SystemClock_Config+0x10c>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <SystemClock_Config+0x10c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a2e      	ldr	r2, [pc, #184]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b22:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b24:	2302      	movs	r3, #2
 8001b26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b32:	23b4      	movs	r3, #180	; 0xb4
 8001b34:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 fa3a 	bl	8005fbc <HAL_RCC_OscConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b4e:	f000 f84b 	bl	8001be8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b52:	f004 f9e3 	bl	8005f1c <HAL_PWREx_EnableOverDrive>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001b5c:	f000 f844 	bl	8001be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	230f      	movs	r3, #15
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b64:	2302      	movs	r3, #2
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f004 fc8c 	bl	800649c <HAL_RCC_ClockConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001b8a:	f000 f82d 	bl	8001be8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001b92:	233c      	movs	r3, #60	; 0x3c
 8001b94:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001b96:	2305      	movs	r3, #5
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f004 fea7 	bl	80068f8 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001bb0:	f000 f81a 	bl	8001be8 <Error_Handler>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3780      	adds	r7, #128	; 0x80
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bd6:	f001 fe97 	bl	8003908 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40001000 	.word	0x40001000

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <MX_SPI5_Init+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c08:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c28:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c2c:	2218      	movs	r2, #24
 8001c2e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c44:	220a      	movs	r2, #10
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c4a:	f005 f892 	bl	8006d72 <HAL_SPI_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c54:	f7ff ffc8 	bl	8001be8 <Error_Handler>
  }

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20021e58 	.word	0x20021e58
 8001c60:	40015000 	.word	0x40015000

08001c64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <HAL_SPI_MspInit+0x84>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12c      	bne.n	8001ce0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001cbe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_SPI_MspInit+0x8c>)
 8001cdc:	f002 fcb6 	bl	800464c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40015000 	.word	0x40015000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40021400 	.word	0x40021400

08001cf4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_SPI_MspDeInit+0x30>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10a      	bne.n	8001d1c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_SPI_MspDeInit+0x34>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_SPI_MspDeInit+0x34>)
 8001d0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001d12:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_SPI_MspDeInit+0x38>)
 8001d18:	f002 fe44 	bl	80049a4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40015000 	.word	0x40015000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40021400 	.word	0x40021400

08001d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_MspInit+0x54>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_MspInit+0x54>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_MspInit+0x54>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_MspInit+0x54>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_MspInit+0x54>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_MspInit+0x54>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	210f      	movs	r1, #15
 8001d72:	f06f 0001 	mvn.w	r0, #1
 8001d76:	f001 fec3 	bl	8003b00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	2036      	movs	r0, #54	; 0x36
 8001d9e:	f001 feaf 	bl	8003b00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001da2:	2036      	movs	r0, #54	; 0x36
 8001da4:	f001 fec8 	bl	8003b38 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_InitTick+0xa4>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <HAL_InitTick+0xa4>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6413      	str	r3, [r2, #64]	; 0x40
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_InitTick+0xa4>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc4:	f107 0210 	add.w	r2, r7, #16
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 fd60 	bl	8006894 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001dd4:	f004 fd36 	bl	8006844 <HAL_RCC_GetPCLK1Freq>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_InitTick+0xa8>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9b      	lsrs	r3, r3, #18
 8001de8:	3b01      	subs	r3, #1
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_InitTick+0xac>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_InitTick+0xb0>)
 8001df0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_InitTick+0xac>)
 8001df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_InitTick+0xac>)
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_InitTick+0xac>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_InitTick+0xac>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_InitTick+0xac>)
 8001e0e:	f005 fd3b 	bl	8007888 <HAL_TIM_Base_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e18:	4806      	ldr	r0, [pc, #24]	; (8001e34 <HAL_InitTick+0xac>)
 8001e1a:	f005 fd60 	bl	80078de <HAL_TIM_Base_Start_IT>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3730      	adds	r7, #48	; 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	431bde83 	.word	0x431bde83
 8001e34:	20021eb0 	.word	0x20021eb0
 8001e38:	40001000 	.word	0x40001000

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <MemManage_Handler+0x4>

08001e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <USART1_IRQHandler+0x10>)
 8001e76:	f006 f9fb 	bl	8008270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20021ef0 	.word	0x20021ef0

08001e84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM5_IRQHandler+0x10>)
 8001e8a:	f005 fd4c 	bl	8007926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20021f30 	.word	0x20021f30

08001e98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <TIM6_DAC_IRQHandler+0x10>)
 8001e9e:	f005 fd42 	bl	8007926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20021eb0 	.word	0x20021eb0

08001eac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	RTOS_RunTimeCounter++;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <TIM7_IRQHandler+0x18>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <TIM7_IRQHandler+0x18>)
 8001eb8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <TIM7_IRQHandler+0x1c>)
 8001ebc:	f005 fd33 	bl	8007926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20021df8 	.word	0x20021df8
 8001ec8:	20021fb0 	.word	0x20021fb0

08001ecc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <LTDC_IRQHandler+0x10>)
 8001ed2:	f003 fd61 	bl	8005998 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20021d34 	.word	0x20021d34

08001ee0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA2D_IRQHandler+0x10>)
 8001ee6:	f002 f972 	bl	80041ce <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20021c6c 	.word	0x20021c6c

08001ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
	return 1;
 8001ef8:	2301      	movs	r3, #1
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_kill>:

int _kill(int pid, int sig)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f0e:	f009 feb9 	bl	800bc84 <__errno>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2216      	movs	r2, #22
 8001f16:	601a      	str	r2, [r3, #0]
	return -1;
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_exit>:

void _exit (int status)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ffe7 	bl	8001f04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f36:	e7fe      	b.n	8001f36 <_exit+0x12>

08001f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e00a      	b.n	8001f60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f4a:	f3af 8000 	nop.w
 8001f4e:	4601      	mov	r1, r0
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	60ba      	str	r2, [r7, #8]
 8001f56:	b2ca      	uxtb	r2, r1
 8001f58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf0      	blt.n	8001f4a <_read+0x12>
	}

return len;
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e009      	b.n	8001f98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc99 	bl	80018c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbf1      	blt.n	8001f84 <_write+0x12>
	}
	return len;
 8001fa0:	687b      	ldr	r3, [r7, #4]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_close>:

int _close(int file)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
	return -1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd2:	605a      	str	r2, [r3, #4]
	return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_isatty>:

int _isatty(int file)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	return 1;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
	return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f009 fe1e 	bl	800bc84 <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20030000 	.word	0x20030000
 8002074:	00000400 	.word	0x00000400
 8002078:	20002460 	.word	0x20002460
 800207c:	20022110 	.word	0x20022110

08002080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <SystemInit+0x28>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <SystemInit+0x28>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SystemInit+0x28>)
 8002096:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800209a:	609a      	str	r2, [r3, #8]
#endif
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <vCallbackT1>:
#include "taskdef.h"


UART_HandleTypeDef huart1;

void  vCallbackT1(TimerHandle_t xTimer){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	printf("Timer1");
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <vCallbackT1+0x18>)
 80020b6:	f00a fa8f 	bl	800c5d8 <iprintf>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	0800e728 	.word	0x0800e728

080020c8 <vCallbackT2>:

void  vCallbackT2(TimerHandle_t xTimer){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	printf("Timer2");
 80020d0:	4803      	ldr	r0, [pc, #12]	; (80020e0 <vCallbackT2+0x18>)
 80020d2:	f00a fa81 	bl	800c5d8 <iprintf>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	0800e730 	.word	0x0800e730

080020e4 <vCallbackT3>:


void vCallbackT3(TimerHandle_t xTimer){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	printf("Timer3");
 80020ec:	4803      	ldr	r0, [pc, #12]	; (80020fc <vCallbackT3+0x18>)
 80020ee:	f00a fa73 	bl	800c5d8 <iprintf>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0800e738 	.word	0x0800e738

08002100 <vTaskInit>:

void vTaskInit(void *pvParameters ){
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af02      	add	r7, sp, #8
 8002106:	6078      	str	r0, [r7, #4]
	TimerHandle_t Timer1, Timer2, Timer3;
	BaseType_t xTimer1Started, xTimer2Started, xTimer3Started;

	// Creation des timers
	Timer1 = xTimerCreate("Timer1", 10, pdTRUE, ( void * ) 0, vCallbackT1 );
 8002108:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <vTaskInit+0xb8>)
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2300      	movs	r3, #0
 800210e:	2201      	movs	r2, #1
 8002110:	210a      	movs	r1, #10
 8002112:	482a      	ldr	r0, [pc, #168]	; (80021bc <vTaskInit+0xbc>)
 8002114:	f008 fd94 	bl	800ac40 <xTimerCreate>
 8002118:	6138      	str	r0, [r7, #16]
	Timer2 = xTimerCreate("Timer2", 20, pdTRUE, ( void * ) 0, vCallbackT2 );
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <vTaskInit+0xc0>)
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	2201      	movs	r2, #1
 8002122:	2114      	movs	r1, #20
 8002124:	4827      	ldr	r0, [pc, #156]	; (80021c4 <vTaskInit+0xc4>)
 8002126:	f008 fd8b 	bl	800ac40 <xTimerCreate>
 800212a:	60f8      	str	r0, [r7, #12]
	Timer3 = xTimerCreate("Timer3", 200, pdTRUE, ( void * ) 0, vCallbackT3 );
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <vTaskInit+0xc8>)
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2300      	movs	r3, #0
 8002132:	2201      	movs	r2, #1
 8002134:	21c8      	movs	r1, #200	; 0xc8
 8002136:	4825      	ldr	r0, [pc, #148]	; (80021cc <vTaskInit+0xcc>)
 8002138:	f008 fd82 	bl	800ac40 <xTimerCreate>
 800213c:	60b8      	str	r0, [r7, #8]

	// Demarrage des timers
	if( ( Timer1 != NULL ) && ( Timer2 != NULL ) && ( Timer3 != NULL ) ){
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d026      	beq.n	8002192 <vTaskInit+0x92>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d023      	beq.n	8002192 <vTaskInit+0x92>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d020      	beq.n	8002192 <vTaskInit+0x92>
		xTimer1Started = xTimerStart( Timer1, 0 );
 8002150:	f008 f8da 	bl	800a308 <xTaskGetTickCount>
 8002154:	4602      	mov	r2, r0
 8002156:	2300      	movs	r3, #0
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2300      	movs	r3, #0
 800215c:	2101      	movs	r1, #1
 800215e:	6938      	ldr	r0, [r7, #16]
 8002160:	f008 fdca 	bl	800acf8 <xTimerGenericCommand>
 8002164:	61f8      	str	r0, [r7, #28]
		xTimer2Started = xTimerStart( Timer3, 0 );
 8002166:	f008 f8cf 	bl	800a308 <xTaskGetTickCount>
 800216a:	4602      	mov	r2, r0
 800216c:	2300      	movs	r3, #0
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2300      	movs	r3, #0
 8002172:	2101      	movs	r1, #1
 8002174:	68b8      	ldr	r0, [r7, #8]
 8002176:	f008 fdbf 	bl	800acf8 <xTimerGenericCommand>
 800217a:	61b8      	str	r0, [r7, #24]
		xTimer3Started = xTimerStart( Timer3, 0 );
 800217c:	f008 f8c4 	bl	800a308 <xTaskGetTickCount>
 8002180:	4602      	mov	r2, r0
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	2101      	movs	r1, #1
 800218a:	68b8      	ldr	r0, [r7, #8]
 800218c:	f008 fdb4 	bl	800acf8 <xTimerGenericCommand>
 8002190:	6178      	str	r0, [r7, #20]
	}


	if( ( xTimer1Started == pdPASS ) && ( xTimer2Started == pdPASS ) && ( xTimer3Started == pdPASS ) )
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d108      	bne.n	80021aa <vTaskInit+0xaa>
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <vTaskInit+0xaa>
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d102      	bne.n	80021aa <vTaskInit+0xaa>
	 {
		printf("Timers running");
 80021a4:	480a      	ldr	r0, [pc, #40]	; (80021d0 <vTaskInit+0xd0>)
 80021a6:	f00a fa17 	bl	800c5d8 <iprintf>
	 }

	// Destruction de la tache
	vTaskDelete(NULL);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f007 ff0a 	bl	8009fc4 <vTaskDelete>
}
 80021b0:	bf00      	nop
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	080020ad 	.word	0x080020ad
 80021bc:	0800e728 	.word	0x0800e728
 80021c0:	080020c9 	.word	0x080020c9
 80021c4:	0800e730 	.word	0x0800e730
 80021c8:	080020e5 	.word	0x080020e5
 80021cc:	0800e738 	.word	0x0800e738
 80021d0:	0800e740 	.word	0x0800e740

080021d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	463b      	mov	r3, r7
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <MX_TIM1_Init+0x98>)
 80021f2:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <MX_TIM1_Init+0x9c>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <MX_TIM1_Init+0x98>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <MX_TIM1_Init+0x98>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <MX_TIM1_Init+0x98>)
 8002204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002208:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <MX_TIM1_Init+0x98>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <MX_TIM1_Init+0x98>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <MX_TIM1_Init+0x98>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800221c:	4813      	ldr	r0, [pc, #76]	; (800226c <MX_TIM1_Init+0x98>)
 800221e:	f005 fb33 	bl	8007888 <HAL_TIM_Base_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002228:	f7ff fcde 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002230:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002232:	f107 0308 	add.w	r3, r7, #8
 8002236:	4619      	mov	r1, r3
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <MX_TIM1_Init+0x98>)
 800223a:	f005 fc7c 	bl	8007b36 <HAL_TIM_ConfigClockSource>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002244:	f7ff fcd0 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002250:	463b      	mov	r3, r7
 8002252:	4619      	mov	r1, r3
 8002254:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_TIM1_Init+0x98>)
 8002256:	f005 fe95 	bl	8007f84 <HAL_TIMEx_MasterConfigSynchronization>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002260:	f7ff fcc2 	bl	8001be8 <Error_Handler>
  }

}
 8002264:	bf00      	nop
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20021f70 	.word	0x20021f70
 8002270:	40010000 	.word	0x40010000

08002274 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <MX_TIM5_Init+0x94>)
 8002292:	4a1e      	ldr	r2, [pc, #120]	; (800230c <MX_TIM5_Init+0x98>)
 8002294:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <MX_TIM5_Init+0x94>)
 8002298:	2200      	movs	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <MX_TIM5_Init+0x94>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <MX_TIM5_Init+0x94>)
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_TIM5_Init+0x94>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MX_TIM5_Init+0x94>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022b6:	4814      	ldr	r0, [pc, #80]	; (8002308 <MX_TIM5_Init+0x94>)
 80022b8:	f005 fae6 	bl	8007888 <HAL_TIM_Base_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80022c2:	f7ff fc91 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	480d      	ldr	r0, [pc, #52]	; (8002308 <MX_TIM5_Init+0x94>)
 80022d4:	f005 fc2f 	bl	8007b36 <HAL_TIM_ConfigClockSource>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80022de:	f7ff fc83 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <MX_TIM5_Init+0x94>)
 80022f0:	f005 fe48 	bl	8007f84 <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80022fa:	f7ff fc75 	bl	8001be8 <Error_Handler>
  }

}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20021f30 	.word	0x20021f30
 800230c:	40000c00 	.word	0x40000c00

08002310 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002316:	463b      	mov	r3, r7
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <MX_TIM7_Init+0x64>)
 8002320:	4a15      	ldr	r2, [pc, #84]	; (8002378 <MX_TIM7_Init+0x68>)
 8002322:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <MX_TIM7_Init+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <MX_TIM7_Init+0x64>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <MX_TIM7_Init+0x64>)
 8002332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002336:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_TIM7_Init+0x64>)
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <MX_TIM7_Init+0x64>)
 8002340:	f005 faa2 	bl	8007888 <HAL_TIM_Base_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800234a:	f7ff fc4d 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002356:	463b      	mov	r3, r7
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <MX_TIM7_Init+0x64>)
 800235c:	f005 fe12 	bl	8007f84 <HAL_TIMEx_MasterConfigSynchronization>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002366:	f7ff fc3f 	bl	8001be8 <Error_Handler>
  }

}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20021fb0 	.word	0x20021fb0
 8002378:	40001400 	.word	0x40001400

0800237c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a26      	ldr	r2, [pc, #152]	; (8002424 <HAL_TIM_Base_MspInit+0xa8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d10e      	bne.n	80023ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <HAL_TIM_Base_MspInit+0xac>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a24      	ldr	r2, [pc, #144]	; (8002428 <HAL_TIM_Base_MspInit+0xac>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80023aa:	e036      	b.n	800241a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1e      	ldr	r2, [pc, #120]	; (800242c <HAL_TIM_Base_MspInit+0xb0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d116      	bne.n	80023e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a1a      	ldr	r2, [pc, #104]	; (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023c0:	f043 0308 	orr.w	r3, r3, #8
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2105      	movs	r1, #5
 80023d6:	2032      	movs	r0, #50	; 0x32
 80023d8:	f001 fb92 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023dc:	2032      	movs	r0, #50	; 0x32
 80023de:	f001 fbab 	bl	8003b38 <HAL_NVIC_EnableIRQ>
}
 80023e2:	e01a      	b.n	800241a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_TIM_Base_MspInit+0xb4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d115      	bne.n	800241a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <HAL_TIM_Base_MspInit+0xac>)
 80023f8:	f043 0320 	orr.w	r3, r3, #32
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_TIM_Base_MspInit+0xac>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2105      	movs	r1, #5
 800240e:	2037      	movs	r0, #55	; 0x37
 8002410:	f001 fb76 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002414:	2037      	movs	r0, #55	; 0x37
 8002416:	f001 fb8f 	bl	8003b38 <HAL_NVIC_EnableIRQ>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40010000 	.word	0x40010000
 8002428:	40023800 	.word	0x40023800
 800242c:	40000c00 	.word	0x40000c00
 8002430:	40001400 	.word	0x40001400

08002434 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_USART1_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800246c:	f005 fe1a 	bl	80080a4 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f7ff fbb7 	bl	8001be8 <Error_Handler>
  }

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20021ef0 	.word	0x20021ef0
 8002484:	40011000 	.word	0x40011000

08002488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_UART_MspInit+0x94>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d134      	bne.n	8002514 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_UART_MspInit+0x98>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_UART_MspInit+0x98>)
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_UART_MspInit+0x98>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_UART_MspInit+0x98>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a14      	ldr	r2, [pc, #80]	; (8002520 <HAL_UART_MspInit+0x98>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_UART_MspInit+0x98>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f4:	2307      	movs	r3, #7
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4809      	ldr	r0, [pc, #36]	; (8002524 <HAL_UART_MspInit+0x9c>)
 8002500:	f002 f8a4 	bl	800464c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2105      	movs	r1, #5
 8002508:	2025      	movs	r0, #37	; 0x25
 800250a:	f001 faf9 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800250e:	2025      	movs	r0, #37	; 0x25
 8002510:	f001 fb12 	bl	8003b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002514:	bf00      	nop
 8002516:	3728      	adds	r7, #40	; 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40011000 	.word	0x40011000
 8002520:	40023800 	.word	0x40023800
 8002524:	40020000 	.word	0x40020000

08002528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002560 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800252c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800252e:	e003      	b.n	8002538 <LoopCopyDataInit>

08002530 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002532:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002534:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002536:	3104      	adds	r1, #4

08002538 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002538:	480b      	ldr	r0, [pc, #44]	; (8002568 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800253c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800253e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002540:	d3f6      	bcc.n	8002530 <CopyDataInit>
  ldr  r2, =_sbss
 8002542:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002544:	e002      	b.n	800254c <LoopFillZerobss>

08002546 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002546:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002548:	f842 3b04 	str.w	r3, [r2], #4

0800254c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800254e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002550:	d3f9      	bcc.n	8002546 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002552:	f7ff fd95 	bl	8002080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002556:	f009 fb9b 	bl	800bc90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800255a:	f7ff f9c5 	bl	80018e8 <main>
  bx  lr    
 800255e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002560:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002564:	080116bc 	.word	0x080116bc
  ldr  r0, =_sdata
 8002568:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800256c:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8002570:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8002574:	20022110 	.word	0x20022110

08002578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002578:	e7fe      	b.n	8002578 <ADC_IRQHandler>

0800257a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800257e:	f000 fa5d 	bl	8002a3c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002582:	20ca      	movs	r0, #202	; 0xca
 8002584:	f000 f95d 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002588:	20c3      	movs	r0, #195	; 0xc3
 800258a:	f000 f967 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800258e:	2008      	movs	r0, #8
 8002590:	f000 f964 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002594:	2050      	movs	r0, #80	; 0x50
 8002596:	f000 f961 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800259a:	20cf      	movs	r0, #207	; 0xcf
 800259c:	f000 f951 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f000 f95b 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80025a6:	20c1      	movs	r0, #193	; 0xc1
 80025a8:	f000 f958 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80025ac:	2030      	movs	r0, #48	; 0x30
 80025ae:	f000 f955 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80025b2:	20ed      	movs	r0, #237	; 0xed
 80025b4:	f000 f945 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80025b8:	2064      	movs	r0, #100	; 0x64
 80025ba:	f000 f94f 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80025be:	2003      	movs	r0, #3
 80025c0:	f000 f94c 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80025c4:	2012      	movs	r0, #18
 80025c6:	f000 f949 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80025ca:	2081      	movs	r0, #129	; 0x81
 80025cc:	f000 f946 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80025d0:	20e8      	movs	r0, #232	; 0xe8
 80025d2:	f000 f936 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80025d6:	2085      	movs	r0, #133	; 0x85
 80025d8:	f000 f940 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025dc:	2000      	movs	r0, #0
 80025de:	f000 f93d 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80025e2:	2078      	movs	r0, #120	; 0x78
 80025e4:	f000 f93a 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80025e8:	20cb      	movs	r0, #203	; 0xcb
 80025ea:	f000 f92a 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80025ee:	2039      	movs	r0, #57	; 0x39
 80025f0:	f000 f934 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80025f4:	202c      	movs	r0, #44	; 0x2c
 80025f6:	f000 f931 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f000 f92e 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002600:	2034      	movs	r0, #52	; 0x34
 8002602:	f000 f92b 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002606:	2002      	movs	r0, #2
 8002608:	f000 f928 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800260c:	20f7      	movs	r0, #247	; 0xf7
 800260e:	f000 f918 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002612:	2020      	movs	r0, #32
 8002614:	f000 f922 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002618:	20ea      	movs	r0, #234	; 0xea
 800261a:	f000 f912 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f000 f91c 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f000 f919 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800262a:	20b1      	movs	r0, #177	; 0xb1
 800262c:	f000 f909 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f000 f913 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002636:	201b      	movs	r0, #27
 8002638:	f000 f910 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800263c:	20b6      	movs	r0, #182	; 0xb6
 800263e:	f000 f900 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002642:	200a      	movs	r0, #10
 8002644:	f000 f90a 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002648:	20a2      	movs	r0, #162	; 0xa2
 800264a:	f000 f907 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800264e:	20c0      	movs	r0, #192	; 0xc0
 8002650:	f000 f8f7 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002654:	2010      	movs	r0, #16
 8002656:	f000 f901 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800265a:	20c1      	movs	r0, #193	; 0xc1
 800265c:	f000 f8f1 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002660:	2010      	movs	r0, #16
 8002662:	f000 f8fb 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002666:	20c5      	movs	r0, #197	; 0xc5
 8002668:	f000 f8eb 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800266c:	2045      	movs	r0, #69	; 0x45
 800266e:	f000 f8f5 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002672:	2015      	movs	r0, #21
 8002674:	f000 f8f2 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002678:	20c7      	movs	r0, #199	; 0xc7
 800267a:	f000 f8e2 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800267e:	2090      	movs	r0, #144	; 0x90
 8002680:	f000 f8ec 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002684:	2036      	movs	r0, #54	; 0x36
 8002686:	f000 f8dc 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800268a:	20c8      	movs	r0, #200	; 0xc8
 800268c:	f000 f8e6 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002690:	20f2      	movs	r0, #242	; 0xf2
 8002692:	f000 f8d6 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002696:	2000      	movs	r0, #0
 8002698:	f000 f8e0 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800269c:	20b0      	movs	r0, #176	; 0xb0
 800269e:	f000 f8d0 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80026a2:	20c2      	movs	r0, #194	; 0xc2
 80026a4:	f000 f8da 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80026a8:	20b6      	movs	r0, #182	; 0xb6
 80026aa:	f000 f8ca 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80026ae:	200a      	movs	r0, #10
 80026b0:	f000 f8d4 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80026b4:	20a7      	movs	r0, #167	; 0xa7
 80026b6:	f000 f8d1 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80026ba:	2027      	movs	r0, #39	; 0x27
 80026bc:	f000 f8ce 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80026c0:	2004      	movs	r0, #4
 80026c2:	f000 f8cb 	bl	800285c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80026c6:	202a      	movs	r0, #42	; 0x2a
 80026c8:	f000 f8bb 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f000 f8c5 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f000 f8c2 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f000 f8bf 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80026de:	20ef      	movs	r0, #239	; 0xef
 80026e0:	f000 f8bc 	bl	800285c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80026e4:	202b      	movs	r0, #43	; 0x2b
 80026e6:	f000 f8ac 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f000 f8b6 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f000 f8b3 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80026f6:	2001      	movs	r0, #1
 80026f8:	f000 f8b0 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80026fc:	203f      	movs	r0, #63	; 0x3f
 80026fe:	f000 f8ad 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002702:	20f6      	movs	r0, #246	; 0xf6
 8002704:	f000 f89d 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002708:	2001      	movs	r0, #1
 800270a:	f000 f8a7 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800270e:	2000      	movs	r0, #0
 8002710:	f000 f8a4 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002714:	2006      	movs	r0, #6
 8002716:	f000 f8a1 	bl	800285c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800271a:	202c      	movs	r0, #44	; 0x2c
 800271c:	f000 f891 	bl	8002842 <ili9341_WriteReg>
  LCD_Delay(200);
 8002720:	20c8      	movs	r0, #200	; 0xc8
 8002722:	f000 fa79 	bl	8002c18 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002726:	2026      	movs	r0, #38	; 0x26
 8002728:	f000 f88b 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800272c:	2001      	movs	r0, #1
 800272e:	f000 f895 	bl	800285c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002732:	20e0      	movs	r0, #224	; 0xe0
 8002734:	f000 f885 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002738:	200f      	movs	r0, #15
 800273a:	f000 f88f 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800273e:	2029      	movs	r0, #41	; 0x29
 8002740:	f000 f88c 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002744:	2024      	movs	r0, #36	; 0x24
 8002746:	f000 f889 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800274a:	200c      	movs	r0, #12
 800274c:	f000 f886 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002750:	200e      	movs	r0, #14
 8002752:	f000 f883 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002756:	2009      	movs	r0, #9
 8002758:	f000 f880 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800275c:	204e      	movs	r0, #78	; 0x4e
 800275e:	f000 f87d 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002762:	2078      	movs	r0, #120	; 0x78
 8002764:	f000 f87a 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002768:	203c      	movs	r0, #60	; 0x3c
 800276a:	f000 f877 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800276e:	2009      	movs	r0, #9
 8002770:	f000 f874 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002774:	2013      	movs	r0, #19
 8002776:	f000 f871 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800277a:	2005      	movs	r0, #5
 800277c:	f000 f86e 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002780:	2017      	movs	r0, #23
 8002782:	f000 f86b 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002786:	2011      	movs	r0, #17
 8002788:	f000 f868 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f000 f865 	bl	800285c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002792:	20e1      	movs	r0, #225	; 0xe1
 8002794:	f000 f855 	bl	8002842 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f000 f85f 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800279e:	2016      	movs	r0, #22
 80027a0:	f000 f85c 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80027a4:	201b      	movs	r0, #27
 80027a6:	f000 f859 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80027aa:	2004      	movs	r0, #4
 80027ac:	f000 f856 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80027b0:	2011      	movs	r0, #17
 80027b2:	f000 f853 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80027b6:	2007      	movs	r0, #7
 80027b8:	f000 f850 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80027bc:	2031      	movs	r0, #49	; 0x31
 80027be:	f000 f84d 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80027c2:	2033      	movs	r0, #51	; 0x33
 80027c4:	f000 f84a 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80027c8:	2042      	movs	r0, #66	; 0x42
 80027ca:	f000 f847 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80027ce:	2005      	movs	r0, #5
 80027d0:	f000 f844 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80027d4:	200c      	movs	r0, #12
 80027d6:	f000 f841 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80027da:	200a      	movs	r0, #10
 80027dc:	f000 f83e 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80027e0:	2028      	movs	r0, #40	; 0x28
 80027e2:	f000 f83b 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80027e6:	202f      	movs	r0, #47	; 0x2f
 80027e8:	f000 f838 	bl	800285c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80027ec:	200f      	movs	r0, #15
 80027ee:	f000 f835 	bl	800285c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80027f2:	2011      	movs	r0, #17
 80027f4:	f000 f825 	bl	8002842 <ili9341_WriteReg>
  LCD_Delay(200);
 80027f8:	20c8      	movs	r0, #200	; 0xc8
 80027fa:	f000 fa0d 	bl	8002c18 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80027fe:	2029      	movs	r0, #41	; 0x29
 8002800:	f000 f81f 	bl	8002842 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002804:	202c      	movs	r0, #44	; 0x2c
 8002806:	f000 f81c 	bl	8002842 <ili9341_WriteReg>
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}

0800280e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002812:	f000 f913 	bl	8002a3c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002816:	2103      	movs	r1, #3
 8002818:	20d3      	movs	r0, #211	; 0xd3
 800281a:	f000 f82c 	bl	8002876 <ili9341_ReadData>
 800281e:	4603      	mov	r3, r0
 8002820:	b29b      	uxth	r3, r3
}
 8002822:	4618      	mov	r0, r3
 8002824:	bd80      	pop	{r7, pc}

08002826 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800282a:	2029      	movs	r0, #41	; 0x29
 800282c:	f000 f809 	bl	8002842 <ili9341_WriteReg>
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002838:	2028      	movs	r0, #40	; 0x28
 800283a:	f000 f802 	bl	8002842 <ili9341_WriteReg>
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}

08002842 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f98e 	bl	8002b70 <LCD_IO_WriteReg>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 f95f 	bl	8002b2c <LCD_IO_WriteData>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	460a      	mov	r2, r1
 8002880:	80fb      	strh	r3, [r7, #6]
 8002882:	4613      	mov	r3, r2
 8002884:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002886:	797a      	ldrb	r2, [r7, #5]
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f000 f991 	bl	8002bb4 <LCD_IO_ReadData>
 8002892:	4603      	mov	r3, r0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80028a0:	23f0      	movs	r3, #240	; 0xf0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80028b0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80028c4:	4819      	ldr	r0, [pc, #100]	; (800292c <SPIx_Init+0x6c>)
 80028c6:	f004 febf 	bl	8007648 <HAL_SPI_GetState>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d12b      	bne.n	8002928 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80028d0:	4b16      	ldr	r3, [pc, #88]	; (800292c <SPIx_Init+0x6c>)
 80028d2:	4a17      	ldr	r2, [pc, #92]	; (8002930 <SPIx_Init+0x70>)
 80028d4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <SPIx_Init+0x6c>)
 80028d8:	2218      	movs	r2, #24
 80028da:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <SPIx_Init+0x6c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <SPIx_Init+0x6c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <SPIx_Init+0x6c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <SPIx_Init+0x6c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <SPIx_Init+0x6c>)
 80028f6:	2207      	movs	r2, #7
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <SPIx_Init+0x6c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <SPIx_Init+0x6c>)
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <SPIx_Init+0x6c>)
 8002908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <SPIx_Init+0x6c>)
 8002910:	2200      	movs	r2, #0
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SPIx_Init+0x6c>)
 8002916:	f44f 7282 	mov.w	r2, #260	; 0x104
 800291a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800291c:	4803      	ldr	r0, [pc, #12]	; (800292c <SPIx_Init+0x6c>)
 800291e:	f000 f853 	bl	80029c8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002922:	4802      	ldr	r0, [pc, #8]	; (800292c <SPIx_Init+0x6c>)
 8002924:	f004 fa25 	bl	8006d72 <HAL_SPI_Init>
  } 
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20002464 	.word	0x20002464
 8002930:	40015000 	.word	0x40015000

08002934 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <SPIx_Read+0x38>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f107 0108 	add.w	r1, r7, #8
 800294e:	4808      	ldr	r0, [pc, #32]	; (8002970 <SPIx_Read+0x3c>)
 8002950:	f004 fbcf 	bl	80070f2 <HAL_SPI_Receive>
 8002954:	4603      	mov	r3, r0
 8002956:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800295e:	f000 f827 	bl	80029b0 <SPIx_Error>
  }
  
  return readvalue;
 8002962:	68bb      	ldr	r3, [r7, #8]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000003c 	.word	0x2000003c
 8002970:	20002464 	.word	0x20002464

08002974 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <SPIx_Write+0x34>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	1db9      	adds	r1, r7, #6
 8002988:	2201      	movs	r2, #1
 800298a:	4808      	ldr	r0, [pc, #32]	; (80029ac <SPIx_Write+0x38>)
 800298c:	f004 fa7d 	bl	8006e8a <HAL_SPI_Transmit>
 8002990:	4603      	mov	r3, r0
 8002992:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800299a:	f000 f809 	bl	80029b0 <SPIx_Error>
  }
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2000003c 	.word	0x2000003c
 80029ac:	20002464 	.word	0x20002464

080029b0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80029b4:	4803      	ldr	r0, [pc, #12]	; (80029c4 <SPIx_Error+0x14>)
 80029b6:	f004 fa40 	bl	8006e3a <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80029ba:	f7ff ff81 	bl	80028c0 <SPIx_Init>
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20002464 	.word	0x20002464

080029c8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <SPIx_MspInit+0x6c>)
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <SPIx_MspInit+0x6c>)
 80029da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029de:	6453      	str	r3, [r2, #68]	; 0x44
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <SPIx_MspInit+0x6c>)
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <SPIx_MspInit+0x6c>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a0f      	ldr	r2, [pc, #60]	; (8002a34 <SPIx_MspInit+0x6c>)
 80029f6:	f043 0320 	orr.w	r3, r3, #32
 80029fa:	6313      	str	r3, [r2, #48]	; 0x30
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <SPIx_MspInit+0x6c>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002a08:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002a12:	2302      	movs	r3, #2
 8002a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002a16:	2301      	movs	r3, #1
 8002a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4804      	ldr	r0, [pc, #16]	; (8002a38 <SPIx_MspInit+0x70>)
 8002a26:	f001 fe11 	bl	800464c <HAL_GPIO_Init>
}
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	; 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40021400 	.word	0x40021400

08002a3c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <LCD_IO_Init+0xe0>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d164      	bne.n	8002b14 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002a4a:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <LCD_IO_Init+0xe0>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <LCD_IO_Init+0xe4>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	4a31      	ldr	r2, [pc, #196]	; (8002b20 <LCD_IO_Init+0xe4>)
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <LCD_IO_Init+0xe4>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002a72:	2301      	movs	r3, #1
 8002a74:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002a7e:	f107 030c 	add.w	r3, r7, #12
 8002a82:	4619      	mov	r1, r3
 8002a84:	4827      	ldr	r0, [pc, #156]	; (8002b24 <LCD_IO_Init+0xe8>)
 8002a86:	f001 fde1 	bl	800464c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <LCD_IO_Init+0xe4>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <LCD_IO_Init+0xe4>)
 8002a94:	f043 0308 	orr.w	r3, r3, #8
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <LCD_IO_Init+0xe4>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002ab8:	f107 030c 	add.w	r3, r7, #12
 8002abc:	4619      	mov	r1, r3
 8002abe:	4819      	ldr	r0, [pc, #100]	; (8002b24 <LCD_IO_Init+0xe8>)
 8002ac0:	f001 fdc4 	bl	800464c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <LCD_IO_Init+0xe4>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <LCD_IO_Init+0xe4>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <LCD_IO_Init+0xe4>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	4619      	mov	r1, r3
 8002af6:	480c      	ldr	r0, [pc, #48]	; (8002b28 <LCD_IO_Init+0xec>)
 8002af8:	f001 fda8 	bl	800464c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002afc:	2200      	movs	r2, #0
 8002afe:	2104      	movs	r1, #4
 8002b00:	4809      	ldr	r0, [pc, #36]	; (8002b28 <LCD_IO_Init+0xec>)
 8002b02:	f002 f85b 	bl	8004bbc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002b06:	2201      	movs	r2, #1
 8002b08:	2104      	movs	r1, #4
 8002b0a:	4807      	ldr	r0, [pc, #28]	; (8002b28 <LCD_IO_Init+0xec>)
 8002b0c:	f002 f856 	bl	8004bbc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002b10:	f7ff fed6 	bl	80028c0 <SPIx_Init>
  }
}
 8002b14:	bf00      	nop
 8002b16:	3720      	adds	r7, #32
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	200024bc 	.word	0x200024bc
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40020800 	.word	0x40020800

08002b2c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002b36:	2201      	movs	r2, #1
 8002b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b3c:	480a      	ldr	r0, [pc, #40]	; (8002b68 <LCD_IO_WriteData+0x3c>)
 8002b3e:	f002 f83d 	bl	8004bbc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002b42:	2200      	movs	r2, #0
 8002b44:	2104      	movs	r1, #4
 8002b46:	4809      	ldr	r0, [pc, #36]	; (8002b6c <LCD_IO_WriteData+0x40>)
 8002b48:	f002 f838 	bl	8004bbc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ff10 	bl	8002974 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002b54:	2201      	movs	r2, #1
 8002b56:	2104      	movs	r1, #4
 8002b58:	4804      	ldr	r0, [pc, #16]	; (8002b6c <LCD_IO_WriteData+0x40>)
 8002b5a:	f002 f82f 	bl	8004bbc <HAL_GPIO_WritePin>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	40020800 	.word	0x40020800

08002b70 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b80:	480a      	ldr	r0, [pc, #40]	; (8002bac <LCD_IO_WriteReg+0x3c>)
 8002b82:	f002 f81b 	bl	8004bbc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002b86:	2200      	movs	r2, #0
 8002b88:	2104      	movs	r1, #4
 8002b8a:	4809      	ldr	r0, [pc, #36]	; (8002bb0 <LCD_IO_WriteReg+0x40>)
 8002b8c:	f002 f816 	bl	8004bbc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff feed 	bl	8002974 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	4804      	ldr	r0, [pc, #16]	; (8002bb0 <LCD_IO_WriteReg+0x40>)
 8002ba0:	f002 f80c 	bl	8004bbc <HAL_GPIO_WritePin>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	40020800 	.word	0x40020800

08002bb4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	80fb      	strh	r3, [r7, #6]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2104      	movs	r1, #4
 8002bcc:	4810      	ldr	r0, [pc, #64]	; (8002c10 <LCD_IO_ReadData+0x5c>)
 8002bce:	f001 fff5 	bl	8004bbc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bd8:	480e      	ldr	r0, [pc, #56]	; (8002c14 <LCD_IO_ReadData+0x60>)
 8002bda:	f001 ffef 	bl	8004bbc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fec7 	bl	8002974 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002be6:	797b      	ldrb	r3, [r7, #5]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fea3 	bl	8002934 <SPIx_Read>
 8002bee:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bf6:	4807      	ldr	r0, [pc, #28]	; (8002c14 <LCD_IO_ReadData+0x60>)
 8002bf8:	f001 ffe0 	bl	8004bbc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	2104      	movs	r1, #4
 8002c00:	4803      	ldr	r0, [pc, #12]	; (8002c10 <LCD_IO_ReadData+0x5c>)
 8002c02:	f001 ffdb 	bl	8004bbc <HAL_GPIO_WritePin>
  
  return readvalue;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020c00 	.word	0x40020c00

08002c18 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fe91 	bl	8003948 <HAL_Delay>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002c34:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c36:	4a2e      	ldr	r2, [pc, #184]	; (8002cf0 <BSP_LCD_Init+0xc0>)
 8002c38:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002c3a:	4b2c      	ldr	r3, [pc, #176]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c3c:	2209      	movs	r2, #9
 8002c3e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002c40:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002c46:	4b29      	ldr	r3, [pc, #164]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c48:	221d      	movs	r2, #29
 8002c4a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002c4c:	4b27      	ldr	r3, [pc, #156]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c4e:	2203      	movs	r2, #3
 8002c50:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c54:	f240 120d 	movw	r2, #269	; 0x10d
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c5c:	f240 1243 	movw	r2, #323	; 0x143
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c64:	f240 1217 	movw	r2, #279	; 0x117
 8002c68:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c6c:	f240 1247 	movw	r2, #327	; 0x147
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002c82:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <BSP_LCD_Init+0xc4>)
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <BSP_LCD_Init+0xc4>)
 8002c92:	22c0      	movs	r2, #192	; 0xc0
 8002c94:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <BSP_LCD_Init+0xc4>)
 8002c98:	2204      	movs	r2, #4
 8002c9a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002c9c:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <BSP_LCD_Init+0xc4>)
 8002c9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002ca4:	4813      	ldr	r0, [pc, #76]	; (8002cf4 <BSP_LCD_Init+0xc4>)
 8002ca6:	f003 fe27 	bl	80068f8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002cc2:	f000 fa47 	bl	8003154 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002cc6:	4809      	ldr	r0, [pc, #36]	; (8002cec <BSP_LCD_Init+0xbc>)
 8002cc8:	f002 fd96 	bl	80057f8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <BSP_LCD_Init+0xc8>)
 8002cce:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <BSP_LCD_Init+0xcc>)
 8002cd0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <BSP_LCD_Init+0xc8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002cda:	f000 fc29 	bl	8003530 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002cde:	4808      	ldr	r0, [pc, #32]	; (8002d00 <BSP_LCD_Init+0xd0>)
 8002ce0:	f000 f8ce 	bl	8002e80 <BSP_LCD_SetFont>

  return LCD_OK;
 8002ce4:	2300      	movs	r3, #0
}  
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20021ff0 	.word	0x20021ff0
 8002cf0:	40016800 	.word	0x40016800
 8002cf4:	20002500 	.word	0x20002500
 8002cf8:	20022098 	.word	0x20022098
 8002cfc:	20000004 	.word	0x20000004
 8002d00:	20000040 	.word	0x20000040

08002d04 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <BSP_LCD_GetXSize+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	4798      	blx	r3
 8002d10:	4603      	mov	r3, r0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20022098 	.word	0x20022098

08002d1c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <BSP_LCD_GetYSize+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	4798      	blx	r3
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20022098 	.word	0x20022098

08002d34 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b090      	sub	sp, #64	; 0x40
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002d44:	f7ff ffde 	bl	8002d04 <BSP_LCD_GetXSize>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002d50:	f7ff ffe4 	bl	8002d1c <BSP_LCD_GetYSize>
 8002d54:	4603      	mov	r3, r0
 8002d56:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002d60:	23ff      	movs	r3, #255	; 0xff
 8002d62:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002d7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002d80:	2307      	movs	r3, #7
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002d84:	f7ff ffbe 	bl	8002d04 <BSP_LCD_GetXSize>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002d8c:	f7ff ffc6 	bl	8002d1c <BSP_LCD_GetYSize>
 8002d90:	4603      	mov	r3, r0
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002d94:	88fa      	ldrh	r2, [r7, #6]
 8002d96:	f107 030c 	add.w	r3, r7, #12
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4814      	ldr	r0, [pc, #80]	; (8002df0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d9e:	f002 febd 	bl	8005b1c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	4913      	ldr	r1, [pc, #76]	; (8002df4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	3304      	adds	r3, #4
 8002db2:	f04f 32ff 	mov.w	r2, #4294967295
 8002db6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002db8:	88fa      	ldrh	r2, [r7, #6]
 8002dba:	490e      	ldr	r1, [pc, #56]	; (8002df4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002dca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	4909      	ldr	r1, [pc, #36]	; (8002df4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002dde:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002de0:	4803      	ldr	r0, [pc, #12]	; (8002df0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002de2:	f002 fed9 	bl	8005b98 <HAL_LTDC_EnableDither>
}
 8002de6:	bf00      	nop
 8002de8:	3740      	adds	r7, #64	; 0x40
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20021ff0 	.word	0x20021ff0
 8002df4:	20002534 	.word	0x20002534
 8002df8:	20000040 	.word	0x20000040

08002dfc <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <BSP_LCD_SelectLayer+0x1c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20002530 	.word	0x20002530

08002e1c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <BSP_LCD_SetTextColor+0x28>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4907      	ldr	r1, [pc, #28]	; (8002e48 <BSP_LCD_SetTextColor+0x2c>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	20002530 	.word	0x20002530
 8002e48:	20002534 	.word	0x20002534

08002e4c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <BSP_LCD_SetBackColor+0x2c>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4908      	ldr	r1, [pc, #32]	; (8002e7c <BSP_LCD_SetBackColor+0x30>)
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	3304      	adds	r3, #4
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20002530 	.word	0x20002530
 8002e7c:	20002534 	.word	0x20002534

08002e80 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <BSP_LCD_SetFont+0x2c>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <BSP_LCD_SetFont+0x30>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3308      	adds	r3, #8
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20002530 	.word	0x20002530
 8002eb0:	20002534 	.word	0x20002534

08002eb4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <BSP_LCD_GetFont+0x24>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4907      	ldr	r1, [pc, #28]	; (8002edc <BSP_LCD_GetFont+0x28>)
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3308      	adds	r3, #8
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20002530 	.word	0x20002530
 8002edc:	20002534 	.word	0x20002534

08002ee0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <BSP_LCD_Clear+0x48>)
 8002eea:	681c      	ldr	r4, [r3, #0]
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <BSP_LCD_Clear+0x48>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <BSP_LCD_Clear+0x4c>)
 8002ef2:	2134      	movs	r1, #52	; 0x34
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	335c      	adds	r3, #92	; 0x5c
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461e      	mov	r6, r3
 8002f00:	f7ff ff00 	bl	8002d04 <BSP_LCD_GetXSize>
 8002f04:	4605      	mov	r5, r0
 8002f06:	f7ff ff09 	bl	8002d1c <BSP_LCD_GetYSize>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	2300      	movs	r3, #0
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	462a      	mov	r2, r5
 8002f18:	4631      	mov	r1, r6
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f000 fad0 	bl	80034c0 <FillBuffer>
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f28:	20002530 	.word	0x20002530
 8002f2c:	20021ff0 	.word	0x20021ff0

08002f30 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	80bb      	strh	r3, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <BSP_LCD_DisplayChar+0x80>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	491b      	ldr	r1, [pc, #108]	; (8002fb4 <BSP_LCD_DisplayChar+0x84>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3308      	adds	r3, #8
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6819      	ldr	r1, [r3, #0]
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <BSP_LCD_DisplayChar+0x80>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4c14      	ldr	r4, [pc, #80]	; (8002fb4 <BSP_LCD_DisplayChar+0x84>)
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4423      	add	r3, r4
 8002f6e:	3308      	adds	r3, #8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f74:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <BSP_LCD_DisplayChar+0x80>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4c0d      	ldr	r4, [pc, #52]	; (8002fb4 <BSP_LCD_DisplayChar+0x84>)
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4423      	add	r3, r4
 8002f88:	3308      	adds	r3, #8
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	889b      	ldrh	r3, [r3, #4]
 8002f8e:	3307      	adds	r3, #7
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	da00      	bge.n	8002f96 <BSP_LCD_DisplayChar+0x66>
 8002f94:	3307      	adds	r3, #7
 8002f96:	10db      	asrs	r3, r3, #3
 8002f98:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f9c:	18ca      	adds	r2, r1, r3
 8002f9e:	88b9      	ldrh	r1, [r7, #4]
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f9d2 	bl	800334c <DrawChar>
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	20002530 	.word	0x20002530
 8002fb4:	20002534 	.word	0x20002534

08002fb8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60ba      	str	r2, [r7, #8]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	81fb      	strh	r3, [r7, #14]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	81bb      	strh	r3, [r7, #12]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	83fb      	strh	r3, [r7, #30]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002fe2:	e002      	b.n	8002fea <BSP_LCD_DisplayStringAt+0x32>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	617a      	str	r2, [r7, #20]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f6      	bne.n	8002fe4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002ff6:	f7ff fe85 	bl	8002d04 <BSP_LCD_GetXSize>
 8002ffa:	4601      	mov	r1, r0
 8002ffc:	4b4b      	ldr	r3, [pc, #300]	; (800312c <BSP_LCD_DisplayStringAt+0x174>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	484b      	ldr	r0, [pc, #300]	; (8003130 <BSP_LCD_DisplayStringAt+0x178>)
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4403      	add	r3, r0
 800300c:	3308      	adds	r3, #8
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	889b      	ldrh	r3, [r3, #4]
 8003012:	fbb1 f3f3 	udiv	r3, r1, r3
 8003016:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d01c      	beq.n	8003058 <BSP_LCD_DisplayStringAt+0xa0>
 800301e:	2b03      	cmp	r3, #3
 8003020:	dc33      	bgt.n	800308a <BSP_LCD_DisplayStringAt+0xd2>
 8003022:	2b01      	cmp	r3, #1
 8003024:	d002      	beq.n	800302c <BSP_LCD_DisplayStringAt+0x74>
 8003026:	2b02      	cmp	r3, #2
 8003028:	d019      	beq.n	800305e <BSP_LCD_DisplayStringAt+0xa6>
 800302a:	e02e      	b.n	800308a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	1ad1      	subs	r1, r2, r3
 8003032:	4b3e      	ldr	r3, [pc, #248]	; (800312c <BSP_LCD_DisplayStringAt+0x174>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	483e      	ldr	r0, [pc, #248]	; (8003130 <BSP_LCD_DisplayStringAt+0x178>)
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4403      	add	r3, r0
 8003042:	3308      	adds	r3, #8
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	889b      	ldrh	r3, [r3, #4]
 8003048:	fb03 f301 	mul.w	r3, r3, r1
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	89fb      	ldrh	r3, [r7, #14]
 8003052:	4413      	add	r3, r2
 8003054:	83fb      	strh	r3, [r7, #30]
      break;
 8003056:	e01b      	b.n	8003090 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003058:	89fb      	ldrh	r3, [r7, #14]
 800305a:	83fb      	strh	r3, [r7, #30]
      break;
 800305c:	e018      	b.n	8003090 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	b299      	uxth	r1, r3
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <BSP_LCD_DisplayStringAt+0x174>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4831      	ldr	r0, [pc, #196]	; (8003130 <BSP_LCD_DisplayStringAt+0x178>)
 800306c:	4613      	mov	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4403      	add	r3, r0
 8003076:	3308      	adds	r3, #8
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	889b      	ldrh	r3, [r3, #4]
 800307c:	fb11 f303 	smulbb	r3, r1, r3
 8003080:	b29a      	uxth	r2, r3
 8003082:	89fb      	ldrh	r3, [r7, #14]
 8003084:	4413      	add	r3, r2
 8003086:	83fb      	strh	r3, [r7, #30]
      break;
 8003088:	e002      	b.n	8003090 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800308a:	89fb      	ldrh	r3, [r7, #14]
 800308c:	83fb      	strh	r3, [r7, #30]
      break;
 800308e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003090:	e01a      	b.n	80030c8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	89b9      	ldrh	r1, [r7, #12]
 8003098:	8bfb      	ldrh	r3, [r7, #30]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff48 	bl	8002f30 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80030a0:	4b22      	ldr	r3, [pc, #136]	; (800312c <BSP_LCD_DisplayStringAt+0x174>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4922      	ldr	r1, [pc, #136]	; (8003130 <BSP_LCD_DisplayStringAt+0x178>)
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3308      	adds	r3, #8
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	889a      	ldrh	r2, [r3, #4]
 80030b6:	8bfb      	ldrh	r3, [r7, #30]
 80030b8:	4413      	add	r3, r2
 80030ba:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	3301      	adds	r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
    i++;
 80030c2:	8bbb      	ldrh	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2dc      	uxtb	r4, r3
 80030d6:	f7ff fe15 	bl	8002d04 <BSP_LCD_GetXSize>
 80030da:	8bb9      	ldrh	r1, [r7, #28]
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <BSP_LCD_DisplayStringAt+0x174>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4d13      	ldr	r5, [pc, #76]	; (8003130 <BSP_LCD_DisplayStringAt+0x178>)
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	442b      	add	r3, r5
 80030ec:	3308      	adds	r3, #8
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	889b      	ldrh	r3, [r3, #4]
 80030f2:	fb03 f301 	mul.w	r3, r3, r1
 80030f6:	1ac3      	subs	r3, r0, r3
 80030f8:	b299      	uxth	r1, r3
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <BSP_LCD_DisplayStringAt+0x174>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	480c      	ldr	r0, [pc, #48]	; (8003130 <BSP_LCD_DisplayStringAt+0x178>)
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4403      	add	r3, r0
 800310a:	3308      	adds	r3, #8
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	889b      	ldrh	r3, [r3, #4]
 8003110:	4299      	cmp	r1, r3
 8003112:	bf2c      	ite	cs
 8003114:	2301      	movcs	r3, #1
 8003116:	2300      	movcc	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	4023      	ands	r3, r4
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1b7      	bne.n	8003092 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bdb0      	pop	{r4, r5, r7, pc}
 800312c:	20002530 	.word	0x20002530
 8003130:	20002534 	.word	0x20002534

08003134 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <BSP_LCD_DisplayOn+0x1c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003142:	4b03      	ldr	r3, [pc, #12]	; (8003150 <BSP_LCD_DisplayOn+0x1c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4798      	blx	r3
  }
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20022098 	.word	0x20022098

08003154 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	623b      	str	r3, [r7, #32]
 800315e:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	4a60      	ldr	r2, [pc, #384]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 8003164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003168:	6453      	str	r3, [r2, #68]	; 0x44
 800316a:	4b5e      	ldr	r3, [pc, #376]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003172:	623b      	str	r3, [r7, #32]
 8003174:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	4b5a      	ldr	r3, [pc, #360]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a59      	ldr	r2, [pc, #356]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 8003180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a4b      	ldr	r2, [pc, #300]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	4b45      	ldr	r3, [pc, #276]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a44      	ldr	r2, [pc, #272]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a3d      	ldr	r2, [pc, #244]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 80031f0:	f043 0308 	orr.w	r3, r3, #8
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a36      	ldr	r2, [pc, #216]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 800320c:	f043 0320 	orr.w	r3, r3, #32
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a2f      	ldr	r2, [pc, #188]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 8003228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <BSP_LCD_MspInit+0x190>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800323a:	f641 0358 	movw	r3, #6232	; 0x1858
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003240:	2302      	movs	r3, #2
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003248:	2302      	movs	r3, #2
 800324a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800324c:	230e      	movs	r3, #14
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003254:	4619      	mov	r1, r3
 8003256:	4824      	ldr	r0, [pc, #144]	; (80032e8 <BSP_LCD_MspInit+0x194>)
 8003258:	f001 f9f8 	bl	800464c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800325c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003266:	4619      	mov	r1, r3
 8003268:	4820      	ldr	r0, [pc, #128]	; (80032ec <BSP_LCD_MspInit+0x198>)
 800326a:	f001 f9ef 	bl	800464c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800326e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003278:	4619      	mov	r1, r3
 800327a:	481d      	ldr	r0, [pc, #116]	; (80032f0 <BSP_LCD_MspInit+0x19c>)
 800327c:	f001 f9e6 	bl	800464c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003280:	2348      	movs	r3, #72	; 0x48
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003288:	4619      	mov	r1, r3
 800328a:	481a      	ldr	r0, [pc, #104]	; (80032f4 <BSP_LCD_MspInit+0x1a0>)
 800328c:	f001 f9de 	bl	800464c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329a:	4619      	mov	r1, r3
 800329c:	4816      	ldr	r0, [pc, #88]	; (80032f8 <BSP_LCD_MspInit+0x1a4>)
 800329e:	f001 f9d5 	bl	800464c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80032a2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80032a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ac:	4619      	mov	r1, r3
 80032ae:	4813      	ldr	r0, [pc, #76]	; (80032fc <BSP_LCD_MspInit+0x1a8>)
 80032b0:	f001 f9cc 	bl	800464c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80032b4:	2303      	movs	r3, #3
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80032b8:	2309      	movs	r3, #9
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80032bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c0:	4619      	mov	r1, r3
 80032c2:	480a      	ldr	r0, [pc, #40]	; (80032ec <BSP_LCD_MspInit+0x198>)
 80032c4:	f001 f9c2 	bl	800464c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80032c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80032ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d2:	4619      	mov	r1, r3
 80032d4:	4809      	ldr	r0, [pc, #36]	; (80032fc <BSP_LCD_MspInit+0x1a8>)
 80032d6:	f001 f9b9 	bl	800464c <HAL_GPIO_Init>
}
 80032da:	bf00      	nop
 80032dc:	3738      	adds	r7, #56	; 0x38
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40020000 	.word	0x40020000
 80032ec:	40020400 	.word	0x40020400
 80032f0:	40020800 	.word	0x40020800
 80032f4:	40020c00 	.word	0x40020c00
 80032f8:	40021400 	.word	0x40021400
 80032fc:	40021800 	.word	0x40021800

08003300 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003300:	b5b0      	push	{r4, r5, r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	603a      	str	r2, [r7, #0]
 800330a:	80fb      	strh	r3, [r7, #6]
 800330c:	460b      	mov	r3, r1
 800330e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <BSP_LCD_DrawPixel+0x44>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <BSP_LCD_DrawPixel+0x48>)
 8003316:	2134      	movs	r1, #52	; 0x34
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	335c      	adds	r3, #92	; 0x5c
 8003320:	681c      	ldr	r4, [r3, #0]
 8003322:	88bd      	ldrh	r5, [r7, #4]
 8003324:	f7ff fcee 	bl	8002d04 <BSP_LCD_GetXSize>
 8003328:	4603      	mov	r3, r0
 800332a:	fb03 f205 	mul.w	r2, r3, r5
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4423      	add	r3, r4
 8003336:	461a      	mov	r2, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6013      	str	r3, [r2, #0]
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bdb0      	pop	{r4, r5, r7, pc}
 8003344:	20002530 	.word	0x20002530
 8003348:	20021ff0 	.word	0x20021ff0

0800334c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	603a      	str	r2, [r7, #0]
 8003356:	80fb      	strh	r3, [r7, #6]
 8003358:	460b      	mov	r3, r1
 800335a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003368:	4b53      	ldr	r3, [pc, #332]	; (80034b8 <DrawChar+0x16c>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4953      	ldr	r1, [pc, #332]	; (80034bc <DrawChar+0x170>)
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3308      	adds	r3, #8
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	88db      	ldrh	r3, [r3, #6]
 800337e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003380:	4b4d      	ldr	r3, [pc, #308]	; (80034b8 <DrawChar+0x16c>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	494d      	ldr	r1, [pc, #308]	; (80034bc <DrawChar+0x170>)
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3308      	adds	r3, #8
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	889b      	ldrh	r3, [r3, #4]
 8003396:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003398:	8a3b      	ldrh	r3, [r7, #16]
 800339a:	3307      	adds	r3, #7
 800339c:	2b00      	cmp	r3, #0
 800339e:	da00      	bge.n	80033a2 <DrawChar+0x56>
 80033a0:	3307      	adds	r3, #7
 80033a2:	10db      	asrs	r3, r3, #3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	8a3b      	ldrh	r3, [r7, #16]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e076      	b.n	80034a6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80033b8:	8a3b      	ldrh	r3, [r7, #16]
 80033ba:	3307      	adds	r3, #7
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da00      	bge.n	80033c2 <DrawChar+0x76>
 80033c0:	3307      	adds	r3, #7
 80033c2:	10db      	asrs	r3, r3, #3
 80033c4:	461a      	mov	r2, r3
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fb03 f302 	mul.w	r3, r3, r2
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80033d2:	8a3b      	ldrh	r3, [r7, #16]
 80033d4:	3307      	adds	r3, #7
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	da00      	bge.n	80033dc <DrawChar+0x90>
 80033da:	3307      	adds	r3, #7
 80033dc:	10db      	asrs	r3, r3, #3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d002      	beq.n	80033e8 <DrawChar+0x9c>
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d004      	beq.n	80033f0 <DrawChar+0xa4>
 80033e6:	e00c      	b.n	8003402 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	617b      	str	r3, [r7, #20]
      break;
 80033ee:	e016      	b.n	800341e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	3201      	adds	r2, #1
 80033fa:	7812      	ldrb	r2, [r2, #0]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
      break;
 8003400:	e00d      	b.n	800341e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	041a      	lsls	r2, r3, #16
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	3301      	adds	r3, #1
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	4313      	orrs	r3, r2
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	3202      	adds	r2, #2
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
      break;
 800341c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	e036      	b.n	8003492 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003424:	8a3a      	ldrh	r2, [r7, #16]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	1ad2      	subs	r2, r2, r3
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	4413      	add	r3, r2
 800342e:	3b01      	subs	r3, #1
 8003430:	2201      	movs	r2, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	461a      	mov	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d012      	beq.n	8003466 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	b29a      	uxth	r2, r3
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	4413      	add	r3, r2
 8003448:	b298      	uxth	r0, r3
 800344a:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <DrawChar+0x16c>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	491b      	ldr	r1, [pc, #108]	; (80034bc <DrawChar+0x170>)
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	88bb      	ldrh	r3, [r7, #4]
 800345e:	4619      	mov	r1, r3
 8003460:	f7ff ff4e 	bl	8003300 <BSP_LCD_DrawPixel>
 8003464:	e012      	b.n	800348c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	b29a      	uxth	r2, r3
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	4413      	add	r3, r2
 800346e:	b298      	uxth	r0, r3
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <DrawChar+0x16c>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4911      	ldr	r1, [pc, #68]	; (80034bc <DrawChar+0x170>)
 8003476:	4613      	mov	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	3304      	adds	r3, #4
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	88bb      	ldrh	r3, [r7, #4]
 8003486:	4619      	mov	r1, r3
 8003488:	f7ff ff3a 	bl	8003300 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	3301      	adds	r3, #1
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	8a3b      	ldrh	r3, [r7, #16]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	429a      	cmp	r2, r3
 8003498:	d3c4      	bcc.n	8003424 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800349a:	88bb      	ldrh	r3, [r7, #4]
 800349c:	3301      	adds	r3, #1
 800349e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	3301      	adds	r3, #1
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	8a7b      	ldrh	r3, [r7, #18]
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d384      	bcc.n	80033b8 <DrawChar+0x6c>
  }
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20002530 	.word	0x20002530
 80034bc:	20002534 	.word	0x20002534

080034c0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80034ce:	4b16      	ldr	r3, [pc, #88]	; (8003528 <FillBuffer+0x68>)
 80034d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034d4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <FillBuffer+0x68>)
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80034dc:	4a12      	ldr	r2, [pc, #72]	; (8003528 <FillBuffer+0x68>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80034e2:	4b11      	ldr	r3, [pc, #68]	; (8003528 <FillBuffer+0x68>)
 80034e4:	4a11      	ldr	r2, [pc, #68]	; (800352c <FillBuffer+0x6c>)
 80034e6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80034e8:	480f      	ldr	r0, [pc, #60]	; (8003528 <FillBuffer+0x68>)
 80034ea:	f000 fd13 	bl	8003f14 <HAL_DMA2D_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d115      	bne.n	8003520 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80034f4:	68f9      	ldr	r1, [r7, #12]
 80034f6:	480c      	ldr	r0, [pc, #48]	; (8003528 <FillBuffer+0x68>)
 80034f8:	f000 ff7a 	bl	80043f0 <HAL_DMA2D_ConfigLayer>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10e      	bne.n	8003520 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69f9      	ldr	r1, [r7, #28]
 800350c:	4806      	ldr	r0, [pc, #24]	; (8003528 <FillBuffer+0x68>)
 800350e:	f000 fd4a 	bl	8003fa6 <HAL_DMA2D_Start>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003518:	210a      	movs	r1, #10
 800351a:	4803      	ldr	r0, [pc, #12]	; (8003528 <FillBuffer+0x68>)
 800351c:	f000 fd6e 	bl	8003ffc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003520:	bf00      	nop
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	200024c0 	.word	0x200024c0
 800352c:	4002b000 	.word	0x4002b000

08003530 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <BSP_SDRAM_Init+0xac>)
 8003536:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <BSP_SDRAM_Init+0xb0>)
 8003538:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800353a:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <BSP_SDRAM_Init+0xb4>)
 800353c:	2202      	movs	r2, #2
 800353e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003540:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <BSP_SDRAM_Init+0xb4>)
 8003542:	2207      	movs	r2, #7
 8003544:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003546:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <BSP_SDRAM_Init+0xb4>)
 8003548:	2204      	movs	r2, #4
 800354a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <BSP_SDRAM_Init+0xb4>)
 800354e:	2207      	movs	r2, #7
 8003550:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003552:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <BSP_SDRAM_Init+0xb4>)
 8003554:	2202      	movs	r2, #2
 8003556:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003558:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <BSP_SDRAM_Init+0xb4>)
 800355a:	2202      	movs	r2, #2
 800355c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800355e:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <BSP_SDRAM_Init+0xb4>)
 8003560:	2202      	movs	r2, #2
 8003562:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003564:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <BSP_SDRAM_Init+0xac>)
 8003566:	2201      	movs	r2, #1
 8003568:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800356a:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <BSP_SDRAM_Init+0xac>)
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <BSP_SDRAM_Init+0xac>)
 8003572:	2204      	movs	r2, #4
 8003574:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <BSP_SDRAM_Init+0xac>)
 8003578:	2210      	movs	r2, #16
 800357a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800357c:	4b17      	ldr	r3, [pc, #92]	; (80035dc <BSP_SDRAM_Init+0xac>)
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003582:	4b16      	ldr	r3, [pc, #88]	; (80035dc <BSP_SDRAM_Init+0xac>)
 8003584:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003588:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800358a:	4b14      	ldr	r3, [pc, #80]	; (80035dc <BSP_SDRAM_Init+0xac>)
 800358c:	2200      	movs	r2, #0
 800358e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <BSP_SDRAM_Init+0xac>)
 8003592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003596:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <BSP_SDRAM_Init+0xac>)
 800359a:	2200      	movs	r2, #0
 800359c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <BSP_SDRAM_Init+0xac>)
 80035a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80035a6:	2100      	movs	r1, #0
 80035a8:	480c      	ldr	r0, [pc, #48]	; (80035dc <BSP_SDRAM_Init+0xac>)
 80035aa:	f000 f87f 	bl	80036ac <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80035ae:	490d      	ldr	r1, [pc, #52]	; (80035e4 <BSP_SDRAM_Init+0xb4>)
 80035b0:	480a      	ldr	r0, [pc, #40]	; (80035dc <BSP_SDRAM_Init+0xac>)
 80035b2:	f003 fb5f 	bl	8006c74 <HAL_SDRAM_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <BSP_SDRAM_Init+0xb8>)
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e002      	b.n	80035ca <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <BSP_SDRAM_Init+0xb8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80035ca:	f240 506a 	movw	r0, #1386	; 0x56a
 80035ce:	f000 f80d 	bl	80035ec <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <BSP_SDRAM_Init+0xb8>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000254c 	.word	0x2000254c
 80035e0:	a0000140 	.word	0xa0000140
 80035e4:	20002580 	.word	0x20002580
 80035e8:	20000058 	.word	0x20000058

080035ec <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80035f8:	4b2a      	ldr	r3, [pc, #168]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003600:	2208      	movs	r2, #8
 8003602:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003604:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003606:	2201      	movs	r2, #1
 8003608:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800360a:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800360c:	2200      	movs	r2, #0
 800360e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003614:	4923      	ldr	r1, [pc, #140]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003616:	4824      	ldr	r0, [pc, #144]	; (80036a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003618:	f003 fb60 	bl	8006cdc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800361c:	2001      	movs	r0, #1
 800361e:	f000 f993 	bl	8003948 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003624:	2202      	movs	r2, #2
 8003626:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003628:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800362a:	2208      	movs	r2, #8
 800362c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003630:	2201      	movs	r2, #1
 8003632:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800363a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800363e:	4919      	ldr	r1, [pc, #100]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003640:	4819      	ldr	r0, [pc, #100]	; (80036a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003642:	f003 fb4b 	bl	8006cdc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003646:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003648:	2203      	movs	r2, #3
 800364a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800364e:	2208      	movs	r2, #8
 8003650:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003654:	2204      	movs	r2, #4
 8003656:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800365e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003662:	4910      	ldr	r1, [pc, #64]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003664:	4810      	ldr	r0, [pc, #64]	; (80036a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003666:	f003 fb39 	bl	8006cdc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800366a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800366e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003672:	2204      	movs	r2, #4
 8003674:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003678:	2208      	movs	r2, #8
 800367a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800367e:	2201      	movs	r2, #1
 8003680:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003686:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800368c:	4905      	ldr	r1, [pc, #20]	; (80036a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800368e:	4806      	ldr	r0, [pc, #24]	; (80036a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003690:	f003 fb24 	bl	8006cdc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4804      	ldr	r0, [pc, #16]	; (80036a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003698:	f003 fb4b 	bl	8006d32 <HAL_SDRAM_ProgramRefreshRate>
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	2000259c 	.word	0x2000259c
 80036a8:	2000254c 	.word	0x2000254c

080036ac <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b090      	sub	sp, #64	; 0x40
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80ec 	beq.w	8003896 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c2:	4b77      	ldr	r3, [pc, #476]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	4a76      	ldr	r2, [pc, #472]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6393      	str	r3, [r2, #56]	; 0x38
 80036ce:	4b74      	ldr	r3, [pc, #464]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
 80036de:	4b70      	ldr	r3, [pc, #448]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	4a6f      	ldr	r2, [pc, #444]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 80036e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036e8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ea:	4b6d      	ldr	r3, [pc, #436]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	4b69      	ldr	r3, [pc, #420]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4a68      	ldr	r2, [pc, #416]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
 8003706:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	4b62      	ldr	r3, [pc, #392]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a61      	ldr	r2, [pc, #388]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b5f      	ldr	r3, [pc, #380]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	4b5b      	ldr	r3, [pc, #364]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a5a      	ldr	r2, [pc, #360]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003738:	f043 0308 	orr.w	r3, r3, #8
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b58      	ldr	r3, [pc, #352]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	4b54      	ldr	r3, [pc, #336]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a53      	ldr	r2, [pc, #332]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003754:	f043 0310 	orr.w	r3, r3, #16
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	4b4d      	ldr	r3, [pc, #308]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a4c      	ldr	r2, [pc, #304]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003770:	f043 0320 	orr.w	r3, r3, #32
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	4b46      	ldr	r3, [pc, #280]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a45      	ldr	r2, [pc, #276]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 800378c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800379e:	2302      	movs	r3, #2
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80037a2:	2302      	movs	r3, #2
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80037aa:	230c      	movs	r3, #12
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80037ae:	2360      	movs	r3, #96	; 0x60
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80037b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037b6:	4619      	mov	r1, r3
 80037b8:	483a      	ldr	r0, [pc, #232]	; (80038a4 <BSP_SDRAM_MspInit+0x1f8>)
 80037ba:	f000 ff47 	bl	800464c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80037be:	2301      	movs	r3, #1
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80037c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037c6:	4619      	mov	r1, r3
 80037c8:	4837      	ldr	r0, [pc, #220]	; (80038a8 <BSP_SDRAM_MspInit+0x1fc>)
 80037ca:	f000 ff3f 	bl	800464c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80037ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80037d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d8:	4619      	mov	r1, r3
 80037da:	4834      	ldr	r0, [pc, #208]	; (80038ac <BSP_SDRAM_MspInit+0x200>)
 80037dc:	f000 ff36 	bl	800464c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80037e0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80037e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ea:	4619      	mov	r1, r3
 80037ec:	4830      	ldr	r0, [pc, #192]	; (80038b0 <BSP_SDRAM_MspInit+0x204>)
 80037ee:	f000 ff2d 	bl	800464c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80037f2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80037f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037fc:	4619      	mov	r1, r3
 80037fe:	482d      	ldr	r0, [pc, #180]	; (80038b4 <BSP_SDRAM_MspInit+0x208>)
 8003800:	f000 ff24 	bl	800464c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003804:	f248 1333 	movw	r3, #33075	; 0x8133
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800380a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800380e:	4619      	mov	r1, r3
 8003810:	4829      	ldr	r0, [pc, #164]	; (80038b8 <BSP_SDRAM_MspInit+0x20c>)
 8003812:	f000 ff1b 	bl	800464c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 8003824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003828:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 800382c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003830:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 8003834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003838:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 800383c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003840:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 8003844:	2200      	movs	r2, #0
 8003846:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003848:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 800384a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800384e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 8003852:	2200      	movs	r2, #0
 8003854:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003856:	4b19      	ldr	r3, [pc, #100]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 8003858:	2203      	movs	r2, #3
 800385a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 800385e:	2200      	movs	r2, #0
 8003860:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003862:	4b16      	ldr	r3, [pc, #88]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003868:	4b14      	ldr	r3, [pc, #80]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 800386a:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <BSP_SDRAM_MspInit+0x214>)
 800386c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
 8003874:	4a11      	ldr	r2, [pc, #68]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800387a:	4810      	ldr	r0, [pc, #64]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 800387c:	f000 fa18 	bl	8003cb0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003880:	480e      	ldr	r0, [pc, #56]	; (80038bc <BSP_SDRAM_MspInit+0x210>)
 8003882:	f000 f967 	bl	8003b54 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	210f      	movs	r1, #15
 800388a:	2038      	movs	r0, #56	; 0x38
 800388c:	f000 f938 	bl	8003b00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003890:	2038      	movs	r0, #56	; 0x38
 8003892:	f000 f951 	bl	8003b38 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003896:	bf00      	nop
 8003898:	3740      	adds	r7, #64	; 0x40
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40021400 	.word	0x40021400
 80038b8:	40021800 	.word	0x40021800
 80038bc:	200025ac 	.word	0x200025ac
 80038c0:	40026410 	.word	0x40026410

080038c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_Init+0x40>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <HAL_Init+0x40>)
 80038ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_Init+0x40>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <HAL_Init+0x40>)
 80038da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <HAL_Init+0x40>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a07      	ldr	r2, [pc, #28]	; (8003904 <HAL_Init+0x40>)
 80038e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ec:	2003      	movs	r0, #3
 80038ee:	f000 f8fc 	bl	8003aea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038f2:	2000      	movs	r0, #0
 80038f4:	f7fe fa48 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038f8:	f7fe fa1a 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023c00 	.word	0x40023c00

08003908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_IncTick+0x20>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_IncTick+0x24>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4413      	add	r3, r2
 8003918:	4a04      	ldr	r2, [pc, #16]	; (800392c <HAL_IncTick+0x24>)
 800391a:	6013      	str	r3, [r2, #0]
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20000060 	.word	0x20000060
 800392c:	2002209c 	.word	0x2002209c

08003930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return uwTick;
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_GetTick+0x14>)
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	2002209c 	.word	0x2002209c

08003948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003950:	f7ff ffee 	bl	8003930 <HAL_GetTick>
 8003954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d005      	beq.n	800396e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <HAL_Delay+0x44>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800396e:	bf00      	nop
 8003970:	f7ff ffde 	bl	8003930 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	429a      	cmp	r2, r3
 800397e:	d8f7      	bhi.n	8003970 <HAL_Delay+0x28>
  {
  }
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000060 	.word	0x20000060

08003990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ac:	4013      	ands	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60d3      	str	r3, [r2, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <__NVIC_GetPriorityGrouping+0x18>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 0307 	and.w	r3, r3, #7
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db0b      	blt.n	8003a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	4907      	ldr	r1, [pc, #28]	; (8003a2c <__NVIC_EnableIRQ+0x38>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2001      	movs	r0, #1
 8003a16:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000e100 	.word	0xe000e100

08003a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	6039      	str	r1, [r7, #0]
 8003a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db0a      	blt.n	8003a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	490c      	ldr	r1, [pc, #48]	; (8003a7c <__NVIC_SetPriority+0x4c>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a58:	e00a      	b.n	8003a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4908      	ldr	r1, [pc, #32]	; (8003a80 <__NVIC_SetPriority+0x50>)
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3b04      	subs	r3, #4
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	761a      	strb	r2, [r3, #24]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000e100 	.word	0xe000e100
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f1c3 0307 	rsb	r3, r3, #7
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	bf28      	it	cs
 8003aa2:	2304      	movcs	r3, #4
 8003aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d902      	bls.n	8003ab4 <NVIC_EncodePriority+0x30>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3b03      	subs	r3, #3
 8003ab2:	e000      	b.n	8003ab6 <NVIC_EncodePriority+0x32>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003acc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	43d9      	mvns	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003adc:	4313      	orrs	r3, r2
         );
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ff4c 	bl	8003990 <__NVIC_SetPriorityGrouping>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b12:	f7ff ff61 	bl	80039d8 <__NVIC_GetPriorityGrouping>
 8003b16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	6978      	ldr	r0, [r7, #20]
 8003b1e:	f7ff ffb1 	bl	8003a84 <NVIC_EncodePriority>
 8003b22:	4602      	mov	r2, r0
 8003b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff80 	bl	8003a30 <__NVIC_SetPriority>
}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff ff54 	bl	80039f4 <__NVIC_EnableIRQ>
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b60:	f7ff fee6 	bl	8003930 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e099      	b.n	8003ca4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b90:	e00f      	b.n	8003bb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b92:	f7ff fecd 	bl	8003930 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	d908      	bls.n	8003bb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2203      	movs	r2, #3
 8003baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e078      	b.n	8003ca4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e8      	bne.n	8003b92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4b38      	ldr	r3, [pc, #224]	; (8003cac <HAL_DMA_Init+0x158>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d107      	bne.n	8003c1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	4313      	orrs	r3, r2
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0307 	bic.w	r3, r3, #7
 8003c32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d117      	bne.n	8003c76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00e      	beq.n	8003c76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f8df 	bl	8003e1c <DMA_CheckFifoParam>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2240      	movs	r2, #64	; 0x40
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c72:	2301      	movs	r3, #1
 8003c74:	e016      	b.n	8003ca4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f896 	bl	8003db0 <DMA_CalcBaseAndBitshift>
 8003c84:	4603      	mov	r3, r0
 8003c86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	223f      	movs	r2, #63	; 0x3f
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	f010803f 	.word	0xf010803f

08003cb0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e050      	b.n	8003d64 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d101      	bne.n	8003cd2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e048      	b.n	8003d64 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2221      	movs	r2, #33	; 0x21
 8003d10:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f84c 	bl	8003db0 <DMA_CalcBaseAndBitshift>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	223f      	movs	r2, #63	; 0x3f
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00c      	b.n	8003da4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	3b10      	subs	r3, #16
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <DMA_CalcBaseAndBitshift+0x64>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	091b      	lsrs	r3, r3, #4
 8003dc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <DMA_CalcBaseAndBitshift+0x68>)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d909      	bls.n	8003df2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003de6:	f023 0303 	bic.w	r3, r3, #3
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	659a      	str	r2, [r3, #88]	; 0x58
 8003df0:	e007      	b.n	8003e02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dfa:	f023 0303 	bic.w	r3, r3, #3
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	aaaaaaab 	.word	0xaaaaaaab
 8003e18:	080112c4 	.word	0x080112c4

08003e1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11f      	bne.n	8003e76 <DMA_CheckFifoParam+0x5a>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d856      	bhi.n	8003eea <DMA_CheckFifoParam+0xce>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <DMA_CheckFifoParam+0x28>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e67 	.word	0x08003e67
 8003e4c:	08003e55 	.word	0x08003e55
 8003e50:	08003eeb 	.word	0x08003eeb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d046      	beq.n	8003eee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e64:	e043      	b.n	8003eee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e6e:	d140      	bne.n	8003ef2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e74:	e03d      	b.n	8003ef2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7e:	d121      	bne.n	8003ec4 <DMA_CheckFifoParam+0xa8>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d837      	bhi.n	8003ef6 <DMA_CheckFifoParam+0xda>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <DMA_CheckFifoParam+0x70>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ea3 	.word	0x08003ea3
 8003e94:	08003e9d 	.word	0x08003e9d
 8003e98:	08003eb5 	.word	0x08003eb5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea0:	e030      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d025      	beq.n	8003efa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb2:	e022      	b.n	8003efa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ebc:	d11f      	bne.n	8003efe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ec2:	e01c      	b.n	8003efe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d903      	bls.n	8003ed2 <DMA_CheckFifoParam+0xb6>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d003      	beq.n	8003ed8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ed0:	e018      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed6:	e015      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee8:	e00b      	b.n	8003f02 <DMA_CheckFifoParam+0xe6>
      break;
 8003eea:	bf00      	nop
 8003eec:	e00a      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e008      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e006      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e004      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;
 8003efa:	bf00      	nop
 8003efc:	e002      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;   
 8003efe:	bf00      	nop
 8003f00:	e000      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;
 8003f02:	bf00      	nop
    }
  } 
  
  return status; 
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop

08003f14 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e03b      	b.n	8003f9e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fc fff2 	bl	8000f24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	f023 0107 	bic.w	r1, r3, #7
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68d1      	ldr	r1, [r2, #12]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af02      	add	r7, sp, #8
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_DMA2D_Start+0x1c>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e018      	b.n	8003ff4 <HAL_DMA2D_Start+0x4e>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fa99 	bl	8004514 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d056      	beq.n	80040c6 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004018:	f7ff fc8a 	bl	8003930 <HAL_GetTick>
 800401c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800401e:	e04b      	b.n	80040b8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800402e:	2b00      	cmp	r3, #0
 8004030:	d023      	beq.n	800407a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004040:	f043 0202 	orr.w	r2, r3, #2
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	f043 0201 	orr.w	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2221      	movs	r2, #33	; 0x21
 8004064:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2204      	movs	r2, #4
 800406a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0a5      	b.n	80041c6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d01a      	beq.n	80040b8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004082:	f7ff fc55 	bl	8003930 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <HAL_DMA2D_PollForTransfer+0x9c>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10f      	bne.n	80040b8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2203      	movs	r2, #3
 80040a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e086      	b.n	80041c6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ac      	beq.n	8004020 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d061      	beq.n	80041ac <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80040e8:	f7ff fc22 	bl	8003930 <HAL_GetTick>
 80040ec:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80040ee:	e056      	b.n	800419e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d02e      	beq.n	8004160 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	f043 0204 	orr.w	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	f043 0202 	orr.w	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	f043 0201 	orr.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2229      	movs	r2, #41	; 0x29
 800414a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2204      	movs	r2, #4
 8004150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e032      	b.n	80041c6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	d01a      	beq.n	800419e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004168:	f7ff fbe2 	bl	8003930 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <HAL_DMA2D_PollForTransfer+0x182>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	f043 0220 	orr.w	r2, r3, #32
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2203      	movs	r2, #3
 800418e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e013      	b.n	80041c6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0a1      	beq.n	80040f0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2212      	movs	r2, #18
 80041b2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d026      	beq.n	800423e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d021      	beq.n	800423e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004208:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420e:	f043 0201 	orr.w	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2201      	movs	r2, #1
 800421c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2204      	movs	r2, #4
 8004222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d026      	beq.n	8004296 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d021      	beq.n	8004296 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004260:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2220      	movs	r2, #32
 8004268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	f043 0202 	orr.w	r2, r3, #2
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2204      	movs	r2, #4
 800427a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d026      	beq.n	80042ee <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d021      	beq.n	80042ee <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2208      	movs	r2, #8
 80042c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	f043 0204 	orr.w	r2, r3, #4
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2204      	movs	r2, #4
 80042d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00e      	beq.n	8004320 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004310:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2204      	movs	r2, #4
 8004318:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f853 	bl	80043c6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d024      	beq.n	8004374 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01f      	beq.n	8004374 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004342:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2202      	movs	r2, #2
 800434a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01f      	beq.n	80043be <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01a      	beq.n	80043be <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004396:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2210      	movs	r2, #16
 800439e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f80e 	bl	80043da <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_DMA2D_ConfigLayer+0x20>
 800440c:	2302      	movs	r3, #2
 800440e:	e079      	b.n	8004504 <HAL_DMA2D_ConfigLayer+0x114>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	3318      	adds	r3, #24
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800443a:	4b35      	ldr	r3, [pc, #212]	; (8004510 <HAL_DMA2D_ConfigLayer+0x120>)
 800443c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b0a      	cmp	r3, #10
 8004444:	d003      	beq.n	800444e <HAL_DMA2D_ConfigLayer+0x5e>
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b09      	cmp	r3, #9
 800444c:	d107      	bne.n	800445e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e005      	b.n	800446a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	061b      	lsls	r3, r3, #24
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d120      	bne.n	80044b2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	43db      	mvns	r3, r3
 800447a:	ea02 0103 	and.w	r1, r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	430a      	orrs	r2, r1
 8004486:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b0a      	cmp	r3, #10
 8004498:	d003      	beq.n	80044a2 <HAL_DMA2D_ConfigLayer+0xb2>
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b09      	cmp	r3, #9
 80044a0:	d127      	bne.n	80044f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28
 80044b0:	e01f      	b.n	80044f2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	ea02 0103 	and.w	r1, r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b0a      	cmp	r3, #10
 80044da:	d003      	beq.n	80044e4 <HAL_DMA2D_ConfigLayer+0xf4>
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b09      	cmp	r3, #9
 80044e2:	d106      	bne.n	80044f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044f0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	ff03000f 	.word	0xff03000f

08004514 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004514:	b480      	push	{r7}
 8004516:	b08b      	sub	sp, #44	; 0x2c
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	041a      	lsls	r2, r3, #16
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	431a      	orrs	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800454c:	d174      	bne.n	8004638 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004554:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800455c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004564:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d108      	bne.n	8004586 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	431a      	orrs	r2, r3
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	4313      	orrs	r3, r2
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
 8004584:	e053      	b.n	800462e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d106      	bne.n	800459c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	4313      	orrs	r3, r2
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	e048      	b.n	800462e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d111      	bne.n	80045c8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	0cdb      	lsrs	r3, r3, #19
 80045a8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	0a9b      	lsrs	r3, r3, #10
 80045ae:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	08db      	lsrs	r3, r3, #3
 80045b4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	02db      	lsls	r3, r3, #11
 80045be:	4313      	orrs	r3, r2
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
 80045c6:	e032      	b.n	800462e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d117      	bne.n	8004600 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	0fdb      	lsrs	r3, r3, #31
 80045d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	0cdb      	lsrs	r3, r3, #19
 80045da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	0adb      	lsrs	r3, r3, #11
 80045e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	431a      	orrs	r2, r3
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	03db      	lsls	r3, r3, #15
 80045f6:	4313      	orrs	r3, r2
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	e016      	b.n	800462e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	0f1b      	lsrs	r3, r3, #28
 8004604:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	0d1b      	lsrs	r3, r3, #20
 800460a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	0b1b      	lsrs	r3, r3, #12
 8004610:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	011a      	lsls	r2, r3, #4
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	431a      	orrs	r2, r3
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	4313      	orrs	r3, r2
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004636:	e003      	b.n	8004640 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	60da      	str	r2, [r3, #12]
}
 8004640:	bf00      	nop
 8004642:	372c      	adds	r7, #44	; 0x2c
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	; 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	e177      	b.n	8004958 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004668:	2201      	movs	r2, #1
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4013      	ands	r3, r2
 800467a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	429a      	cmp	r2, r3
 8004682:	f040 8166 	bne.w	8004952 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d00b      	beq.n	80046a6 <HAL_GPIO_Init+0x5a>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800469a:	2b11      	cmp	r3, #17
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b12      	cmp	r3, #18
 80046a4:	d130      	bne.n	8004708 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	2203      	movs	r2, #3
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4013      	ands	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046dc:	2201      	movs	r2, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 0201 	and.w	r2, r3, #1
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2203      	movs	r2, #3
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0xfc>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b12      	cmp	r3, #18
 8004746:	d123      	bne.n	8004790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	08da      	lsrs	r2, r3, #3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3208      	adds	r2, #8
 8004750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	220f      	movs	r2, #15
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	08da      	lsrs	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3208      	adds	r2, #8
 800478a:	69b9      	ldr	r1, [r7, #24]
 800478c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	2203      	movs	r2, #3
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 0203 	and.w	r2, r3, #3
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80c0 	beq.w	8004952 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	4b66      	ldr	r3, [pc, #408]	; (8004970 <HAL_GPIO_Init+0x324>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	4a65      	ldr	r2, [pc, #404]	; (8004970 <HAL_GPIO_Init+0x324>)
 80047dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e0:	6453      	str	r3, [r2, #68]	; 0x44
 80047e2:	4b63      	ldr	r3, [pc, #396]	; (8004970 <HAL_GPIO_Init+0x324>)
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ee:	4a61      	ldr	r2, [pc, #388]	; (8004974 <HAL_GPIO_Init+0x328>)
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	3302      	adds	r3, #2
 80047f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	220f      	movs	r2, #15
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a58      	ldr	r2, [pc, #352]	; (8004978 <HAL_GPIO_Init+0x32c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d037      	beq.n	800488a <HAL_GPIO_Init+0x23e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a57      	ldr	r2, [pc, #348]	; (800497c <HAL_GPIO_Init+0x330>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d031      	beq.n	8004886 <HAL_GPIO_Init+0x23a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a56      	ldr	r2, [pc, #344]	; (8004980 <HAL_GPIO_Init+0x334>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d02b      	beq.n	8004882 <HAL_GPIO_Init+0x236>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a55      	ldr	r2, [pc, #340]	; (8004984 <HAL_GPIO_Init+0x338>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d025      	beq.n	800487e <HAL_GPIO_Init+0x232>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a54      	ldr	r2, [pc, #336]	; (8004988 <HAL_GPIO_Init+0x33c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01f      	beq.n	800487a <HAL_GPIO_Init+0x22e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a53      	ldr	r2, [pc, #332]	; (800498c <HAL_GPIO_Init+0x340>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d019      	beq.n	8004876 <HAL_GPIO_Init+0x22a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a52      	ldr	r2, [pc, #328]	; (8004990 <HAL_GPIO_Init+0x344>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_GPIO_Init+0x226>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a51      	ldr	r2, [pc, #324]	; (8004994 <HAL_GPIO_Init+0x348>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00d      	beq.n	800486e <HAL_GPIO_Init+0x222>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a50      	ldr	r2, [pc, #320]	; (8004998 <HAL_GPIO_Init+0x34c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <HAL_GPIO_Init+0x21e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a4f      	ldr	r2, [pc, #316]	; (800499c <HAL_GPIO_Init+0x350>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <HAL_GPIO_Init+0x21a>
 8004862:	2309      	movs	r3, #9
 8004864:	e012      	b.n	800488c <HAL_GPIO_Init+0x240>
 8004866:	230a      	movs	r3, #10
 8004868:	e010      	b.n	800488c <HAL_GPIO_Init+0x240>
 800486a:	2308      	movs	r3, #8
 800486c:	e00e      	b.n	800488c <HAL_GPIO_Init+0x240>
 800486e:	2307      	movs	r3, #7
 8004870:	e00c      	b.n	800488c <HAL_GPIO_Init+0x240>
 8004872:	2306      	movs	r3, #6
 8004874:	e00a      	b.n	800488c <HAL_GPIO_Init+0x240>
 8004876:	2305      	movs	r3, #5
 8004878:	e008      	b.n	800488c <HAL_GPIO_Init+0x240>
 800487a:	2304      	movs	r3, #4
 800487c:	e006      	b.n	800488c <HAL_GPIO_Init+0x240>
 800487e:	2303      	movs	r3, #3
 8004880:	e004      	b.n	800488c <HAL_GPIO_Init+0x240>
 8004882:	2302      	movs	r3, #2
 8004884:	e002      	b.n	800488c <HAL_GPIO_Init+0x240>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_GPIO_Init+0x240>
 800488a:	2300      	movs	r3, #0
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	f002 0203 	and.w	r2, r2, #3
 8004892:	0092      	lsls	r2, r2, #2
 8004894:	4093      	lsls	r3, r2
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800489c:	4935      	ldr	r1, [pc, #212]	; (8004974 <HAL_GPIO_Init+0x328>)
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	089b      	lsrs	r3, r3, #2
 80048a2:	3302      	adds	r3, #2
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048aa:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <HAL_GPIO_Init+0x354>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	43db      	mvns	r3, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4013      	ands	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ce:	4a34      	ldr	r2, [pc, #208]	; (80049a0 <HAL_GPIO_Init+0x354>)
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048d4:	4b32      	ldr	r3, [pc, #200]	; (80049a0 <HAL_GPIO_Init+0x354>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	43db      	mvns	r3, r3
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4013      	ands	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048f8:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <HAL_GPIO_Init+0x354>)
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048fe:	4b28      	ldr	r3, [pc, #160]	; (80049a0 <HAL_GPIO_Init+0x354>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004922:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <HAL_GPIO_Init+0x354>)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004928:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <HAL_GPIO_Init+0x354>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	43db      	mvns	r3, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4013      	ands	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800494c:	4a14      	ldr	r2, [pc, #80]	; (80049a0 <HAL_GPIO_Init+0x354>)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3301      	adds	r3, #1
 8004956:	61fb      	str	r3, [r7, #28]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2b0f      	cmp	r3, #15
 800495c:	f67f ae84 	bls.w	8004668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	3724      	adds	r7, #36	; 0x24
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800
 8004974:	40013800 	.word	0x40013800
 8004978:	40020000 	.word	0x40020000
 800497c:	40020400 	.word	0x40020400
 8004980:	40020800 	.word	0x40020800
 8004984:	40020c00 	.word	0x40020c00
 8004988:	40021000 	.word	0x40021000
 800498c:	40021400 	.word	0x40021400
 8004990:	40021800 	.word	0x40021800
 8004994:	40021c00 	.word	0x40021c00
 8004998:	40022000 	.word	0x40022000
 800499c:	40022400 	.word	0x40022400
 80049a0:	40013c00 	.word	0x40013c00

080049a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e0d9      	b.n	8004b74 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049c0:	2201      	movs	r2, #1
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4013      	ands	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	f040 80c9 	bne.w	8004b6e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80049dc:	4a6b      	ldr	r2, [pc, #428]	; (8004b8c <HAL_GPIO_DeInit+0x1e8>)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	3302      	adds	r3, #2
 80049e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	220f      	movs	r2, #15
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	4013      	ands	r3, r2
 80049fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a63      	ldr	r2, [pc, #396]	; (8004b90 <HAL_GPIO_DeInit+0x1ec>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d037      	beq.n	8004a76 <HAL_GPIO_DeInit+0xd2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a62      	ldr	r2, [pc, #392]	; (8004b94 <HAL_GPIO_DeInit+0x1f0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d031      	beq.n	8004a72 <HAL_GPIO_DeInit+0xce>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a61      	ldr	r2, [pc, #388]	; (8004b98 <HAL_GPIO_DeInit+0x1f4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d02b      	beq.n	8004a6e <HAL_GPIO_DeInit+0xca>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a60      	ldr	r2, [pc, #384]	; (8004b9c <HAL_GPIO_DeInit+0x1f8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d025      	beq.n	8004a6a <HAL_GPIO_DeInit+0xc6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a5f      	ldr	r2, [pc, #380]	; (8004ba0 <HAL_GPIO_DeInit+0x1fc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01f      	beq.n	8004a66 <HAL_GPIO_DeInit+0xc2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a5e      	ldr	r2, [pc, #376]	; (8004ba4 <HAL_GPIO_DeInit+0x200>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d019      	beq.n	8004a62 <HAL_GPIO_DeInit+0xbe>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a5d      	ldr	r2, [pc, #372]	; (8004ba8 <HAL_GPIO_DeInit+0x204>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <HAL_GPIO_DeInit+0xba>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a5c      	ldr	r2, [pc, #368]	; (8004bac <HAL_GPIO_DeInit+0x208>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00d      	beq.n	8004a5a <HAL_GPIO_DeInit+0xb6>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a5b      	ldr	r2, [pc, #364]	; (8004bb0 <HAL_GPIO_DeInit+0x20c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d007      	beq.n	8004a56 <HAL_GPIO_DeInit+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a5a      	ldr	r2, [pc, #360]	; (8004bb4 <HAL_GPIO_DeInit+0x210>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <HAL_GPIO_DeInit+0xae>
 8004a4e:	2309      	movs	r3, #9
 8004a50:	e012      	b.n	8004a78 <HAL_GPIO_DeInit+0xd4>
 8004a52:	230a      	movs	r3, #10
 8004a54:	e010      	b.n	8004a78 <HAL_GPIO_DeInit+0xd4>
 8004a56:	2308      	movs	r3, #8
 8004a58:	e00e      	b.n	8004a78 <HAL_GPIO_DeInit+0xd4>
 8004a5a:	2307      	movs	r3, #7
 8004a5c:	e00c      	b.n	8004a78 <HAL_GPIO_DeInit+0xd4>
 8004a5e:	2306      	movs	r3, #6
 8004a60:	e00a      	b.n	8004a78 <HAL_GPIO_DeInit+0xd4>
 8004a62:	2305      	movs	r3, #5
 8004a64:	e008      	b.n	8004a78 <HAL_GPIO_DeInit+0xd4>
 8004a66:	2304      	movs	r3, #4
 8004a68:	e006      	b.n	8004a78 <HAL_GPIO_DeInit+0xd4>
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e004      	b.n	8004a78 <HAL_GPIO_DeInit+0xd4>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e002      	b.n	8004a78 <HAL_GPIO_DeInit+0xd4>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_GPIO_DeInit+0xd4>
 8004a76:	2300      	movs	r3, #0
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	f002 0203 	and.w	r2, r2, #3
 8004a7e:	0092      	lsls	r2, r2, #2
 8004a80:	4093      	lsls	r3, r2
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d132      	bne.n	8004aee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004a88:	4b4b      	ldr	r3, [pc, #300]	; (8004bb8 <HAL_GPIO_DeInit+0x214>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	4949      	ldr	r1, [pc, #292]	; (8004bb8 <HAL_GPIO_DeInit+0x214>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004a96:	4b48      	ldr	r3, [pc, #288]	; (8004bb8 <HAL_GPIO_DeInit+0x214>)
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	4946      	ldr	r1, [pc, #280]	; (8004bb8 <HAL_GPIO_DeInit+0x214>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004aa4:	4b44      	ldr	r3, [pc, #272]	; (8004bb8 <HAL_GPIO_DeInit+0x214>)
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	4942      	ldr	r1, [pc, #264]	; (8004bb8 <HAL_GPIO_DeInit+0x214>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ab2:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <HAL_GPIO_DeInit+0x214>)
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	493f      	ldr	r1, [pc, #252]	; (8004bb8 <HAL_GPIO_DeInit+0x214>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	220f      	movs	r2, #15
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ad0:	4a2e      	ldr	r2, [pc, #184]	; (8004b8c <HAL_GPIO_DeInit+0x1e8>)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	089b      	lsrs	r3, r3, #2
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	43da      	mvns	r2, r3
 8004ae0:	482a      	ldr	r0, [pc, #168]	; (8004b8c <HAL_GPIO_DeInit+0x1e8>)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	089b      	lsrs	r3, r3, #2
 8004ae6:	400a      	ands	r2, r1
 8004ae8:	3302      	adds	r3, #2
 8004aea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	2103      	movs	r1, #3
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	401a      	ands	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	08da      	lsrs	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3208      	adds	r2, #8
 8004b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	220f      	movs	r2, #15
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	08d2      	lsrs	r2, r2, #3
 8004b24:	4019      	ands	r1, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3208      	adds	r2, #8
 8004b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	2103      	movs	r1, #3
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	401a      	ands	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	2103      	movs	r1, #3
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	43db      	mvns	r3, r3
 8004b68:	401a      	ands	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	3301      	adds	r3, #1
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b0f      	cmp	r3, #15
 8004b78:	f67f af22 	bls.w	80049c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40013800 	.word	0x40013800
 8004b90:	40020000 	.word	0x40020000
 8004b94:	40020400 	.word	0x40020400
 8004b98:	40020800 	.word	0x40020800
 8004b9c:	40020c00 	.word	0x40020c00
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	40021400 	.word	0x40021400
 8004ba8:	40021800 	.word	0x40021800
 8004bac:	40021c00 	.word	0x40021c00
 8004bb0:	40022000 	.word	0x40022000
 8004bb4:	40022400 	.word	0x40022400
 8004bb8:	40013c00 	.word	0x40013c00

08004bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	807b      	strh	r3, [r7, #2]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bcc:	787b      	ldrb	r3, [r7, #1]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bd8:	e003      	b.n	8004be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bda:	887b      	ldrh	r3, [r7, #2]
 8004bdc:	041a      	lsls	r2, r3, #16
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	619a      	str	r2, [r3, #24]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e12b      	b.n	8004e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc fc3a 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2224      	movs	r2, #36	; 0x24
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0201 	bic.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c54:	f001 fdf6 	bl	8006844 <HAL_RCC_GetPCLK1Freq>
 8004c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4a81      	ldr	r2, [pc, #516]	; (8004e64 <HAL_I2C_Init+0x274>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d807      	bhi.n	8004c74 <HAL_I2C_Init+0x84>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a80      	ldr	r2, [pc, #512]	; (8004e68 <HAL_I2C_Init+0x278>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	bf94      	ite	ls
 8004c6c:	2301      	movls	r3, #1
 8004c6e:	2300      	movhi	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e006      	b.n	8004c82 <HAL_I2C_Init+0x92>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4a7d      	ldr	r2, [pc, #500]	; (8004e6c <HAL_I2C_Init+0x27c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	bf94      	ite	ls
 8004c7c:	2301      	movls	r3, #1
 8004c7e:	2300      	movhi	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e0e7      	b.n	8004e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a78      	ldr	r2, [pc, #480]	; (8004e70 <HAL_I2C_Init+0x280>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	0c9b      	lsrs	r3, r3, #18
 8004c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a6a      	ldr	r2, [pc, #424]	; (8004e64 <HAL_I2C_Init+0x274>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d802      	bhi.n	8004cc4 <HAL_I2C_Init+0xd4>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	e009      	b.n	8004cd8 <HAL_I2C_Init+0xe8>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	4a69      	ldr	r2, [pc, #420]	; (8004e74 <HAL_I2C_Init+0x284>)
 8004cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd4:	099b      	lsrs	r3, r3, #6
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	495c      	ldr	r1, [pc, #368]	; (8004e64 <HAL_I2C_Init+0x274>)
 8004cf4:	428b      	cmp	r3, r1
 8004cf6:	d819      	bhi.n	8004d2c <HAL_I2C_Init+0x13c>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1e59      	subs	r1, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d06:	1c59      	adds	r1, r3, #1
 8004d08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d0c:	400b      	ands	r3, r1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_I2C_Init+0x138>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1e59      	subs	r1, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d20:	3301      	adds	r3, #1
 8004d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d26:	e051      	b.n	8004dcc <HAL_I2C_Init+0x1dc>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	e04f      	b.n	8004dcc <HAL_I2C_Init+0x1dc>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d111      	bne.n	8004d58 <HAL_I2C_Init+0x168>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1e58      	subs	r0, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	440b      	add	r3, r1
 8004d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d46:	3301      	adds	r3, #1
 8004d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e012      	b.n	8004d7e <HAL_I2C_Init+0x18e>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	1e58      	subs	r0, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	0099      	lsls	r1, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6e:	3301      	adds	r3, #1
 8004d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_Init+0x196>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e022      	b.n	8004dcc <HAL_I2C_Init+0x1dc>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10e      	bne.n	8004dac <HAL_I2C_Init+0x1bc>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1e58      	subs	r0, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6859      	ldr	r1, [r3, #4]
 8004d96:	460b      	mov	r3, r1
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	440b      	add	r3, r1
 8004d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004da0:	3301      	adds	r3, #1
 8004da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004daa:	e00f      	b.n	8004dcc <HAL_I2C_Init+0x1dc>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1e58      	subs	r0, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	0099      	lsls	r1, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	6809      	ldr	r1, [r1, #0]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6911      	ldr	r1, [r2, #16]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68d2      	ldr	r2, [r2, #12]
 8004e06:	4311      	orrs	r1, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	000186a0 	.word	0x000186a0
 8004e68:	001e847f 	.word	0x001e847f
 8004e6c:	003d08ff 	.word	0x003d08ff
 8004e70:	431bde83 	.word	0x431bde83
 8004e74:	10624dd3 	.word	0x10624dd3

08004e78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	813b      	strh	r3, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e92:	f7fe fd4d 	bl	8003930 <HAL_GetTick>
 8004e96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	f040 80d9 	bne.w	8005058 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	2319      	movs	r3, #25
 8004eac:	2201      	movs	r2, #1
 8004eae:	496d      	ldr	r1, [pc, #436]	; (8005064 <HAL_I2C_Mem_Write+0x1ec>)
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fa9f 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e0cc      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_I2C_Mem_Write+0x56>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e0c5      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d007      	beq.n	8004ef4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2221      	movs	r2, #33	; 0x21
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2240      	movs	r2, #64	; 0x40
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a4d      	ldr	r2, [pc, #308]	; (8005068 <HAL_I2C_Mem_Write+0x1f0>)
 8004f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f36:	88f8      	ldrh	r0, [r7, #6]
 8004f38:	893a      	ldrh	r2, [r7, #8]
 8004f3a:	8979      	ldrh	r1, [r7, #10]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4603      	mov	r3, r0
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f9be 	bl	80052c8 <I2C_RequestMemoryWrite>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d052      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e081      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fb20 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00d      	beq.n	8004f82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d107      	bne.n	8004f7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e06b      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	781a      	ldrb	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_I2C_Mem_Write+0x180>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d017      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1aa      	bne.n	8004f56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fb0c 	bl	8005622 <I2C_WaitOnBTFFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	2b04      	cmp	r3, #4
 8005016:	d107      	bne.n	8005028 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005026:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e016      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	00100002 	.word	0x00100002
 8005068:	ffff0000 	.word	0xffff0000

0800506c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	; 0x28
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	460b      	mov	r3, r1
 800507a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800507c:	f7fe fc58 	bl	8003930 <HAL_GetTick>
 8005080:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005082:	2301      	movs	r3, #1
 8005084:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b20      	cmp	r3, #32
 8005090:	f040 8111 	bne.w	80052b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	2319      	movs	r3, #25
 800509a:	2201      	movs	r2, #1
 800509c:	4988      	ldr	r1, [pc, #544]	; (80052c0 <HAL_I2C_IsDeviceReady+0x254>)
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f9a8 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
 80050ac:	e104      	b.n	80052b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_I2C_IsDeviceReady+0x50>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0fd      	b.n	80052b8 <HAL_I2C_IsDeviceReady+0x24c>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d007      	beq.n	80050e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2224      	movs	r2, #36	; 0x24
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a70      	ldr	r2, [pc, #448]	; (80052c4 <HAL_I2C_IsDeviceReady+0x258>)
 8005104:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005114:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2200      	movs	r2, #0
 800511e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f966 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513c:	d103      	bne.n	8005146 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e0b6      	b.n	80052b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800514a:	897b      	ldrh	r3, [r7, #10]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005158:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800515a:	f7fe fbe9 	bl	8003930 <HAL_GetTick>
 800515e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	bf0c      	ite	eq
 800516e:	2301      	moveq	r3, #1
 8005170:	2300      	movne	r3, #0
 8005172:	b2db      	uxtb	r3, r3
 8005174:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005184:	bf0c      	ite	eq
 8005186:	2301      	moveq	r3, #1
 8005188:	2300      	movne	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800518e:	e025      	b.n	80051dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7fe fbce 	bl	8003930 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <HAL_I2C_IsDeviceReady+0x13a>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d103      	bne.n	80051ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	22a0      	movs	r2, #160	; 0xa0
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2ba0      	cmp	r3, #160	; 0xa0
 80051e6:	d005      	beq.n	80051f4 <HAL_I2C_IsDeviceReady+0x188>
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_I2C_IsDeviceReady+0x188>
 80051ee:	7dbb      	ldrb	r3, [r7, #22]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0cd      	beq.n	8005190 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d129      	bne.n	800525e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005218:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	2319      	movs	r3, #25
 8005236:	2201      	movs	r2, #1
 8005238:	4921      	ldr	r1, [pc, #132]	; (80052c0 <HAL_I2C_IsDeviceReady+0x254>)
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f8da 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e036      	b.n	80052b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e02c      	b.n	80052b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005276:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	2319      	movs	r3, #25
 800527e:	2201      	movs	r2, #1
 8005280:	490f      	ldr	r1, [pc, #60]	; (80052c0 <HAL_I2C_IsDeviceReady+0x254>)
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f8b6 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e012      	b.n	80052b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	3301      	adds	r3, #1
 8005296:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	429a      	cmp	r2, r3
 800529e:	f4ff af32 	bcc.w	8005106 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80052b6:	2302      	movs	r3, #2
  }
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3720      	adds	r7, #32
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	00100002 	.word	0x00100002
 80052c4:	ffff0000 	.word	0xffff0000

080052c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	4608      	mov	r0, r1
 80052d2:	4611      	mov	r1, r2
 80052d4:	461a      	mov	r2, r3
 80052d6:	4603      	mov	r3, r0
 80052d8:	817b      	strh	r3, [r7, #10]
 80052da:	460b      	mov	r3, r1
 80052dc:	813b      	strh	r3, [r7, #8]
 80052de:	4613      	mov	r3, r2
 80052e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f878 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005318:	d103      	bne.n	8005322 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e05f      	b.n	80053e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005334:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	6a3a      	ldr	r2, [r7, #32]
 800533a:	492d      	ldr	r1, [pc, #180]	; (80053f0 <I2C_RequestMemoryWrite+0x128>)
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f8b0 	bl	80054a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e04c      	b.n	80053e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	6a39      	ldr	r1, [r7, #32]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f91a 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00d      	beq.n	800538e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	2b04      	cmp	r3, #4
 8005378:	d107      	bne.n	800538a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005388:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e02b      	b.n	80053e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005394:	893b      	ldrh	r3, [r7, #8]
 8005396:	b2da      	uxtb	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	611a      	str	r2, [r3, #16]
 800539e:	e021      	b.n	80053e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053a0:	893b      	ldrh	r3, [r7, #8]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b0:	6a39      	ldr	r1, [r7, #32]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f8f4 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00d      	beq.n	80053da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d107      	bne.n	80053d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e005      	b.n	80053e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053da:	893b      	ldrh	r3, [r7, #8]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	00010002 	.word	0x00010002

080053f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005404:	e025      	b.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d021      	beq.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fe fa8f 	bl	8003930 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d116      	bne.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f043 0220 	orr.w	r2, r3, #32
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e023      	b.n	800549a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	0c1b      	lsrs	r3, r3, #16
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d10d      	bne.n	8005478 <I2C_WaitOnFlagUntilTimeout+0x84>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	43da      	mvns	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4013      	ands	r3, r2
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf0c      	ite	eq
 800546e:	2301      	moveq	r3, #1
 8005470:	2300      	movne	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	e00c      	b.n	8005492 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	43da      	mvns	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4013      	ands	r3, r2
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	bf0c      	ite	eq
 800548a:	2301      	moveq	r3, #1
 800548c:	2300      	movne	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	429a      	cmp	r2, r3
 8005496:	d0b6      	beq.n	8005406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b0:	e051      	b.n	8005556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c0:	d123      	bne.n	800550a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f043 0204 	orr.w	r2, r3, #4
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e046      	b.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d021      	beq.n	8005556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fe fa0d 	bl	8003930 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d116      	bne.n	8005556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e020      	b.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10c      	bne.n	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	43da      	mvns	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4013      	ands	r3, r2
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	bf14      	ite	ne
 8005572:	2301      	movne	r3, #1
 8005574:	2300      	moveq	r3, #0
 8005576:	b2db      	uxtb	r3, r3
 8005578:	e00b      	b.n	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	43da      	mvns	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4013      	ands	r3, r2
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d18d      	bne.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ac:	e02d      	b.n	800560a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f878 	bl	80056a4 <I2C_IsAcknowledgeFailed>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e02d      	b.n	800561a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d021      	beq.n	800560a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c6:	f7fe f9b3 	bl	8003930 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d302      	bcc.n	80055dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d116      	bne.n	800560a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f043 0220 	orr.w	r2, r3, #32
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e007      	b.n	800561a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005614:	2b80      	cmp	r3, #128	; 0x80
 8005616:	d1ca      	bne.n	80055ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800562e:	e02d      	b.n	800568c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f837 	bl	80056a4 <I2C_IsAcknowledgeFailed>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e02d      	b.n	800569c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d021      	beq.n	800568c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005648:	f7fe f972 	bl	8003930 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d302      	bcc.n	800565e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d116      	bne.n	800568c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	f043 0220 	orr.w	r2, r3, #32
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e007      	b.n	800569c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b04      	cmp	r3, #4
 8005698:	d1ca      	bne.n	8005630 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ba:	d11b      	bne.n	80056f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	f043 0204 	orr.w	r2, r3, #4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b20      	cmp	r3, #32
 8005716:	d129      	bne.n	800576c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2224      	movs	r2, #36	; 0x24
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0210 	bic.w	r2, r2, #16
 800573e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b20      	cmp	r3, #32
 8005792:	d12a      	bne.n	80057ea <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2224      	movs	r2, #36	; 0x24
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0201 	bic.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80057b4:	89fb      	ldrh	r3, [r7, #14]
 80057b6:	f023 030f 	bic.w	r3, r3, #15
 80057ba:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	b29a      	uxth	r2, r3
 80057c0:	89fb      	ldrh	r3, [r7, #14]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	89fa      	ldrh	r2, [r7, #14]
 80057cc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
  }
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e0bf      	b.n	800598a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fb ff20 	bl	8001664 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800583a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6999      	ldr	r1, [r3, #24]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005850:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6899      	ldr	r1, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b4a      	ldr	r3, [pc, #296]	; (8005994 <HAL_LTDC_Init+0x19c>)
 800586c:	400b      	ands	r3, r1
 800586e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6899      	ldr	r1, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68d9      	ldr	r1, [r3, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	4b3e      	ldr	r3, [pc, #248]	; (8005994 <HAL_LTDC_Init+0x19c>)
 800589a:	400b      	ands	r3, r1
 800589c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	041b      	lsls	r3, r3, #16
 80058a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68d9      	ldr	r1, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6919      	ldr	r1, [r3, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b33      	ldr	r3, [pc, #204]	; (8005994 <HAL_LTDC_Init+0x19c>)
 80058c8:	400b      	ands	r3, r1
 80058ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6919      	ldr	r1, [r3, #16]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6959      	ldr	r1, [r3, #20]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	4b27      	ldr	r3, [pc, #156]	; (8005994 <HAL_LTDC_Init+0x19c>)
 80058f6:	400b      	ands	r3, r1
 80058f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6959      	ldr	r1, [r3, #20]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0206 	orr.w	r2, r2, #6
 8005966:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	f000f800 	.word	0xf000f800

08005998 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d023      	beq.n	8005a02 <HAL_LTDC_IRQHandler+0x6a>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01e      	beq.n	8005a02 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0204 	bic.w	r2, r2, #4
 80059d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2204      	movs	r2, #4
 80059da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059e2:	f043 0201 	orr.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2204      	movs	r2, #4
 80059f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f86f 	bl	8005ae0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d023      	beq.n	8005a54 <HAL_LTDC_IRQHandler+0xbc>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01e      	beq.n	8005a54 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0202 	bic.w	r2, r2, #2
 8005a24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a34:	f043 0202 	orr.w	r2, r3, #2
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2204      	movs	r2, #4
 8005a42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f846 	bl	8005ae0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01b      	beq.n	8005a96 <HAL_LTDC_IRQHandler+0xfe>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d016      	beq.n	8005a96 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f82f 	bl	8005af4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01b      	beq.n	8005ad8 <HAL_LTDC_IRQHandler+0x140>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0208 	bic.w	r2, r2, #8
 8005ab8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2208      	movs	r2, #8
 8005ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f818 	bl	8005b08 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b1c:	b5b0      	push	{r4, r5, r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_LTDC_ConfigLayer+0x1a>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e02c      	b.n	8005b90 <HAL_LTDC_ConfigLayer+0x74>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2202      	movs	r2, #2
 8005b42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2134      	movs	r1, #52	; 0x34
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	4413      	add	r3, r2
 8005b52:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	4614      	mov	r4, r2
 8005b5a:	461d      	mov	r5, r3
 8005b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f83b 	bl	8005bec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bdb0      	pop	{r4, r5, r7, pc}

08005b98 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_LTDC_EnableDither+0x16>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e016      	b.n	8005bdc <HAL_LTDC_EnableDither+0x44>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <HAL_LTDC_EnableDither+0x50>)
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <HAL_LTDC_EnableDither+0x50>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40016800 	.word	0x40016800

08005bec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	; 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	0c1b      	lsrs	r3, r3, #16
 8005c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c08:	4413      	add	r3, r2
 8005c0a:	041b      	lsls	r3, r3, #16
 8005c0c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	01db      	lsls	r3, r3, #7
 8005c18:	4413      	add	r3, r2
 8005c1a:	3384      	adds	r3, #132	; 0x84
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	4611      	mov	r1, r2
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	01d2      	lsls	r2, r2, #7
 8005c28:	440a      	add	r2, r1
 8005c2a:	3284      	adds	r2, #132	; 0x84
 8005c2c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c30:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	0c1b      	lsrs	r3, r3, #16
 8005c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c42:	4413      	add	r3, r2
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	01db      	lsls	r3, r3, #7
 8005c50:	440b      	add	r3, r1
 8005c52:	3384      	adds	r3, #132	; 0x84
 8005c54:	4619      	mov	r1, r3
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c6a:	4413      	add	r3, r2
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	01db      	lsls	r3, r3, #7
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3384      	adds	r3, #132	; 0x84
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	4611      	mov	r1, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	01d2      	lsls	r2, r2, #7
 8005c8a:	440a      	add	r2, r1
 8005c8c:	3284      	adds	r2, #132	; 0x84
 8005c8e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c92:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ca2:	4413      	add	r3, r2
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4619      	mov	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	01db      	lsls	r3, r3, #7
 8005cb0:	440b      	add	r3, r1
 8005cb2:	3384      	adds	r3, #132	; 0x84
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	01db      	lsls	r3, r3, #7
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3384      	adds	r3, #132	; 0x84
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	01d2      	lsls	r2, r2, #7
 8005cd6:	440a      	add	r2, r1
 8005cd8:	3284      	adds	r2, #132	; 0x84
 8005cda:	f023 0307 	bic.w	r3, r3, #7
 8005cde:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	01db      	lsls	r3, r3, #7
 8005cea:	4413      	add	r3, r2
 8005cec:	3384      	adds	r3, #132	; 0x84
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	061b      	lsls	r3, r3, #24
 8005d10:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	01db      	lsls	r3, r3, #7
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3384      	adds	r3, #132	; 0x84
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	01db      	lsls	r3, r3, #7
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3384      	adds	r3, #132	; 0x84
 8005d30:	461a      	mov	r2, r3
 8005d32:	2300      	movs	r3, #0
 8005d34:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	01db      	lsls	r3, r3, #7
 8005d50:	440b      	add	r3, r1
 8005d52:	3384      	adds	r3, #132	; 0x84
 8005d54:	4619      	mov	r1, r3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	01db      	lsls	r3, r3, #7
 8005d66:	4413      	add	r3, r2
 8005d68:	3384      	adds	r3, #132	; 0x84
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	4611      	mov	r1, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	01d2      	lsls	r2, r2, #7
 8005d76:	440a      	add	r2, r1
 8005d78:	3284      	adds	r2, #132	; 0x84
 8005d7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d7e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	01db      	lsls	r3, r3, #7
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3384      	adds	r3, #132	; 0x84
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	01db      	lsls	r3, r3, #7
 8005da0:	4413      	add	r3, r2
 8005da2:	3384      	adds	r3, #132	; 0x84
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	4611      	mov	r1, r2
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	01d2      	lsls	r2, r2, #7
 8005db0:	440a      	add	r2, r1
 8005db2:	3284      	adds	r2, #132	; 0x84
 8005db4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005db8:	f023 0307 	bic.w	r3, r3, #7
 8005dbc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	69da      	ldr	r2, [r3, #28]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	68f9      	ldr	r1, [r7, #12]
 8005dc8:	6809      	ldr	r1, [r1, #0]
 8005dca:	4608      	mov	r0, r1
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	01c9      	lsls	r1, r1, #7
 8005dd0:	4401      	add	r1, r0
 8005dd2:	3184      	adds	r1, #132	; 0x84
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	01db      	lsls	r3, r3, #7
 8005de2:	4413      	add	r3, r2
 8005de4:	3384      	adds	r3, #132	; 0x84
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	01db      	lsls	r3, r3, #7
 8005df2:	4413      	add	r3, r2
 8005df4:	3384      	adds	r3, #132	; 0x84
 8005df6:	461a      	mov	r2, r3
 8005df8:	2300      	movs	r3, #0
 8005dfa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	01db      	lsls	r3, r3, #7
 8005e06:	4413      	add	r3, r2
 8005e08:	3384      	adds	r3, #132	; 0x84
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d102      	bne.n	8005e20 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005e1a:	2304      	movs	r3, #4
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	e01b      	b.n	8005e58 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d102      	bne.n	8005e2e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	61fb      	str	r3, [r7, #28]
 8005e2c:	e014      	b.n	8005e58 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d00b      	beq.n	8005e4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d007      	beq.n	8005e4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d003      	beq.n	8005e4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e4a:	2b07      	cmp	r3, #7
 8005e4c:	d102      	bne.n	8005e54 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005e4e:	2302      	movs	r3, #2
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	e001      	b.n	8005e58 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005e54:	2301      	movs	r3, #1
 8005e56:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	01db      	lsls	r3, r3, #7
 8005e62:	4413      	add	r3, r2
 8005e64:	3384      	adds	r3, #132	; 0x84
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	01d2      	lsls	r2, r2, #7
 8005e72:	440a      	add	r2, r1
 8005e74:	3284      	adds	r2, #132	; 0x84
 8005e76:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	041a      	lsls	r2, r3, #16
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	6859      	ldr	r1, [r3, #4]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	1acb      	subs	r3, r1, r3
 8005e92:	69f9      	ldr	r1, [r7, #28]
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	3303      	adds	r3, #3
 8005e9a:	68f9      	ldr	r1, [r7, #12]
 8005e9c:	6809      	ldr	r1, [r1, #0]
 8005e9e:	4608      	mov	r0, r1
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	01c9      	lsls	r1, r1, #7
 8005ea4:	4401      	add	r1, r0
 8005ea6:	3184      	adds	r1, #132	; 0x84
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	01db      	lsls	r3, r3, #7
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3384      	adds	r3, #132	; 0x84
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	01d2      	lsls	r2, r2, #7
 8005ec6:	440a      	add	r2, r1
 8005ec8:	3284      	adds	r2, #132	; 0x84
 8005eca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ece:	f023 0307 	bic.w	r3, r3, #7
 8005ed2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	01db      	lsls	r3, r3, #7
 8005ede:	4413      	add	r3, r2
 8005ee0:	3384      	adds	r3, #132	; 0x84
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	01db      	lsls	r3, r3, #7
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3384      	adds	r3, #132	; 0x84
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	4611      	mov	r1, r2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	01d2      	lsls	r2, r2, #7
 8005f04:	440a      	add	r2, r1
 8005f06:	3284      	adds	r2, #132	; 0x84
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	6013      	str	r3, [r2, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	3724      	adds	r7, #36	; 0x24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
	...

08005f1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f26:	2300      	movs	r3, #0
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	4b20      	ldr	r3, [pc, #128]	; (8005fac <HAL_PWREx_EnableOverDrive+0x90>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	4a1f      	ldr	r2, [pc, #124]	; (8005fac <HAL_PWREx_EnableOverDrive+0x90>)
 8005f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f34:	6413      	str	r3, [r2, #64]	; 0x40
 8005f36:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <HAL_PWREx_EnableOverDrive+0x90>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f42:	4b1b      	ldr	r3, [pc, #108]	; (8005fb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f48:	f7fd fcf2 	bl	8003930 <HAL_GetTick>
 8005f4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f4e:	e009      	b.n	8005f64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f50:	f7fd fcee 	bl	8003930 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5e:	d901      	bls.n	8005f64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e01f      	b.n	8005fa4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f64:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f70:	d1ee      	bne.n	8005f50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f72:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f78:	f7fd fcda 	bl	8003930 <HAL_GetTick>
 8005f7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f7e:	e009      	b.n	8005f94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f80:	f7fd fcd6 	bl	8003930 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f8e:	d901      	bls.n	8005f94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e007      	b.n	8005fa4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa0:	d1ee      	bne.n	8005f80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	420e0040 	.word	0x420e0040
 8005fb4:	40007000 	.word	0x40007000
 8005fb8:	420e0044 	.word	0x420e0044

08005fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e25b      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d075      	beq.n	80060c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fda:	4ba3      	ldr	r3, [pc, #652]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 030c 	and.w	r3, r3, #12
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d00c      	beq.n	8006000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fe6:	4ba0      	ldr	r3, [pc, #640]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d112      	bne.n	8006018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ff2:	4b9d      	ldr	r3, [pc, #628]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ffe:	d10b      	bne.n	8006018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006000:	4b99      	ldr	r3, [pc, #612]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d05b      	beq.n	80060c4 <HAL_RCC_OscConfig+0x108>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d157      	bne.n	80060c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e236      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006020:	d106      	bne.n	8006030 <HAL_RCC_OscConfig+0x74>
 8006022:	4b91      	ldr	r3, [pc, #580]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a90      	ldr	r2, [pc, #576]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	e01d      	b.n	800606c <HAL_RCC_OscConfig+0xb0>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006038:	d10c      	bne.n	8006054 <HAL_RCC_OscConfig+0x98>
 800603a:	4b8b      	ldr	r3, [pc, #556]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a8a      	ldr	r2, [pc, #552]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	4b88      	ldr	r3, [pc, #544]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a87      	ldr	r2, [pc, #540]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 800604c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	e00b      	b.n	800606c <HAL_RCC_OscConfig+0xb0>
 8006054:	4b84      	ldr	r3, [pc, #528]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a83      	ldr	r2, [pc, #524]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 800605a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	4b81      	ldr	r3, [pc, #516]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a80      	ldr	r2, [pc, #512]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800606a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d013      	beq.n	800609c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006074:	f7fd fc5c 	bl	8003930 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800607c:	f7fd fc58 	bl	8003930 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b64      	cmp	r3, #100	; 0x64
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e1fb      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608e:	4b76      	ldr	r3, [pc, #472]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0f0      	beq.n	800607c <HAL_RCC_OscConfig+0xc0>
 800609a:	e014      	b.n	80060c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609c:	f7fd fc48 	bl	8003930 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060a4:	f7fd fc44 	bl	8003930 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b64      	cmp	r3, #100	; 0x64
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e1e7      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060b6:	4b6c      	ldr	r3, [pc, #432]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f0      	bne.n	80060a4 <HAL_RCC_OscConfig+0xe8>
 80060c2:	e000      	b.n	80060c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d063      	beq.n	800619a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060d2:	4b65      	ldr	r3, [pc, #404]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 030c 	and.w	r3, r3, #12
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060de:	4b62      	ldr	r3, [pc, #392]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	d11c      	bne.n	8006124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ea:	4b5f      	ldr	r3, [pc, #380]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d116      	bne.n	8006124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060f6:	4b5c      	ldr	r3, [pc, #368]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_RCC_OscConfig+0x152>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d001      	beq.n	800610e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e1bb      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610e:	4b56      	ldr	r3, [pc, #344]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4952      	ldr	r1, [pc, #328]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 800611e:	4313      	orrs	r3, r2
 8006120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006122:	e03a      	b.n	800619a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d020      	beq.n	800616e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800612c:	4b4f      	ldr	r3, [pc, #316]	; (800626c <HAL_RCC_OscConfig+0x2b0>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006132:	f7fd fbfd 	bl	8003930 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800613a:	f7fd fbf9 	bl	8003930 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e19c      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800614c:	4b46      	ldr	r3, [pc, #280]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0f0      	beq.n	800613a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006158:	4b43      	ldr	r3, [pc, #268]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4940      	ldr	r1, [pc, #256]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006168:	4313      	orrs	r3, r2
 800616a:	600b      	str	r3, [r1, #0]
 800616c:	e015      	b.n	800619a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800616e:	4b3f      	ldr	r3, [pc, #252]	; (800626c <HAL_RCC_OscConfig+0x2b0>)
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fd fbdc 	bl	8003930 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800617c:	f7fd fbd8 	bl	8003930 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e17b      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800618e:	4b36      	ldr	r3, [pc, #216]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f0      	bne.n	800617c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d030      	beq.n	8006208 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d016      	beq.n	80061dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ae:	4b30      	ldr	r3, [pc, #192]	; (8006270 <HAL_RCC_OscConfig+0x2b4>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b4:	f7fd fbbc 	bl	8003930 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061bc:	f7fd fbb8 	bl	8003930 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e15b      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ce:	4b26      	ldr	r3, [pc, #152]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 80061d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0f0      	beq.n	80061bc <HAL_RCC_OscConfig+0x200>
 80061da:	e015      	b.n	8006208 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061dc:	4b24      	ldr	r3, [pc, #144]	; (8006270 <HAL_RCC_OscConfig+0x2b4>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061e2:	f7fd fba5 	bl	8003930 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ea:	f7fd fba1 	bl	8003930 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e144      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061fc:	4b1a      	ldr	r3, [pc, #104]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 80061fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f0      	bne.n	80061ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 80a0 	beq.w	8006356 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800621a:	4b13      	ldr	r3, [pc, #76]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10f      	bne.n	8006246 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006226:	2300      	movs	r3, #0
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	4a0e      	ldr	r2, [pc, #56]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006234:	6413      	str	r3, [r2, #64]	; 0x40
 8006236:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <HAL_RCC_OscConfig+0x2ac>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623e:	60bb      	str	r3, [r7, #8]
 8006240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006242:	2301      	movs	r3, #1
 8006244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_RCC_OscConfig+0x2b8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d121      	bne.n	8006296 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <HAL_RCC_OscConfig+0x2b8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a07      	ldr	r2, [pc, #28]	; (8006274 <HAL_RCC_OscConfig+0x2b8>)
 8006258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800625c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800625e:	f7fd fb67 	bl	8003930 <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006264:	e011      	b.n	800628a <HAL_RCC_OscConfig+0x2ce>
 8006266:	bf00      	nop
 8006268:	40023800 	.word	0x40023800
 800626c:	42470000 	.word	0x42470000
 8006270:	42470e80 	.word	0x42470e80
 8006274:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006278:	f7fd fb5a 	bl	8003930 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e0fd      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800628a:	4b81      	ldr	r3, [pc, #516]	; (8006490 <HAL_RCC_OscConfig+0x4d4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d106      	bne.n	80062ac <HAL_RCC_OscConfig+0x2f0>
 800629e:	4b7d      	ldr	r3, [pc, #500]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	4a7c      	ldr	r2, [pc, #496]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	6713      	str	r3, [r2, #112]	; 0x70
 80062aa:	e01c      	b.n	80062e6 <HAL_RCC_OscConfig+0x32a>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	d10c      	bne.n	80062ce <HAL_RCC_OscConfig+0x312>
 80062b4:	4b77      	ldr	r3, [pc, #476]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b8:	4a76      	ldr	r2, [pc, #472]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062ba:	f043 0304 	orr.w	r3, r3, #4
 80062be:	6713      	str	r3, [r2, #112]	; 0x70
 80062c0:	4b74      	ldr	r3, [pc, #464]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	4a73      	ldr	r2, [pc, #460]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	6713      	str	r3, [r2, #112]	; 0x70
 80062cc:	e00b      	b.n	80062e6 <HAL_RCC_OscConfig+0x32a>
 80062ce:	4b71      	ldr	r3, [pc, #452]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	4a70      	ldr	r2, [pc, #448]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	6713      	str	r3, [r2, #112]	; 0x70
 80062da:	4b6e      	ldr	r3, [pc, #440]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	4a6d      	ldr	r2, [pc, #436]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062e0:	f023 0304 	bic.w	r3, r3, #4
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d015      	beq.n	800631a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ee:	f7fd fb1f 	bl	8003930 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f4:	e00a      	b.n	800630c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f6:	f7fd fb1b 	bl	8003930 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	f241 3288 	movw	r2, #5000	; 0x1388
 8006304:	4293      	cmp	r3, r2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e0bc      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800630c:	4b61      	ldr	r3, [pc, #388]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0ee      	beq.n	80062f6 <HAL_RCC_OscConfig+0x33a>
 8006318:	e014      	b.n	8006344 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800631a:	f7fd fb09 	bl	8003930 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006320:	e00a      	b.n	8006338 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006322:	f7fd fb05 	bl	8003930 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006330:	4293      	cmp	r3, r2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e0a6      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006338:	4b56      	ldr	r3, [pc, #344]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800633a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ee      	bne.n	8006322 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d105      	bne.n	8006356 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800634a:	4b52      	ldr	r3, [pc, #328]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	4a51      	ldr	r2, [pc, #324]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006354:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8092 	beq.w	8006484 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006360:	4b4c      	ldr	r3, [pc, #304]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 030c 	and.w	r3, r3, #12
 8006368:	2b08      	cmp	r3, #8
 800636a:	d05c      	beq.n	8006426 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d141      	bne.n	80063f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006374:	4b48      	ldr	r3, [pc, #288]	; (8006498 <HAL_RCC_OscConfig+0x4dc>)
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637a:	f7fd fad9 	bl	8003930 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006382:	f7fd fad5 	bl	8003930 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e078      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006394:	4b3f      	ldr	r3, [pc, #252]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f0      	bne.n	8006382 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	019b      	lsls	r3, r3, #6
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	085b      	lsrs	r3, r3, #1
 80063b8:	3b01      	subs	r3, #1
 80063ba:	041b      	lsls	r3, r3, #16
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	061b      	lsls	r3, r3, #24
 80063c4:	4933      	ldr	r1, [pc, #204]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063ca:	4b33      	ldr	r3, [pc, #204]	; (8006498 <HAL_RCC_OscConfig+0x4dc>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d0:	f7fd faae 	bl	8003930 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d8:	f7fd faaa 	bl	8003930 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e04d      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ea:	4b2a      	ldr	r3, [pc, #168]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0f0      	beq.n	80063d8 <HAL_RCC_OscConfig+0x41c>
 80063f6:	e045      	b.n	8006484 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f8:	4b27      	ldr	r3, [pc, #156]	; (8006498 <HAL_RCC_OscConfig+0x4dc>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063fe:	f7fd fa97 	bl	8003930 <HAL_GetTick>
 8006402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006404:	e008      	b.n	8006418 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006406:	f7fd fa93 	bl	8003930 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e036      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006418:	4b1e      	ldr	r3, [pc, #120]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f0      	bne.n	8006406 <HAL_RCC_OscConfig+0x44a>
 8006424:	e02e      	b.n	8006484 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e029      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006432:	4b18      	ldr	r3, [pc, #96]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	429a      	cmp	r2, r3
 8006444:	d11c      	bne.n	8006480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006450:	429a      	cmp	r2, r3
 8006452:	d115      	bne.n	8006480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800645a:	4013      	ands	r3, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006460:	4293      	cmp	r3, r2
 8006462:	d10d      	bne.n	8006480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800646e:	429a      	cmp	r2, r3
 8006470:	d106      	bne.n	8006480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800647c:	429a      	cmp	r2, r3
 800647e:	d001      	beq.n	8006484 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40007000 	.word	0x40007000
 8006494:	40023800 	.word	0x40023800
 8006498:	42470060 	.word	0x42470060

0800649c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e0cc      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064b0:	4b68      	ldr	r3, [pc, #416]	; (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d90c      	bls.n	80064d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064be:	4b65      	ldr	r3, [pc, #404]	; (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c6:	4b63      	ldr	r3, [pc, #396]	; (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d001      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0b8      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d020      	beq.n	8006526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064f0:	4b59      	ldr	r3, [pc, #356]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	4a58      	ldr	r2, [pc, #352]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006508:	4b53      	ldr	r3, [pc, #332]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4a52      	ldr	r2, [pc, #328]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006514:	4b50      	ldr	r3, [pc, #320]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	494d      	ldr	r1, [pc, #308]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	4313      	orrs	r3, r2
 8006524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d044      	beq.n	80065bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d107      	bne.n	800654a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653a:	4b47      	ldr	r3, [pc, #284]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d119      	bne.n	800657a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e07f      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d003      	beq.n	800655a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006556:	2b03      	cmp	r3, #3
 8006558:	d107      	bne.n	800656a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800655a:	4b3f      	ldr	r3, [pc, #252]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e06f      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656a:	4b3b      	ldr	r3, [pc, #236]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e067      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800657a:	4b37      	ldr	r3, [pc, #220]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f023 0203 	bic.w	r2, r3, #3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	4934      	ldr	r1, [pc, #208]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 8006588:	4313      	orrs	r3, r2
 800658a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800658c:	f7fd f9d0 	bl	8003930 <HAL_GetTick>
 8006590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006592:	e00a      	b.n	80065aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006594:	f7fd f9cc 	bl	8003930 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e04f      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065aa:	4b2b      	ldr	r3, [pc, #172]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 020c 	and.w	r2, r3, #12
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d1eb      	bne.n	8006594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065bc:	4b25      	ldr	r3, [pc, #148]	; (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d20c      	bcs.n	80065e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ca:	4b22      	ldr	r3, [pc, #136]	; (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d2:	4b20      	ldr	r3, [pc, #128]	; (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d001      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e032      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065f0:	4b19      	ldr	r3, [pc, #100]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	4916      	ldr	r1, [pc, #88]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800660e:	4b12      	ldr	r3, [pc, #72]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	490e      	ldr	r1, [pc, #56]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	4313      	orrs	r3, r2
 8006620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006622:	f000 f821 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 8006626:	4602      	mov	r2, r0
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	091b      	lsrs	r3, r3, #4
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	490a      	ldr	r1, [pc, #40]	; (800665c <HAL_RCC_ClockConfig+0x1c0>)
 8006634:	5ccb      	ldrb	r3, [r1, r3]
 8006636:	fa22 f303 	lsr.w	r3, r2, r3
 800663a:	4a09      	ldr	r2, [pc, #36]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 800663c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800663e:	4b09      	ldr	r3, [pc, #36]	; (8006664 <HAL_RCC_ClockConfig+0x1c8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f7fb fba0 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40023c00 	.word	0x40023c00
 8006658:	40023800 	.word	0x40023800
 800665c:	0800e7a0 	.word	0x0800e7a0
 8006660:	20000000 	.word	0x20000000
 8006664:	2000005c 	.word	0x2000005c

08006668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	607b      	str	r3, [r7, #4]
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	2300      	movs	r3, #0
 800667a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006680:	4b67      	ldr	r3, [pc, #412]	; (8006820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 030c 	and.w	r3, r3, #12
 8006688:	2b08      	cmp	r3, #8
 800668a:	d00d      	beq.n	80066a8 <HAL_RCC_GetSysClockFreq+0x40>
 800668c:	2b08      	cmp	r3, #8
 800668e:	f200 80bd 	bhi.w	800680c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <HAL_RCC_GetSysClockFreq+0x34>
 8006696:	2b04      	cmp	r3, #4
 8006698:	d003      	beq.n	80066a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800669a:	e0b7      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800669c:	4b61      	ldr	r3, [pc, #388]	; (8006824 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800669e:	60bb      	str	r3, [r7, #8]
       break;
 80066a0:	e0b7      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066a2:	4b61      	ldr	r3, [pc, #388]	; (8006828 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80066a4:	60bb      	str	r3, [r7, #8]
      break;
 80066a6:	e0b4      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066a8:	4b5d      	ldr	r3, [pc, #372]	; (8006820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066b2:	4b5b      	ldr	r3, [pc, #364]	; (8006820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d04d      	beq.n	800675a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066be:	4b58      	ldr	r3, [pc, #352]	; (8006820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	099b      	lsrs	r3, r3, #6
 80066c4:	461a      	mov	r2, r3
 80066c6:	f04f 0300 	mov.w	r3, #0
 80066ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80066ce:	f04f 0100 	mov.w	r1, #0
 80066d2:	ea02 0800 	and.w	r8, r2, r0
 80066d6:	ea03 0901 	and.w	r9, r3, r1
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	014b      	lsls	r3, r1, #5
 80066e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80066ec:	0142      	lsls	r2, r0, #5
 80066ee:	4610      	mov	r0, r2
 80066f0:	4619      	mov	r1, r3
 80066f2:	ebb0 0008 	subs.w	r0, r0, r8
 80066f6:	eb61 0109 	sbc.w	r1, r1, r9
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	018b      	lsls	r3, r1, #6
 8006704:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006708:	0182      	lsls	r2, r0, #6
 800670a:	1a12      	subs	r2, r2, r0
 800670c:	eb63 0301 	sbc.w	r3, r3, r1
 8006710:	f04f 0000 	mov.w	r0, #0
 8006714:	f04f 0100 	mov.w	r1, #0
 8006718:	00d9      	lsls	r1, r3, #3
 800671a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800671e:	00d0      	lsls	r0, r2, #3
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	eb12 0208 	adds.w	r2, r2, r8
 8006728:	eb43 0309 	adc.w	r3, r3, r9
 800672c:	f04f 0000 	mov.w	r0, #0
 8006730:	f04f 0100 	mov.w	r1, #0
 8006734:	0259      	lsls	r1, r3, #9
 8006736:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800673a:	0250      	lsls	r0, r2, #9
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4610      	mov	r0, r2
 8006742:	4619      	mov	r1, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	461a      	mov	r2, r3
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	f7fa fa3c 	bl	8000bc8 <__aeabi_uldivmod>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4613      	mov	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e04a      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800675a:	4b31      	ldr	r3, [pc, #196]	; (8006820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	099b      	lsrs	r3, r3, #6
 8006760:	461a      	mov	r2, r3
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800676a:	f04f 0100 	mov.w	r1, #0
 800676e:	ea02 0400 	and.w	r4, r2, r0
 8006772:	ea03 0501 	and.w	r5, r3, r1
 8006776:	4620      	mov	r0, r4
 8006778:	4629      	mov	r1, r5
 800677a:	f04f 0200 	mov.w	r2, #0
 800677e:	f04f 0300 	mov.w	r3, #0
 8006782:	014b      	lsls	r3, r1, #5
 8006784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006788:	0142      	lsls	r2, r0, #5
 800678a:	4610      	mov	r0, r2
 800678c:	4619      	mov	r1, r3
 800678e:	1b00      	subs	r0, r0, r4
 8006790:	eb61 0105 	sbc.w	r1, r1, r5
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	018b      	lsls	r3, r1, #6
 800679e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067a2:	0182      	lsls	r2, r0, #6
 80067a4:	1a12      	subs	r2, r2, r0
 80067a6:	eb63 0301 	sbc.w	r3, r3, r1
 80067aa:	f04f 0000 	mov.w	r0, #0
 80067ae:	f04f 0100 	mov.w	r1, #0
 80067b2:	00d9      	lsls	r1, r3, #3
 80067b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067b8:	00d0      	lsls	r0, r2, #3
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	1912      	adds	r2, r2, r4
 80067c0:	eb45 0303 	adc.w	r3, r5, r3
 80067c4:	f04f 0000 	mov.w	r0, #0
 80067c8:	f04f 0100 	mov.w	r1, #0
 80067cc:	0299      	lsls	r1, r3, #10
 80067ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80067d2:	0290      	lsls	r0, r2, #10
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4610      	mov	r0, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	461a      	mov	r2, r3
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	f7fa f9f0 	bl	8000bc8 <__aeabi_uldivmod>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4613      	mov	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067f0:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	0c1b      	lsrs	r3, r3, #16
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	3301      	adds	r3, #1
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	fbb2 f3f3 	udiv	r3, r2, r3
 8006808:	60bb      	str	r3, [r7, #8]
      break;
 800680a:	e002      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800680e:	60bb      	str	r3, [r7, #8]
      break;
 8006810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006812:	68bb      	ldr	r3, [r7, #8]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800681e:	bf00      	nop
 8006820:	40023800 	.word	0x40023800
 8006824:	00f42400 	.word	0x00f42400
 8006828:	007a1200 	.word	0x007a1200

0800682c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006830:	4b03      	ldr	r3, [pc, #12]	; (8006840 <HAL_RCC_GetHCLKFreq+0x14>)
 8006832:	681b      	ldr	r3, [r3, #0]
}
 8006834:	4618      	mov	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000000 	.word	0x20000000

08006844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006848:	f7ff fff0 	bl	800682c <HAL_RCC_GetHCLKFreq>
 800684c:	4602      	mov	r2, r0
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	0a9b      	lsrs	r3, r3, #10
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	4903      	ldr	r1, [pc, #12]	; (8006868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800685a:	5ccb      	ldrb	r3, [r1, r3]
 800685c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006860:	4618      	mov	r0, r3
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40023800 	.word	0x40023800
 8006868:	0800e7b0 	.word	0x0800e7b0

0800686c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006870:	f7ff ffdc 	bl	800682c <HAL_RCC_GetHCLKFreq>
 8006874:	4602      	mov	r2, r0
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	0b5b      	lsrs	r3, r3, #13
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	4903      	ldr	r1, [pc, #12]	; (8006890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006882:	5ccb      	ldrb	r3, [r1, r3]
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40023800 	.word	0x40023800
 8006890:	0800e7b0 	.word	0x0800e7b0

08006894 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	220f      	movs	r2, #15
 80068a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068a4:	4b12      	ldr	r3, [pc, #72]	; (80068f0 <HAL_RCC_GetClockConfig+0x5c>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0203 	and.w	r2, r3, #3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068b0:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <HAL_RCC_GetClockConfig+0x5c>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068bc:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <HAL_RCC_GetClockConfig+0x5c>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80068c8:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <HAL_RCC_GetClockConfig+0x5c>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	08db      	lsrs	r3, r3, #3
 80068ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80068d6:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <HAL_RCC_GetClockConfig+0x60>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 020f 	and.w	r2, r3, #15
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	601a      	str	r2, [r3, #0]
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40023800 	.word	0x40023800
 80068f4:	40023c00 	.word	0x40023c00

080068f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10b      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800691c:	2b00      	cmp	r3, #0
 800691e:	d105      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006928:	2b00      	cmp	r3, #0
 800692a:	d075      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800692c:	4bad      	ldr	r3, [pc, #692]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006932:	f7fc fffd 	bl	8003930 <HAL_GetTick>
 8006936:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006938:	e008      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800693a:	f7fc fff9 	bl	8003930 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d901      	bls.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e18b      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800694c:	4ba6      	ldr	r3, [pc, #664]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1f0      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	019a      	lsls	r2, r3, #6
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	071b      	lsls	r3, r3, #28
 8006970:	499d      	ldr	r1, [pc, #628]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01f      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006984:	4b98      	ldr	r3, [pc, #608]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800698a:	0f1b      	lsrs	r3, r3, #28
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	019a      	lsls	r2, r3, #6
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	061b      	lsls	r3, r3, #24
 800699e:	431a      	orrs	r2, r3
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	071b      	lsls	r3, r3, #28
 80069a4:	4990      	ldr	r1, [pc, #576]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069ac:	4b8e      	ldr	r3, [pc, #568]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b2:	f023 021f 	bic.w	r2, r3, #31
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	498a      	ldr	r1, [pc, #552]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00d      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	019a      	lsls	r2, r3, #6
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	061b      	lsls	r3, r3, #24
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	071b      	lsls	r3, r3, #28
 80069e4:	4980      	ldr	r1, [pc, #512]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069ec:	4b7d      	ldr	r3, [pc, #500]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80069ee:	2201      	movs	r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069f2:	f7fc ff9d 	bl	8003930 <HAL_GetTick>
 80069f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069f8:	e008      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069fa:	f7fc ff99 	bl	8003930 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e12b      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a0c:	4b76      	ldr	r3, [pc, #472]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0f0      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d105      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d079      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a30:	4b6e      	ldr	r3, [pc, #440]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a36:	f7fc ff7b 	bl	8003930 <HAL_GetTick>
 8006a3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a3c:	e008      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006a3e:	f7fc ff77 	bl	8003930 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e109      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a50:	4b65      	ldr	r3, [pc, #404]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a5c:	d0ef      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d020      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a6a:	4b5f      	ldr	r3, [pc, #380]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a70:	0f1b      	lsrs	r3, r3, #28
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	019a      	lsls	r2, r3, #6
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	061b      	lsls	r3, r3, #24
 8006a84:	431a      	orrs	r2, r3
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	071b      	lsls	r3, r3, #28
 8006a8a:	4957      	ldr	r1, [pc, #348]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a92:	4b55      	ldr	r3, [pc, #340]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	4950      	ldr	r1, [pc, #320]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01e      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ab8:	4b4b      	ldr	r3, [pc, #300]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abe:	0e1b      	lsrs	r3, r3, #24
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	019a      	lsls	r2, r3, #6
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	061b      	lsls	r3, r3, #24
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	071b      	lsls	r3, r3, #28
 8006ad8:	4943      	ldr	r1, [pc, #268]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ae0:	4b41      	ldr	r3, [pc, #260]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	493e      	ldr	r1, [pc, #248]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006af6:	4b3d      	ldr	r3, [pc, #244]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006afc:	f7fc ff18 	bl	8003930 <HAL_GetTick>
 8006b00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b02:	e008      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006b04:	f7fc ff14 	bl	8003930 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e0a6      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b16:	4b34      	ldr	r3, [pc, #208]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b22:	d1ef      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 808d 	beq.w	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	4b2c      	ldr	r3, [pc, #176]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	4a2b      	ldr	r2, [pc, #172]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b40:	6413      	str	r3, [r2, #64]	; 0x40
 8006b42:	4b29      	ldr	r3, [pc, #164]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b4e:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a27      	ldr	r2, [pc, #156]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b5a:	f7fc fee9 	bl	8003930 <HAL_GetTick>
 8006b5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b60:	e008      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b62:	f7fc fee5 	bl	8003930 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e077      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b74:	4b1e      	ldr	r3, [pc, #120]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0f0      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b80:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d039      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d032      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b9e:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ba8:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006baa:	2201      	movs	r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bae:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bb4:	4a0c      	ldr	r2, [pc, #48]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bba:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d11e      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bc6:	f7fc feb3 	bl	8003930 <HAL_GetTick>
 8006bca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bcc:	e014      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bce:	f7fc feaf 	bl	8003930 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d90b      	bls.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e03f      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006be4:	42470068 	.word	0x42470068
 8006be8:	40023800 	.word	0x40023800
 8006bec:	42470070 	.word	0x42470070
 8006bf0:	40007000 	.word	0x40007000
 8006bf4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bf8:	4b1c      	ldr	r3, [pc, #112]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0e4      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c10:	d10d      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006c12:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c26:	4911      	ldr	r1, [pc, #68]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	608b      	str	r3, [r1, #8]
 8006c2c:	e005      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	4a0e      	ldr	r2, [pc, #56]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c38:	6093      	str	r3, [r2, #8]
 8006c3a:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c46:	4909      	ldr	r1, [pc, #36]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0310 	and.w	r3, r3, #16
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006c5e:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006c60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	424711e0 	.word	0x424711e0

08006c74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e025      	b.n	8006cd4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d106      	bne.n	8006ca2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7fa fa4b 	bl	8001138 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	f002 f901 	bl	8008ebc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	f002 f96c 	bl	8008fa2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d101      	bne.n	8006cf8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e018      	b.n	8006d2a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f002 f9c9 	bl	80090a0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d104      	bne.n	8006d20 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2205      	movs	r2, #5
 8006d1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006d1e:	e003      	b.n	8006d28 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d101      	bne.n	8006d4c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e00e      	b.n	8006d6a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f002 f9dc 	bl	8009118 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e056      	b.n	8006e32 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fa ff60 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de0:	431a      	orrs	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	ea42 0103 	orr.w	r1, r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	0c1b      	lsrs	r3, r3, #16
 8006e02:	f003 0104 	and.w	r1, r3, #4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e01a      	b.n	8006e82 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e62:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fa ff45 	bl	8001cf4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b088      	sub	sp, #32
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	603b      	str	r3, [r7, #0]
 8006e96:	4613      	mov	r3, r2
 8006e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_SPI_Transmit+0x22>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e11e      	b.n	80070ea <HAL_SPI_Transmit+0x260>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eb4:	f7fc fd3c 	bl	8003930 <HAL_GetTick>
 8006eb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d002      	beq.n	8006ed0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ece:	e103      	b.n	80070d8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <HAL_SPI_Transmit+0x52>
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ee0:	e0fa      	b.n	80070d8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	88fa      	ldrh	r2, [r7, #6]
 8006efa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	88fa      	ldrh	r2, [r7, #6]
 8006f00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f28:	d107      	bne.n	8006f3a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d007      	beq.n	8006f58 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f60:	d14b      	bne.n	8006ffa <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <HAL_SPI_Transmit+0xe6>
 8006f6a:	8afb      	ldrh	r3, [r7, #22]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d13e      	bne.n	8006fee <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	881a      	ldrh	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	1c9a      	adds	r2, r3, #2
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f94:	e02b      	b.n	8006fee <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d112      	bne.n	8006fca <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa8:	881a      	ldrh	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	1c9a      	adds	r2, r3, #2
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fc8:	e011      	b.n	8006fee <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fca:	f7fc fcb1 	bl	8003930 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d803      	bhi.n	8006fe2 <HAL_SPI_Transmit+0x158>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d102      	bne.n	8006fe8 <HAL_SPI_Transmit+0x15e>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fec:	e074      	b.n	80070d8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1ce      	bne.n	8006f96 <HAL_SPI_Transmit+0x10c>
 8006ff8:	e04c      	b.n	8007094 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_SPI_Transmit+0x17e>
 8007002:	8afb      	ldrh	r3, [r7, #22]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d140      	bne.n	800708a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	330c      	adds	r3, #12
 8007012:	7812      	ldrb	r2, [r2, #0]
 8007014:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800702e:	e02c      	b.n	800708a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b02      	cmp	r3, #2
 800703c:	d113      	bne.n	8007066 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	330c      	adds	r3, #12
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	86da      	strh	r2, [r3, #54]	; 0x36
 8007064:	e011      	b.n	800708a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007066:	f7fc fc63 	bl	8003930 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d803      	bhi.n	800707e <HAL_SPI_Transmit+0x1f4>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707c:	d102      	bne.n	8007084 <HAL_SPI_Transmit+0x1fa>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007088:	e026      	b.n	80070d8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1cd      	bne.n	8007030 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 fbb3 	bl	8007804 <SPI_EndRxTxTransaction>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2220      	movs	r2, #32
 80070a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070b2:	2300      	movs	r3, #0
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	613b      	str	r3, [r7, #16]
 80070c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e000      	b.n	80070d8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80070d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3720      	adds	r7, #32
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b088      	sub	sp, #32
 80070f6:	af02      	add	r7, sp, #8
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	603b      	str	r3, [r7, #0]
 80070fe:	4613      	mov	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800710e:	d112      	bne.n	8007136 <HAL_SPI_Receive+0x44>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10e      	bne.n	8007136 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2204      	movs	r2, #4
 800711c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007120:	88fa      	ldrh	r2, [r7, #6]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	4613      	mov	r3, r2
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f8e9 	bl	8007304 <HAL_SPI_TransmitReceive>
 8007132:	4603      	mov	r3, r0
 8007134:	e0e2      	b.n	80072fc <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_SPI_Receive+0x52>
 8007140:	2302      	movs	r3, #2
 8007142:	e0db      	b.n	80072fc <HAL_SPI_Receive+0x20a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800714c:	f7fc fbf0 	bl	8003930 <HAL_GetTick>
 8007150:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b01      	cmp	r3, #1
 800715c:	d002      	beq.n	8007164 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800715e:	2302      	movs	r3, #2
 8007160:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007162:	e0c2      	b.n	80072ea <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_SPI_Receive+0x7e>
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007174:	e0b9      	b.n	80072ea <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2204      	movs	r2, #4
 800717a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	88fa      	ldrh	r2, [r7, #6]
 800718e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071bc:	d107      	bne.n	80071ce <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	d007      	beq.n	80071ec <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d162      	bne.n	80072ba <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071f4:	e02e      	b.n	8007254 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b01      	cmp	r3, #1
 8007202:	d115      	bne.n	8007230 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f103 020c 	add.w	r2, r3, #12
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007224:	b29b      	uxth	r3, r3
 8007226:	3b01      	subs	r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800722e:	e011      	b.n	8007254 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007230:	f7fc fb7e 	bl	8003930 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d803      	bhi.n	8007248 <HAL_SPI_Receive+0x156>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007246:	d102      	bne.n	800724e <HAL_SPI_Receive+0x15c>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d102      	bne.n	8007254 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007252:	e04a      	b.n	80072ea <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1cb      	bne.n	80071f6 <HAL_SPI_Receive+0x104>
 800725e:	e031      	b.n	80072c4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d113      	bne.n	8007296 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	b292      	uxth	r2, r2
 800727a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	1c9a      	adds	r2, r3, #2
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800728a:	b29b      	uxth	r3, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007294:	e011      	b.n	80072ba <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007296:	f7fc fb4b 	bl	8003930 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d803      	bhi.n	80072ae <HAL_SPI_Receive+0x1bc>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d102      	bne.n	80072b4 <HAL_SPI_Receive+0x1c2>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072b8:	e017      	b.n	80072ea <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1cd      	bne.n	8007260 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 fa35 	bl	8007738 <SPI_EndRxTransaction>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	75fb      	strb	r3, [r7, #23]
 80072e6:	e000      	b.n	80072ea <HAL_SPI_Receive+0x1f8>
  }

error :
 80072e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08c      	sub	sp, #48	; 0x30
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007312:	2301      	movs	r3, #1
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <HAL_SPI_TransmitReceive+0x26>
 8007326:	2302      	movs	r3, #2
 8007328:	e18a      	b.n	8007640 <HAL_SPI_TransmitReceive+0x33c>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007332:	f7fc fafd 	bl	8003930 <HAL_GetTick>
 8007336:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800733e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007348:	887b      	ldrh	r3, [r7, #2]
 800734a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800734c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007350:	2b01      	cmp	r3, #1
 8007352:	d00f      	beq.n	8007374 <HAL_SPI_TransmitReceive+0x70>
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800735a:	d107      	bne.n	800736c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d103      	bne.n	800736c <HAL_SPI_TransmitReceive+0x68>
 8007364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007368:	2b04      	cmp	r3, #4
 800736a:	d003      	beq.n	8007374 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800736c:	2302      	movs	r3, #2
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007372:	e15b      	b.n	800762c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_SPI_TransmitReceive+0x82>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <HAL_SPI_TransmitReceive+0x82>
 8007380:	887b      	ldrh	r3, [r7, #2]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800738c:	e14e      	b.n	800762c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b04      	cmp	r3, #4
 8007398:	d003      	beq.n	80073a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2205      	movs	r2, #5
 800739e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	887a      	ldrh	r2, [r7, #2]
 80073b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	887a      	ldrh	r2, [r7, #2]
 80073b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	887a      	ldrh	r2, [r7, #2]
 80073c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	887a      	ldrh	r2, [r7, #2]
 80073ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d007      	beq.n	80073f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fe:	d178      	bne.n	80074f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <HAL_SPI_TransmitReceive+0x10a>
 8007408:	8b7b      	ldrh	r3, [r7, #26]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d166      	bne.n	80074dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	881a      	ldrh	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	1c9a      	adds	r2, r3, #2
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007428:	b29b      	uxth	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	b29a      	uxth	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007432:	e053      	b.n	80074dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b02      	cmp	r3, #2
 8007440:	d11b      	bne.n	800747a <HAL_SPI_TransmitReceive+0x176>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007446:	b29b      	uxth	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d016      	beq.n	800747a <HAL_SPI_TransmitReceive+0x176>
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	2b01      	cmp	r3, #1
 8007450:	d113      	bne.n	800747a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	881a      	ldrh	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	1c9a      	adds	r2, r3, #2
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b01      	cmp	r3, #1
 8007486:	d119      	bne.n	80074bc <HAL_SPI_TransmitReceive+0x1b8>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d014      	beq.n	80074bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	b292      	uxth	r2, r2
 800749e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	1c9a      	adds	r2, r3, #2
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074b8:	2301      	movs	r3, #1
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074bc:	f7fc fa38 	bl	8003930 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d807      	bhi.n	80074dc <HAL_SPI_TransmitReceive+0x1d8>
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d003      	beq.n	80074dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074da:	e0a7      	b.n	800762c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1a6      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x130>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1a1      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x130>
 80074f0:	e07c      	b.n	80075ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <HAL_SPI_TransmitReceive+0x1fc>
 80074fa:	8b7b      	ldrh	r3, [r7, #26]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d16b      	bne.n	80075d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	330c      	adds	r3, #12
 800750a:	7812      	ldrb	r2, [r2, #0]
 800750c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007526:	e057      	b.n	80075d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b02      	cmp	r3, #2
 8007534:	d11c      	bne.n	8007570 <HAL_SPI_TransmitReceive+0x26c>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d017      	beq.n	8007570 <HAL_SPI_TransmitReceive+0x26c>
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d114      	bne.n	8007570 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	330c      	adds	r3, #12
 8007550:	7812      	ldrb	r2, [r2, #0]
 8007552:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007562:	b29b      	uxth	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	d119      	bne.n	80075b2 <HAL_SPI_TransmitReceive+0x2ae>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d014      	beq.n	80075b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075ae:	2301      	movs	r3, #1
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075b2:	f7fc f9bd 	bl	8003930 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075be:	429a      	cmp	r2, r3
 80075c0:	d803      	bhi.n	80075ca <HAL_SPI_TransmitReceive+0x2c6>
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d102      	bne.n	80075d0 <HAL_SPI_TransmitReceive+0x2cc>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075d6:	e029      	b.n	800762c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1a2      	bne.n	8007528 <HAL_SPI_TransmitReceive+0x224>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d19d      	bne.n	8007528 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f907 	bl	8007804 <SPI_EndRxTxTransaction>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d006      	beq.n	800760a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007608:	e010      	b.n	800762c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10b      	bne.n	800762a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	617b      	str	r3, [r7, #20]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	e000      	b.n	800762c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800762a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800763c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007640:	4618      	mov	r0, r3
 8007642:	3730      	adds	r7, #48	; 0x30
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007656:	b2db      	uxtb	r3, r3
}
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	4613      	mov	r3, r2
 8007672:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007674:	e04c      	b.n	8007710 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767c:	d048      	beq.n	8007710 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800767e:	f7fc f957 	bl	8003930 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d902      	bls.n	8007694 <SPI_WaitFlagStateUntilTimeout+0x30>
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d13d      	bne.n	8007710 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ac:	d111      	bne.n	80076d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b6:	d004      	beq.n	80076c2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c0:	d107      	bne.n	80076d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076da:	d10f      	bne.n	80076fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e00f      	b.n	8007730 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4013      	ands	r3, r2
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	429a      	cmp	r2, r3
 800771e:	bf0c      	ite	eq
 8007720:	2301      	moveq	r3, #1
 8007722:	2300      	movne	r3, #0
 8007724:	b2db      	uxtb	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	429a      	cmp	r2, r3
 800772c:	d1a3      	bne.n	8007676 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800774c:	d111      	bne.n	8007772 <SPI_EndRxTransaction+0x3a>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007756:	d004      	beq.n	8007762 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007760:	d107      	bne.n	8007772 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007770:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800777a:	d12a      	bne.n	80077d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007784:	d012      	beq.n	80077ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2200      	movs	r2, #0
 800778e:	2180      	movs	r1, #128	; 0x80
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff ff67 	bl	8007664 <SPI_WaitFlagStateUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d02d      	beq.n	80077f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a0:	f043 0220 	orr.w	r2, r3, #32
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e026      	b.n	80077fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	2101      	movs	r1, #1
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff ff54 	bl	8007664 <SPI_WaitFlagStateUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01a      	beq.n	80077f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c6:	f043 0220 	orr.w	r2, r3, #32
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e013      	b.n	80077fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2200      	movs	r2, #0
 80077da:	2101      	movs	r1, #1
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f7ff ff41 	bl	8007664 <SPI_WaitFlagStateUntilTimeout>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d007      	beq.n	80077f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ec:	f043 0220 	orr.w	r2, r3, #32
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e000      	b.n	80077fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af02      	add	r7, sp, #8
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007810:	4b1b      	ldr	r3, [pc, #108]	; (8007880 <SPI_EndRxTxTransaction+0x7c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a1b      	ldr	r2, [pc, #108]	; (8007884 <SPI_EndRxTxTransaction+0x80>)
 8007816:	fba2 2303 	umull	r2, r3, r2, r3
 800781a:	0d5b      	lsrs	r3, r3, #21
 800781c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007820:	fb02 f303 	mul.w	r3, r2, r3
 8007824:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782e:	d112      	bne.n	8007856 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2200      	movs	r2, #0
 8007838:	2180      	movs	r1, #128	; 0x80
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff ff12 	bl	8007664 <SPI_WaitFlagStateUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784a:	f043 0220 	orr.w	r2, r3, #32
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e00f      	b.n	8007876 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	3b01      	subs	r3, #1
 8007860:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786c:	2b80      	cmp	r3, #128	; 0x80
 800786e:	d0f2      	beq.n	8007856 <SPI_EndRxTxTransaction+0x52>
 8007870:	e000      	b.n	8007874 <SPI_EndRxTxTransaction+0x70>
        break;
 8007872:	bf00      	nop
  }

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000000 	.word	0x20000000
 8007884:	165e9f81 	.word	0x165e9f81

08007888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e01d      	b.n	80078d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7fa fd64 	bl	800237c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f000 fa22 	bl	8007d10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0201 	orr.w	r2, r2, #1
 80078f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f003 0307 	and.w	r3, r3, #7
 8007900:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b06      	cmp	r3, #6
 8007906:	d007      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0201 	orr.w	r2, r2, #1
 8007916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b02      	cmp	r3, #2
 800793a:	d122      	bne.n	8007982 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b02      	cmp	r3, #2
 8007948:	d11b      	bne.n	8007982 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f06f 0202 	mvn.w	r2, #2
 8007952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f9b2 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 800796e:	e005      	b.n	800797c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f9a4 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f9b5 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b04      	cmp	r3, #4
 800798e:	d122      	bne.n	80079d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f003 0304 	and.w	r3, r3, #4
 800799a:	2b04      	cmp	r3, #4
 800799c:	d11b      	bne.n	80079d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f06f 0204 	mvn.w	r2, #4
 80079a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f988 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 80079c2:	e005      	b.n	80079d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f97a 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f98b 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d122      	bne.n	8007a2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d11b      	bne.n	8007a2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f06f 0208 	mvn.w	r2, #8
 80079fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2204      	movs	r2, #4
 8007a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f95e 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 8007a16:	e005      	b.n	8007a24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f950 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f961 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b10      	cmp	r3, #16
 8007a36:	d122      	bne.n	8007a7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f003 0310 	and.w	r3, r3, #16
 8007a42:	2b10      	cmp	r3, #16
 8007a44:	d11b      	bne.n	8007a7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f06f 0210 	mvn.w	r2, #16
 8007a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2208      	movs	r2, #8
 8007a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f934 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 8007a6a:	e005      	b.n	8007a78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f926 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f937 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d10e      	bne.n	8007aaa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d107      	bne.n	8007aaa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f06f 0201 	mvn.w	r2, #1
 8007aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7fa f88d 	bl	8001bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab4:	2b80      	cmp	r3, #128	; 0x80
 8007ab6:	d10e      	bne.n	8007ad6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac2:	2b80      	cmp	r3, #128	; 0x80
 8007ac4:	d107      	bne.n	8007ad6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fadd 	bl	8008090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d10e      	bne.n	8007b02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b40      	cmp	r3, #64	; 0x40
 8007af0:	d107      	bne.n	8007b02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f8fc 	bl	8007cfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f003 0320 	and.w	r3, r3, #32
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	d10e      	bne.n	8007b2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	d107      	bne.n	8007b2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f06f 0220 	mvn.w	r2, #32
 8007b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 faa7 	bl	800807c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_TIM_ConfigClockSource+0x18>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e0b3      	b.n	8007cb6 <HAL_TIM_ConfigClockSource+0x180>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b6c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b74:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b86:	d03e      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0xd0>
 8007b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b8c:	f200 8087 	bhi.w	8007c9e <HAL_TIM_ConfigClockSource+0x168>
 8007b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b94:	f000 8085 	beq.w	8007ca2 <HAL_TIM_ConfigClockSource+0x16c>
 8007b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9c:	d87f      	bhi.n	8007c9e <HAL_TIM_ConfigClockSource+0x168>
 8007b9e:	2b70      	cmp	r3, #112	; 0x70
 8007ba0:	d01a      	beq.n	8007bd8 <HAL_TIM_ConfigClockSource+0xa2>
 8007ba2:	2b70      	cmp	r3, #112	; 0x70
 8007ba4:	d87b      	bhi.n	8007c9e <HAL_TIM_ConfigClockSource+0x168>
 8007ba6:	2b60      	cmp	r3, #96	; 0x60
 8007ba8:	d050      	beq.n	8007c4c <HAL_TIM_ConfigClockSource+0x116>
 8007baa:	2b60      	cmp	r3, #96	; 0x60
 8007bac:	d877      	bhi.n	8007c9e <HAL_TIM_ConfigClockSource+0x168>
 8007bae:	2b50      	cmp	r3, #80	; 0x50
 8007bb0:	d03c      	beq.n	8007c2c <HAL_TIM_ConfigClockSource+0xf6>
 8007bb2:	2b50      	cmp	r3, #80	; 0x50
 8007bb4:	d873      	bhi.n	8007c9e <HAL_TIM_ConfigClockSource+0x168>
 8007bb6:	2b40      	cmp	r3, #64	; 0x40
 8007bb8:	d058      	beq.n	8007c6c <HAL_TIM_ConfigClockSource+0x136>
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d86f      	bhi.n	8007c9e <HAL_TIM_ConfigClockSource+0x168>
 8007bbe:	2b30      	cmp	r3, #48	; 0x30
 8007bc0:	d064      	beq.n	8007c8c <HAL_TIM_ConfigClockSource+0x156>
 8007bc2:	2b30      	cmp	r3, #48	; 0x30
 8007bc4:	d86b      	bhi.n	8007c9e <HAL_TIM_ConfigClockSource+0x168>
 8007bc6:	2b20      	cmp	r3, #32
 8007bc8:	d060      	beq.n	8007c8c <HAL_TIM_ConfigClockSource+0x156>
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	d867      	bhi.n	8007c9e <HAL_TIM_ConfigClockSource+0x168>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d05c      	beq.n	8007c8c <HAL_TIM_ConfigClockSource+0x156>
 8007bd2:	2b10      	cmp	r3, #16
 8007bd4:	d05a      	beq.n	8007c8c <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007bd6:	e062      	b.n	8007c9e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	6899      	ldr	r1, [r3, #8]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f000 f9ac 	bl	8007f44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	609a      	str	r2, [r3, #8]
      break;
 8007c04:	e04e      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	6899      	ldr	r1, [r3, #8]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f000 f995 	bl	8007f44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c28:	609a      	str	r2, [r3, #8]
      break;
 8007c2a:	e03b      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6818      	ldr	r0, [r3, #0]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	6859      	ldr	r1, [r3, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	f000 f909 	bl	8007e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2150      	movs	r1, #80	; 0x50
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 f962 	bl	8007f0e <TIM_ITRx_SetConfig>
      break;
 8007c4a:	e02b      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	6859      	ldr	r1, [r3, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	f000 f928 	bl	8007eae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2160      	movs	r1, #96	; 0x60
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 f952 	bl	8007f0e <TIM_ITRx_SetConfig>
      break;
 8007c6a:	e01b      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	6859      	ldr	r1, [r3, #4]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	f000 f8e9 	bl	8007e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2140      	movs	r1, #64	; 0x40
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f942 	bl	8007f0e <TIM_ITRx_SetConfig>
      break;
 8007c8a:	e00b      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f000 f939 	bl	8007f0e <TIM_ITRx_SetConfig>
      break;
 8007c9c:	e002      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007c9e:	bf00      	nop
 8007ca0:	e000      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a40      	ldr	r2, [pc, #256]	; (8007e24 <TIM_Base_SetConfig+0x114>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d013      	beq.n	8007d50 <TIM_Base_SetConfig+0x40>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2e:	d00f      	beq.n	8007d50 <TIM_Base_SetConfig+0x40>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a3d      	ldr	r2, [pc, #244]	; (8007e28 <TIM_Base_SetConfig+0x118>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00b      	beq.n	8007d50 <TIM_Base_SetConfig+0x40>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a3c      	ldr	r2, [pc, #240]	; (8007e2c <TIM_Base_SetConfig+0x11c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d007      	beq.n	8007d50 <TIM_Base_SetConfig+0x40>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a3b      	ldr	r2, [pc, #236]	; (8007e30 <TIM_Base_SetConfig+0x120>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d003      	beq.n	8007d50 <TIM_Base_SetConfig+0x40>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a3a      	ldr	r2, [pc, #232]	; (8007e34 <TIM_Base_SetConfig+0x124>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d108      	bne.n	8007d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a2f      	ldr	r2, [pc, #188]	; (8007e24 <TIM_Base_SetConfig+0x114>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d02b      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d70:	d027      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a2c      	ldr	r2, [pc, #176]	; (8007e28 <TIM_Base_SetConfig+0x118>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d023      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a2b      	ldr	r2, [pc, #172]	; (8007e2c <TIM_Base_SetConfig+0x11c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d01f      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a2a      	ldr	r2, [pc, #168]	; (8007e30 <TIM_Base_SetConfig+0x120>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d01b      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a29      	ldr	r2, [pc, #164]	; (8007e34 <TIM_Base_SetConfig+0x124>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d017      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a28      	ldr	r2, [pc, #160]	; (8007e38 <TIM_Base_SetConfig+0x128>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d013      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a27      	ldr	r2, [pc, #156]	; (8007e3c <TIM_Base_SetConfig+0x12c>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00f      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a26      	ldr	r2, [pc, #152]	; (8007e40 <TIM_Base_SetConfig+0x130>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00b      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a25      	ldr	r2, [pc, #148]	; (8007e44 <TIM_Base_SetConfig+0x134>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d007      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a24      	ldr	r2, [pc, #144]	; (8007e48 <TIM_Base_SetConfig+0x138>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a23      	ldr	r2, [pc, #140]	; (8007e4c <TIM_Base_SetConfig+0x13c>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d108      	bne.n	8007dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a0a      	ldr	r2, [pc, #40]	; (8007e24 <TIM_Base_SetConfig+0x114>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d003      	beq.n	8007e08 <TIM_Base_SetConfig+0xf8>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a0c      	ldr	r2, [pc, #48]	; (8007e34 <TIM_Base_SetConfig+0x124>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d103      	bne.n	8007e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	615a      	str	r2, [r3, #20]
}
 8007e16:	bf00      	nop
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40010400 	.word	0x40010400
 8007e38:	40014000 	.word	0x40014000
 8007e3c:	40014400 	.word	0x40014400
 8007e40:	40014800 	.word	0x40014800
 8007e44:	40001800 	.word	0x40001800
 8007e48:	40001c00 	.word	0x40001c00
 8007e4c:	40002000 	.word	0x40002000

08007e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	f023 0201 	bic.w	r2, r3, #1
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f023 030a 	bic.w	r3, r3, #10
 8007e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	621a      	str	r2, [r3, #32]
}
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b087      	sub	sp, #28
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	f023 0210 	bic.w	r2, r3, #16
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	031b      	lsls	r3, r3, #12
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	621a      	str	r2, [r3, #32]
}
 8007f02:	bf00      	nop
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	f043 0307 	orr.w	r3, r3, #7
 8007f30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	609a      	str	r2, [r3, #8]
}
 8007f38:	bf00      	nop
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b087      	sub	sp, #28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	021a      	lsls	r2, r3, #8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	431a      	orrs	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	609a      	str	r2, [r3, #8]
}
 8007f78:	bf00      	nop
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e05a      	b.n	8008052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a21      	ldr	r2, [pc, #132]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d022      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe8:	d01d      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a1d      	ldr	r2, [pc, #116]	; (8008064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d018      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a1b      	ldr	r2, [pc, #108]	; (8008068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d013      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a1a      	ldr	r2, [pc, #104]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00e      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a18      	ldr	r2, [pc, #96]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d009      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a17      	ldr	r2, [pc, #92]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d004      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a15      	ldr	r2, [pc, #84]	; (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d10c      	bne.n	8008040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800802c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	4313      	orrs	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	40010000 	.word	0x40010000
 8008064:	40000400 	.word	0x40000400
 8008068:	40000800 	.word	0x40000800
 800806c:	40000c00 	.word	0x40000c00
 8008070:	40010400 	.word	0x40010400
 8008074:	40014000 	.word	0x40014000
 8008078:	40001800 	.word	0x40001800

0800807c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e03f      	b.n	8008136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d106      	bne.n	80080d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7fa f9dc 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2224      	movs	r2, #36	; 0x24
 80080d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fb4b 	bl	8008784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695a      	ldr	r2, [r3, #20]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800810c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800811c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2220      	movs	r2, #32
 8008130:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b088      	sub	sp, #32
 8008142:	af02      	add	r7, sp, #8
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	603b      	str	r3, [r7, #0]
 800814a:	4613      	mov	r3, r2
 800814c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b20      	cmp	r3, #32
 800815c:	f040 8083 	bne.w	8008266 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <HAL_UART_Transmit+0x2e>
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e07b      	b.n	8008268 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008176:	2b01      	cmp	r3, #1
 8008178:	d101      	bne.n	800817e <HAL_UART_Transmit+0x40>
 800817a:	2302      	movs	r3, #2
 800817c:	e074      	b.n	8008268 <HAL_UART_Transmit+0x12a>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2221      	movs	r2, #33	; 0x21
 8008190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008194:	f7fb fbcc 	bl	8003930 <HAL_GetTick>
 8008198:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	88fa      	ldrh	r2, [r7, #6]
 800819e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	88fa      	ldrh	r2, [r7, #6]
 80081a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80081ae:	e042      	b.n	8008236 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c6:	d122      	bne.n	800820e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2180      	movs	r1, #128	; 0x80
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 f96a 	bl	80084ac <UART_WaitOnFlagUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e042      	b.n	8008268 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d103      	bne.n	8008206 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	3302      	adds	r3, #2
 8008202:	60bb      	str	r3, [r7, #8]
 8008204:	e017      	b.n	8008236 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	3301      	adds	r3, #1
 800820a:	60bb      	str	r3, [r7, #8]
 800820c:	e013      	b.n	8008236 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2200      	movs	r2, #0
 8008216:	2180      	movs	r1, #128	; 0x80
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 f947 	bl	80084ac <UART_WaitOnFlagUntilTimeout>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e01f      	b.n	8008268 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	60ba      	str	r2, [r7, #8]
 800822e:	781a      	ldrb	r2, [r3, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800823a:	b29b      	uxth	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1b7      	bne.n	80081b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2200      	movs	r2, #0
 8008248:	2140      	movs	r1, #64	; 0x40
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 f92e 	bl	80084ac <UART_WaitOnFlagUntilTimeout>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e006      	b.n	8008268 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2220      	movs	r2, #32
 800825e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	e000      	b.n	8008268 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008266:	2302      	movs	r3, #2
  }
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008290:	2300      	movs	r3, #0
 8008292:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f003 030f 	and.w	r3, r3, #15
 800829e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10d      	bne.n	80082c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d008      	beq.n	80082c2 <HAL_UART_IRQHandler+0x52>
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f9e0 	bl	8008680 <UART_Receive_IT>
      return;
 80082c0:	e0d0      	b.n	8008464 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 80b0 	beq.w	800842a <HAL_UART_IRQHandler+0x1ba>
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <HAL_UART_IRQHandler+0x70>
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80a5 	beq.w	800842a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <HAL_UART_IRQHandler+0x90>
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f8:	f043 0201 	orr.w	r2, r3, #1
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <HAL_UART_IRQHandler+0xb0>
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d005      	beq.n	8008320 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008318:	f043 0202 	orr.w	r2, r3, #2
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <HAL_UART_IRQHandler+0xd0>
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008338:	f043 0204 	orr.w	r2, r3, #4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f003 0308 	and.w	r3, r3, #8
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00f      	beq.n	800836a <HAL_UART_IRQHandler+0xfa>
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	f003 0320 	and.w	r3, r3, #32
 8008350:	2b00      	cmp	r3, #0
 8008352:	d104      	bne.n	800835e <HAL_UART_IRQHandler+0xee>
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d005      	beq.n	800836a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008362:	f043 0208 	orr.w	r2, r3, #8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d077      	beq.n	8008462 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	f003 0320 	and.w	r3, r3, #32
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <HAL_UART_IRQHandler+0x11c>
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f97a 	bl	8008680 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	bf0c      	ite	eq
 800839a:	2301      	moveq	r3, #1
 800839c:	2300      	movne	r3, #0
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d102      	bne.n	80083b4 <HAL_UART_IRQHandler+0x144>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d031      	beq.n	8008418 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f8c3 	bl	8008540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c4:	2b40      	cmp	r3, #64	; 0x40
 80083c6:	d123      	bne.n	8008410 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083d6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d013      	beq.n	8008408 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e4:	4a21      	ldr	r2, [pc, #132]	; (800846c <HAL_UART_IRQHandler+0x1fc>)
 80083e6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fb fcbd 	bl	8003d6c <HAL_DMA_Abort_IT>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d016      	beq.n	8008426 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008402:	4610      	mov	r0, r2
 8008404:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008406:	e00e      	b.n	8008426 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f845 	bl	8008498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800840e:	e00a      	b.n	8008426 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f841 	bl	8008498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008416:	e006      	b.n	8008426 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f83d 	bl	8008498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008424:	e01d      	b.n	8008462 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008426:	bf00      	nop
    return;
 8008428:	e01b      	b.n	8008462 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008430:	2b00      	cmp	r3, #0
 8008432:	d008      	beq.n	8008446 <HAL_UART_IRQHandler+0x1d6>
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f8b0 	bl	80085a4 <UART_Transmit_IT>
    return;
 8008444:	e00e      	b.n	8008464 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	d009      	beq.n	8008464 <HAL_UART_IRQHandler+0x1f4>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f8f8 	bl	8008650 <UART_EndTransmit_IT>
    return;
 8008460:	e000      	b.n	8008464 <HAL_UART_IRQHandler+0x1f4>
    return;
 8008462:	bf00      	nop
  }
}
 8008464:	3720      	adds	r7, #32
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	0800857d 	.word	0x0800857d

08008470 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	4613      	mov	r3, r2
 80084ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084bc:	e02c      	b.n	8008518 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c4:	d028      	beq.n	8008518 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d007      	beq.n	80084dc <UART_WaitOnFlagUntilTimeout+0x30>
 80084cc:	f7fb fa30 	bl	8003930 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d21d      	bcs.n	8008518 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	695a      	ldr	r2, [r3, #20]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f022 0201 	bic.w	r2, r2, #1
 80084fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2220      	movs	r2, #32
 8008500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e00f      	b.n	8008538 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	4013      	ands	r3, r2
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	429a      	cmp	r2, r3
 8008526:	bf0c      	ite	eq
 8008528:	2301      	moveq	r3, #1
 800852a:	2300      	movne	r3, #0
 800852c:	b2db      	uxtb	r3, r3
 800852e:	461a      	mov	r2, r3
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	429a      	cmp	r2, r3
 8008534:	d0c3      	beq.n	80084be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008556:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695a      	ldr	r2, [r3, #20]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0201 	bic.w	r2, r2, #1
 8008566:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2220      	movs	r2, #32
 800856c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff ff7e 	bl	8008498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800859c:	bf00      	nop
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b21      	cmp	r3, #33	; 0x21
 80085b6:	d144      	bne.n	8008642 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c0:	d11a      	bne.n	80085f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	461a      	mov	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	1c9a      	adds	r2, r3, #2
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	621a      	str	r2, [r3, #32]
 80085ea:	e00e      	b.n	800860a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	621a      	str	r2, [r3, #32]
 80085f6:	e008      	b.n	800860a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	1c59      	adds	r1, r3, #1
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6211      	str	r1, [r2, #32]
 8008602:	781a      	ldrb	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800860e:	b29b      	uxth	r3, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	b29b      	uxth	r3, r3
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	4619      	mov	r1, r3
 8008618:	84d1      	strh	r1, [r2, #38]	; 0x26
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10f      	bne.n	800863e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800862c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800863c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	e000      	b.n	8008644 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008642:	2302      	movs	r3, #2
  }
}
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008666:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2220      	movs	r2, #32
 800866c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff fefd 	bl	8008470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b22      	cmp	r3, #34	; 0x22
 8008692:	d171      	bne.n	8008778 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869c:	d123      	bne.n	80086e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10e      	bne.n	80086ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	1c9a      	adds	r2, r3, #2
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	629a      	str	r2, [r3, #40]	; 0x28
 80086c8:	e029      	b.n	800871e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	629a      	str	r2, [r3, #40]	; 0x28
 80086e4:	e01b      	b.n	800871e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10a      	bne.n	8008704 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6858      	ldr	r0, [r3, #4]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f8:	1c59      	adds	r1, r3, #1
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6291      	str	r1, [r2, #40]	; 0x28
 80086fe:	b2c2      	uxtb	r2, r0
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	e00c      	b.n	800871e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	b2da      	uxtb	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008710:	1c58      	adds	r0, r3, #1
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	6288      	str	r0, [r1, #40]	; 0x28
 8008716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800871a:	b2d2      	uxtb	r2, r2
 800871c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29b      	uxth	r3, r3
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	4619      	mov	r1, r3
 800872c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800872e:	2b00      	cmp	r3, #0
 8008730:	d120      	bne.n	8008774 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0220 	bic.w	r2, r2, #32
 8008740:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008750:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	695a      	ldr	r2, [r3, #20]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0201 	bic.w	r2, r2, #1
 8008760:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2220      	movs	r2, #32
 8008766:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff fe8a 	bl	8008484 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	e002      	b.n	800877a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	e000      	b.n	800877a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008778:	2302      	movs	r3, #2
  }
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	b0bd      	sub	sp, #244	; 0xf4
 800878a:	af00      	add	r7, sp, #0
 800878c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800879c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a0:	68d9      	ldr	r1, [r3, #12]
 80087a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	ea40 0301 	orr.w	r3, r0, r1
 80087ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	431a      	orrs	r2, r3
 80087bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	431a      	orrs	r2, r3
 80087c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80087d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087dc:	f021 010c 	bic.w	r1, r1, #12
 80087e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087ea:	430b      	orrs	r3, r1
 80087ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fe:	6999      	ldr	r1, [r3, #24]
 8008800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	ea40 0301 	orr.w	r3, r0, r1
 800880a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800880c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008816:	f040 81a5 	bne.w	8008b64 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800881a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	4bcd      	ldr	r3, [pc, #820]	; (8008b58 <UART_SetConfig+0x3d4>)
 8008822:	429a      	cmp	r2, r3
 8008824:	d006      	beq.n	8008834 <UART_SetConfig+0xb0>
 8008826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	4bcb      	ldr	r3, [pc, #812]	; (8008b5c <UART_SetConfig+0x3d8>)
 800882e:	429a      	cmp	r2, r3
 8008830:	f040 80cb 	bne.w	80089ca <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008834:	f7fe f81a 	bl	800686c <HAL_RCC_GetPCLK2Freq>
 8008838:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800883c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008840:	461c      	mov	r4, r3
 8008842:	f04f 0500 	mov.w	r5, #0
 8008846:	4622      	mov	r2, r4
 8008848:	462b      	mov	r3, r5
 800884a:	1891      	adds	r1, r2, r2
 800884c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008850:	415b      	adcs	r3, r3
 8008852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008856:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800885a:	1912      	adds	r2, r2, r4
 800885c:	eb45 0303 	adc.w	r3, r5, r3
 8008860:	f04f 0000 	mov.w	r0, #0
 8008864:	f04f 0100 	mov.w	r1, #0
 8008868:	00d9      	lsls	r1, r3, #3
 800886a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800886e:	00d0      	lsls	r0, r2, #3
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	1911      	adds	r1, r2, r4
 8008876:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800887a:	416b      	adcs	r3, r5
 800887c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	461a      	mov	r2, r3
 8008888:	f04f 0300 	mov.w	r3, #0
 800888c:	1891      	adds	r1, r2, r2
 800888e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008892:	415b      	adcs	r3, r3
 8008894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008898:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800889c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80088a0:	f7f8 f992 	bl	8000bc8 <__aeabi_uldivmod>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4bad      	ldr	r3, [pc, #692]	; (8008b60 <UART_SetConfig+0x3dc>)
 80088aa:	fba3 2302 	umull	r2, r3, r3, r2
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	011e      	lsls	r6, r3, #4
 80088b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088b6:	461c      	mov	r4, r3
 80088b8:	f04f 0500 	mov.w	r5, #0
 80088bc:	4622      	mov	r2, r4
 80088be:	462b      	mov	r3, r5
 80088c0:	1891      	adds	r1, r2, r2
 80088c2:	67b9      	str	r1, [r7, #120]	; 0x78
 80088c4:	415b      	adcs	r3, r3
 80088c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088c8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80088cc:	1912      	adds	r2, r2, r4
 80088ce:	eb45 0303 	adc.w	r3, r5, r3
 80088d2:	f04f 0000 	mov.w	r0, #0
 80088d6:	f04f 0100 	mov.w	r1, #0
 80088da:	00d9      	lsls	r1, r3, #3
 80088dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088e0:	00d0      	lsls	r0, r2, #3
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	1911      	adds	r1, r2, r4
 80088e8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80088ec:	416b      	adcs	r3, r5
 80088ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80088f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	461a      	mov	r2, r3
 80088fa:	f04f 0300 	mov.w	r3, #0
 80088fe:	1891      	adds	r1, r2, r2
 8008900:	6739      	str	r1, [r7, #112]	; 0x70
 8008902:	415b      	adcs	r3, r3
 8008904:	677b      	str	r3, [r7, #116]	; 0x74
 8008906:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800890a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800890e:	f7f8 f95b 	bl	8000bc8 <__aeabi_uldivmod>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4b92      	ldr	r3, [pc, #584]	; (8008b60 <UART_SetConfig+0x3dc>)
 8008918:	fba3 1302 	umull	r1, r3, r3, r2
 800891c:	095b      	lsrs	r3, r3, #5
 800891e:	2164      	movs	r1, #100	; 0x64
 8008920:	fb01 f303 	mul.w	r3, r1, r3
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	3332      	adds	r3, #50	; 0x32
 800892a:	4a8d      	ldr	r2, [pc, #564]	; (8008b60 <UART_SetConfig+0x3dc>)
 800892c:	fba2 2303 	umull	r2, r3, r2, r3
 8008930:	095b      	lsrs	r3, r3, #5
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008938:	441e      	add	r6, r3
 800893a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800893e:	4618      	mov	r0, r3
 8008940:	f04f 0100 	mov.w	r1, #0
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	1894      	adds	r4, r2, r2
 800894a:	66bc      	str	r4, [r7, #104]	; 0x68
 800894c:	415b      	adcs	r3, r3
 800894e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008950:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008954:	1812      	adds	r2, r2, r0
 8008956:	eb41 0303 	adc.w	r3, r1, r3
 800895a:	f04f 0400 	mov.w	r4, #0
 800895e:	f04f 0500 	mov.w	r5, #0
 8008962:	00dd      	lsls	r5, r3, #3
 8008964:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008968:	00d4      	lsls	r4, r2, #3
 800896a:	4622      	mov	r2, r4
 800896c:	462b      	mov	r3, r5
 800896e:	1814      	adds	r4, r2, r0
 8008970:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008974:	414b      	adcs	r3, r1
 8008976:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800897a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	461a      	mov	r2, r3
 8008982:	f04f 0300 	mov.w	r3, #0
 8008986:	1891      	adds	r1, r2, r2
 8008988:	6639      	str	r1, [r7, #96]	; 0x60
 800898a:	415b      	adcs	r3, r3
 800898c:	667b      	str	r3, [r7, #100]	; 0x64
 800898e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008996:	f7f8 f917 	bl	8000bc8 <__aeabi_uldivmod>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4b70      	ldr	r3, [pc, #448]	; (8008b60 <UART_SetConfig+0x3dc>)
 80089a0:	fba3 1302 	umull	r1, r3, r3, r2
 80089a4:	095b      	lsrs	r3, r3, #5
 80089a6:	2164      	movs	r1, #100	; 0x64
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	3332      	adds	r3, #50	; 0x32
 80089b2:	4a6b      	ldr	r2, [pc, #428]	; (8008b60 <UART_SetConfig+0x3dc>)
 80089b4:	fba2 2303 	umull	r2, r3, r2, r3
 80089b8:	095b      	lsrs	r3, r3, #5
 80089ba:	f003 0207 	and.w	r2, r3, #7
 80089be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4432      	add	r2, r6
 80089c6:	609a      	str	r2, [r3, #8]
 80089c8:	e26d      	b.n	8008ea6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089ca:	f7fd ff3b 	bl	8006844 <HAL_RCC_GetPCLK1Freq>
 80089ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089d6:	461c      	mov	r4, r3
 80089d8:	f04f 0500 	mov.w	r5, #0
 80089dc:	4622      	mov	r2, r4
 80089de:	462b      	mov	r3, r5
 80089e0:	1891      	adds	r1, r2, r2
 80089e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80089e4:	415b      	adcs	r3, r3
 80089e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80089ec:	1912      	adds	r2, r2, r4
 80089ee:	eb45 0303 	adc.w	r3, r5, r3
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f04f 0100 	mov.w	r1, #0
 80089fa:	00d9      	lsls	r1, r3, #3
 80089fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a00:	00d0      	lsls	r0, r2, #3
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	1911      	adds	r1, r2, r4
 8008a08:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008a0c:	416b      	adcs	r3, r5
 8008a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	f04f 0300 	mov.w	r3, #0
 8008a1e:	1891      	adds	r1, r2, r2
 8008a20:	6539      	str	r1, [r7, #80]	; 0x50
 8008a22:	415b      	adcs	r3, r3
 8008a24:	657b      	str	r3, [r7, #84]	; 0x54
 8008a26:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a2a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008a2e:	f7f8 f8cb 	bl	8000bc8 <__aeabi_uldivmod>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4b4a      	ldr	r3, [pc, #296]	; (8008b60 <UART_SetConfig+0x3dc>)
 8008a38:	fba3 2302 	umull	r2, r3, r3, r2
 8008a3c:	095b      	lsrs	r3, r3, #5
 8008a3e:	011e      	lsls	r6, r3, #4
 8008a40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a44:	461c      	mov	r4, r3
 8008a46:	f04f 0500 	mov.w	r5, #0
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	1891      	adds	r1, r2, r2
 8008a50:	64b9      	str	r1, [r7, #72]	; 0x48
 8008a52:	415b      	adcs	r3, r3
 8008a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a5a:	1912      	adds	r2, r2, r4
 8008a5c:	eb45 0303 	adc.w	r3, r5, r3
 8008a60:	f04f 0000 	mov.w	r0, #0
 8008a64:	f04f 0100 	mov.w	r1, #0
 8008a68:	00d9      	lsls	r1, r3, #3
 8008a6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a6e:	00d0      	lsls	r0, r2, #3
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	1911      	adds	r1, r2, r4
 8008a76:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008a7a:	416b      	adcs	r3, r5
 8008a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	1891      	adds	r1, r2, r2
 8008a8e:	6439      	str	r1, [r7, #64]	; 0x40
 8008a90:	415b      	adcs	r3, r3
 8008a92:	647b      	str	r3, [r7, #68]	; 0x44
 8008a94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a98:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008a9c:	f7f8 f894 	bl	8000bc8 <__aeabi_uldivmod>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4b2e      	ldr	r3, [pc, #184]	; (8008b60 <UART_SetConfig+0x3dc>)
 8008aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8008aaa:	095b      	lsrs	r3, r3, #5
 8008aac:	2164      	movs	r1, #100	; 0x64
 8008aae:	fb01 f303 	mul.w	r3, r1, r3
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	00db      	lsls	r3, r3, #3
 8008ab6:	3332      	adds	r3, #50	; 0x32
 8008ab8:	4a29      	ldr	r2, [pc, #164]	; (8008b60 <UART_SetConfig+0x3dc>)
 8008aba:	fba2 2303 	umull	r2, r3, r2, r3
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	005b      	lsls	r3, r3, #1
 8008ac2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ac6:	441e      	add	r6, r3
 8008ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008acc:	4618      	mov	r0, r3
 8008ace:	f04f 0100 	mov.w	r1, #0
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	1894      	adds	r4, r2, r2
 8008ad8:	63bc      	str	r4, [r7, #56]	; 0x38
 8008ada:	415b      	adcs	r3, r3
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ade:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ae2:	1812      	adds	r2, r2, r0
 8008ae4:	eb41 0303 	adc.w	r3, r1, r3
 8008ae8:	f04f 0400 	mov.w	r4, #0
 8008aec:	f04f 0500 	mov.w	r5, #0
 8008af0:	00dd      	lsls	r5, r3, #3
 8008af2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008af6:	00d4      	lsls	r4, r2, #3
 8008af8:	4622      	mov	r2, r4
 8008afa:	462b      	mov	r3, r5
 8008afc:	1814      	adds	r4, r2, r0
 8008afe:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008b02:	414b      	adcs	r3, r1
 8008b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f04f 0300 	mov.w	r3, #0
 8008b14:	1891      	adds	r1, r2, r2
 8008b16:	6339      	str	r1, [r7, #48]	; 0x30
 8008b18:	415b      	adcs	r3, r3
 8008b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b20:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008b24:	f7f8 f850 	bl	8000bc8 <__aeabi_uldivmod>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <UART_SetConfig+0x3dc>)
 8008b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	2164      	movs	r1, #100	; 0x64
 8008b36:	fb01 f303 	mul.w	r3, r1, r3
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	3332      	adds	r3, #50	; 0x32
 8008b40:	4a07      	ldr	r2, [pc, #28]	; (8008b60 <UART_SetConfig+0x3dc>)
 8008b42:	fba2 2303 	umull	r2, r3, r2, r3
 8008b46:	095b      	lsrs	r3, r3, #5
 8008b48:	f003 0207 	and.w	r2, r3, #7
 8008b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4432      	add	r2, r6
 8008b54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008b56:	e1a6      	b.n	8008ea6 <UART_SetConfig+0x722>
 8008b58:	40011000 	.word	0x40011000
 8008b5c:	40011400 	.word	0x40011400
 8008b60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	4bd1      	ldr	r3, [pc, #836]	; (8008eb0 <UART_SetConfig+0x72c>)
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d006      	beq.n	8008b7e <UART_SetConfig+0x3fa>
 8008b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	4bcf      	ldr	r3, [pc, #828]	; (8008eb4 <UART_SetConfig+0x730>)
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	f040 80ca 	bne.w	8008d12 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b7e:	f7fd fe75 	bl	800686c <HAL_RCC_GetPCLK2Freq>
 8008b82:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b8a:	461c      	mov	r4, r3
 8008b8c:	f04f 0500 	mov.w	r5, #0
 8008b90:	4622      	mov	r2, r4
 8008b92:	462b      	mov	r3, r5
 8008b94:	1891      	adds	r1, r2, r2
 8008b96:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b98:	415b      	adcs	r3, r3
 8008b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ba0:	1912      	adds	r2, r2, r4
 8008ba2:	eb45 0303 	adc.w	r3, r5, r3
 8008ba6:	f04f 0000 	mov.w	r0, #0
 8008baa:	f04f 0100 	mov.w	r1, #0
 8008bae:	00d9      	lsls	r1, r3, #3
 8008bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bb4:	00d0      	lsls	r0, r2, #3
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	eb12 0a04 	adds.w	sl, r2, r4
 8008bbe:	eb43 0b05 	adc.w	fp, r3, r5
 8008bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f04f 0100 	mov.w	r1, #0
 8008bce:	f04f 0200 	mov.w	r2, #0
 8008bd2:	f04f 0300 	mov.w	r3, #0
 8008bd6:	008b      	lsls	r3, r1, #2
 8008bd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008bdc:	0082      	lsls	r2, r0, #2
 8008bde:	4650      	mov	r0, sl
 8008be0:	4659      	mov	r1, fp
 8008be2:	f7f7 fff1 	bl	8000bc8 <__aeabi_uldivmod>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4bb3      	ldr	r3, [pc, #716]	; (8008eb8 <UART_SetConfig+0x734>)
 8008bec:	fba3 2302 	umull	r2, r3, r3, r2
 8008bf0:	095b      	lsrs	r3, r3, #5
 8008bf2:	011e      	lsls	r6, r3, #4
 8008bf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f04f 0100 	mov.w	r1, #0
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	1894      	adds	r4, r2, r2
 8008c04:	623c      	str	r4, [r7, #32]
 8008c06:	415b      	adcs	r3, r3
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
 8008c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c0e:	1812      	adds	r2, r2, r0
 8008c10:	eb41 0303 	adc.w	r3, r1, r3
 8008c14:	f04f 0400 	mov.w	r4, #0
 8008c18:	f04f 0500 	mov.w	r5, #0
 8008c1c:	00dd      	lsls	r5, r3, #3
 8008c1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c22:	00d4      	lsls	r4, r2, #3
 8008c24:	4622      	mov	r2, r4
 8008c26:	462b      	mov	r3, r5
 8008c28:	1814      	adds	r4, r2, r0
 8008c2a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008c2e:	414b      	adcs	r3, r1
 8008c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f04f 0100 	mov.w	r1, #0
 8008c40:	f04f 0200 	mov.w	r2, #0
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	008b      	lsls	r3, r1, #2
 8008c4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c4e:	0082      	lsls	r2, r0, #2
 8008c50:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008c54:	f7f7 ffb8 	bl	8000bc8 <__aeabi_uldivmod>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4b96      	ldr	r3, [pc, #600]	; (8008eb8 <UART_SetConfig+0x734>)
 8008c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	2164      	movs	r1, #100	; 0x64
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	3332      	adds	r3, #50	; 0x32
 8008c70:	4a91      	ldr	r2, [pc, #580]	; (8008eb8 <UART_SetConfig+0x734>)
 8008c72:	fba2 2303 	umull	r2, r3, r2, r3
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c7c:	441e      	add	r6, r3
 8008c7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c82:	4618      	mov	r0, r3
 8008c84:	f04f 0100 	mov.w	r1, #0
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	1894      	adds	r4, r2, r2
 8008c8e:	61bc      	str	r4, [r7, #24]
 8008c90:	415b      	adcs	r3, r3
 8008c92:	61fb      	str	r3, [r7, #28]
 8008c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c98:	1812      	adds	r2, r2, r0
 8008c9a:	eb41 0303 	adc.w	r3, r1, r3
 8008c9e:	f04f 0400 	mov.w	r4, #0
 8008ca2:	f04f 0500 	mov.w	r5, #0
 8008ca6:	00dd      	lsls	r5, r3, #3
 8008ca8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008cac:	00d4      	lsls	r4, r2, #3
 8008cae:	4622      	mov	r2, r4
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	1814      	adds	r4, r2, r0
 8008cb4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008cb8:	414b      	adcs	r3, r1
 8008cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f04f 0100 	mov.w	r1, #0
 8008cca:	f04f 0200 	mov.w	r2, #0
 8008cce:	f04f 0300 	mov.w	r3, #0
 8008cd2:	008b      	lsls	r3, r1, #2
 8008cd4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008cd8:	0082      	lsls	r2, r0, #2
 8008cda:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008cde:	f7f7 ff73 	bl	8000bc8 <__aeabi_uldivmod>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4b74      	ldr	r3, [pc, #464]	; (8008eb8 <UART_SetConfig+0x734>)
 8008ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8008cec:	095b      	lsrs	r3, r3, #5
 8008cee:	2164      	movs	r1, #100	; 0x64
 8008cf0:	fb01 f303 	mul.w	r3, r1, r3
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	011b      	lsls	r3, r3, #4
 8008cf8:	3332      	adds	r3, #50	; 0x32
 8008cfa:	4a6f      	ldr	r2, [pc, #444]	; (8008eb8 <UART_SetConfig+0x734>)
 8008cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008d00:	095b      	lsrs	r3, r3, #5
 8008d02:	f003 020f 	and.w	r2, r3, #15
 8008d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4432      	add	r2, r6
 8008d0e:	609a      	str	r2, [r3, #8]
 8008d10:	e0c9      	b.n	8008ea6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d12:	f7fd fd97 	bl	8006844 <HAL_RCC_GetPCLK1Freq>
 8008d16:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d1e:	461c      	mov	r4, r3
 8008d20:	f04f 0500 	mov.w	r5, #0
 8008d24:	4622      	mov	r2, r4
 8008d26:	462b      	mov	r3, r5
 8008d28:	1891      	adds	r1, r2, r2
 8008d2a:	6139      	str	r1, [r7, #16]
 8008d2c:	415b      	adcs	r3, r3
 8008d2e:	617b      	str	r3, [r7, #20]
 8008d30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d34:	1912      	adds	r2, r2, r4
 8008d36:	eb45 0303 	adc.w	r3, r5, r3
 8008d3a:	f04f 0000 	mov.w	r0, #0
 8008d3e:	f04f 0100 	mov.w	r1, #0
 8008d42:	00d9      	lsls	r1, r3, #3
 8008d44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d48:	00d0      	lsls	r0, r2, #3
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	eb12 0804 	adds.w	r8, r2, r4
 8008d52:	eb43 0905 	adc.w	r9, r3, r5
 8008d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f04f 0100 	mov.w	r1, #0
 8008d62:	f04f 0200 	mov.w	r2, #0
 8008d66:	f04f 0300 	mov.w	r3, #0
 8008d6a:	008b      	lsls	r3, r1, #2
 8008d6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d70:	0082      	lsls	r2, r0, #2
 8008d72:	4640      	mov	r0, r8
 8008d74:	4649      	mov	r1, r9
 8008d76:	f7f7 ff27 	bl	8000bc8 <__aeabi_uldivmod>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4b4e      	ldr	r3, [pc, #312]	; (8008eb8 <UART_SetConfig+0x734>)
 8008d80:	fba3 2302 	umull	r2, r3, r3, r2
 8008d84:	095b      	lsrs	r3, r3, #5
 8008d86:	011e      	lsls	r6, r3, #4
 8008d88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f04f 0100 	mov.w	r1, #0
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	1894      	adds	r4, r2, r2
 8008d98:	60bc      	str	r4, [r7, #8]
 8008d9a:	415b      	adcs	r3, r3
 8008d9c:	60fb      	str	r3, [r7, #12]
 8008d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008da2:	1812      	adds	r2, r2, r0
 8008da4:	eb41 0303 	adc.w	r3, r1, r3
 8008da8:	f04f 0400 	mov.w	r4, #0
 8008dac:	f04f 0500 	mov.w	r5, #0
 8008db0:	00dd      	lsls	r5, r3, #3
 8008db2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008db6:	00d4      	lsls	r4, r2, #3
 8008db8:	4622      	mov	r2, r4
 8008dba:	462b      	mov	r3, r5
 8008dbc:	1814      	adds	r4, r2, r0
 8008dbe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008dc2:	414b      	adcs	r3, r1
 8008dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f04f 0100 	mov.w	r1, #0
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	f04f 0300 	mov.w	r3, #0
 8008ddc:	008b      	lsls	r3, r1, #2
 8008dde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008de2:	0082      	lsls	r2, r0, #2
 8008de4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008de8:	f7f7 feee 	bl	8000bc8 <__aeabi_uldivmod>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4b31      	ldr	r3, [pc, #196]	; (8008eb8 <UART_SetConfig+0x734>)
 8008df2:	fba3 1302 	umull	r1, r3, r3, r2
 8008df6:	095b      	lsrs	r3, r3, #5
 8008df8:	2164      	movs	r1, #100	; 0x64
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	3332      	adds	r3, #50	; 0x32
 8008e04:	4a2c      	ldr	r2, [pc, #176]	; (8008eb8 <UART_SetConfig+0x734>)
 8008e06:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e10:	441e      	add	r6, r3
 8008e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e16:	4618      	mov	r0, r3
 8008e18:	f04f 0100 	mov.w	r1, #0
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	1894      	adds	r4, r2, r2
 8008e22:	603c      	str	r4, [r7, #0]
 8008e24:	415b      	adcs	r3, r3
 8008e26:	607b      	str	r3, [r7, #4]
 8008e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2c:	1812      	adds	r2, r2, r0
 8008e2e:	eb41 0303 	adc.w	r3, r1, r3
 8008e32:	f04f 0400 	mov.w	r4, #0
 8008e36:	f04f 0500 	mov.w	r5, #0
 8008e3a:	00dd      	lsls	r5, r3, #3
 8008e3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e40:	00d4      	lsls	r4, r2, #3
 8008e42:	4622      	mov	r2, r4
 8008e44:	462b      	mov	r3, r5
 8008e46:	1814      	adds	r4, r2, r0
 8008e48:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008e4c:	414b      	adcs	r3, r1
 8008e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f04f 0100 	mov.w	r1, #0
 8008e5e:	f04f 0200 	mov.w	r2, #0
 8008e62:	f04f 0300 	mov.w	r3, #0
 8008e66:	008b      	lsls	r3, r1, #2
 8008e68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e6c:	0082      	lsls	r2, r0, #2
 8008e6e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008e72:	f7f7 fea9 	bl	8000bc8 <__aeabi_uldivmod>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <UART_SetConfig+0x734>)
 8008e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e80:	095b      	lsrs	r3, r3, #5
 8008e82:	2164      	movs	r1, #100	; 0x64
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	011b      	lsls	r3, r3, #4
 8008e8c:	3332      	adds	r3, #50	; 0x32
 8008e8e:	4a0a      	ldr	r2, [pc, #40]	; (8008eb8 <UART_SetConfig+0x734>)
 8008e90:	fba2 2303 	umull	r2, r3, r2, r3
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	f003 020f 	and.w	r2, r3, #15
 8008e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4432      	add	r2, r6
 8008ea2:	609a      	str	r2, [r3, #8]
}
 8008ea4:	e7ff      	b.n	8008ea6 <UART_SetConfig+0x722>
 8008ea6:	bf00      	nop
 8008ea8:	37f4      	adds	r7, #244	; 0xf4
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb0:	40011000 	.word	0x40011000
 8008eb4:	40011400 	.word	0x40011400
 8008eb8:	51eb851f 	.word	0x51eb851f

08008ebc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d029      	beq.n	8008f2a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008ee2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ee6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ef0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008ef6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008efc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008f02:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008f08:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008f0e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008f14:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008f1a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	e034      	b.n	8008f94 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f36:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008f40:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008f46:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008f5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f5e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f68:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008f6e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008f74:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008f7a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008f80:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b087      	sub	sp, #28
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d02e      	beq.n	800901a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fc8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008fd8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008fe2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008fec:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ff6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009000:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	3b01      	subs	r3, #1
 8009008:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800900a:	4313      	orrs	r3, r2
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	609a      	str	r2, [r3, #8]
 8009018:	e03b      	b.n	8009092 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800902a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	3b01      	subs	r3, #1
 8009032:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	3b01      	subs	r3, #1
 800903a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800903c:	4313      	orrs	r3, r2
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009050:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	3b01      	subs	r3, #1
 800905e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009060:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	3b01      	subs	r3, #1
 8009068:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800906a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	3b01      	subs	r3, #1
 8009072:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009074:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	3b01      	subs	r3, #1
 800907c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800907e:	4313      	orrs	r3, r2
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4313      	orrs	r3, r2
 8009084:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80090bc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80090c6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80090ce:	4313      	orrs	r3, r2
 80090d0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80090d8:	f7fa fc2a 	bl	8003930 <HAL_GetTick>
 80090dc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80090de:	e010      	b.n	8009102 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e6:	d00c      	beq.n	8009102 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d007      	beq.n	80090fe <FMC_SDRAM_SendCommand+0x5e>
 80090ee:	f7fa fc1f 	bl	8003930 <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d201      	bcs.n	8009102 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e006      	b.n	8009110 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b20      	cmp	r3, #32
 800910c:	d0e8      	beq.n	80090e0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	695a      	ldr	r2, [r3, #20]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f103 0208 	add.w	r2, r3, #8
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f04f 32ff 	mov.w	r2, #4294967295
 8009156:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f103 0208 	add.w	r2, r3, #8
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f103 0208 	add.w	r2, r3, #8
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009172:	bf00      	nop
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	601a      	str	r2, [r3, #0]
}
 80091d4:	bf00      	nop
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f6:	d103      	bne.n	8009200 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	e00c      	b.n	800921a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3308      	adds	r3, #8
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	e002      	b.n	800920e <vListInsert+0x2e>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	429a      	cmp	r2, r3
 8009218:	d2f6      	bcs.n	8009208 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	601a      	str	r2, [r3, #0]
}
 8009246:	bf00      	nop
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6892      	ldr	r2, [r2, #8]
 8009268:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	6852      	ldr	r2, [r2, #4]
 8009272:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	429a      	cmp	r2, r3
 800927c:	d103      	bne.n	8009286 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	1e5a      	subs	r2, r3, #1
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
	...

080092a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092d2:	f002 f927 	bl	800b524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092de:	68f9      	ldr	r1, [r7, #12]
 80092e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092e2:	fb01 f303 	mul.w	r3, r1, r3
 80092e6:	441a      	add	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009302:	3b01      	subs	r3, #1
 8009304:	68f9      	ldr	r1, [r7, #12]
 8009306:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009308:	fb01 f303 	mul.w	r3, r1, r3
 800930c:	441a      	add	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	22ff      	movs	r2, #255	; 0xff
 8009316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	22ff      	movs	r2, #255	; 0xff
 800931e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d114      	bne.n	8009352 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d01a      	beq.n	8009366 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3310      	adds	r3, #16
 8009334:	4618      	mov	r0, r3
 8009336:	f001 f975 	bl	800a624 <xTaskRemoveFromEventList>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d012      	beq.n	8009366 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009340:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <xQueueGenericReset+0xcc>)
 8009342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	e009      	b.n	8009366 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3310      	adds	r3, #16
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff fef1 	bl	800913e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3324      	adds	r3, #36	; 0x24
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff feec 	bl	800913e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009366:	f002 f90d 	bl	800b584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800936a:	2301      	movs	r3, #1
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	e000ed04 	.word	0xe000ed04

08009378 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08e      	sub	sp, #56	; 0x38
 800937c:	af02      	add	r7, sp, #8
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10a      	bne.n	80093a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800939e:	bf00      	nop
 80093a0:	e7fe      	b.n	80093a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ac:	f383 8811 	msr	BASEPRI, r3
 80093b0:	f3bf 8f6f 	isb	sy
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093ba:	bf00      	nop
 80093bc:	e7fe      	b.n	80093bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <xQueueGenericCreateStatic+0x52>
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <xQueueGenericCreateStatic+0x56>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e000      	b.n	80093d0 <xQueueGenericCreateStatic+0x58>
 80093ce:	2300      	movs	r3, #0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10a      	bne.n	80093ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	623b      	str	r3, [r7, #32]
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <xQueueGenericCreateStatic+0x7e>
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <xQueueGenericCreateStatic+0x82>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e000      	b.n	80093fc <xQueueGenericCreateStatic+0x84>
 80093fa:	2300      	movs	r3, #0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10a      	bne.n	8009416 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	61fb      	str	r3, [r7, #28]
}
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009416:	2350      	movs	r3, #80	; 0x50
 8009418:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b50      	cmp	r3, #80	; 0x50
 800941e:	d00a      	beq.n	8009436 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	61bb      	str	r3, [r7, #24]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009436:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00d      	beq.n	800945e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009444:	2201      	movs	r2, #1
 8009446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800944a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800944e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	4613      	mov	r3, r2
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 f805 	bl	8009468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009460:	4618      	mov	r0, r3
 8009462:	3730      	adds	r7, #48	; 0x30
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d103      	bne.n	8009484 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e002      	b.n	800948a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009496:	2101      	movs	r1, #1
 8009498:	69b8      	ldr	r0, [r7, #24]
 800949a:	f7ff ff05 	bl	80092a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	78fa      	ldrb	r2, [r7, #3]
 80094a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08e      	sub	sp, #56	; 0x38
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <xQueueGenericSend+0x32>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094de:	bf00      	nop
 80094e0:	e7fe      	b.n	80094e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d103      	bne.n	80094f0 <xQueueGenericSend+0x40>
 80094e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <xQueueGenericSend+0x44>
 80094f0:	2301      	movs	r3, #1
 80094f2:	e000      	b.n	80094f6 <xQueueGenericSend+0x46>
 80094f4:	2300      	movs	r3, #0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10a      	bne.n	8009510 <xQueueGenericSend+0x60>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d103      	bne.n	800951e <xQueueGenericSend+0x6e>
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <xQueueGenericSend+0x72>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <xQueueGenericSend+0x74>
 8009522:	2300      	movs	r3, #0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <xQueueGenericSend+0x8e>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	623b      	str	r3, [r7, #32]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800953e:	f001 fa2d 	bl	800a99c <xTaskGetSchedulerState>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d102      	bne.n	800954e <xQueueGenericSend+0x9e>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <xQueueGenericSend+0xa2>
 800954e:	2301      	movs	r3, #1
 8009550:	e000      	b.n	8009554 <xQueueGenericSend+0xa4>
 8009552:	2300      	movs	r3, #0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10a      	bne.n	800956e <xQueueGenericSend+0xbe>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	61fb      	str	r3, [r7, #28]
}
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800956e:	f001 ffd9 	bl	800b524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957a:	429a      	cmp	r2, r3
 800957c:	d302      	bcc.n	8009584 <xQueueGenericSend+0xd4>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b02      	cmp	r3, #2
 8009582:	d129      	bne.n	80095d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958a:	f000 fa07 	bl	800999c <prvCopyDataToQueue>
 800958e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	d010      	beq.n	80095ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	3324      	adds	r3, #36	; 0x24
 800959c:	4618      	mov	r0, r3
 800959e:	f001 f841 	bl	800a624 <xTaskRemoveFromEventList>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d013      	beq.n	80095d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095a8:	4b3f      	ldr	r3, [pc, #252]	; (80096a8 <xQueueGenericSend+0x1f8>)
 80095aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	e00a      	b.n	80095d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d007      	beq.n	80095d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095c0:	4b39      	ldr	r3, [pc, #228]	; (80096a8 <xQueueGenericSend+0x1f8>)
 80095c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095d0:	f001 ffd8 	bl	800b584 <vPortExitCritical>
				return pdPASS;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e063      	b.n	80096a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d103      	bne.n	80095e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095de:	f001 ffd1 	bl	800b584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e05c      	b.n	80096a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d106      	bne.n	80095fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095ec:	f107 0314 	add.w	r3, r7, #20
 80095f0:	4618      	mov	r0, r3
 80095f2:	f001 f879 	bl	800a6e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095f6:	2301      	movs	r3, #1
 80095f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095fa:	f001 ffc3 	bl	800b584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095fe:	f000 fdd9 	bl	800a1b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009602:	f001 ff8f 	bl	800b524 <vPortEnterCritical>
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800960c:	b25b      	sxtb	r3, r3
 800960e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009612:	d103      	bne.n	800961c <xQueueGenericSend+0x16c>
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009622:	b25b      	sxtb	r3, r3
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009628:	d103      	bne.n	8009632 <xQueueGenericSend+0x182>
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009632:	f001 ffa7 	bl	800b584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009636:	1d3a      	adds	r2, r7, #4
 8009638:	f107 0314 	add.w	r3, r7, #20
 800963c:	4611      	mov	r1, r2
 800963e:	4618      	mov	r0, r3
 8009640:	f001 f868 	bl	800a714 <xTaskCheckForTimeOut>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d124      	bne.n	8009694 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800964a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800964c:	f000 fa9e 	bl	8009b8c <prvIsQueueFull>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d018      	beq.n	8009688 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	3310      	adds	r3, #16
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f000 ff90 	bl	800a584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009666:	f000 fa29 	bl	8009abc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800966a:	f000 fdb1 	bl	800a1d0 <xTaskResumeAll>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	f47f af7c 	bne.w	800956e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009676:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <xQueueGenericSend+0x1f8>)
 8009678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	e772      	b.n	800956e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800968a:	f000 fa17 	bl	8009abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800968e:	f000 fd9f 	bl	800a1d0 <xTaskResumeAll>
 8009692:	e76c      	b.n	800956e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009696:	f000 fa11 	bl	8009abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800969a:	f000 fd99 	bl	800a1d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800969e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3738      	adds	r7, #56	; 0x38
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	e000ed04 	.word	0xe000ed04

080096ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08e      	sub	sp, #56	; 0x38
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d103      	bne.n	80096e8 <xQueueGenericSendFromISR+0x3c>
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <xQueueGenericSendFromISR+0x40>
 80096e8:	2301      	movs	r3, #1
 80096ea:	e000      	b.n	80096ee <xQueueGenericSendFromISR+0x42>
 80096ec:	2300      	movs	r3, #0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	623b      	str	r3, [r7, #32]
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d103      	bne.n	8009716 <xQueueGenericSendFromISR+0x6a>
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <xQueueGenericSendFromISR+0x6e>
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <xQueueGenericSendFromISR+0x70>
 800971a:	2300      	movs	r3, #0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10a      	bne.n	8009736 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	61fb      	str	r3, [r7, #28]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009736:	f001 ffd7 	bl	800b6e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800973a:	f3ef 8211 	mrs	r2, BASEPRI
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	61ba      	str	r2, [r7, #24]
 8009750:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009752:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009754:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975e:	429a      	cmp	r2, r3
 8009760:	d302      	bcc.n	8009768 <xQueueGenericSendFromISR+0xbc>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b02      	cmp	r3, #2
 8009766:	d12c      	bne.n	80097c2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800976e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	68b9      	ldr	r1, [r7, #8]
 8009776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009778:	f000 f910 	bl	800999c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800977c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d112      	bne.n	80097ac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	2b00      	cmp	r3, #0
 800978c:	d016      	beq.n	80097bc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	3324      	adds	r3, #36	; 0x24
 8009792:	4618      	mov	r0, r3
 8009794:	f000 ff46 	bl	800a624 <xTaskRemoveFromEventList>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00e      	beq.n	80097bc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	e007      	b.n	80097bc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097b0:	3301      	adds	r3, #1
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	b25a      	sxtb	r2, r3
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097bc:	2301      	movs	r3, #1
 80097be:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80097c0:	e001      	b.n	80097c6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	637b      	str	r3, [r7, #52]	; 0x34
 80097c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3738      	adds	r7, #56	; 0x38
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08c      	sub	sp, #48	; 0x30
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097e8:	2300      	movs	r3, #0
 80097ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <xQueueReceive+0x30>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	623b      	str	r3, [r7, #32]
}
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d103      	bne.n	800981a <xQueueReceive+0x3e>
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d101      	bne.n	800981e <xQueueReceive+0x42>
 800981a:	2301      	movs	r3, #1
 800981c:	e000      	b.n	8009820 <xQueueReceive+0x44>
 800981e:	2300      	movs	r3, #0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <xQueueReceive+0x5e>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	61fb      	str	r3, [r7, #28]
}
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800983a:	f001 f8af 	bl	800a99c <xTaskGetSchedulerState>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d102      	bne.n	800984a <xQueueReceive+0x6e>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <xQueueReceive+0x72>
 800984a:	2301      	movs	r3, #1
 800984c:	e000      	b.n	8009850 <xQueueReceive+0x74>
 800984e:	2300      	movs	r3, #0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <xQueueReceive+0x8e>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	61bb      	str	r3, [r7, #24]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800986a:	f001 fe5b 	bl	800b524 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	d01f      	beq.n	80098ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800987a:	68b9      	ldr	r1, [r7, #8]
 800987c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800987e:	f000 f8f7 	bl	8009a70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	1e5a      	subs	r2, r3, #1
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00f      	beq.n	80098b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	3310      	adds	r3, #16
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fec4 	bl	800a624 <xTaskRemoveFromEventList>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d007      	beq.n	80098b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098a2:	4b3d      	ldr	r3, [pc, #244]	; (8009998 <xQueueReceive+0x1bc>)
 80098a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098b2:	f001 fe67 	bl	800b584 <vPortExitCritical>
				return pdPASS;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e069      	b.n	800998e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d103      	bne.n	80098c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098c0:	f001 fe60 	bl	800b584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098c4:	2300      	movs	r3, #0
 80098c6:	e062      	b.n	800998e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d106      	bne.n	80098dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098ce:	f107 0310 	add.w	r3, r7, #16
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 ff08 	bl	800a6e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098d8:	2301      	movs	r3, #1
 80098da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098dc:	f001 fe52 	bl	800b584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098e0:	f000 fc68 	bl	800a1b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098e4:	f001 fe1e 	bl	800b524 <vPortEnterCritical>
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098ee:	b25b      	sxtb	r3, r3
 80098f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f4:	d103      	bne.n	80098fe <xQueueReceive+0x122>
 80098f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009904:	b25b      	sxtb	r3, r3
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990a:	d103      	bne.n	8009914 <xQueueReceive+0x138>
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009914:	f001 fe36 	bl	800b584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009918:	1d3a      	adds	r2, r7, #4
 800991a:	f107 0310 	add.w	r3, r7, #16
 800991e:	4611      	mov	r1, r2
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fef7 	bl	800a714 <xTaskCheckForTimeOut>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d123      	bne.n	8009974 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800992c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992e:	f000 f917 	bl	8009b60 <prvIsQueueEmpty>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d017      	beq.n	8009968 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	3324      	adds	r3, #36	; 0x24
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f000 fe1f 	bl	800a584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009948:	f000 f8b8 	bl	8009abc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800994c:	f000 fc40 	bl	800a1d0 <xTaskResumeAll>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d189      	bne.n	800986a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009956:	4b10      	ldr	r3, [pc, #64]	; (8009998 <xQueueReceive+0x1bc>)
 8009958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800995c:	601a      	str	r2, [r3, #0]
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	e780      	b.n	800986a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800996a:	f000 f8a7 	bl	8009abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800996e:	f000 fc2f 	bl	800a1d0 <xTaskResumeAll>
 8009972:	e77a      	b.n	800986a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009976:	f000 f8a1 	bl	8009abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800997a:	f000 fc29 	bl	800a1d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800997e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009980:	f000 f8ee 	bl	8009b60 <prvIsQueueEmpty>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	f43f af6f 	beq.w	800986a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800998c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800998e:	4618      	mov	r0, r3
 8009990:	3730      	adds	r7, #48	; 0x30
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	e000ed04 	.word	0xe000ed04

0800999c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10d      	bne.n	80099d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d14d      	bne.n	8009a5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f001 f806 	bl	800a9d8 <xTaskPriorityDisinherit>
 80099cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	609a      	str	r2, [r3, #8]
 80099d4:	e043      	b.n	8009a5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d119      	bne.n	8009a10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6858      	ldr	r0, [r3, #4]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e4:	461a      	mov	r2, r3
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	f002 f976 	bl	800bcd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f4:	441a      	add	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d32b      	bcc.n	8009a5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	605a      	str	r2, [r3, #4]
 8009a0e:	e026      	b.n	8009a5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	68d8      	ldr	r0, [r3, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a18:	461a      	mov	r2, r3
 8009a1a:	68b9      	ldr	r1, [r7, #8]
 8009a1c:	f002 f95c 	bl	800bcd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a28:	425b      	negs	r3, r3
 8009a2a:	441a      	add	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d207      	bcs.n	8009a4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	425b      	negs	r3, r3
 8009a46:	441a      	add	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d105      	bne.n	8009a5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a66:	697b      	ldr	r3, [r7, #20]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d018      	beq.n	8009ab4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8a:	441a      	add	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68da      	ldr	r2, [r3, #12]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d303      	bcc.n	8009aa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68d9      	ldr	r1, [r3, #12]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	461a      	mov	r2, r3
 8009aae:	6838      	ldr	r0, [r7, #0]
 8009ab0:	f002 f912 	bl	800bcd8 <memcpy>
	}
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ac4:	f001 fd2e 	bl	800b524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ace:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ad0:	e011      	b.n	8009af6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d012      	beq.n	8009b00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	3324      	adds	r3, #36	; 0x24
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fda0 	bl	800a624 <xTaskRemoveFromEventList>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009aea:	f000 fe75 	bl	800a7d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	dce9      	bgt.n	8009ad2 <prvUnlockQueue+0x16>
 8009afe:	e000      	b.n	8009b02 <prvUnlockQueue+0x46>
					break;
 8009b00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	22ff      	movs	r2, #255	; 0xff
 8009b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b0a:	f001 fd3b 	bl	800b584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b0e:	f001 fd09 	bl	800b524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b1a:	e011      	b.n	8009b40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d012      	beq.n	8009b4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3310      	adds	r3, #16
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 fd7b 	bl	800a624 <xTaskRemoveFromEventList>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b34:	f000 fe50 	bl	800a7d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	dce9      	bgt.n	8009b1c <prvUnlockQueue+0x60>
 8009b48:	e000      	b.n	8009b4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	22ff      	movs	r2, #255	; 0xff
 8009b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b54:	f001 fd16 	bl	800b584 <vPortExitCritical>
}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b68:	f001 fcdc 	bl	800b524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b74:	2301      	movs	r3, #1
 8009b76:	60fb      	str	r3, [r7, #12]
 8009b78:	e001      	b.n	8009b7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b7e:	f001 fd01 	bl	800b584 <vPortExitCritical>

	return xReturn;
 8009b82:	68fb      	ldr	r3, [r7, #12]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b94:	f001 fcc6 	bl	800b524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d102      	bne.n	8009baa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	60fb      	str	r3, [r7, #12]
 8009ba8:	e001      	b.n	8009bae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bae:	f001 fce9 	bl	800b584 <vPortExitCritical>

	return xReturn;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60fb      	str	r3, [r7, #12]
 8009bca:	e014      	b.n	8009bf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009bcc:	4a0f      	ldr	r2, [pc, #60]	; (8009c0c <vQueueAddToRegistry+0x50>)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10b      	bne.n	8009bf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bd8:	490c      	ldr	r1, [pc, #48]	; (8009c0c <vQueueAddToRegistry+0x50>)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009be2:	4a0a      	ldr	r2, [pc, #40]	; (8009c0c <vQueueAddToRegistry+0x50>)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	4413      	add	r3, r2
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bee:	e006      	b.n	8009bfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b0b      	cmp	r3, #11
 8009bfa:	d9e7      	bls.n	8009bcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	200220a0 	.word	0x200220a0

08009c10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c20:	f001 fc80 	bl	800b524 <vPortEnterCritical>
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c2a:	b25b      	sxtb	r3, r3
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c30:	d103      	bne.n	8009c3a <vQueueWaitForMessageRestricted+0x2a>
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c40:	b25b      	sxtb	r3, r3
 8009c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c46:	d103      	bne.n	8009c50 <vQueueWaitForMessageRestricted+0x40>
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c50:	f001 fc98 	bl	800b584 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d106      	bne.n	8009c6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	3324      	adds	r3, #36	; 0x24
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	68b9      	ldr	r1, [r7, #8]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fcb1 	bl	800a5cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c6a:	6978      	ldr	r0, [r7, #20]
 8009c6c:	f7ff ff26 	bl	8009abc <prvUnlockQueue>
	}
 8009c70:	bf00      	nop
 8009c72:	3718      	adds	r7, #24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08e      	sub	sp, #56	; 0x38
 8009c7c:	af04      	add	r7, sp, #16
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10a      	bne.n	8009ca2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	623b      	str	r3, [r7, #32]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <xTaskCreateStatic+0x46>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	61fb      	str	r3, [r7, #28]
}
 8009cba:	bf00      	nop
 8009cbc:	e7fe      	b.n	8009cbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cbe:	2364      	movs	r3, #100	; 0x64
 8009cc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	2b64      	cmp	r3, #100	; 0x64
 8009cc6:	d00a      	beq.n	8009cde <xTaskCreateStatic+0x66>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	61bb      	str	r3, [r7, #24]
}
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01e      	beq.n	8009d24 <xTaskCreateStatic+0xac>
 8009ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01b      	beq.n	8009d24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9303      	str	r3, [sp, #12]
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	9302      	str	r3, [sp, #8]
 8009d06:	f107 0314 	add.w	r3, r7, #20
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f850 	bl	8009dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d1e:	f000 f8e3 	bl	8009ee8 <prvAddNewTaskToReadyList>
 8009d22:	e001      	b.n	8009d28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d24:	2300      	movs	r3, #0
 8009d26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d28:	697b      	ldr	r3, [r7, #20]
	}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3728      	adds	r7, #40	; 0x28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b08c      	sub	sp, #48	; 0x30
 8009d36:	af04      	add	r7, sp, #16
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	60b9      	str	r1, [r7, #8]
 8009d3c:	603b      	str	r3, [r7, #0]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d42:	88fb      	ldrh	r3, [r7, #6]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 fd0e 	bl	800b768 <pvPortMalloc>
 8009d4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00e      	beq.n	8009d72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d54:	2064      	movs	r0, #100	; 0x64
 8009d56:	f001 fd07 	bl	800b768 <pvPortMalloc>
 8009d5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	631a      	str	r2, [r3, #48]	; 0x30
 8009d68:	e005      	b.n	8009d76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d6a:	6978      	ldr	r0, [r7, #20]
 8009d6c:	f001 fdc0 	bl	800b8f0 <vPortFree>
 8009d70:	e001      	b.n	8009d76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d017      	beq.n	8009dac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d84:	88fa      	ldrh	r2, [r7, #6]
 8009d86:	2300      	movs	r3, #0
 8009d88:	9303      	str	r3, [sp, #12]
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	9302      	str	r3, [sp, #8]
 8009d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68b9      	ldr	r1, [r7, #8]
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 f80e 	bl	8009dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009da0:	69f8      	ldr	r0, [r7, #28]
 8009da2:	f000 f8a1 	bl	8009ee8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009da6:	2301      	movs	r3, #1
 8009da8:	61bb      	str	r3, [r7, #24]
 8009daa:	e002      	b.n	8009db2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dac:	f04f 33ff 	mov.w	r3, #4294967295
 8009db0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009db2:	69bb      	ldr	r3, [r7, #24]
	}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3720      	adds	r7, #32
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	21a5      	movs	r1, #165	; 0xa5
 8009dd6:	f001 ff8d 	bl	800bcf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009de4:	3b01      	subs	r3, #1
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	f023 0307 	bic.w	r3, r3, #7
 8009df2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	617b      	str	r3, [r7, #20]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	69ba      	ldr	r2, [r7, #24]
 8009e18:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01f      	beq.n	8009e60 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e20:	2300      	movs	r3, #0
 8009e22:	61fb      	str	r3, [r7, #28]
 8009e24:	e012      	b.n	8009e4c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	7819      	ldrb	r1, [r3, #0]
 8009e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	4413      	add	r3, r2
 8009e34:	3334      	adds	r3, #52	; 0x34
 8009e36:	460a      	mov	r2, r1
 8009e38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	4413      	add	r3, r2
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d006      	beq.n	8009e54 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	61fb      	str	r3, [r7, #28]
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	2b0f      	cmp	r3, #15
 8009e50:	d9e9      	bls.n	8009e26 <prvInitialiseNewTask+0x6a>
 8009e52:	e000      	b.n	8009e56 <prvInitialiseNewTask+0x9a>
			{
				break;
 8009e54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e5e:	e003      	b.n	8009e68 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	2b06      	cmp	r3, #6
 8009e6c:	d901      	bls.n	8009e72 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e6e:	2306      	movs	r3, #6
 8009e70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e7c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	2200      	movs	r2, #0
 8009e82:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	3304      	adds	r3, #4
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7ff f978 	bl	800917e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	3318      	adds	r3, #24
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7ff f973 	bl	800917e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	f1c3 0207 	rsb	r2, r3, #7
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	68f9      	ldr	r1, [r7, #12]
 8009ec6:	69b8      	ldr	r0, [r7, #24]
 8009ec8:	f001 fa00 	bl	800b2cc <pxPortInitialiseStack>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009edc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ede:	bf00      	nop
 8009ee0:	3720      	adds	r7, #32
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ef0:	f001 fb18 	bl	800b524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ef4:	4b2c      	ldr	r3, [pc, #176]	; (8009fa8 <prvAddNewTaskToReadyList+0xc0>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	4a2b      	ldr	r2, [pc, #172]	; (8009fa8 <prvAddNewTaskToReadyList+0xc0>)
 8009efc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009efe:	4b2b      	ldr	r3, [pc, #172]	; (8009fac <prvAddNewTaskToReadyList+0xc4>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d109      	bne.n	8009f1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f06:	4a29      	ldr	r2, [pc, #164]	; (8009fac <prvAddNewTaskToReadyList+0xc4>)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f0c:	4b26      	ldr	r3, [pc, #152]	; (8009fa8 <prvAddNewTaskToReadyList+0xc0>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d110      	bne.n	8009f36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f14:	f000 fc84 	bl	800a820 <prvInitialiseTaskLists>
 8009f18:	e00d      	b.n	8009f36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f1a:	4b25      	ldr	r3, [pc, #148]	; (8009fb0 <prvAddNewTaskToReadyList+0xc8>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d109      	bne.n	8009f36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f22:	4b22      	ldr	r3, [pc, #136]	; (8009fac <prvAddNewTaskToReadyList+0xc4>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d802      	bhi.n	8009f36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f30:	4a1e      	ldr	r2, [pc, #120]	; (8009fac <prvAddNewTaskToReadyList+0xc4>)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f36:	4b1f      	ldr	r3, [pc, #124]	; (8009fb4 <prvAddNewTaskToReadyList+0xcc>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	4a1d      	ldr	r2, [pc, #116]	; (8009fb4 <prvAddNewTaskToReadyList+0xcc>)
 8009f3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f40:	4b1c      	ldr	r3, [pc, #112]	; (8009fb4 <prvAddNewTaskToReadyList+0xcc>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	409a      	lsls	r2, r3
 8009f50:	4b19      	ldr	r3, [pc, #100]	; (8009fb8 <prvAddNewTaskToReadyList+0xd0>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	4a18      	ldr	r2, [pc, #96]	; (8009fb8 <prvAddNewTaskToReadyList+0xd0>)
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4a15      	ldr	r2, [pc, #84]	; (8009fbc <prvAddNewTaskToReadyList+0xd4>)
 8009f68:	441a      	add	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4610      	mov	r0, r2
 8009f72:	f7ff f911 	bl	8009198 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f76:	f001 fb05 	bl	800b584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f7a:	4b0d      	ldr	r3, [pc, #52]	; (8009fb0 <prvAddNewTaskToReadyList+0xc8>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00e      	beq.n	8009fa0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f82:	4b0a      	ldr	r3, [pc, #40]	; (8009fac <prvAddNewTaskToReadyList+0xc4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d207      	bcs.n	8009fa0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f90:	4b0b      	ldr	r3, [pc, #44]	; (8009fc0 <prvAddNewTaskToReadyList+0xd8>)
 8009f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	2000270c 	.word	0x2000270c
 8009fac:	2000260c 	.word	0x2000260c
 8009fb0:	20002718 	.word	0x20002718
 8009fb4:	20002728 	.word	0x20002728
 8009fb8:	20002714 	.word	0x20002714
 8009fbc:	20002610 	.word	0x20002610
 8009fc0:	e000ed04 	.word	0xe000ed04

08009fc4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009fcc:	f001 faaa 	bl	800b524 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <vTaskDelete+0x18>
 8009fd6:	4b39      	ldr	r3, [pc, #228]	; (800a0bc <vTaskDelete+0xf8>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	e000      	b.n	8009fde <vTaskDelete+0x1a>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7ff f934 	bl	8009252 <uxListRemove>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d115      	bne.n	800a01c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff4:	4932      	ldr	r1, [pc, #200]	; (800a0c0 <vTaskDelete+0xfc>)
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	440b      	add	r3, r1
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10a      	bne.n	800a01c <vTaskDelete+0x58>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	2201      	movs	r2, #1
 800a00c:	fa02 f303 	lsl.w	r3, r2, r3
 800a010:	43da      	mvns	r2, r3
 800a012:	4b2c      	ldr	r3, [pc, #176]	; (800a0c4 <vTaskDelete+0x100>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4013      	ands	r3, r2
 800a018:	4a2a      	ldr	r2, [pc, #168]	; (800a0c4 <vTaskDelete+0x100>)
 800a01a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	3318      	adds	r3, #24
 800a028:	4618      	mov	r0, r3
 800a02a:	f7ff f912 	bl	8009252 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a02e:	4b26      	ldr	r3, [pc, #152]	; (800a0c8 <vTaskDelete+0x104>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3301      	adds	r3, #1
 800a034:	4a24      	ldr	r2, [pc, #144]	; (800a0c8 <vTaskDelete+0x104>)
 800a036:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a038:	4b20      	ldr	r3, [pc, #128]	; (800a0bc <vTaskDelete+0xf8>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d10b      	bne.n	800a05a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3304      	adds	r3, #4
 800a046:	4619      	mov	r1, r3
 800a048:	4820      	ldr	r0, [pc, #128]	; (800a0cc <vTaskDelete+0x108>)
 800a04a:	f7ff f8a5 	bl	8009198 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a04e:	4b20      	ldr	r3, [pc, #128]	; (800a0d0 <vTaskDelete+0x10c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3301      	adds	r3, #1
 800a054:	4a1e      	ldr	r2, [pc, #120]	; (800a0d0 <vTaskDelete+0x10c>)
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	e009      	b.n	800a06e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a05a:	4b1e      	ldr	r3, [pc, #120]	; (800a0d4 <vTaskDelete+0x110>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3b01      	subs	r3, #1
 800a060:	4a1c      	ldr	r2, [pc, #112]	; (800a0d4 <vTaskDelete+0x110>)
 800a062:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 fc49 	bl	800a8fc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a06a:	f000 fc77 	bl	800a95c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800a06e:	f001 fa89 	bl	800b584 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a072:	4b19      	ldr	r3, [pc, #100]	; (800a0d8 <vTaskDelete+0x114>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d01b      	beq.n	800a0b2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800a07a:	4b10      	ldr	r3, [pc, #64]	; (800a0bc <vTaskDelete+0xf8>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	429a      	cmp	r2, r3
 800a082:	d116      	bne.n	800a0b2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a084:	4b15      	ldr	r3, [pc, #84]	; (800a0dc <vTaskDelete+0x118>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00a      	beq.n	800a0a2 <vTaskDelete+0xde>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	60bb      	str	r3, [r7, #8]
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800a0a2:	4b0f      	ldr	r3, [pc, #60]	; (800a0e0 <vTaskDelete+0x11c>)
 800a0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0b2:	bf00      	nop
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	2000260c 	.word	0x2000260c
 800a0c0:	20002610 	.word	0x20002610
 800a0c4:	20002714 	.word	0x20002714
 800a0c8:	20002728 	.word	0x20002728
 800a0cc:	200026e0 	.word	0x200026e0
 800a0d0:	200026f4 	.word	0x200026f4
 800a0d4:	2000270c 	.word	0x2000270c
 800a0d8:	20002718 	.word	0x20002718
 800a0dc:	20002734 	.word	0x20002734
 800a0e0:	e000ed04 	.word	0xe000ed04

0800a0e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08a      	sub	sp, #40	; 0x28
 800a0e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0f2:	463a      	mov	r2, r7
 800a0f4:	1d39      	adds	r1, r7, #4
 800a0f6:	f107 0308 	add.w	r3, r7, #8
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7f7 f840 	bl	8001180 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	9202      	str	r2, [sp, #8]
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	2300      	movs	r3, #0
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	2300      	movs	r3, #0
 800a110:	460a      	mov	r2, r1
 800a112:	4922      	ldr	r1, [pc, #136]	; (800a19c <vTaskStartScheduler+0xb8>)
 800a114:	4822      	ldr	r0, [pc, #136]	; (800a1a0 <vTaskStartScheduler+0xbc>)
 800a116:	f7ff fdaf 	bl	8009c78 <xTaskCreateStatic>
 800a11a:	4603      	mov	r3, r0
 800a11c:	4a21      	ldr	r2, [pc, #132]	; (800a1a4 <vTaskStartScheduler+0xc0>)
 800a11e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a120:	4b20      	ldr	r3, [pc, #128]	; (800a1a4 <vTaskStartScheduler+0xc0>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a128:	2301      	movs	r3, #1
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	e001      	b.n	800a132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d102      	bne.n	800a13e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a138:	f000 fd3a 	bl	800abb0 <xTimerCreateTimerTask>
 800a13c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d118      	bne.n	800a176 <vTaskStartScheduler+0x92>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	613b      	str	r3, [r7, #16]
}
 800a156:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a158:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <vTaskStartScheduler+0xc4>)
 800a15a:	f04f 32ff 	mov.w	r2, #4294967295
 800a15e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a160:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <vTaskStartScheduler+0xc8>)
 800a162:	2201      	movs	r2, #1
 800a164:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a166:	4b12      	ldr	r3, [pc, #72]	; (800a1b0 <vTaskStartScheduler+0xcc>)
 800a168:	2200      	movs	r2, #0
 800a16a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a16c:	f7f7 fb90 	bl	8001890 <RTOS_AppConfigureTimerForRuntimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a170:	f001 f936 	bl	800b3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a174:	e00e      	b.n	800a194 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17c:	d10a      	bne.n	800a194 <vTaskStartScheduler+0xb0>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	60fb      	str	r3, [r7, #12]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <vTaskStartScheduler+0xae>
}
 800a194:	bf00      	nop
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	0800e750 	.word	0x0800e750
 800a1a0:	0800a7f1 	.word	0x0800a7f1
 800a1a4:	20002730 	.word	0x20002730
 800a1a8:	2000272c 	.word	0x2000272c
 800a1ac:	20002718 	.word	0x20002718
 800a1b0:	20002710 	.word	0x20002710

0800a1b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a1b8:	4b04      	ldr	r3, [pc, #16]	; (800a1cc <vTaskSuspendAll+0x18>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	4a03      	ldr	r2, [pc, #12]	; (800a1cc <vTaskSuspendAll+0x18>)
 800a1c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a1c2:	bf00      	nop
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	20002734 	.word	0x20002734

0800a1d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1de:	4b41      	ldr	r3, [pc, #260]	; (800a2e4 <xTaskResumeAll+0x114>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10a      	bne.n	800a1fc <xTaskResumeAll+0x2c>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	603b      	str	r3, [r7, #0]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1fc:	f001 f992 	bl	800b524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a200:	4b38      	ldr	r3, [pc, #224]	; (800a2e4 <xTaskResumeAll+0x114>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3b01      	subs	r3, #1
 800a206:	4a37      	ldr	r2, [pc, #220]	; (800a2e4 <xTaskResumeAll+0x114>)
 800a208:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a20a:	4b36      	ldr	r3, [pc, #216]	; (800a2e4 <xTaskResumeAll+0x114>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d161      	bne.n	800a2d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a212:	4b35      	ldr	r3, [pc, #212]	; (800a2e8 <xTaskResumeAll+0x118>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d05d      	beq.n	800a2d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a21a:	e02e      	b.n	800a27a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a21c:	4b33      	ldr	r3, [pc, #204]	; (800a2ec <xTaskResumeAll+0x11c>)
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	3318      	adds	r3, #24
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff f812 	bl	8009252 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3304      	adds	r3, #4
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff f80d 	bl	8009252 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	2201      	movs	r2, #1
 800a23e:	409a      	lsls	r2, r3
 800a240:	4b2b      	ldr	r3, [pc, #172]	; (800a2f0 <xTaskResumeAll+0x120>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4313      	orrs	r3, r2
 800a246:	4a2a      	ldr	r2, [pc, #168]	; (800a2f0 <xTaskResumeAll+0x120>)
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24e:	4613      	mov	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4a27      	ldr	r2, [pc, #156]	; (800a2f4 <xTaskResumeAll+0x124>)
 800a258:	441a      	add	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3304      	adds	r3, #4
 800a25e:	4619      	mov	r1, r3
 800a260:	4610      	mov	r0, r2
 800a262:	f7fe ff99 	bl	8009198 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26a:	4b23      	ldr	r3, [pc, #140]	; (800a2f8 <xTaskResumeAll+0x128>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	429a      	cmp	r2, r3
 800a272:	d302      	bcc.n	800a27a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a274:	4b21      	ldr	r3, [pc, #132]	; (800a2fc <xTaskResumeAll+0x12c>)
 800a276:	2201      	movs	r2, #1
 800a278:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a27a:	4b1c      	ldr	r3, [pc, #112]	; (800a2ec <xTaskResumeAll+0x11c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1cc      	bne.n	800a21c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a288:	f000 fb68 	bl	800a95c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a28c:	4b1c      	ldr	r3, [pc, #112]	; (800a300 <xTaskResumeAll+0x130>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d010      	beq.n	800a2ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a298:	f000 f846 	bl	800a328 <xTaskIncrementTick>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a2a2:	4b16      	ldr	r3, [pc, #88]	; (800a2fc <xTaskResumeAll+0x12c>)
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1f1      	bne.n	800a298 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a2b4:	4b12      	ldr	r3, [pc, #72]	; (800a300 <xTaskResumeAll+0x130>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2ba:	4b10      	ldr	r3, [pc, #64]	; (800a2fc <xTaskResumeAll+0x12c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d009      	beq.n	800a2d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2c6:	4b0f      	ldr	r3, [pc, #60]	; (800a304 <xTaskResumeAll+0x134>)
 800a2c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2d6:	f001 f955 	bl	800b584 <vPortExitCritical>

	return xAlreadyYielded;
 800a2da:	68bb      	ldr	r3, [r7, #8]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20002734 	.word	0x20002734
 800a2e8:	2000270c 	.word	0x2000270c
 800a2ec:	200026cc 	.word	0x200026cc
 800a2f0:	20002714 	.word	0x20002714
 800a2f4:	20002610 	.word	0x20002610
 800a2f8:	2000260c 	.word	0x2000260c
 800a2fc:	20002720 	.word	0x20002720
 800a300:	2000271c 	.word	0x2000271c
 800a304:	e000ed04 	.word	0xe000ed04

0800a308 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a30e:	4b05      	ldr	r3, [pc, #20]	; (800a324 <xTaskGetTickCount+0x1c>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a314:	687b      	ldr	r3, [r7, #4]
}
 800a316:	4618      	mov	r0, r3
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	20002710 	.word	0x20002710

0800a328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a32e:	2300      	movs	r3, #0
 800a330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a332:	4b4e      	ldr	r3, [pc, #312]	; (800a46c <xTaskIncrementTick+0x144>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f040 8088 	bne.w	800a44c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a33c:	4b4c      	ldr	r3, [pc, #304]	; (800a470 <xTaskIncrementTick+0x148>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3301      	adds	r3, #1
 800a342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a344:	4a4a      	ldr	r2, [pc, #296]	; (800a470 <xTaskIncrementTick+0x148>)
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d120      	bne.n	800a392 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a350:	4b48      	ldr	r3, [pc, #288]	; (800a474 <xTaskIncrementTick+0x14c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00a      	beq.n	800a370 <xTaskIncrementTick+0x48>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	603b      	str	r3, [r7, #0]
}
 800a36c:	bf00      	nop
 800a36e:	e7fe      	b.n	800a36e <xTaskIncrementTick+0x46>
 800a370:	4b40      	ldr	r3, [pc, #256]	; (800a474 <xTaskIncrementTick+0x14c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	4b40      	ldr	r3, [pc, #256]	; (800a478 <xTaskIncrementTick+0x150>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a3e      	ldr	r2, [pc, #248]	; (800a474 <xTaskIncrementTick+0x14c>)
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	4a3e      	ldr	r2, [pc, #248]	; (800a478 <xTaskIncrementTick+0x150>)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	4b3d      	ldr	r3, [pc, #244]	; (800a47c <xTaskIncrementTick+0x154>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3301      	adds	r3, #1
 800a38a:	4a3c      	ldr	r2, [pc, #240]	; (800a47c <xTaskIncrementTick+0x154>)
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	f000 fae5 	bl	800a95c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a392:	4b3b      	ldr	r3, [pc, #236]	; (800a480 <xTaskIncrementTick+0x158>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d348      	bcc.n	800a42e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a39c:	4b35      	ldr	r3, [pc, #212]	; (800a474 <xTaskIncrementTick+0x14c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d104      	bne.n	800a3b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3a6:	4b36      	ldr	r3, [pc, #216]	; (800a480 <xTaskIncrementTick+0x158>)
 800a3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ac:	601a      	str	r2, [r3, #0]
					break;
 800a3ae:	e03e      	b.n	800a42e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b0:	4b30      	ldr	r3, [pc, #192]	; (800a474 <xTaskIncrementTick+0x14c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d203      	bcs.n	800a3d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a3c8:	4a2d      	ldr	r2, [pc, #180]	; (800a480 <xTaskIncrementTick+0x158>)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3ce:	e02e      	b.n	800a42e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe ff3c 	bl	8009252 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d004      	beq.n	800a3ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	3318      	adds	r3, #24
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe ff33 	bl	8009252 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	409a      	lsls	r2, r3
 800a3f4:	4b23      	ldr	r3, [pc, #140]	; (800a484 <xTaskIncrementTick+0x15c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	4a22      	ldr	r2, [pc, #136]	; (800a484 <xTaskIncrementTick+0x15c>)
 800a3fc:	6013      	str	r3, [r2, #0]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a402:	4613      	mov	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4a1f      	ldr	r2, [pc, #124]	; (800a488 <xTaskIncrementTick+0x160>)
 800a40c:	441a      	add	r2, r3
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	3304      	adds	r3, #4
 800a412:	4619      	mov	r1, r3
 800a414:	4610      	mov	r0, r2
 800a416:	f7fe febf 	bl	8009198 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41e:	4b1b      	ldr	r3, [pc, #108]	; (800a48c <xTaskIncrementTick+0x164>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	429a      	cmp	r2, r3
 800a426:	d3b9      	bcc.n	800a39c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a428:	2301      	movs	r3, #1
 800a42a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a42c:	e7b6      	b.n	800a39c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a42e:	4b17      	ldr	r3, [pc, #92]	; (800a48c <xTaskIncrementTick+0x164>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a434:	4914      	ldr	r1, [pc, #80]	; (800a488 <xTaskIncrementTick+0x160>)
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	440b      	add	r3, r1
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d907      	bls.n	800a456 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a446:	2301      	movs	r3, #1
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	e004      	b.n	800a456 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a44c:	4b10      	ldr	r3, [pc, #64]	; (800a490 <xTaskIncrementTick+0x168>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3301      	adds	r3, #1
 800a452:	4a0f      	ldr	r2, [pc, #60]	; (800a490 <xTaskIncrementTick+0x168>)
 800a454:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a456:	4b0f      	ldr	r3, [pc, #60]	; (800a494 <xTaskIncrementTick+0x16c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a45e:	2301      	movs	r3, #1
 800a460:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a462:	697b      	ldr	r3, [r7, #20]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20002734 	.word	0x20002734
 800a470:	20002710 	.word	0x20002710
 800a474:	200026c4 	.word	0x200026c4
 800a478:	200026c8 	.word	0x200026c8
 800a47c:	20002724 	.word	0x20002724
 800a480:	2000272c 	.word	0x2000272c
 800a484:	20002714 	.word	0x20002714
 800a488:	20002610 	.word	0x20002610
 800a48c:	2000260c 	.word	0x2000260c
 800a490:	2000271c 	.word	0x2000271c
 800a494:	20002720 	.word	0x20002720

0800a498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a49e:	4b32      	ldr	r3, [pc, #200]	; (800a568 <vTaskSwitchContext+0xd0>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4a6:	4b31      	ldr	r3, [pc, #196]	; (800a56c <vTaskSwitchContext+0xd4>)
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4ac:	e058      	b.n	800a560 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800a4ae:	4b2f      	ldr	r3, [pc, #188]	; (800a56c <vTaskSwitchContext+0xd4>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a4b4:	f7f7 f9fa 	bl	80018ac <RTOS_AppGetRuntimeCounterValueFromISR>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	4a2d      	ldr	r2, [pc, #180]	; (800a570 <vTaskSwitchContext+0xd8>)
 800a4bc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a4be:	4b2c      	ldr	r3, [pc, #176]	; (800a570 <vTaskSwitchContext+0xd8>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	4b2c      	ldr	r3, [pc, #176]	; (800a574 <vTaskSwitchContext+0xdc>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d909      	bls.n	800a4de <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a4ca:	4b2b      	ldr	r3, [pc, #172]	; (800a578 <vTaskSwitchContext+0xe0>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800a4d0:	4a27      	ldr	r2, [pc, #156]	; (800a570 <vTaskSwitchContext+0xd8>)
 800a4d2:	6810      	ldr	r0, [r2, #0]
 800a4d4:	4a27      	ldr	r2, [pc, #156]	; (800a574 <vTaskSwitchContext+0xdc>)
 800a4d6:	6812      	ldr	r2, [r2, #0]
 800a4d8:	1a82      	subs	r2, r0, r2
 800a4da:	440a      	add	r2, r1
 800a4dc:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a4de:	4b24      	ldr	r3, [pc, #144]	; (800a570 <vTaskSwitchContext+0xd8>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a24      	ldr	r2, [pc, #144]	; (800a574 <vTaskSwitchContext+0xdc>)
 800a4e4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e6:	4b25      	ldr	r3, [pc, #148]	; (800a57c <vTaskSwitchContext+0xe4>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	fab3 f383 	clz	r3, r3
 800a4f2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	f1c3 031f 	rsb	r3, r3, #31
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	4920      	ldr	r1, [pc, #128]	; (800a580 <vTaskSwitchContext+0xe8>)
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	440b      	add	r3, r1
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <vTaskSwitchContext+0x8e>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	607b      	str	r3, [r7, #4]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <vTaskSwitchContext+0x8c>
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4a13      	ldr	r2, [pc, #76]	; (800a580 <vTaskSwitchContext+0xe8>)
 800a532:	4413      	add	r3, r2
 800a534:	613b      	str	r3, [r7, #16]
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	605a      	str	r2, [r3, #4]
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	3308      	adds	r3, #8
 800a548:	429a      	cmp	r2, r3
 800a54a:	d104      	bne.n	800a556 <vTaskSwitchContext+0xbe>
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	685a      	ldr	r2, [r3, #4]
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	605a      	str	r2, [r3, #4]
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	4a06      	ldr	r2, [pc, #24]	; (800a578 <vTaskSwitchContext+0xe0>)
 800a55e:	6013      	str	r3, [r2, #0]
}
 800a560:	bf00      	nop
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	20002734 	.word	0x20002734
 800a56c:	20002720 	.word	0x20002720
 800a570:	2000273c 	.word	0x2000273c
 800a574:	20002738 	.word	0x20002738
 800a578:	2000260c 	.word	0x2000260c
 800a57c:	20002714 	.word	0x20002714
 800a580:	20002610 	.word	0x20002610

0800a584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10a      	bne.n	800a5aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	60fb      	str	r3, [r7, #12]
}
 800a5a6:	bf00      	nop
 800a5a8:	e7fe      	b.n	800a5a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5aa:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <vTaskPlaceOnEventList+0x44>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3318      	adds	r3, #24
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7fe fe14 	bl	80091e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	6838      	ldr	r0, [r7, #0]
 800a5bc:	f000 fa92 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
}
 800a5c0:	bf00      	nop
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	2000260c 	.word	0x2000260c

0800a5cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10a      	bne.n	800a5f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	617b      	str	r3, [r7, #20]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5f4:	4b0a      	ldr	r3, [pc, #40]	; (800a620 <vTaskPlaceOnEventListRestricted+0x54>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3318      	adds	r3, #24
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f7fe fdcb 	bl	8009198 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a608:	f04f 33ff 	mov.w	r3, #4294967295
 800a60c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	68b8      	ldr	r0, [r7, #8]
 800a612:	f000 fa67 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
	}
 800a616:	bf00      	nop
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	2000260c 	.word	0x2000260c

0800a624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10a      	bne.n	800a650 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	60fb      	str	r3, [r7, #12]
}
 800a64c:	bf00      	nop
 800a64e:	e7fe      	b.n	800a64e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	3318      	adds	r3, #24
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe fdfc 	bl	8009252 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a65a:	4b1d      	ldr	r3, [pc, #116]	; (800a6d0 <xTaskRemoveFromEventList+0xac>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d11c      	bne.n	800a69c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	3304      	adds	r3, #4
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fdf3 	bl	8009252 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	2201      	movs	r2, #1
 800a672:	409a      	lsls	r2, r3
 800a674:	4b17      	ldr	r3, [pc, #92]	; (800a6d4 <xTaskRemoveFromEventList+0xb0>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4313      	orrs	r3, r2
 800a67a:	4a16      	ldr	r2, [pc, #88]	; (800a6d4 <xTaskRemoveFromEventList+0xb0>)
 800a67c:	6013      	str	r3, [r2, #0]
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4a13      	ldr	r2, [pc, #76]	; (800a6d8 <xTaskRemoveFromEventList+0xb4>)
 800a68c:	441a      	add	r2, r3
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	3304      	adds	r3, #4
 800a692:	4619      	mov	r1, r3
 800a694:	4610      	mov	r0, r2
 800a696:	f7fe fd7f 	bl	8009198 <vListInsertEnd>
 800a69a:	e005      	b.n	800a6a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	3318      	adds	r3, #24
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	480e      	ldr	r0, [pc, #56]	; (800a6dc <xTaskRemoveFromEventList+0xb8>)
 800a6a4:	f7fe fd78 	bl	8009198 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ac:	4b0c      	ldr	r3, [pc, #48]	; (800a6e0 <xTaskRemoveFromEventList+0xbc>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d905      	bls.n	800a6c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a6ba:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <xTaskRemoveFromEventList+0xc0>)
 800a6bc:	2201      	movs	r2, #1
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	e001      	b.n	800a6c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a6c6:	697b      	ldr	r3, [r7, #20]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20002734 	.word	0x20002734
 800a6d4:	20002714 	.word	0x20002714
 800a6d8:	20002610 	.word	0x20002610
 800a6dc:	200026cc 	.word	0x200026cc
 800a6e0:	2000260c 	.word	0x2000260c
 800a6e4:	20002720 	.word	0x20002720

0800a6e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6f0:	4b06      	ldr	r3, [pc, #24]	; (800a70c <vTaskInternalSetTimeOutState+0x24>)
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6f8:	4b05      	ldr	r3, [pc, #20]	; (800a710 <vTaskInternalSetTimeOutState+0x28>)
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	605a      	str	r2, [r3, #4]
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	20002724 	.word	0x20002724
 800a710:	20002710 	.word	0x20002710

0800a714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10a      	bne.n	800a73a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	613b      	str	r3, [r7, #16]
}
 800a736:	bf00      	nop
 800a738:	e7fe      	b.n	800a738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10a      	bne.n	800a756 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	60fb      	str	r3, [r7, #12]
}
 800a752:	bf00      	nop
 800a754:	e7fe      	b.n	800a754 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a756:	f000 fee5 	bl	800b524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a75a:	4b1d      	ldr	r3, [pc, #116]	; (800a7d0 <xTaskCheckForTimeOut+0xbc>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	69ba      	ldr	r2, [r7, #24]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a772:	d102      	bne.n	800a77a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a774:	2300      	movs	r3, #0
 800a776:	61fb      	str	r3, [r7, #28]
 800a778:	e023      	b.n	800a7c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4b15      	ldr	r3, [pc, #84]	; (800a7d4 <xTaskCheckForTimeOut+0xc0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d007      	beq.n	800a796 <xTaskCheckForTimeOut+0x82>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	69ba      	ldr	r2, [r7, #24]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d302      	bcc.n	800a796 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a790:	2301      	movs	r3, #1
 800a792:	61fb      	str	r3, [r7, #28]
 800a794:	e015      	b.n	800a7c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d20b      	bcs.n	800a7b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	1ad2      	subs	r2, r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff ff9b 	bl	800a6e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	61fb      	str	r3, [r7, #28]
 800a7b6:	e004      	b.n	800a7c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7c2:	f000 fedf 	bl	800b584 <vPortExitCritical>

	return xReturn;
 800a7c6:	69fb      	ldr	r3, [r7, #28]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3720      	adds	r7, #32
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20002710 	.word	0x20002710
 800a7d4:	20002724 	.word	0x20002724

0800a7d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7dc:	4b03      	ldr	r3, [pc, #12]	; (800a7ec <vTaskMissedYield+0x14>)
 800a7de:	2201      	movs	r2, #1
 800a7e0:	601a      	str	r2, [r3, #0]
}
 800a7e2:	bf00      	nop
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	20002720 	.word	0x20002720

0800a7f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7f8:	f000 f852 	bl	800a8a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7fc:	4b06      	ldr	r3, [pc, #24]	; (800a818 <prvIdleTask+0x28>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d9f9      	bls.n	800a7f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <prvIdleTask+0x2c>)
 800a806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a814:	e7f0      	b.n	800a7f8 <prvIdleTask+0x8>
 800a816:	bf00      	nop
 800a818:	20002610 	.word	0x20002610
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a826:	2300      	movs	r3, #0
 800a828:	607b      	str	r3, [r7, #4]
 800a82a:	e00c      	b.n	800a846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4a12      	ldr	r2, [pc, #72]	; (800a880 <prvInitialiseTaskLists+0x60>)
 800a838:	4413      	add	r3, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fc7f 	bl	800913e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3301      	adds	r3, #1
 800a844:	607b      	str	r3, [r7, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b06      	cmp	r3, #6
 800a84a:	d9ef      	bls.n	800a82c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a84c:	480d      	ldr	r0, [pc, #52]	; (800a884 <prvInitialiseTaskLists+0x64>)
 800a84e:	f7fe fc76 	bl	800913e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a852:	480d      	ldr	r0, [pc, #52]	; (800a888 <prvInitialiseTaskLists+0x68>)
 800a854:	f7fe fc73 	bl	800913e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a858:	480c      	ldr	r0, [pc, #48]	; (800a88c <prvInitialiseTaskLists+0x6c>)
 800a85a:	f7fe fc70 	bl	800913e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a85e:	480c      	ldr	r0, [pc, #48]	; (800a890 <prvInitialiseTaskLists+0x70>)
 800a860:	f7fe fc6d 	bl	800913e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a864:	480b      	ldr	r0, [pc, #44]	; (800a894 <prvInitialiseTaskLists+0x74>)
 800a866:	f7fe fc6a 	bl	800913e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a86a:	4b0b      	ldr	r3, [pc, #44]	; (800a898 <prvInitialiseTaskLists+0x78>)
 800a86c:	4a05      	ldr	r2, [pc, #20]	; (800a884 <prvInitialiseTaskLists+0x64>)
 800a86e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a870:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <prvInitialiseTaskLists+0x7c>)
 800a872:	4a05      	ldr	r2, [pc, #20]	; (800a888 <prvInitialiseTaskLists+0x68>)
 800a874:	601a      	str	r2, [r3, #0]
}
 800a876:	bf00      	nop
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20002610 	.word	0x20002610
 800a884:	2000269c 	.word	0x2000269c
 800a888:	200026b0 	.word	0x200026b0
 800a88c:	200026cc 	.word	0x200026cc
 800a890:	200026e0 	.word	0x200026e0
 800a894:	200026f8 	.word	0x200026f8
 800a898:	200026c4 	.word	0x200026c4
 800a89c:	200026c8 	.word	0x200026c8

0800a8a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8a6:	e019      	b.n	800a8dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8a8:	f000 fe3c 	bl	800b524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ac:	4b10      	ldr	r3, [pc, #64]	; (800a8f0 <prvCheckTasksWaitingTermination+0x50>)
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7fe fcca 	bl	8009252 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8be:	4b0d      	ldr	r3, [pc, #52]	; (800a8f4 <prvCheckTasksWaitingTermination+0x54>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	4a0b      	ldr	r2, [pc, #44]	; (800a8f4 <prvCheckTasksWaitingTermination+0x54>)
 800a8c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8c8:	4b0b      	ldr	r3, [pc, #44]	; (800a8f8 <prvCheckTasksWaitingTermination+0x58>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	4a0a      	ldr	r2, [pc, #40]	; (800a8f8 <prvCheckTasksWaitingTermination+0x58>)
 800a8d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8d2:	f000 fe57 	bl	800b584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f810 	bl	800a8fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8dc:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <prvCheckTasksWaitingTermination+0x58>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e1      	bne.n	800a8a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8e4:	bf00      	nop
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	200026e0 	.word	0x200026e0
 800a8f4:	2000270c 	.word	0x2000270c
 800a8f8:	200026f4 	.word	0x200026f4

0800a8fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d108      	bne.n	800a920 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a912:	4618      	mov	r0, r3
 800a914:	f000 ffec 	bl	800b8f0 <vPortFree>
				vPortFree( pxTCB );
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 ffe9 	bl	800b8f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a91e:	e018      	b.n	800a952 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a926:	2b01      	cmp	r3, #1
 800a928:	d103      	bne.n	800a932 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 ffe0 	bl	800b8f0 <vPortFree>
	}
 800a930:	e00f      	b.n	800a952 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d00a      	beq.n	800a952 <prvDeleteTCB+0x56>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	60fb      	str	r3, [r7, #12]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <prvDeleteTCB+0x54>
	}
 800a952:	bf00      	nop
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
	...

0800a95c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <prvResetNextTaskUnblockTime+0x38>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a96c:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <prvResetNextTaskUnblockTime+0x3c>)
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295
 800a972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a974:	e008      	b.n	800a988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <prvResetNextTaskUnblockTime+0x38>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	4a04      	ldr	r2, [pc, #16]	; (800a998 <prvResetNextTaskUnblockTime+0x3c>)
 800a986:	6013      	str	r3, [r2, #0]
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	200026c4 	.word	0x200026c4
 800a998:	2000272c 	.word	0x2000272c

0800a99c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a9a2:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <xTaskGetSchedulerState+0x34>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	607b      	str	r3, [r7, #4]
 800a9ae:	e008      	b.n	800a9c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9b0:	4b08      	ldr	r3, [pc, #32]	; (800a9d4 <xTaskGetSchedulerState+0x38>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d102      	bne.n	800a9be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	607b      	str	r3, [r7, #4]
 800a9bc:	e001      	b.n	800a9c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9c2:	687b      	ldr	r3, [r7, #4]
	}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20002718 	.word	0x20002718
 800a9d4:	20002734 	.word	0x20002734

0800a9d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d06e      	beq.n	800aacc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9ee:	4b3a      	ldr	r3, [pc, #232]	; (800aad8 <xTaskPriorityDisinherit+0x100>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d00a      	beq.n	800aa0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	60fb      	str	r3, [r7, #12]
}
 800aa0a:	bf00      	nop
 800aa0c:	e7fe      	b.n	800aa0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	60bb      	str	r3, [r7, #8]
}
 800aa28:	bf00      	nop
 800aa2a:	e7fe      	b.n	800aa2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa30:	1e5a      	subs	r2, r3, #1
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d044      	beq.n	800aacc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d140      	bne.n	800aacc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fe fbff 	bl	8009252 <uxListRemove>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d115      	bne.n	800aa86 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5e:	491f      	ldr	r1, [pc, #124]	; (800aadc <xTaskPriorityDisinherit+0x104>)
 800aa60:	4613      	mov	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	440b      	add	r3, r1
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10a      	bne.n	800aa86 <xTaskPriorityDisinherit+0xae>
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa74:	2201      	movs	r2, #1
 800aa76:	fa02 f303 	lsl.w	r3, r2, r3
 800aa7a:	43da      	mvns	r2, r3
 800aa7c:	4b18      	ldr	r3, [pc, #96]	; (800aae0 <xTaskPriorityDisinherit+0x108>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4013      	ands	r3, r2
 800aa82:	4a17      	ldr	r2, [pc, #92]	; (800aae0 <xTaskPriorityDisinherit+0x108>)
 800aa84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	f1c3 0207 	rsb	r2, r3, #7
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	409a      	lsls	r2, r3
 800aaa2:	4b0f      	ldr	r3, [pc, #60]	; (800aae0 <xTaskPriorityDisinherit+0x108>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	4a0d      	ldr	r2, [pc, #52]	; (800aae0 <xTaskPriorityDisinherit+0x108>)
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4a08      	ldr	r2, [pc, #32]	; (800aadc <xTaskPriorityDisinherit+0x104>)
 800aaba:	441a      	add	r2, r3
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f7fe fb68 	bl	8009198 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aac8:	2301      	movs	r3, #1
 800aaca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aacc:	697b      	ldr	r3, [r7, #20]
	}
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	2000260c 	.word	0x2000260c
 800aadc:	20002610 	.word	0x20002610
 800aae0:	20002714 	.word	0x20002714

0800aae4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aaee:	4b29      	ldr	r3, [pc, #164]	; (800ab94 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaf4:	4b28      	ldr	r3, [pc, #160]	; (800ab98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fe fba9 	bl	8009252 <uxListRemove>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10b      	bne.n	800ab1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ab06:	4b24      	ldr	r3, [pc, #144]	; (800ab98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab12:	43da      	mvns	r2, r3
 800ab14:	4b21      	ldr	r3, [pc, #132]	; (800ab9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4013      	ands	r3, r2
 800ab1a:	4a20      	ldr	r2, [pc, #128]	; (800ab9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab24:	d10a      	bne.n	800ab3c <prvAddCurrentTaskToDelayedList+0x58>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d007      	beq.n	800ab3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab2c:	4b1a      	ldr	r3, [pc, #104]	; (800ab98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3304      	adds	r3, #4
 800ab32:	4619      	mov	r1, r3
 800ab34:	481a      	ldr	r0, [pc, #104]	; (800aba0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ab36:	f7fe fb2f 	bl	8009198 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab3a:	e026      	b.n	800ab8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4413      	add	r3, r2
 800ab42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab44:	4b14      	ldr	r3, [pc, #80]	; (800ab98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d209      	bcs.n	800ab68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab54:	4b13      	ldr	r3, [pc, #76]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	4619      	mov	r1, r3
 800ab60:	4610      	mov	r0, r2
 800ab62:	f7fe fb3d 	bl	80091e0 <vListInsert>
}
 800ab66:	e010      	b.n	800ab8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab68:	4b0f      	ldr	r3, [pc, #60]	; (800aba8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	; (800ab98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3304      	adds	r3, #4
 800ab72:	4619      	mov	r1, r3
 800ab74:	4610      	mov	r0, r2
 800ab76:	f7fe fb33 	bl	80091e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab7a:	4b0c      	ldr	r3, [pc, #48]	; (800abac <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d202      	bcs.n	800ab8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ab84:	4a09      	ldr	r2, [pc, #36]	; (800abac <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	6013      	str	r3, [r2, #0]
}
 800ab8a:	bf00      	nop
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20002710 	.word	0x20002710
 800ab98:	2000260c 	.word	0x2000260c
 800ab9c:	20002714 	.word	0x20002714
 800aba0:	200026f8 	.word	0x200026f8
 800aba4:	200026c8 	.word	0x200026c8
 800aba8:	200026c4 	.word	0x200026c4
 800abac:	2000272c 	.word	0x2000272c

0800abb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08a      	sub	sp, #40	; 0x28
 800abb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800abba:	f000 fb47 	bl	800b24c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800abbe:	4b1c      	ldr	r3, [pc, #112]	; (800ac30 <xTimerCreateTimerTask+0x80>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d021      	beq.n	800ac0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800abc6:	2300      	movs	r3, #0
 800abc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800abca:	2300      	movs	r3, #0
 800abcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800abce:	1d3a      	adds	r2, r7, #4
 800abd0:	f107 0108 	add.w	r1, r7, #8
 800abd4:	f107 030c 	add.w	r3, r7, #12
 800abd8:	4618      	mov	r0, r3
 800abda:	f7f6 fab7 	bl	800114c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800abde:	6879      	ldr	r1, [r7, #4]
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	9202      	str	r2, [sp, #8]
 800abe6:	9301      	str	r3, [sp, #4]
 800abe8:	2307      	movs	r3, #7
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	2300      	movs	r3, #0
 800abee:	460a      	mov	r2, r1
 800abf0:	4910      	ldr	r1, [pc, #64]	; (800ac34 <xTimerCreateTimerTask+0x84>)
 800abf2:	4811      	ldr	r0, [pc, #68]	; (800ac38 <xTimerCreateTimerTask+0x88>)
 800abf4:	f7ff f840 	bl	8009c78 <xTaskCreateStatic>
 800abf8:	4603      	mov	r3, r0
 800abfa:	4a10      	ldr	r2, [pc, #64]	; (800ac3c <xTimerCreateTimerTask+0x8c>)
 800abfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800abfe:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <xTimerCreateTimerTask+0x8c>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac06:	2301      	movs	r3, #1
 800ac08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	613b      	str	r3, [r7, #16]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ac26:	697b      	ldr	r3, [r7, #20]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	20002770 	.word	0x20002770
 800ac34:	0800e790 	.word	0x0800e790
 800ac38:	0800ae2d 	.word	0x0800ae2d
 800ac3c:	20002774 	.word	0x20002774

0800ac40 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b088      	sub	sp, #32
 800ac44:	af02      	add	r7, sp, #8
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ac4e:	202c      	movs	r0, #44	; 0x2c
 800ac50:	f000 fd8a 	bl	800b768 <pvPortMalloc>
 800ac54:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00d      	beq.n	800ac78 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	9301      	str	r3, [sp, #4]
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	68b9      	ldr	r1, [r7, #8]
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f000 f805 	bl	800ac82 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ac78:	697b      	ldr	r3, [r7, #20]
	}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b086      	sub	sp, #24
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	60b9      	str	r1, [r7, #8]
 800ac8c:	607a      	str	r2, [r7, #4]
 800ac8e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10a      	bne.n	800acac <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	617b      	str	r3, [r7, #20]
}
 800aca8:	bf00      	nop
 800acaa:	e7fe      	b.n	800acaa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800acac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d01e      	beq.n	800acf0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800acb2:	f000 facb 	bl	800b24c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acca:	6a3a      	ldr	r2, [r7, #32]
 800accc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	3304      	adds	r3, #4
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fe fa53 	bl	800917e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d008      	beq.n	800acf0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ace4:	f043 0304 	orr.w	r3, r3, #4
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800acf0:	bf00      	nop
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08a      	sub	sp, #40	; 0x28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10a      	bne.n	800ad26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	623b      	str	r3, [r7, #32]
}
 800ad22:	bf00      	nop
 800ad24:	e7fe      	b.n	800ad24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad26:	4b1a      	ldr	r3, [pc, #104]	; (800ad90 <xTimerGenericCommand+0x98>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d02a      	beq.n	800ad84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b05      	cmp	r3, #5
 800ad3e:	dc18      	bgt.n	800ad72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad40:	f7ff fe2c 	bl	800a99c <xTaskGetSchedulerState>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d109      	bne.n	800ad5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad4a:	4b11      	ldr	r3, [pc, #68]	; (800ad90 <xTimerGenericCommand+0x98>)
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	f107 0114 	add.w	r1, r7, #20
 800ad52:	2300      	movs	r3, #0
 800ad54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad56:	f7fe fbab 	bl	80094b0 <xQueueGenericSend>
 800ad5a:	6278      	str	r0, [r7, #36]	; 0x24
 800ad5c:	e012      	b.n	800ad84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <xTimerGenericCommand+0x98>)
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	f107 0114 	add.w	r1, r7, #20
 800ad66:	2300      	movs	r3, #0
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f7fe fba1 	bl	80094b0 <xQueueGenericSend>
 800ad6e:	6278      	str	r0, [r7, #36]	; 0x24
 800ad70:	e008      	b.n	800ad84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad72:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <xTimerGenericCommand+0x98>)
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	f107 0114 	add.w	r1, r7, #20
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	f7fe fc95 	bl	80096ac <xQueueGenericSendFromISR>
 800ad82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3728      	adds	r7, #40	; 0x28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	20002770 	.word	0x20002770

0800ad94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad9e:	4b22      	ldr	r3, [pc, #136]	; (800ae28 <prvProcessExpiredTimer+0x94>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	3304      	adds	r3, #4
 800adac:	4618      	mov	r0, r3
 800adae:	f7fe fa50 	bl	8009252 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d022      	beq.n	800ae06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	699a      	ldr	r2, [r3, #24]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	18d1      	adds	r1, r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	6978      	ldr	r0, [r7, #20]
 800adce:	f000 f8d1 	bl	800af74 <prvInsertTimerInActiveList>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d01f      	beq.n	800ae18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800add8:	2300      	movs	r3, #0
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	2300      	movs	r3, #0
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	2100      	movs	r1, #0
 800ade2:	6978      	ldr	r0, [r7, #20]
 800ade4:	f7ff ff88 	bl	800acf8 <xTimerGenericCommand>
 800ade8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d113      	bne.n	800ae18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	60fb      	str	r3, [r7, #12]
}
 800ae02:	bf00      	nop
 800ae04:	e7fe      	b.n	800ae04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae0c:	f023 0301 	bic.w	r3, r3, #1
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	6978      	ldr	r0, [r7, #20]
 800ae1e:	4798      	blx	r3
}
 800ae20:	bf00      	nop
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	20002768 	.word	0x20002768

0800ae2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae34:	f107 0308 	add.w	r3, r7, #8
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 f857 	bl	800aeec <prvGetNextExpireTime>
 800ae3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	4619      	mov	r1, r3
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 f803 	bl	800ae50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae4a:	f000 f8d5 	bl	800aff8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae4e:	e7f1      	b.n	800ae34 <prvTimerTask+0x8>

0800ae50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae5a:	f7ff f9ab 	bl	800a1b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae5e:	f107 0308 	add.w	r3, r7, #8
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f866 	bl	800af34 <prvSampleTimeNow>
 800ae68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d130      	bne.n	800aed2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10a      	bne.n	800ae8c <prvProcessTimerOrBlockTask+0x3c>
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d806      	bhi.n	800ae8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae7e:	f7ff f9a7 	bl	800a1d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae82:	68f9      	ldr	r1, [r7, #12]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff ff85 	bl	800ad94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae8a:	e024      	b.n	800aed6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d008      	beq.n	800aea4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae92:	4b13      	ldr	r3, [pc, #76]	; (800aee0 <prvProcessTimerOrBlockTask+0x90>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <prvProcessTimerOrBlockTask+0x50>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e000      	b.n	800aea2 <prvProcessTimerOrBlockTask+0x52>
 800aea0:	2300      	movs	r3, #0
 800aea2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aea4:	4b0f      	ldr	r3, [pc, #60]	; (800aee4 <prvProcessTimerOrBlockTask+0x94>)
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f7fe fead 	bl	8009c10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aeb6:	f7ff f98b 	bl	800a1d0 <xTaskResumeAll>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10a      	bne.n	800aed6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aec0:	4b09      	ldr	r3, [pc, #36]	; (800aee8 <prvProcessTimerOrBlockTask+0x98>)
 800aec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	f3bf 8f6f 	isb	sy
}
 800aed0:	e001      	b.n	800aed6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aed2:	f7ff f97d 	bl	800a1d0 <xTaskResumeAll>
}
 800aed6:	bf00      	nop
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	2000276c 	.word	0x2000276c
 800aee4:	20002770 	.word	0x20002770
 800aee8:	e000ed04 	.word	0xe000ed04

0800aeec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aef4:	4b0e      	ldr	r3, [pc, #56]	; (800af30 <prvGetNextExpireTime+0x44>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <prvGetNextExpireTime+0x16>
 800aefe:	2201      	movs	r2, #1
 800af00:	e000      	b.n	800af04 <prvGetNextExpireTime+0x18>
 800af02:	2200      	movs	r2, #0
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d105      	bne.n	800af1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af10:	4b07      	ldr	r3, [pc, #28]	; (800af30 <prvGetNextExpireTime+0x44>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	e001      	b.n	800af20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af20:	68fb      	ldr	r3, [r7, #12]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	20002768 	.word	0x20002768

0800af34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af3c:	f7ff f9e4 	bl	800a308 <xTaskGetTickCount>
 800af40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af42:	4b0b      	ldr	r3, [pc, #44]	; (800af70 <prvSampleTimeNow+0x3c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d205      	bcs.n	800af58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af4c:	f000 f91a 	bl	800b184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	e002      	b.n	800af5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af5e:	4a04      	ldr	r2, [pc, #16]	; (800af70 <prvSampleTimeNow+0x3c>)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af64:	68fb      	ldr	r3, [r7, #12]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	20002778 	.word	0x20002778

0800af74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af82:	2300      	movs	r3, #0
 800af84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	429a      	cmp	r2, r3
 800af98:	d812      	bhi.n	800afc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	1ad2      	subs	r2, r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	699b      	ldr	r3, [r3, #24]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d302      	bcc.n	800afae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800afa8:	2301      	movs	r3, #1
 800afaa:	617b      	str	r3, [r7, #20]
 800afac:	e01b      	b.n	800afe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800afae:	4b10      	ldr	r3, [pc, #64]	; (800aff0 <prvInsertTimerInActiveList+0x7c>)
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f7fe f911 	bl	80091e0 <vListInsert>
 800afbe:	e012      	b.n	800afe6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d206      	bcs.n	800afd6 <prvInsertTimerInActiveList+0x62>
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d302      	bcc.n	800afd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800afd0:	2301      	movs	r3, #1
 800afd2:	617b      	str	r3, [r7, #20]
 800afd4:	e007      	b.n	800afe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afd6:	4b07      	ldr	r3, [pc, #28]	; (800aff4 <prvInsertTimerInActiveList+0x80>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3304      	adds	r3, #4
 800afde:	4619      	mov	r1, r3
 800afe0:	4610      	mov	r0, r2
 800afe2:	f7fe f8fd 	bl	80091e0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afe6:	697b      	ldr	r3, [r7, #20]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	2000276c 	.word	0x2000276c
 800aff4:	20002768 	.word	0x20002768

0800aff8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08c      	sub	sp, #48	; 0x30
 800affc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800affe:	e0ae      	b.n	800b15e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f2c0 80aa 	blt.w	800b15c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	695b      	ldr	r3, [r3, #20]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d004      	beq.n	800b01e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	3304      	adds	r3, #4
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fe f91a 	bl	8009252 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b01e:	1d3b      	adds	r3, r7, #4
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff ff87 	bl	800af34 <prvSampleTimeNow>
 800b026:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b09      	cmp	r3, #9
 800b02c:	f200 8097 	bhi.w	800b15e <prvProcessReceivedCommands+0x166>
 800b030:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <prvProcessReceivedCommands+0x40>)
 800b032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b036:	bf00      	nop
 800b038:	0800b061 	.word	0x0800b061
 800b03c:	0800b061 	.word	0x0800b061
 800b040:	0800b061 	.word	0x0800b061
 800b044:	0800b0d5 	.word	0x0800b0d5
 800b048:	0800b0e9 	.word	0x0800b0e9
 800b04c:	0800b133 	.word	0x0800b133
 800b050:	0800b061 	.word	0x0800b061
 800b054:	0800b061 	.word	0x0800b061
 800b058:	0800b0d5 	.word	0x0800b0d5
 800b05c:	0800b0e9 	.word	0x0800b0e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b066:	f043 0301 	orr.w	r3, r3, #1
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	18d1      	adds	r1, r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6a3a      	ldr	r2, [r7, #32]
 800b07e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b080:	f7ff ff78 	bl	800af74 <prvInsertTimerInActiveList>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d069      	beq.n	800b15e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b090:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b098:	f003 0304 	and.w	r3, r3, #4
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d05e      	beq.n	800b15e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	441a      	add	r2, r3
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0b2:	f7ff fe21 	bl	800acf8 <xTimerGenericCommand>
 800b0b6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d14f      	bne.n	800b15e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	61bb      	str	r3, [r7, #24]
}
 800b0d0:	bf00      	nop
 800b0d2:	e7fe      	b.n	800b0d2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0da:	f023 0301 	bic.w	r3, r3, #1
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0e6:	e03a      	b.n	800b15e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0ee:	f043 0301 	orr.w	r3, r3, #1
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10a      	bne.n	800b11e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	617b      	str	r3, [r7, #20]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b120:	699a      	ldr	r2, [r3, #24]
 800b122:	6a3b      	ldr	r3, [r7, #32]
 800b124:	18d1      	adds	r1, r2, r3
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	6a3a      	ldr	r2, [r7, #32]
 800b12a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b12c:	f7ff ff22 	bl	800af74 <prvInsertTimerInActiveList>
					break;
 800b130:	e015      	b.n	800b15e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b138:	f003 0302 	and.w	r3, r3, #2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d103      	bne.n	800b148 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800b140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b142:	f000 fbd5 	bl	800b8f0 <vPortFree>
 800b146:	e00a      	b.n	800b15e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b14e:	f023 0301 	bic.w	r3, r3, #1
 800b152:	b2da      	uxtb	r2, r3
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b15a:	e000      	b.n	800b15e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b15c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b15e:	4b08      	ldr	r3, [pc, #32]	; (800b180 <prvProcessReceivedCommands+0x188>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f107 0108 	add.w	r1, r7, #8
 800b166:	2200      	movs	r2, #0
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe fb37 	bl	80097dc <xQueueReceive>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	f47f af45 	bne.w	800b000 <prvProcessReceivedCommands+0x8>
	}
}
 800b176:	bf00      	nop
 800b178:	bf00      	nop
 800b17a:	3728      	adds	r7, #40	; 0x28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20002770 	.word	0x20002770

0800b184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b18a:	e048      	b.n	800b21e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b18c:	4b2d      	ldr	r3, [pc, #180]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b196:	4b2b      	ldr	r3, [pc, #172]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fe f854 	bl	8009252 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d02e      	beq.n	800b21e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d90e      	bls.n	800b1f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1de:	4b19      	ldr	r3, [pc, #100]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	f7fd fff9 	bl	80091e0 <vListInsert>
 800b1ee:	e016      	b.n	800b21e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f7ff fd7c 	bl	800acf8 <xTimerGenericCommand>
 800b200:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	603b      	str	r3, [r7, #0]
}
 800b21a:	bf00      	nop
 800b21c:	e7fe      	b.n	800b21c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b21e:	4b09      	ldr	r3, [pc, #36]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1b1      	bne.n	800b18c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b228:	4b06      	ldr	r3, [pc, #24]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b22e:	4b06      	ldr	r3, [pc, #24]	; (800b248 <prvSwitchTimerLists+0xc4>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a04      	ldr	r2, [pc, #16]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b234:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b236:	4a04      	ldr	r2, [pc, #16]	; (800b248 <prvSwitchTimerLists+0xc4>)
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	6013      	str	r3, [r2, #0]
}
 800b23c:	bf00      	nop
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	20002768 	.word	0x20002768
 800b248:	2000276c 	.word	0x2000276c

0800b24c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b252:	f000 f967 	bl	800b524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b256:	4b15      	ldr	r3, [pc, #84]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d120      	bne.n	800b2a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b25e:	4814      	ldr	r0, [pc, #80]	; (800b2b0 <prvCheckForValidListAndQueue+0x64>)
 800b260:	f7fd ff6d 	bl	800913e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b264:	4813      	ldr	r0, [pc, #76]	; (800b2b4 <prvCheckForValidListAndQueue+0x68>)
 800b266:	f7fd ff6a 	bl	800913e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b26a:	4b13      	ldr	r3, [pc, #76]	; (800b2b8 <prvCheckForValidListAndQueue+0x6c>)
 800b26c:	4a10      	ldr	r2, [pc, #64]	; (800b2b0 <prvCheckForValidListAndQueue+0x64>)
 800b26e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b270:	4b12      	ldr	r3, [pc, #72]	; (800b2bc <prvCheckForValidListAndQueue+0x70>)
 800b272:	4a10      	ldr	r2, [pc, #64]	; (800b2b4 <prvCheckForValidListAndQueue+0x68>)
 800b274:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b276:	2300      	movs	r3, #0
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4b11      	ldr	r3, [pc, #68]	; (800b2c0 <prvCheckForValidListAndQueue+0x74>)
 800b27c:	4a11      	ldr	r2, [pc, #68]	; (800b2c4 <prvCheckForValidListAndQueue+0x78>)
 800b27e:	210c      	movs	r1, #12
 800b280:	200a      	movs	r0, #10
 800b282:	f7fe f879 	bl	8009378 <xQueueGenericCreateStatic>
 800b286:	4603      	mov	r3, r0
 800b288:	4a08      	ldr	r2, [pc, #32]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b28a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b28c:	4b07      	ldr	r3, [pc, #28]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b294:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	490b      	ldr	r1, [pc, #44]	; (800b2c8 <prvCheckForValidListAndQueue+0x7c>)
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fc8e 	bl	8009bbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2a0:	f000 f970 	bl	800b584 <vPortExitCritical>
}
 800b2a4:	bf00      	nop
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20002770 	.word	0x20002770
 800b2b0:	20002740 	.word	0x20002740
 800b2b4:	20002754 	.word	0x20002754
 800b2b8:	20002768 	.word	0x20002768
 800b2bc:	2000276c 	.word	0x2000276c
 800b2c0:	200027f4 	.word	0x200027f4
 800b2c4:	2000277c 	.word	0x2000277c
 800b2c8:	0800e798 	.word	0x0800e798

0800b2cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3b04      	subs	r3, #4
 800b2dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3b04      	subs	r3, #4
 800b2ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f023 0201 	bic.w	r2, r3, #1
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3b04      	subs	r3, #4
 800b2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2fc:	4a0c      	ldr	r2, [pc, #48]	; (800b330 <pxPortInitialiseStack+0x64>)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3b14      	subs	r3, #20
 800b306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3b04      	subs	r3, #4
 800b312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f06f 0202 	mvn.w	r2, #2
 800b31a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3b20      	subs	r3, #32
 800b320:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b322:	68fb      	ldr	r3, [r7, #12]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	0800b335 	.word	0x0800b335

0800b334 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b33e:	4b12      	ldr	r3, [pc, #72]	; (800b388 <prvTaskExitError+0x54>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b346:	d00a      	beq.n	800b35e <prvTaskExitError+0x2a>
	__asm volatile
 800b348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	60fb      	str	r3, [r7, #12]
}
 800b35a:	bf00      	nop
 800b35c:	e7fe      	b.n	800b35c <prvTaskExitError+0x28>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	60bb      	str	r3, [r7, #8]
}
 800b370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b372:	bf00      	nop
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d0fc      	beq.n	800b374 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b37a:	bf00      	nop
 800b37c:	bf00      	nop
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	20000064 	.word	0x20000064
 800b38c:	00000000 	.word	0x00000000

0800b390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b390:	4b07      	ldr	r3, [pc, #28]	; (800b3b0 <pxCurrentTCBConst2>)
 800b392:	6819      	ldr	r1, [r3, #0]
 800b394:	6808      	ldr	r0, [r1, #0]
 800b396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39a:	f380 8809 	msr	PSP, r0
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f04f 0000 	mov.w	r0, #0
 800b3a6:	f380 8811 	msr	BASEPRI, r0
 800b3aa:	4770      	bx	lr
 800b3ac:	f3af 8000 	nop.w

0800b3b0 <pxCurrentTCBConst2>:
 800b3b0:	2000260c 	.word	0x2000260c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop

0800b3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3b8:	4808      	ldr	r0, [pc, #32]	; (800b3dc <prvPortStartFirstTask+0x24>)
 800b3ba:	6800      	ldr	r0, [r0, #0]
 800b3bc:	6800      	ldr	r0, [r0, #0]
 800b3be:	f380 8808 	msr	MSP, r0
 800b3c2:	f04f 0000 	mov.w	r0, #0
 800b3c6:	f380 8814 	msr	CONTROL, r0
 800b3ca:	b662      	cpsie	i
 800b3cc:	b661      	cpsie	f
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	df00      	svc	0
 800b3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3da:	bf00      	nop
 800b3dc:	e000ed08 	.word	0xe000ed08

0800b3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3e6:	4b46      	ldr	r3, [pc, #280]	; (800b500 <xPortStartScheduler+0x120>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a46      	ldr	r2, [pc, #280]	; (800b504 <xPortStartScheduler+0x124>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d10a      	bne.n	800b406 <xPortStartScheduler+0x26>
	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	613b      	str	r3, [r7, #16]
}
 800b402:	bf00      	nop
 800b404:	e7fe      	b.n	800b404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b406:	4b3e      	ldr	r3, [pc, #248]	; (800b500 <xPortStartScheduler+0x120>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a3f      	ldr	r2, [pc, #252]	; (800b508 <xPortStartScheduler+0x128>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d10a      	bne.n	800b426 <xPortStartScheduler+0x46>
	__asm volatile
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	60fb      	str	r3, [r7, #12]
}
 800b422:	bf00      	nop
 800b424:	e7fe      	b.n	800b424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b426:	4b39      	ldr	r3, [pc, #228]	; (800b50c <xPortStartScheduler+0x12c>)
 800b428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	22ff      	movs	r2, #255	; 0xff
 800b436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b440:	78fb      	ldrb	r3, [r7, #3]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	4b31      	ldr	r3, [pc, #196]	; (800b510 <xPortStartScheduler+0x130>)
 800b44c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b44e:	4b31      	ldr	r3, [pc, #196]	; (800b514 <xPortStartScheduler+0x134>)
 800b450:	2207      	movs	r2, #7
 800b452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b454:	e009      	b.n	800b46a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b456:	4b2f      	ldr	r3, [pc, #188]	; (800b514 <xPortStartScheduler+0x134>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	4a2d      	ldr	r2, [pc, #180]	; (800b514 <xPortStartScheduler+0x134>)
 800b45e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b460:	78fb      	ldrb	r3, [r7, #3]
 800b462:	b2db      	uxtb	r3, r3
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	b2db      	uxtb	r3, r3
 800b468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b46a:	78fb      	ldrb	r3, [r7, #3]
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b472:	2b80      	cmp	r3, #128	; 0x80
 800b474:	d0ef      	beq.n	800b456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b476:	4b27      	ldr	r3, [pc, #156]	; (800b514 <xPortStartScheduler+0x134>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f1c3 0307 	rsb	r3, r3, #7
 800b47e:	2b04      	cmp	r3, #4
 800b480:	d00a      	beq.n	800b498 <xPortStartScheduler+0xb8>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	60bb      	str	r3, [r7, #8]
}
 800b494:	bf00      	nop
 800b496:	e7fe      	b.n	800b496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b498:	4b1e      	ldr	r3, [pc, #120]	; (800b514 <xPortStartScheduler+0x134>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	021b      	lsls	r3, r3, #8
 800b49e:	4a1d      	ldr	r2, [pc, #116]	; (800b514 <xPortStartScheduler+0x134>)
 800b4a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4a2:	4b1c      	ldr	r3, [pc, #112]	; (800b514 <xPortStartScheduler+0x134>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4aa:	4a1a      	ldr	r2, [pc, #104]	; (800b514 <xPortStartScheduler+0x134>)
 800b4ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4b6:	4b18      	ldr	r3, [pc, #96]	; (800b518 <xPortStartScheduler+0x138>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a17      	ldr	r2, [pc, #92]	; (800b518 <xPortStartScheduler+0x138>)
 800b4bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4c2:	4b15      	ldr	r3, [pc, #84]	; (800b518 <xPortStartScheduler+0x138>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a14      	ldr	r2, [pc, #80]	; (800b518 <xPortStartScheduler+0x138>)
 800b4c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4ce:	f000 f8dd 	bl	800b68c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4d2:	4b12      	ldr	r3, [pc, #72]	; (800b51c <xPortStartScheduler+0x13c>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4d8:	f000 f8fc 	bl	800b6d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4dc:	4b10      	ldr	r3, [pc, #64]	; (800b520 <xPortStartScheduler+0x140>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a0f      	ldr	r2, [pc, #60]	; (800b520 <xPortStartScheduler+0x140>)
 800b4e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4e8:	f7ff ff66 	bl	800b3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4ec:	f7fe ffd4 	bl	800a498 <vTaskSwitchContext>
	prvTaskExitError();
 800b4f0:	f7ff ff20 	bl	800b334 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	e000ed00 	.word	0xe000ed00
 800b504:	410fc271 	.word	0x410fc271
 800b508:	410fc270 	.word	0x410fc270
 800b50c:	e000e400 	.word	0xe000e400
 800b510:	20002844 	.word	0x20002844
 800b514:	20002848 	.word	0x20002848
 800b518:	e000ed20 	.word	0xe000ed20
 800b51c:	20000064 	.word	0x20000064
 800b520:	e000ef34 	.word	0xe000ef34

0800b524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	607b      	str	r3, [r7, #4]
}
 800b53c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b53e:	4b0f      	ldr	r3, [pc, #60]	; (800b57c <vPortEnterCritical+0x58>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3301      	adds	r3, #1
 800b544:	4a0d      	ldr	r2, [pc, #52]	; (800b57c <vPortEnterCritical+0x58>)
 800b546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b548:	4b0c      	ldr	r3, [pc, #48]	; (800b57c <vPortEnterCritical+0x58>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d10f      	bne.n	800b570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b550:	4b0b      	ldr	r3, [pc, #44]	; (800b580 <vPortEnterCritical+0x5c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <vPortEnterCritical+0x4c>
	__asm volatile
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	603b      	str	r3, [r7, #0]
}
 800b56c:	bf00      	nop
 800b56e:	e7fe      	b.n	800b56e <vPortEnterCritical+0x4a>
	}
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20000064 	.word	0x20000064
 800b580:	e000ed04 	.word	0xe000ed04

0800b584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b58a:	4b12      	ldr	r3, [pc, #72]	; (800b5d4 <vPortExitCritical+0x50>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <vPortExitCritical+0x24>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	607b      	str	r3, [r7, #4]
}
 800b5a4:	bf00      	nop
 800b5a6:	e7fe      	b.n	800b5a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5a8:	4b0a      	ldr	r3, [pc, #40]	; (800b5d4 <vPortExitCritical+0x50>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	4a09      	ldr	r2, [pc, #36]	; (800b5d4 <vPortExitCritical+0x50>)
 800b5b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5b2:	4b08      	ldr	r3, [pc, #32]	; (800b5d4 <vPortExitCritical+0x50>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d105      	bne.n	800b5c6 <vPortExitCritical+0x42>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	f383 8811 	msr	BASEPRI, r3
}
 800b5c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5c6:	bf00      	nop
 800b5c8:	370c      	adds	r7, #12
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	20000064 	.word	0x20000064
	...

0800b5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5e0:	f3ef 8009 	mrs	r0, PSP
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	4b15      	ldr	r3, [pc, #84]	; (800b640 <pxCurrentTCBConst>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	f01e 0f10 	tst.w	lr, #16
 800b5f0:	bf08      	it	eq
 800b5f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fa:	6010      	str	r0, [r2, #0]
 800b5fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b600:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b604:	f380 8811 	msr	BASEPRI, r0
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f7fe ff42 	bl	800a498 <vTaskSwitchContext>
 800b614:	f04f 0000 	mov.w	r0, #0
 800b618:	f380 8811 	msr	BASEPRI, r0
 800b61c:	bc09      	pop	{r0, r3}
 800b61e:	6819      	ldr	r1, [r3, #0]
 800b620:	6808      	ldr	r0, [r1, #0]
 800b622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b626:	f01e 0f10 	tst.w	lr, #16
 800b62a:	bf08      	it	eq
 800b62c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b630:	f380 8809 	msr	PSP, r0
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	f3af 8000 	nop.w

0800b640 <pxCurrentTCBConst>:
 800b640:	2000260c 	.word	0x2000260c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop

0800b648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	607b      	str	r3, [r7, #4]
}
 800b660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b662:	f7fe fe61 	bl	800a328 <xTaskIncrementTick>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d003      	beq.n	800b674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <SysTick_Handler+0x40>)
 800b66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	2300      	movs	r3, #0
 800b676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	f383 8811 	msr	BASEPRI, r3
}
 800b67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b680:	bf00      	nop
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	e000ed04 	.word	0xe000ed04

0800b68c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b68c:	b480      	push	{r7}
 800b68e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b690:	4b0b      	ldr	r3, [pc, #44]	; (800b6c0 <vPortSetupTimerInterrupt+0x34>)
 800b692:	2200      	movs	r2, #0
 800b694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b696:	4b0b      	ldr	r3, [pc, #44]	; (800b6c4 <vPortSetupTimerInterrupt+0x38>)
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b69c:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <vPortSetupTimerInterrupt+0x3c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a0a      	ldr	r2, [pc, #40]	; (800b6cc <vPortSetupTimerInterrupt+0x40>)
 800b6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a6:	099b      	lsrs	r3, r3, #6
 800b6a8:	4a09      	ldr	r2, [pc, #36]	; (800b6d0 <vPortSetupTimerInterrupt+0x44>)
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6ae:	4b04      	ldr	r3, [pc, #16]	; (800b6c0 <vPortSetupTimerInterrupt+0x34>)
 800b6b0:	2207      	movs	r2, #7
 800b6b2:	601a      	str	r2, [r3, #0]
}
 800b6b4:	bf00      	nop
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	e000e010 	.word	0xe000e010
 800b6c4:	e000e018 	.word	0xe000e018
 800b6c8:	20000000 	.word	0x20000000
 800b6cc:	10624dd3 	.word	0x10624dd3
 800b6d0:	e000e014 	.word	0xe000e014

0800b6d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6e4 <vPortEnableVFP+0x10>
 800b6d8:	6801      	ldr	r1, [r0, #0]
 800b6da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6de:	6001      	str	r1, [r0, #0]
 800b6e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6e2:	bf00      	nop
 800b6e4:	e000ed88 	.word	0xe000ed88

0800b6e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6ee:	f3ef 8305 	mrs	r3, IPSR
 800b6f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b0f      	cmp	r3, #15
 800b6f8:	d914      	bls.n	800b724 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6fa:	4a17      	ldr	r2, [pc, #92]	; (800b758 <vPortValidateInterruptPriority+0x70>)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4413      	add	r3, r2
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b704:	4b15      	ldr	r3, [pc, #84]	; (800b75c <vPortValidateInterruptPriority+0x74>)
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	7afa      	ldrb	r2, [r7, #11]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d20a      	bcs.n	800b724 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	607b      	str	r3, [r7, #4]
}
 800b720:	bf00      	nop
 800b722:	e7fe      	b.n	800b722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b724:	4b0e      	ldr	r3, [pc, #56]	; (800b760 <vPortValidateInterruptPriority+0x78>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b72c:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <vPortValidateInterruptPriority+0x7c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	d90a      	bls.n	800b74a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	603b      	str	r3, [r7, #0]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <vPortValidateInterruptPriority+0x60>
	}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	e000e3f0 	.word	0xe000e3f0
 800b75c:	20002844 	.word	0x20002844
 800b760:	e000ed0c 	.word	0xe000ed0c
 800b764:	20002848 	.word	0x20002848

0800b768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08a      	sub	sp, #40	; 0x28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b770:	2300      	movs	r3, #0
 800b772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b774:	f7fe fd1e 	bl	800a1b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b778:	4b58      	ldr	r3, [pc, #352]	; (800b8dc <pvPortMalloc+0x174>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b780:	f000 f910 	bl	800b9a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b784:	4b56      	ldr	r3, [pc, #344]	; (800b8e0 <pvPortMalloc+0x178>)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4013      	ands	r3, r2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f040 808e 	bne.w	800b8ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d01d      	beq.n	800b7d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b798:	2208      	movs	r2, #8
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4413      	add	r3, r2
 800b79e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d014      	beq.n	800b7d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f023 0307 	bic.w	r3, r3, #7
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f003 0307 	and.w	r3, r3, #7
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00a      	beq.n	800b7d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	617b      	str	r3, [r7, #20]
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d069      	beq.n	800b8ae <pvPortMalloc+0x146>
 800b7da:	4b42      	ldr	r3, [pc, #264]	; (800b8e4 <pvPortMalloc+0x17c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d864      	bhi.n	800b8ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7e4:	4b40      	ldr	r3, [pc, #256]	; (800b8e8 <pvPortMalloc+0x180>)
 800b7e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7e8:	4b3f      	ldr	r3, [pc, #252]	; (800b8e8 <pvPortMalloc+0x180>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7ee:	e004      	b.n	800b7fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	429a      	cmp	r2, r3
 800b802:	d903      	bls.n	800b80c <pvPortMalloc+0xa4>
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1f1      	bne.n	800b7f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b80c:	4b33      	ldr	r3, [pc, #204]	; (800b8dc <pvPortMalloc+0x174>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b812:	429a      	cmp	r2, r3
 800b814:	d04b      	beq.n	800b8ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2208      	movs	r2, #8
 800b81c:	4413      	add	r3, r2
 800b81e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	2308      	movs	r3, #8
 800b832:	005b      	lsls	r3, r3, #1
 800b834:	429a      	cmp	r2, r3
 800b836:	d91f      	bls.n	800b878 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4413      	add	r3, r2
 800b83e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	f003 0307 	and.w	r3, r3, #7
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <pvPortMalloc+0xf8>
	__asm volatile
 800b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	613b      	str	r3, [r7, #16]
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	685a      	ldr	r2, [r3, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	1ad2      	subs	r2, r2, r3
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b872:	69b8      	ldr	r0, [r7, #24]
 800b874:	f000 f8f8 	bl	800ba68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b878:	4b1a      	ldr	r3, [pc, #104]	; (800b8e4 <pvPortMalloc+0x17c>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	4a18      	ldr	r2, [pc, #96]	; (800b8e4 <pvPortMalloc+0x17c>)
 800b884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b886:	4b17      	ldr	r3, [pc, #92]	; (800b8e4 <pvPortMalloc+0x17c>)
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	4b18      	ldr	r3, [pc, #96]	; (800b8ec <pvPortMalloc+0x184>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d203      	bcs.n	800b89a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b892:	4b14      	ldr	r3, [pc, #80]	; (800b8e4 <pvPortMalloc+0x17c>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a15      	ldr	r2, [pc, #84]	; (800b8ec <pvPortMalloc+0x184>)
 800b898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	4b10      	ldr	r3, [pc, #64]	; (800b8e0 <pvPortMalloc+0x178>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	431a      	orrs	r2, r3
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8ae:	f7fe fc8f 	bl	800a1d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	f003 0307 	and.w	r3, r3, #7
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00a      	beq.n	800b8d2 <pvPortMalloc+0x16a>
	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	60fb      	str	r3, [r7, #12]
}
 800b8ce:	bf00      	nop
 800b8d0:	e7fe      	b.n	800b8d0 <pvPortMalloc+0x168>
	return pvReturn;
 800b8d2:	69fb      	ldr	r3, [r7, #28]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3728      	adds	r7, #40	; 0x28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	20021c54 	.word	0x20021c54
 800b8e0:	20021c60 	.word	0x20021c60
 800b8e4:	20021c58 	.word	0x20021c58
 800b8e8:	20021c4c 	.word	0x20021c4c
 800b8ec:	20021c5c 	.word	0x20021c5c

0800b8f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d048      	beq.n	800b994 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b902:	2308      	movs	r3, #8
 800b904:	425b      	negs	r3, r3
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	4413      	add	r3, r2
 800b90a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	685a      	ldr	r2, [r3, #4]
 800b914:	4b21      	ldr	r3, [pc, #132]	; (800b99c <vPortFree+0xac>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4013      	ands	r3, r2
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d10a      	bne.n	800b934 <vPortFree+0x44>
	__asm volatile
 800b91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	60fb      	str	r3, [r7, #12]
}
 800b930:	bf00      	nop
 800b932:	e7fe      	b.n	800b932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00a      	beq.n	800b952 <vPortFree+0x62>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	60bb      	str	r3, [r7, #8]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	4b11      	ldr	r3, [pc, #68]	; (800b99c <vPortFree+0xac>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4013      	ands	r3, r2
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d019      	beq.n	800b994 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d115      	bne.n	800b994 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	4b0b      	ldr	r3, [pc, #44]	; (800b99c <vPortFree+0xac>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	43db      	mvns	r3, r3
 800b972:	401a      	ands	r2, r3
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b978:	f7fe fc1c 	bl	800a1b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <vPortFree+0xb0>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4413      	add	r3, r2
 800b986:	4a06      	ldr	r2, [pc, #24]	; (800b9a0 <vPortFree+0xb0>)
 800b988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b98a:	6938      	ldr	r0, [r7, #16]
 800b98c:	f000 f86c 	bl	800ba68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b990:	f7fe fc1e 	bl	800a1d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b994:	bf00      	nop
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	20021c60 	.word	0x20021c60
 800b9a0:	20021c58 	.word	0x20021c58

0800b9a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9aa:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800b9ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9b0:	4b27      	ldr	r3, [pc, #156]	; (800ba50 <prvHeapInit+0xac>)
 800b9b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00c      	beq.n	800b9d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3307      	adds	r3, #7
 800b9c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f023 0307 	bic.w	r3, r3, #7
 800b9ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	4a1f      	ldr	r2, [pc, #124]	; (800ba50 <prvHeapInit+0xac>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9dc:	4a1d      	ldr	r2, [pc, #116]	; (800ba54 <prvHeapInit+0xb0>)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ba54 <prvHeapInit+0xb0>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	1a9b      	subs	r3, r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0307 	bic.w	r3, r3, #7
 800b9fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4a15      	ldr	r2, [pc, #84]	; (800ba58 <prvHeapInit+0xb4>)
 800ba04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba06:	4b14      	ldr	r3, [pc, #80]	; (800ba58 <prvHeapInit+0xb4>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba0e:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <prvHeapInit+0xb4>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	1ad2      	subs	r2, r2, r3
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba24:	4b0c      	ldr	r3, [pc, #48]	; (800ba58 <prvHeapInit+0xb4>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	4a0a      	ldr	r2, [pc, #40]	; (800ba5c <prvHeapInit+0xb8>)
 800ba32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	4a09      	ldr	r2, [pc, #36]	; (800ba60 <prvHeapInit+0xbc>)
 800ba3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba3c:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <prvHeapInit+0xc0>)
 800ba3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba42:	601a      	str	r2, [r3, #0]
}
 800ba44:	bf00      	nop
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	2000284c 	.word	0x2000284c
 800ba54:	20021c4c 	.word	0x20021c4c
 800ba58:	20021c54 	.word	0x20021c54
 800ba5c:	20021c5c 	.word	0x20021c5c
 800ba60:	20021c58 	.word	0x20021c58
 800ba64:	20021c60 	.word	0x20021c60

0800ba68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba70:	4b28      	ldr	r3, [pc, #160]	; (800bb14 <prvInsertBlockIntoFreeList+0xac>)
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	e002      	b.n	800ba7c <prvInsertBlockIntoFreeList+0x14>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d8f7      	bhi.n	800ba76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	4413      	add	r3, r2
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d108      	bne.n	800baaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	441a      	add	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	441a      	add	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	429a      	cmp	r2, r3
 800babc:	d118      	bne.n	800baf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	4b15      	ldr	r3, [pc, #84]	; (800bb18 <prvInsertBlockIntoFreeList+0xb0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d00d      	beq.n	800bae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	441a      	add	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	e008      	b.n	800baf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bae6:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <prvInsertBlockIntoFreeList+0xb0>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	e003      	b.n	800baf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d002      	beq.n	800bb06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb06:	bf00      	nop
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20021c4c 	.word	0x20021c4c
 800bb18:	20021c54 	.word	0x20021c54

0800bb1c <I2C_Scan>:
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
 800bb26:	2300      	movs	r3, #0
 800bb28:	81fb      	strh	r3, [r7, #14]
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	737b      	strb	r3, [r7, #13]
 800bb2e:	2300      	movs	r3, #0
 800bb30:	81fb      	strh	r3, [r7, #14]
 800bb32:	e014      	b.n	800bb5e <I2C_Scan+0x42>
 800bb34:	89f9      	ldrh	r1, [r7, #14]
 800bb36:	2314      	movs	r3, #20
 800bb38:	2201      	movs	r2, #1
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7f9 fa96 	bl	800506c <HAL_I2C_IsDeviceReady>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d108      	bne.n	800bb58 <I2C_Scan+0x3c>
 800bb46:	7b7b      	ldrb	r3, [r7, #13]
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	89fa      	ldrh	r2, [r7, #14]
 800bb4e:	b2d2      	uxtb	r2, r2
 800bb50:	701a      	strb	r2, [r3, #0]
 800bb52:	7b7b      	ldrb	r3, [r7, #13]
 800bb54:	3301      	adds	r3, #1
 800bb56:	737b      	strb	r3, [r7, #13]
 800bb58:	89fb      	ldrh	r3, [r7, #14]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	81fb      	strh	r3, [r7, #14]
 800bb5e:	89fb      	ldrh	r3, [r7, #14]
 800bb60:	2bff      	cmp	r3, #255	; 0xff
 800bb62:	d9e7      	bls.n	800bb34 <I2C_Scan+0x18>
 800bb64:	bf00      	nop
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <Init_BMP280>:
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af04      	add	r7, sp, #16
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	23b6      	movs	r3, #182	; 0xb6
 800bb76:	733b      	strb	r3, [r7, #12]
 800bb78:	2332      	movs	r3, #50	; 0x32
 800bb7a:	9302      	str	r3, [sp, #8]
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	9301      	str	r3, [sp, #4]
 800bb80:	f107 030c 	add.w	r3, r7, #12
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	2301      	movs	r3, #1
 800bb88:	22e0      	movs	r2, #224	; 0xe0
 800bb8a:	21ee      	movs	r1, #238	; 0xee
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7f9 f973 	bl	8004e78 <HAL_I2C_Mem_Write>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <Init_BMP280+0x30>
 800bb98:	f7f6 f826 	bl	8001be8 <Error_Handler>
 800bb9c:	232f      	movs	r3, #47	; 0x2f
 800bb9e:	733b      	strb	r3, [r7, #12]
 800bba0:	2332      	movs	r3, #50	; 0x32
 800bba2:	9302      	str	r3, [sp, #8]
 800bba4:	2301      	movs	r3, #1
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	f107 030c 	add.w	r3, r7, #12
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	2301      	movs	r3, #1
 800bbb0:	22f4      	movs	r2, #244	; 0xf4
 800bbb2:	21ee      	movs	r1, #238	; 0xee
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f7f9 f95f 	bl	8004e78 <HAL_I2C_Mem_Write>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d001      	beq.n	800bbc4 <Init_BMP280+0x58>
 800bbc0:	f7f6 f812 	bl	8001be8 <Error_Handler>
 800bbc4:	bf00      	nop
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <Init_MPU9250>:
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b088      	sub	sp, #32
 800bbd0:	af04      	add	r7, sp, #16
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	2380      	movs	r3, #128	; 0x80
 800bbd6:	733b      	strb	r3, [r7, #12]
 800bbd8:	2332      	movs	r3, #50	; 0x32
 800bbda:	9302      	str	r3, [sp, #8]
 800bbdc:	2301      	movs	r3, #1
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	f107 030c 	add.w	r3, r7, #12
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	226b      	movs	r2, #107	; 0x6b
 800bbea:	21d0      	movs	r1, #208	; 0xd0
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7f9 f943 	bl	8004e78 <HAL_I2C_Mem_Write>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <Init_MPU9250+0x30>
 800bbf8:	f7f5 fff6 	bl	8001be8 <Error_Handler>
 800bbfc:	2064      	movs	r0, #100	; 0x64
 800bbfe:	f7f7 fea3 	bl	8003948 <HAL_Delay>
 800bc02:	2301      	movs	r3, #1
 800bc04:	733b      	strb	r3, [r7, #12]
 800bc06:	2332      	movs	r3, #50	; 0x32
 800bc08:	9302      	str	r3, [sp, #8]
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	9301      	str	r3, [sp, #4]
 800bc0e:	f107 030c 	add.w	r3, r7, #12
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	2301      	movs	r3, #1
 800bc16:	226b      	movs	r2, #107	; 0x6b
 800bc18:	21d0      	movs	r1, #208	; 0xd0
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7f9 f92c 	bl	8004e78 <HAL_I2C_Mem_Write>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d001      	beq.n	800bc2a <Init_MPU9250+0x5e>
 800bc26:	f7f5 ffdf 	bl	8001be8 <Error_Handler>
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	733b      	strb	r3, [r7, #12]
 800bc2e:	2332      	movs	r3, #50	; 0x32
 800bc30:	9302      	str	r3, [sp, #8]
 800bc32:	2301      	movs	r3, #1
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	f107 030c 	add.w	r3, r7, #12
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	2237      	movs	r2, #55	; 0x37
 800bc40:	21d0      	movs	r1, #208	; 0xd0
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7f9 f918 	bl	8004e78 <HAL_I2C_Mem_Write>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <Init_MPU9250+0x86>
 800bc4e:	f7f5 ffcb 	bl	8001be8 <Error_Handler>
 800bc52:	2316      	movs	r3, #22
 800bc54:	733b      	strb	r3, [r7, #12]
 800bc56:	2332      	movs	r3, #50	; 0x32
 800bc58:	9302      	str	r3, [sp, #8]
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	9301      	str	r3, [sp, #4]
 800bc5e:	f107 030c 	add.w	r3, r7, #12
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	2301      	movs	r3, #1
 800bc66:	220a      	movs	r2, #10
 800bc68:	2118      	movs	r1, #24
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7f9 f904 	bl	8004e78 <HAL_I2C_Mem_Write>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <Init_MPU9250+0xae>
 800bc76:	f7f5 ffb7 	bl	8001be8 <Error_Handler>
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <__errno>:
 800bc84:	4b01      	ldr	r3, [pc, #4]	; (800bc8c <__errno+0x8>)
 800bc86:	6818      	ldr	r0, [r3, #0]
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	20000068 	.word	0x20000068

0800bc90 <__libc_init_array>:
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	4d0d      	ldr	r5, [pc, #52]	; (800bcc8 <__libc_init_array+0x38>)
 800bc94:	4c0d      	ldr	r4, [pc, #52]	; (800bccc <__libc_init_array+0x3c>)
 800bc96:	1b64      	subs	r4, r4, r5
 800bc98:	10a4      	asrs	r4, r4, #2
 800bc9a:	2600      	movs	r6, #0
 800bc9c:	42a6      	cmp	r6, r4
 800bc9e:	d109      	bne.n	800bcb4 <__libc_init_array+0x24>
 800bca0:	4d0b      	ldr	r5, [pc, #44]	; (800bcd0 <__libc_init_array+0x40>)
 800bca2:	4c0c      	ldr	r4, [pc, #48]	; (800bcd4 <__libc_init_array+0x44>)
 800bca4:	f002 fd08 	bl	800e6b8 <_init>
 800bca8:	1b64      	subs	r4, r4, r5
 800bcaa:	10a4      	asrs	r4, r4, #2
 800bcac:	2600      	movs	r6, #0
 800bcae:	42a6      	cmp	r6, r4
 800bcb0:	d105      	bne.n	800bcbe <__libc_init_array+0x2e>
 800bcb2:	bd70      	pop	{r4, r5, r6, pc}
 800bcb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcb8:	4798      	blx	r3
 800bcba:	3601      	adds	r6, #1
 800bcbc:	e7ee      	b.n	800bc9c <__libc_init_array+0xc>
 800bcbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcc2:	4798      	blx	r3
 800bcc4:	3601      	adds	r6, #1
 800bcc6:	e7f2      	b.n	800bcae <__libc_init_array+0x1e>
 800bcc8:	080116b4 	.word	0x080116b4
 800bccc:	080116b4 	.word	0x080116b4
 800bcd0:	080116b4 	.word	0x080116b4
 800bcd4:	080116b8 	.word	0x080116b8

0800bcd8 <memcpy>:
 800bcd8:	440a      	add	r2, r1
 800bcda:	4291      	cmp	r1, r2
 800bcdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bce0:	d100      	bne.n	800bce4 <memcpy+0xc>
 800bce2:	4770      	bx	lr
 800bce4:	b510      	push	{r4, lr}
 800bce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcee:	4291      	cmp	r1, r2
 800bcf0:	d1f9      	bne.n	800bce6 <memcpy+0xe>
 800bcf2:	bd10      	pop	{r4, pc}

0800bcf4 <memset>:
 800bcf4:	4402      	add	r2, r0
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d100      	bne.n	800bcfe <memset+0xa>
 800bcfc:	4770      	bx	lr
 800bcfe:	f803 1b01 	strb.w	r1, [r3], #1
 800bd02:	e7f9      	b.n	800bcf8 <memset+0x4>

0800bd04 <__cvt>:
 800bd04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd08:	ec55 4b10 	vmov	r4, r5, d0
 800bd0c:	2d00      	cmp	r5, #0
 800bd0e:	460e      	mov	r6, r1
 800bd10:	4619      	mov	r1, r3
 800bd12:	462b      	mov	r3, r5
 800bd14:	bfbb      	ittet	lt
 800bd16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd1a:	461d      	movlt	r5, r3
 800bd1c:	2300      	movge	r3, #0
 800bd1e:	232d      	movlt	r3, #45	; 0x2d
 800bd20:	700b      	strb	r3, [r1, #0]
 800bd22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd28:	4691      	mov	r9, r2
 800bd2a:	f023 0820 	bic.w	r8, r3, #32
 800bd2e:	bfbc      	itt	lt
 800bd30:	4622      	movlt	r2, r4
 800bd32:	4614      	movlt	r4, r2
 800bd34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd38:	d005      	beq.n	800bd46 <__cvt+0x42>
 800bd3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd3e:	d100      	bne.n	800bd42 <__cvt+0x3e>
 800bd40:	3601      	adds	r6, #1
 800bd42:	2102      	movs	r1, #2
 800bd44:	e000      	b.n	800bd48 <__cvt+0x44>
 800bd46:	2103      	movs	r1, #3
 800bd48:	ab03      	add	r3, sp, #12
 800bd4a:	9301      	str	r3, [sp, #4]
 800bd4c:	ab02      	add	r3, sp, #8
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	ec45 4b10 	vmov	d0, r4, r5
 800bd54:	4653      	mov	r3, sl
 800bd56:	4632      	mov	r2, r6
 800bd58:	f000 fce2 	bl	800c720 <_dtoa_r>
 800bd5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd60:	4607      	mov	r7, r0
 800bd62:	d102      	bne.n	800bd6a <__cvt+0x66>
 800bd64:	f019 0f01 	tst.w	r9, #1
 800bd68:	d022      	beq.n	800bdb0 <__cvt+0xac>
 800bd6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd6e:	eb07 0906 	add.w	r9, r7, r6
 800bd72:	d110      	bne.n	800bd96 <__cvt+0x92>
 800bd74:	783b      	ldrb	r3, [r7, #0]
 800bd76:	2b30      	cmp	r3, #48	; 0x30
 800bd78:	d10a      	bne.n	800bd90 <__cvt+0x8c>
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4620      	mov	r0, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	f7f4 feb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd86:	b918      	cbnz	r0, 800bd90 <__cvt+0x8c>
 800bd88:	f1c6 0601 	rsb	r6, r6, #1
 800bd8c:	f8ca 6000 	str.w	r6, [sl]
 800bd90:	f8da 3000 	ldr.w	r3, [sl]
 800bd94:	4499      	add	r9, r3
 800bd96:	2200      	movs	r2, #0
 800bd98:	2300      	movs	r3, #0
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	f7f4 fea3 	bl	8000ae8 <__aeabi_dcmpeq>
 800bda2:	b108      	cbz	r0, 800bda8 <__cvt+0xa4>
 800bda4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bda8:	2230      	movs	r2, #48	; 0x30
 800bdaa:	9b03      	ldr	r3, [sp, #12]
 800bdac:	454b      	cmp	r3, r9
 800bdae:	d307      	bcc.n	800bdc0 <__cvt+0xbc>
 800bdb0:	9b03      	ldr	r3, [sp, #12]
 800bdb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdb4:	1bdb      	subs	r3, r3, r7
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	6013      	str	r3, [r2, #0]
 800bdba:	b004      	add	sp, #16
 800bdbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdc0:	1c59      	adds	r1, r3, #1
 800bdc2:	9103      	str	r1, [sp, #12]
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	e7f0      	b.n	800bdaa <__cvt+0xa6>

0800bdc8 <__exponent>:
 800bdc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	bfb8      	it	lt
 800bdd0:	4249      	neglt	r1, r1
 800bdd2:	f803 2b02 	strb.w	r2, [r3], #2
 800bdd6:	bfb4      	ite	lt
 800bdd8:	222d      	movlt	r2, #45	; 0x2d
 800bdda:	222b      	movge	r2, #43	; 0x2b
 800bddc:	2909      	cmp	r1, #9
 800bdde:	7042      	strb	r2, [r0, #1]
 800bde0:	dd2a      	ble.n	800be38 <__exponent+0x70>
 800bde2:	f10d 0407 	add.w	r4, sp, #7
 800bde6:	46a4      	mov	ip, r4
 800bde8:	270a      	movs	r7, #10
 800bdea:	46a6      	mov	lr, r4
 800bdec:	460a      	mov	r2, r1
 800bdee:	fb91 f6f7 	sdiv	r6, r1, r7
 800bdf2:	fb07 1516 	mls	r5, r7, r6, r1
 800bdf6:	3530      	adds	r5, #48	; 0x30
 800bdf8:	2a63      	cmp	r2, #99	; 0x63
 800bdfa:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be02:	4631      	mov	r1, r6
 800be04:	dcf1      	bgt.n	800bdea <__exponent+0x22>
 800be06:	3130      	adds	r1, #48	; 0x30
 800be08:	f1ae 0502 	sub.w	r5, lr, #2
 800be0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be10:	1c44      	adds	r4, r0, #1
 800be12:	4629      	mov	r1, r5
 800be14:	4561      	cmp	r1, ip
 800be16:	d30a      	bcc.n	800be2e <__exponent+0x66>
 800be18:	f10d 0209 	add.w	r2, sp, #9
 800be1c:	eba2 020e 	sub.w	r2, r2, lr
 800be20:	4565      	cmp	r5, ip
 800be22:	bf88      	it	hi
 800be24:	2200      	movhi	r2, #0
 800be26:	4413      	add	r3, r2
 800be28:	1a18      	subs	r0, r3, r0
 800be2a:	b003      	add	sp, #12
 800be2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be32:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be36:	e7ed      	b.n	800be14 <__exponent+0x4c>
 800be38:	2330      	movs	r3, #48	; 0x30
 800be3a:	3130      	adds	r1, #48	; 0x30
 800be3c:	7083      	strb	r3, [r0, #2]
 800be3e:	70c1      	strb	r1, [r0, #3]
 800be40:	1d03      	adds	r3, r0, #4
 800be42:	e7f1      	b.n	800be28 <__exponent+0x60>

0800be44 <_printf_float>:
 800be44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	ed2d 8b02 	vpush	{d8}
 800be4c:	b08d      	sub	sp, #52	; 0x34
 800be4e:	460c      	mov	r4, r1
 800be50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be54:	4616      	mov	r6, r2
 800be56:	461f      	mov	r7, r3
 800be58:	4605      	mov	r5, r0
 800be5a:	f001 fb43 	bl	800d4e4 <_localeconv_r>
 800be5e:	f8d0 a000 	ldr.w	sl, [r0]
 800be62:	4650      	mov	r0, sl
 800be64:	f7f4 f9c4 	bl	80001f0 <strlen>
 800be68:	2300      	movs	r3, #0
 800be6a:	930a      	str	r3, [sp, #40]	; 0x28
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	9305      	str	r3, [sp, #20]
 800be70:	f8d8 3000 	ldr.w	r3, [r8]
 800be74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be78:	3307      	adds	r3, #7
 800be7a:	f023 0307 	bic.w	r3, r3, #7
 800be7e:	f103 0208 	add.w	r2, r3, #8
 800be82:	f8c8 2000 	str.w	r2, [r8]
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be96:	9307      	str	r3, [sp, #28]
 800be98:	f8cd 8018 	str.w	r8, [sp, #24]
 800be9c:	ee08 0a10 	vmov	s16, r0
 800bea0:	4b9f      	ldr	r3, [pc, #636]	; (800c120 <_printf_float+0x2dc>)
 800bea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bea6:	f04f 32ff 	mov.w	r2, #4294967295
 800beaa:	f7f4 fe4f 	bl	8000b4c <__aeabi_dcmpun>
 800beae:	bb88      	cbnz	r0, 800bf14 <_printf_float+0xd0>
 800beb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800beb4:	4b9a      	ldr	r3, [pc, #616]	; (800c120 <_printf_float+0x2dc>)
 800beb6:	f04f 32ff 	mov.w	r2, #4294967295
 800beba:	f7f4 fe29 	bl	8000b10 <__aeabi_dcmple>
 800bebe:	bb48      	cbnz	r0, 800bf14 <_printf_float+0xd0>
 800bec0:	2200      	movs	r2, #0
 800bec2:	2300      	movs	r3, #0
 800bec4:	4640      	mov	r0, r8
 800bec6:	4649      	mov	r1, r9
 800bec8:	f7f4 fe18 	bl	8000afc <__aeabi_dcmplt>
 800becc:	b110      	cbz	r0, 800bed4 <_printf_float+0x90>
 800bece:	232d      	movs	r3, #45	; 0x2d
 800bed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bed4:	4b93      	ldr	r3, [pc, #588]	; (800c124 <_printf_float+0x2e0>)
 800bed6:	4894      	ldr	r0, [pc, #592]	; (800c128 <_printf_float+0x2e4>)
 800bed8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bedc:	bf94      	ite	ls
 800bede:	4698      	movls	r8, r3
 800bee0:	4680      	movhi	r8, r0
 800bee2:	2303      	movs	r3, #3
 800bee4:	6123      	str	r3, [r4, #16]
 800bee6:	9b05      	ldr	r3, [sp, #20]
 800bee8:	f023 0204 	bic.w	r2, r3, #4
 800beec:	6022      	str	r2, [r4, #0]
 800beee:	f04f 0900 	mov.w	r9, #0
 800bef2:	9700      	str	r7, [sp, #0]
 800bef4:	4633      	mov	r3, r6
 800bef6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bef8:	4621      	mov	r1, r4
 800befa:	4628      	mov	r0, r5
 800befc:	f000 f9d8 	bl	800c2b0 <_printf_common>
 800bf00:	3001      	adds	r0, #1
 800bf02:	f040 8090 	bne.w	800c026 <_printf_float+0x1e2>
 800bf06:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0a:	b00d      	add	sp, #52	; 0x34
 800bf0c:	ecbd 8b02 	vpop	{d8}
 800bf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf14:	4642      	mov	r2, r8
 800bf16:	464b      	mov	r3, r9
 800bf18:	4640      	mov	r0, r8
 800bf1a:	4649      	mov	r1, r9
 800bf1c:	f7f4 fe16 	bl	8000b4c <__aeabi_dcmpun>
 800bf20:	b140      	cbz	r0, 800bf34 <_printf_float+0xf0>
 800bf22:	464b      	mov	r3, r9
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	bfbc      	itt	lt
 800bf28:	232d      	movlt	r3, #45	; 0x2d
 800bf2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf2e:	487f      	ldr	r0, [pc, #508]	; (800c12c <_printf_float+0x2e8>)
 800bf30:	4b7f      	ldr	r3, [pc, #508]	; (800c130 <_printf_float+0x2ec>)
 800bf32:	e7d1      	b.n	800bed8 <_printf_float+0x94>
 800bf34:	6863      	ldr	r3, [r4, #4]
 800bf36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf3a:	9206      	str	r2, [sp, #24]
 800bf3c:	1c5a      	adds	r2, r3, #1
 800bf3e:	d13f      	bne.n	800bfc0 <_printf_float+0x17c>
 800bf40:	2306      	movs	r3, #6
 800bf42:	6063      	str	r3, [r4, #4]
 800bf44:	9b05      	ldr	r3, [sp, #20]
 800bf46:	6861      	ldr	r1, [r4, #4]
 800bf48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9303      	str	r3, [sp, #12]
 800bf50:	ab0a      	add	r3, sp, #40	; 0x28
 800bf52:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf56:	ab09      	add	r3, sp, #36	; 0x24
 800bf58:	ec49 8b10 	vmov	d0, r8, r9
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	6022      	str	r2, [r4, #0]
 800bf60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf64:	4628      	mov	r0, r5
 800bf66:	f7ff fecd 	bl	800bd04 <__cvt>
 800bf6a:	9b06      	ldr	r3, [sp, #24]
 800bf6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf6e:	2b47      	cmp	r3, #71	; 0x47
 800bf70:	4680      	mov	r8, r0
 800bf72:	d108      	bne.n	800bf86 <_printf_float+0x142>
 800bf74:	1cc8      	adds	r0, r1, #3
 800bf76:	db02      	blt.n	800bf7e <_printf_float+0x13a>
 800bf78:	6863      	ldr	r3, [r4, #4]
 800bf7a:	4299      	cmp	r1, r3
 800bf7c:	dd41      	ble.n	800c002 <_printf_float+0x1be>
 800bf7e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf82:	fa5f fb8b 	uxtb.w	fp, fp
 800bf86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf8a:	d820      	bhi.n	800bfce <_printf_float+0x18a>
 800bf8c:	3901      	subs	r1, #1
 800bf8e:	465a      	mov	r2, fp
 800bf90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf94:	9109      	str	r1, [sp, #36]	; 0x24
 800bf96:	f7ff ff17 	bl	800bdc8 <__exponent>
 800bf9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf9c:	1813      	adds	r3, r2, r0
 800bf9e:	2a01      	cmp	r2, #1
 800bfa0:	4681      	mov	r9, r0
 800bfa2:	6123      	str	r3, [r4, #16]
 800bfa4:	dc02      	bgt.n	800bfac <_printf_float+0x168>
 800bfa6:	6822      	ldr	r2, [r4, #0]
 800bfa8:	07d2      	lsls	r2, r2, #31
 800bfaa:	d501      	bpl.n	800bfb0 <_printf_float+0x16c>
 800bfac:	3301      	adds	r3, #1
 800bfae:	6123      	str	r3, [r4, #16]
 800bfb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d09c      	beq.n	800bef2 <_printf_float+0xae>
 800bfb8:	232d      	movs	r3, #45	; 0x2d
 800bfba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfbe:	e798      	b.n	800bef2 <_printf_float+0xae>
 800bfc0:	9a06      	ldr	r2, [sp, #24]
 800bfc2:	2a47      	cmp	r2, #71	; 0x47
 800bfc4:	d1be      	bne.n	800bf44 <_printf_float+0x100>
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1bc      	bne.n	800bf44 <_printf_float+0x100>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e7b9      	b.n	800bf42 <_printf_float+0xfe>
 800bfce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bfd2:	d118      	bne.n	800c006 <_printf_float+0x1c2>
 800bfd4:	2900      	cmp	r1, #0
 800bfd6:	6863      	ldr	r3, [r4, #4]
 800bfd8:	dd0b      	ble.n	800bff2 <_printf_float+0x1ae>
 800bfda:	6121      	str	r1, [r4, #16]
 800bfdc:	b913      	cbnz	r3, 800bfe4 <_printf_float+0x1a0>
 800bfde:	6822      	ldr	r2, [r4, #0]
 800bfe0:	07d0      	lsls	r0, r2, #31
 800bfe2:	d502      	bpl.n	800bfea <_printf_float+0x1a6>
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	440b      	add	r3, r1
 800bfe8:	6123      	str	r3, [r4, #16]
 800bfea:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfec:	f04f 0900 	mov.w	r9, #0
 800bff0:	e7de      	b.n	800bfb0 <_printf_float+0x16c>
 800bff2:	b913      	cbnz	r3, 800bffa <_printf_float+0x1b6>
 800bff4:	6822      	ldr	r2, [r4, #0]
 800bff6:	07d2      	lsls	r2, r2, #31
 800bff8:	d501      	bpl.n	800bffe <_printf_float+0x1ba>
 800bffa:	3302      	adds	r3, #2
 800bffc:	e7f4      	b.n	800bfe8 <_printf_float+0x1a4>
 800bffe:	2301      	movs	r3, #1
 800c000:	e7f2      	b.n	800bfe8 <_printf_float+0x1a4>
 800c002:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c008:	4299      	cmp	r1, r3
 800c00a:	db05      	blt.n	800c018 <_printf_float+0x1d4>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	6121      	str	r1, [r4, #16]
 800c010:	07d8      	lsls	r0, r3, #31
 800c012:	d5ea      	bpl.n	800bfea <_printf_float+0x1a6>
 800c014:	1c4b      	adds	r3, r1, #1
 800c016:	e7e7      	b.n	800bfe8 <_printf_float+0x1a4>
 800c018:	2900      	cmp	r1, #0
 800c01a:	bfd4      	ite	le
 800c01c:	f1c1 0202 	rsble	r2, r1, #2
 800c020:	2201      	movgt	r2, #1
 800c022:	4413      	add	r3, r2
 800c024:	e7e0      	b.n	800bfe8 <_printf_float+0x1a4>
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	055a      	lsls	r2, r3, #21
 800c02a:	d407      	bmi.n	800c03c <_printf_float+0x1f8>
 800c02c:	6923      	ldr	r3, [r4, #16]
 800c02e:	4642      	mov	r2, r8
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	d12c      	bne.n	800c094 <_printf_float+0x250>
 800c03a:	e764      	b.n	800bf06 <_printf_float+0xc2>
 800c03c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c040:	f240 80e0 	bls.w	800c204 <_printf_float+0x3c0>
 800c044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c048:	2200      	movs	r2, #0
 800c04a:	2300      	movs	r3, #0
 800c04c:	f7f4 fd4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c050:	2800      	cmp	r0, #0
 800c052:	d034      	beq.n	800c0be <_printf_float+0x27a>
 800c054:	4a37      	ldr	r2, [pc, #220]	; (800c134 <_printf_float+0x2f0>)
 800c056:	2301      	movs	r3, #1
 800c058:	4631      	mov	r1, r6
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b8      	blx	r7
 800c05e:	3001      	adds	r0, #1
 800c060:	f43f af51 	beq.w	800bf06 <_printf_float+0xc2>
 800c064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c068:	429a      	cmp	r2, r3
 800c06a:	db02      	blt.n	800c072 <_printf_float+0x22e>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	07d8      	lsls	r0, r3, #31
 800c070:	d510      	bpl.n	800c094 <_printf_float+0x250>
 800c072:	ee18 3a10 	vmov	r3, s16
 800c076:	4652      	mov	r2, sl
 800c078:	4631      	mov	r1, r6
 800c07a:	4628      	mov	r0, r5
 800c07c:	47b8      	blx	r7
 800c07e:	3001      	adds	r0, #1
 800c080:	f43f af41 	beq.w	800bf06 <_printf_float+0xc2>
 800c084:	f04f 0800 	mov.w	r8, #0
 800c088:	f104 091a 	add.w	r9, r4, #26
 800c08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c08e:	3b01      	subs	r3, #1
 800c090:	4543      	cmp	r3, r8
 800c092:	dc09      	bgt.n	800c0a8 <_printf_float+0x264>
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	079b      	lsls	r3, r3, #30
 800c098:	f100 8105 	bmi.w	800c2a6 <_printf_float+0x462>
 800c09c:	68e0      	ldr	r0, [r4, #12]
 800c09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0a0:	4298      	cmp	r0, r3
 800c0a2:	bfb8      	it	lt
 800c0a4:	4618      	movlt	r0, r3
 800c0a6:	e730      	b.n	800bf0a <_printf_float+0xc6>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	464a      	mov	r2, r9
 800c0ac:	4631      	mov	r1, r6
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	47b8      	blx	r7
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	f43f af27 	beq.w	800bf06 <_printf_float+0xc2>
 800c0b8:	f108 0801 	add.w	r8, r8, #1
 800c0bc:	e7e6      	b.n	800c08c <_printf_float+0x248>
 800c0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	dc39      	bgt.n	800c138 <_printf_float+0x2f4>
 800c0c4:	4a1b      	ldr	r2, [pc, #108]	; (800c134 <_printf_float+0x2f0>)
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	4631      	mov	r1, r6
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	47b8      	blx	r7
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	f43f af19 	beq.w	800bf06 <_printf_float+0xc2>
 800c0d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	d102      	bne.n	800c0e2 <_printf_float+0x29e>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	07d9      	lsls	r1, r3, #31
 800c0e0:	d5d8      	bpl.n	800c094 <_printf_float+0x250>
 800c0e2:	ee18 3a10 	vmov	r3, s16
 800c0e6:	4652      	mov	r2, sl
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	47b8      	blx	r7
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	f43f af09 	beq.w	800bf06 <_printf_float+0xc2>
 800c0f4:	f04f 0900 	mov.w	r9, #0
 800c0f8:	f104 0a1a 	add.w	sl, r4, #26
 800c0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0fe:	425b      	negs	r3, r3
 800c100:	454b      	cmp	r3, r9
 800c102:	dc01      	bgt.n	800c108 <_printf_float+0x2c4>
 800c104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c106:	e792      	b.n	800c02e <_printf_float+0x1ea>
 800c108:	2301      	movs	r3, #1
 800c10a:	4652      	mov	r2, sl
 800c10c:	4631      	mov	r1, r6
 800c10e:	4628      	mov	r0, r5
 800c110:	47b8      	blx	r7
 800c112:	3001      	adds	r0, #1
 800c114:	f43f aef7 	beq.w	800bf06 <_printf_float+0xc2>
 800c118:	f109 0901 	add.w	r9, r9, #1
 800c11c:	e7ee      	b.n	800c0fc <_printf_float+0x2b8>
 800c11e:	bf00      	nop
 800c120:	7fefffff 	.word	0x7fefffff
 800c124:	080112d0 	.word	0x080112d0
 800c128:	080112d4 	.word	0x080112d4
 800c12c:	080112dc 	.word	0x080112dc
 800c130:	080112d8 	.word	0x080112d8
 800c134:	080112e0 	.word	0x080112e0
 800c138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c13a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c13c:	429a      	cmp	r2, r3
 800c13e:	bfa8      	it	ge
 800c140:	461a      	movge	r2, r3
 800c142:	2a00      	cmp	r2, #0
 800c144:	4691      	mov	r9, r2
 800c146:	dc37      	bgt.n	800c1b8 <_printf_float+0x374>
 800c148:	f04f 0b00 	mov.w	fp, #0
 800c14c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c150:	f104 021a 	add.w	r2, r4, #26
 800c154:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c156:	9305      	str	r3, [sp, #20]
 800c158:	eba3 0309 	sub.w	r3, r3, r9
 800c15c:	455b      	cmp	r3, fp
 800c15e:	dc33      	bgt.n	800c1c8 <_printf_float+0x384>
 800c160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c164:	429a      	cmp	r2, r3
 800c166:	db3b      	blt.n	800c1e0 <_printf_float+0x39c>
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	07da      	lsls	r2, r3, #31
 800c16c:	d438      	bmi.n	800c1e0 <_printf_float+0x39c>
 800c16e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c170:	9b05      	ldr	r3, [sp, #20]
 800c172:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	eba2 0901 	sub.w	r9, r2, r1
 800c17a:	4599      	cmp	r9, r3
 800c17c:	bfa8      	it	ge
 800c17e:	4699      	movge	r9, r3
 800c180:	f1b9 0f00 	cmp.w	r9, #0
 800c184:	dc35      	bgt.n	800c1f2 <_printf_float+0x3ae>
 800c186:	f04f 0800 	mov.w	r8, #0
 800c18a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c18e:	f104 0a1a 	add.w	sl, r4, #26
 800c192:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c196:	1a9b      	subs	r3, r3, r2
 800c198:	eba3 0309 	sub.w	r3, r3, r9
 800c19c:	4543      	cmp	r3, r8
 800c19e:	f77f af79 	ble.w	800c094 <_printf_float+0x250>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4652      	mov	r2, sl
 800c1a6:	4631      	mov	r1, r6
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	47b8      	blx	r7
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	f43f aeaa 	beq.w	800bf06 <_printf_float+0xc2>
 800c1b2:	f108 0801 	add.w	r8, r8, #1
 800c1b6:	e7ec      	b.n	800c192 <_printf_float+0x34e>
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	4631      	mov	r1, r6
 800c1bc:	4642      	mov	r2, r8
 800c1be:	4628      	mov	r0, r5
 800c1c0:	47b8      	blx	r7
 800c1c2:	3001      	adds	r0, #1
 800c1c4:	d1c0      	bne.n	800c148 <_printf_float+0x304>
 800c1c6:	e69e      	b.n	800bf06 <_printf_float+0xc2>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	9205      	str	r2, [sp, #20]
 800c1d0:	47b8      	blx	r7
 800c1d2:	3001      	adds	r0, #1
 800c1d4:	f43f ae97 	beq.w	800bf06 <_printf_float+0xc2>
 800c1d8:	9a05      	ldr	r2, [sp, #20]
 800c1da:	f10b 0b01 	add.w	fp, fp, #1
 800c1de:	e7b9      	b.n	800c154 <_printf_float+0x310>
 800c1e0:	ee18 3a10 	vmov	r3, s16
 800c1e4:	4652      	mov	r2, sl
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	47b8      	blx	r7
 800c1ec:	3001      	adds	r0, #1
 800c1ee:	d1be      	bne.n	800c16e <_printf_float+0x32a>
 800c1f0:	e689      	b.n	800bf06 <_printf_float+0xc2>
 800c1f2:	9a05      	ldr	r2, [sp, #20]
 800c1f4:	464b      	mov	r3, r9
 800c1f6:	4442      	add	r2, r8
 800c1f8:	4631      	mov	r1, r6
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	47b8      	blx	r7
 800c1fe:	3001      	adds	r0, #1
 800c200:	d1c1      	bne.n	800c186 <_printf_float+0x342>
 800c202:	e680      	b.n	800bf06 <_printf_float+0xc2>
 800c204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c206:	2a01      	cmp	r2, #1
 800c208:	dc01      	bgt.n	800c20e <_printf_float+0x3ca>
 800c20a:	07db      	lsls	r3, r3, #31
 800c20c:	d538      	bpl.n	800c280 <_printf_float+0x43c>
 800c20e:	2301      	movs	r3, #1
 800c210:	4642      	mov	r2, r8
 800c212:	4631      	mov	r1, r6
 800c214:	4628      	mov	r0, r5
 800c216:	47b8      	blx	r7
 800c218:	3001      	adds	r0, #1
 800c21a:	f43f ae74 	beq.w	800bf06 <_printf_float+0xc2>
 800c21e:	ee18 3a10 	vmov	r3, s16
 800c222:	4652      	mov	r2, sl
 800c224:	4631      	mov	r1, r6
 800c226:	4628      	mov	r0, r5
 800c228:	47b8      	blx	r7
 800c22a:	3001      	adds	r0, #1
 800c22c:	f43f ae6b 	beq.w	800bf06 <_printf_float+0xc2>
 800c230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c234:	2200      	movs	r2, #0
 800c236:	2300      	movs	r3, #0
 800c238:	f7f4 fc56 	bl	8000ae8 <__aeabi_dcmpeq>
 800c23c:	b9d8      	cbnz	r0, 800c276 <_printf_float+0x432>
 800c23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c240:	f108 0201 	add.w	r2, r8, #1
 800c244:	3b01      	subs	r3, #1
 800c246:	4631      	mov	r1, r6
 800c248:	4628      	mov	r0, r5
 800c24a:	47b8      	blx	r7
 800c24c:	3001      	adds	r0, #1
 800c24e:	d10e      	bne.n	800c26e <_printf_float+0x42a>
 800c250:	e659      	b.n	800bf06 <_printf_float+0xc2>
 800c252:	2301      	movs	r3, #1
 800c254:	4652      	mov	r2, sl
 800c256:	4631      	mov	r1, r6
 800c258:	4628      	mov	r0, r5
 800c25a:	47b8      	blx	r7
 800c25c:	3001      	adds	r0, #1
 800c25e:	f43f ae52 	beq.w	800bf06 <_printf_float+0xc2>
 800c262:	f108 0801 	add.w	r8, r8, #1
 800c266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c268:	3b01      	subs	r3, #1
 800c26a:	4543      	cmp	r3, r8
 800c26c:	dcf1      	bgt.n	800c252 <_printf_float+0x40e>
 800c26e:	464b      	mov	r3, r9
 800c270:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c274:	e6dc      	b.n	800c030 <_printf_float+0x1ec>
 800c276:	f04f 0800 	mov.w	r8, #0
 800c27a:	f104 0a1a 	add.w	sl, r4, #26
 800c27e:	e7f2      	b.n	800c266 <_printf_float+0x422>
 800c280:	2301      	movs	r3, #1
 800c282:	4642      	mov	r2, r8
 800c284:	e7df      	b.n	800c246 <_printf_float+0x402>
 800c286:	2301      	movs	r3, #1
 800c288:	464a      	mov	r2, r9
 800c28a:	4631      	mov	r1, r6
 800c28c:	4628      	mov	r0, r5
 800c28e:	47b8      	blx	r7
 800c290:	3001      	adds	r0, #1
 800c292:	f43f ae38 	beq.w	800bf06 <_printf_float+0xc2>
 800c296:	f108 0801 	add.w	r8, r8, #1
 800c29a:	68e3      	ldr	r3, [r4, #12]
 800c29c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c29e:	1a5b      	subs	r3, r3, r1
 800c2a0:	4543      	cmp	r3, r8
 800c2a2:	dcf0      	bgt.n	800c286 <_printf_float+0x442>
 800c2a4:	e6fa      	b.n	800c09c <_printf_float+0x258>
 800c2a6:	f04f 0800 	mov.w	r8, #0
 800c2aa:	f104 0919 	add.w	r9, r4, #25
 800c2ae:	e7f4      	b.n	800c29a <_printf_float+0x456>

0800c2b0 <_printf_common>:
 800c2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b4:	4616      	mov	r6, r2
 800c2b6:	4699      	mov	r9, r3
 800c2b8:	688a      	ldr	r2, [r1, #8]
 800c2ba:	690b      	ldr	r3, [r1, #16]
 800c2bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	bfb8      	it	lt
 800c2c4:	4613      	movlt	r3, r2
 800c2c6:	6033      	str	r3, [r6, #0]
 800c2c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	b10a      	cbz	r2, 800c2d6 <_printf_common+0x26>
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	6033      	str	r3, [r6, #0]
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	0699      	lsls	r1, r3, #26
 800c2da:	bf42      	ittt	mi
 800c2dc:	6833      	ldrmi	r3, [r6, #0]
 800c2de:	3302      	addmi	r3, #2
 800c2e0:	6033      	strmi	r3, [r6, #0]
 800c2e2:	6825      	ldr	r5, [r4, #0]
 800c2e4:	f015 0506 	ands.w	r5, r5, #6
 800c2e8:	d106      	bne.n	800c2f8 <_printf_common+0x48>
 800c2ea:	f104 0a19 	add.w	sl, r4, #25
 800c2ee:	68e3      	ldr	r3, [r4, #12]
 800c2f0:	6832      	ldr	r2, [r6, #0]
 800c2f2:	1a9b      	subs	r3, r3, r2
 800c2f4:	42ab      	cmp	r3, r5
 800c2f6:	dc26      	bgt.n	800c346 <_printf_common+0x96>
 800c2f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2fc:	1e13      	subs	r3, r2, #0
 800c2fe:	6822      	ldr	r2, [r4, #0]
 800c300:	bf18      	it	ne
 800c302:	2301      	movne	r3, #1
 800c304:	0692      	lsls	r2, r2, #26
 800c306:	d42b      	bmi.n	800c360 <_printf_common+0xb0>
 800c308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c30c:	4649      	mov	r1, r9
 800c30e:	4638      	mov	r0, r7
 800c310:	47c0      	blx	r8
 800c312:	3001      	adds	r0, #1
 800c314:	d01e      	beq.n	800c354 <_printf_common+0xa4>
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	68e5      	ldr	r5, [r4, #12]
 800c31a:	6832      	ldr	r2, [r6, #0]
 800c31c:	f003 0306 	and.w	r3, r3, #6
 800c320:	2b04      	cmp	r3, #4
 800c322:	bf08      	it	eq
 800c324:	1aad      	subeq	r5, r5, r2
 800c326:	68a3      	ldr	r3, [r4, #8]
 800c328:	6922      	ldr	r2, [r4, #16]
 800c32a:	bf0c      	ite	eq
 800c32c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c330:	2500      	movne	r5, #0
 800c332:	4293      	cmp	r3, r2
 800c334:	bfc4      	itt	gt
 800c336:	1a9b      	subgt	r3, r3, r2
 800c338:	18ed      	addgt	r5, r5, r3
 800c33a:	2600      	movs	r6, #0
 800c33c:	341a      	adds	r4, #26
 800c33e:	42b5      	cmp	r5, r6
 800c340:	d11a      	bne.n	800c378 <_printf_common+0xc8>
 800c342:	2000      	movs	r0, #0
 800c344:	e008      	b.n	800c358 <_printf_common+0xa8>
 800c346:	2301      	movs	r3, #1
 800c348:	4652      	mov	r2, sl
 800c34a:	4649      	mov	r1, r9
 800c34c:	4638      	mov	r0, r7
 800c34e:	47c0      	blx	r8
 800c350:	3001      	adds	r0, #1
 800c352:	d103      	bne.n	800c35c <_printf_common+0xac>
 800c354:	f04f 30ff 	mov.w	r0, #4294967295
 800c358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35c:	3501      	adds	r5, #1
 800c35e:	e7c6      	b.n	800c2ee <_printf_common+0x3e>
 800c360:	18e1      	adds	r1, r4, r3
 800c362:	1c5a      	adds	r2, r3, #1
 800c364:	2030      	movs	r0, #48	; 0x30
 800c366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c36a:	4422      	add	r2, r4
 800c36c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c374:	3302      	adds	r3, #2
 800c376:	e7c7      	b.n	800c308 <_printf_common+0x58>
 800c378:	2301      	movs	r3, #1
 800c37a:	4622      	mov	r2, r4
 800c37c:	4649      	mov	r1, r9
 800c37e:	4638      	mov	r0, r7
 800c380:	47c0      	blx	r8
 800c382:	3001      	adds	r0, #1
 800c384:	d0e6      	beq.n	800c354 <_printf_common+0xa4>
 800c386:	3601      	adds	r6, #1
 800c388:	e7d9      	b.n	800c33e <_printf_common+0x8e>
	...

0800c38c <_printf_i>:
 800c38c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c390:	460c      	mov	r4, r1
 800c392:	4691      	mov	r9, r2
 800c394:	7e27      	ldrb	r7, [r4, #24]
 800c396:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c398:	2f78      	cmp	r7, #120	; 0x78
 800c39a:	4680      	mov	r8, r0
 800c39c:	469a      	mov	sl, r3
 800c39e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3a2:	d807      	bhi.n	800c3b4 <_printf_i+0x28>
 800c3a4:	2f62      	cmp	r7, #98	; 0x62
 800c3a6:	d80a      	bhi.n	800c3be <_printf_i+0x32>
 800c3a8:	2f00      	cmp	r7, #0
 800c3aa:	f000 80d8 	beq.w	800c55e <_printf_i+0x1d2>
 800c3ae:	2f58      	cmp	r7, #88	; 0x58
 800c3b0:	f000 80a3 	beq.w	800c4fa <_printf_i+0x16e>
 800c3b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c3b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3bc:	e03a      	b.n	800c434 <_printf_i+0xa8>
 800c3be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3c2:	2b15      	cmp	r3, #21
 800c3c4:	d8f6      	bhi.n	800c3b4 <_printf_i+0x28>
 800c3c6:	a001      	add	r0, pc, #4	; (adr r0, 800c3cc <_printf_i+0x40>)
 800c3c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c3cc:	0800c425 	.word	0x0800c425
 800c3d0:	0800c439 	.word	0x0800c439
 800c3d4:	0800c3b5 	.word	0x0800c3b5
 800c3d8:	0800c3b5 	.word	0x0800c3b5
 800c3dc:	0800c3b5 	.word	0x0800c3b5
 800c3e0:	0800c3b5 	.word	0x0800c3b5
 800c3e4:	0800c439 	.word	0x0800c439
 800c3e8:	0800c3b5 	.word	0x0800c3b5
 800c3ec:	0800c3b5 	.word	0x0800c3b5
 800c3f0:	0800c3b5 	.word	0x0800c3b5
 800c3f4:	0800c3b5 	.word	0x0800c3b5
 800c3f8:	0800c545 	.word	0x0800c545
 800c3fc:	0800c469 	.word	0x0800c469
 800c400:	0800c527 	.word	0x0800c527
 800c404:	0800c3b5 	.word	0x0800c3b5
 800c408:	0800c3b5 	.word	0x0800c3b5
 800c40c:	0800c567 	.word	0x0800c567
 800c410:	0800c3b5 	.word	0x0800c3b5
 800c414:	0800c469 	.word	0x0800c469
 800c418:	0800c3b5 	.word	0x0800c3b5
 800c41c:	0800c3b5 	.word	0x0800c3b5
 800c420:	0800c52f 	.word	0x0800c52f
 800c424:	680b      	ldr	r3, [r1, #0]
 800c426:	1d1a      	adds	r2, r3, #4
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	600a      	str	r2, [r1, #0]
 800c42c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c434:	2301      	movs	r3, #1
 800c436:	e0a3      	b.n	800c580 <_printf_i+0x1f4>
 800c438:	6825      	ldr	r5, [r4, #0]
 800c43a:	6808      	ldr	r0, [r1, #0]
 800c43c:	062e      	lsls	r6, r5, #24
 800c43e:	f100 0304 	add.w	r3, r0, #4
 800c442:	d50a      	bpl.n	800c45a <_printf_i+0xce>
 800c444:	6805      	ldr	r5, [r0, #0]
 800c446:	600b      	str	r3, [r1, #0]
 800c448:	2d00      	cmp	r5, #0
 800c44a:	da03      	bge.n	800c454 <_printf_i+0xc8>
 800c44c:	232d      	movs	r3, #45	; 0x2d
 800c44e:	426d      	negs	r5, r5
 800c450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c454:	485e      	ldr	r0, [pc, #376]	; (800c5d0 <_printf_i+0x244>)
 800c456:	230a      	movs	r3, #10
 800c458:	e019      	b.n	800c48e <_printf_i+0x102>
 800c45a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c45e:	6805      	ldr	r5, [r0, #0]
 800c460:	600b      	str	r3, [r1, #0]
 800c462:	bf18      	it	ne
 800c464:	b22d      	sxthne	r5, r5
 800c466:	e7ef      	b.n	800c448 <_printf_i+0xbc>
 800c468:	680b      	ldr	r3, [r1, #0]
 800c46a:	6825      	ldr	r5, [r4, #0]
 800c46c:	1d18      	adds	r0, r3, #4
 800c46e:	6008      	str	r0, [r1, #0]
 800c470:	0628      	lsls	r0, r5, #24
 800c472:	d501      	bpl.n	800c478 <_printf_i+0xec>
 800c474:	681d      	ldr	r5, [r3, #0]
 800c476:	e002      	b.n	800c47e <_printf_i+0xf2>
 800c478:	0669      	lsls	r1, r5, #25
 800c47a:	d5fb      	bpl.n	800c474 <_printf_i+0xe8>
 800c47c:	881d      	ldrh	r5, [r3, #0]
 800c47e:	4854      	ldr	r0, [pc, #336]	; (800c5d0 <_printf_i+0x244>)
 800c480:	2f6f      	cmp	r7, #111	; 0x6f
 800c482:	bf0c      	ite	eq
 800c484:	2308      	moveq	r3, #8
 800c486:	230a      	movne	r3, #10
 800c488:	2100      	movs	r1, #0
 800c48a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c48e:	6866      	ldr	r6, [r4, #4]
 800c490:	60a6      	str	r6, [r4, #8]
 800c492:	2e00      	cmp	r6, #0
 800c494:	bfa2      	ittt	ge
 800c496:	6821      	ldrge	r1, [r4, #0]
 800c498:	f021 0104 	bicge.w	r1, r1, #4
 800c49c:	6021      	strge	r1, [r4, #0]
 800c49e:	b90d      	cbnz	r5, 800c4a4 <_printf_i+0x118>
 800c4a0:	2e00      	cmp	r6, #0
 800c4a2:	d04d      	beq.n	800c540 <_printf_i+0x1b4>
 800c4a4:	4616      	mov	r6, r2
 800c4a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c4aa:	fb03 5711 	mls	r7, r3, r1, r5
 800c4ae:	5dc7      	ldrb	r7, [r0, r7]
 800c4b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c4b4:	462f      	mov	r7, r5
 800c4b6:	42bb      	cmp	r3, r7
 800c4b8:	460d      	mov	r5, r1
 800c4ba:	d9f4      	bls.n	800c4a6 <_printf_i+0x11a>
 800c4bc:	2b08      	cmp	r3, #8
 800c4be:	d10b      	bne.n	800c4d8 <_printf_i+0x14c>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	07df      	lsls	r7, r3, #31
 800c4c4:	d508      	bpl.n	800c4d8 <_printf_i+0x14c>
 800c4c6:	6923      	ldr	r3, [r4, #16]
 800c4c8:	6861      	ldr	r1, [r4, #4]
 800c4ca:	4299      	cmp	r1, r3
 800c4cc:	bfde      	ittt	le
 800c4ce:	2330      	movle	r3, #48	; 0x30
 800c4d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c4d8:	1b92      	subs	r2, r2, r6
 800c4da:	6122      	str	r2, [r4, #16]
 800c4dc:	f8cd a000 	str.w	sl, [sp]
 800c4e0:	464b      	mov	r3, r9
 800c4e2:	aa03      	add	r2, sp, #12
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	f7ff fee2 	bl	800c2b0 <_printf_common>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d14c      	bne.n	800c58a <_printf_i+0x1fe>
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	b004      	add	sp, #16
 800c4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fa:	4835      	ldr	r0, [pc, #212]	; (800c5d0 <_printf_i+0x244>)
 800c4fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c500:	6823      	ldr	r3, [r4, #0]
 800c502:	680e      	ldr	r6, [r1, #0]
 800c504:	061f      	lsls	r7, r3, #24
 800c506:	f856 5b04 	ldr.w	r5, [r6], #4
 800c50a:	600e      	str	r6, [r1, #0]
 800c50c:	d514      	bpl.n	800c538 <_printf_i+0x1ac>
 800c50e:	07d9      	lsls	r1, r3, #31
 800c510:	bf44      	itt	mi
 800c512:	f043 0320 	orrmi.w	r3, r3, #32
 800c516:	6023      	strmi	r3, [r4, #0]
 800c518:	b91d      	cbnz	r5, 800c522 <_printf_i+0x196>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	f023 0320 	bic.w	r3, r3, #32
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	2310      	movs	r3, #16
 800c524:	e7b0      	b.n	800c488 <_printf_i+0xfc>
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	f043 0320 	orr.w	r3, r3, #32
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	2378      	movs	r3, #120	; 0x78
 800c530:	4828      	ldr	r0, [pc, #160]	; (800c5d4 <_printf_i+0x248>)
 800c532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c536:	e7e3      	b.n	800c500 <_printf_i+0x174>
 800c538:	065e      	lsls	r6, r3, #25
 800c53a:	bf48      	it	mi
 800c53c:	b2ad      	uxthmi	r5, r5
 800c53e:	e7e6      	b.n	800c50e <_printf_i+0x182>
 800c540:	4616      	mov	r6, r2
 800c542:	e7bb      	b.n	800c4bc <_printf_i+0x130>
 800c544:	680b      	ldr	r3, [r1, #0]
 800c546:	6826      	ldr	r6, [r4, #0]
 800c548:	6960      	ldr	r0, [r4, #20]
 800c54a:	1d1d      	adds	r5, r3, #4
 800c54c:	600d      	str	r5, [r1, #0]
 800c54e:	0635      	lsls	r5, r6, #24
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	d501      	bpl.n	800c558 <_printf_i+0x1cc>
 800c554:	6018      	str	r0, [r3, #0]
 800c556:	e002      	b.n	800c55e <_printf_i+0x1d2>
 800c558:	0671      	lsls	r1, r6, #25
 800c55a:	d5fb      	bpl.n	800c554 <_printf_i+0x1c8>
 800c55c:	8018      	strh	r0, [r3, #0]
 800c55e:	2300      	movs	r3, #0
 800c560:	6123      	str	r3, [r4, #16]
 800c562:	4616      	mov	r6, r2
 800c564:	e7ba      	b.n	800c4dc <_printf_i+0x150>
 800c566:	680b      	ldr	r3, [r1, #0]
 800c568:	1d1a      	adds	r2, r3, #4
 800c56a:	600a      	str	r2, [r1, #0]
 800c56c:	681e      	ldr	r6, [r3, #0]
 800c56e:	6862      	ldr	r2, [r4, #4]
 800c570:	2100      	movs	r1, #0
 800c572:	4630      	mov	r0, r6
 800c574:	f7f3 fe44 	bl	8000200 <memchr>
 800c578:	b108      	cbz	r0, 800c57e <_printf_i+0x1f2>
 800c57a:	1b80      	subs	r0, r0, r6
 800c57c:	6060      	str	r0, [r4, #4]
 800c57e:	6863      	ldr	r3, [r4, #4]
 800c580:	6123      	str	r3, [r4, #16]
 800c582:	2300      	movs	r3, #0
 800c584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c588:	e7a8      	b.n	800c4dc <_printf_i+0x150>
 800c58a:	6923      	ldr	r3, [r4, #16]
 800c58c:	4632      	mov	r2, r6
 800c58e:	4649      	mov	r1, r9
 800c590:	4640      	mov	r0, r8
 800c592:	47d0      	blx	sl
 800c594:	3001      	adds	r0, #1
 800c596:	d0ab      	beq.n	800c4f0 <_printf_i+0x164>
 800c598:	6823      	ldr	r3, [r4, #0]
 800c59a:	079b      	lsls	r3, r3, #30
 800c59c:	d413      	bmi.n	800c5c6 <_printf_i+0x23a>
 800c59e:	68e0      	ldr	r0, [r4, #12]
 800c5a0:	9b03      	ldr	r3, [sp, #12]
 800c5a2:	4298      	cmp	r0, r3
 800c5a4:	bfb8      	it	lt
 800c5a6:	4618      	movlt	r0, r3
 800c5a8:	e7a4      	b.n	800c4f4 <_printf_i+0x168>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	47d0      	blx	sl
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	d09b      	beq.n	800c4f0 <_printf_i+0x164>
 800c5b8:	3501      	adds	r5, #1
 800c5ba:	68e3      	ldr	r3, [r4, #12]
 800c5bc:	9903      	ldr	r1, [sp, #12]
 800c5be:	1a5b      	subs	r3, r3, r1
 800c5c0:	42ab      	cmp	r3, r5
 800c5c2:	dcf2      	bgt.n	800c5aa <_printf_i+0x21e>
 800c5c4:	e7eb      	b.n	800c59e <_printf_i+0x212>
 800c5c6:	2500      	movs	r5, #0
 800c5c8:	f104 0619 	add.w	r6, r4, #25
 800c5cc:	e7f5      	b.n	800c5ba <_printf_i+0x22e>
 800c5ce:	bf00      	nop
 800c5d0:	080112e2 	.word	0x080112e2
 800c5d4:	080112f3 	.word	0x080112f3

0800c5d8 <iprintf>:
 800c5d8:	b40f      	push	{r0, r1, r2, r3}
 800c5da:	4b0a      	ldr	r3, [pc, #40]	; (800c604 <iprintf+0x2c>)
 800c5dc:	b513      	push	{r0, r1, r4, lr}
 800c5de:	681c      	ldr	r4, [r3, #0]
 800c5e0:	b124      	cbz	r4, 800c5ec <iprintf+0x14>
 800c5e2:	69a3      	ldr	r3, [r4, #24]
 800c5e4:	b913      	cbnz	r3, 800c5ec <iprintf+0x14>
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f000 fede 	bl	800d3a8 <__sinit>
 800c5ec:	ab05      	add	r3, sp, #20
 800c5ee:	9a04      	ldr	r2, [sp, #16]
 800c5f0:	68a1      	ldr	r1, [r4, #8]
 800c5f2:	9301      	str	r3, [sp, #4]
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f001 fbe7 	bl	800ddc8 <_vfiprintf_r>
 800c5fa:	b002      	add	sp, #8
 800c5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c600:	b004      	add	sp, #16
 800c602:	4770      	bx	lr
 800c604:	20000068 	.word	0x20000068

0800c608 <quorem>:
 800c608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	6903      	ldr	r3, [r0, #16]
 800c60e:	690c      	ldr	r4, [r1, #16]
 800c610:	42a3      	cmp	r3, r4
 800c612:	4607      	mov	r7, r0
 800c614:	f2c0 8081 	blt.w	800c71a <quorem+0x112>
 800c618:	3c01      	subs	r4, #1
 800c61a:	f101 0814 	add.w	r8, r1, #20
 800c61e:	f100 0514 	add.w	r5, r0, #20
 800c622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c626:	9301      	str	r3, [sp, #4]
 800c628:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c62c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c630:	3301      	adds	r3, #1
 800c632:	429a      	cmp	r2, r3
 800c634:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c638:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c63c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c640:	d331      	bcc.n	800c6a6 <quorem+0x9e>
 800c642:	f04f 0e00 	mov.w	lr, #0
 800c646:	4640      	mov	r0, r8
 800c648:	46ac      	mov	ip, r5
 800c64a:	46f2      	mov	sl, lr
 800c64c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c650:	b293      	uxth	r3, r2
 800c652:	fb06 e303 	mla	r3, r6, r3, lr
 800c656:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	ebaa 0303 	sub.w	r3, sl, r3
 800c660:	0c12      	lsrs	r2, r2, #16
 800c662:	f8dc a000 	ldr.w	sl, [ip]
 800c666:	fb06 e202 	mla	r2, r6, r2, lr
 800c66a:	fa13 f38a 	uxtah	r3, r3, sl
 800c66e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c672:	fa1f fa82 	uxth.w	sl, r2
 800c676:	f8dc 2000 	ldr.w	r2, [ip]
 800c67a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c67e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c682:	b29b      	uxth	r3, r3
 800c684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c688:	4581      	cmp	r9, r0
 800c68a:	f84c 3b04 	str.w	r3, [ip], #4
 800c68e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c692:	d2db      	bcs.n	800c64c <quorem+0x44>
 800c694:	f855 300b 	ldr.w	r3, [r5, fp]
 800c698:	b92b      	cbnz	r3, 800c6a6 <quorem+0x9e>
 800c69a:	9b01      	ldr	r3, [sp, #4]
 800c69c:	3b04      	subs	r3, #4
 800c69e:	429d      	cmp	r5, r3
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	d32e      	bcc.n	800c702 <quorem+0xfa>
 800c6a4:	613c      	str	r4, [r7, #16]
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	f001 f9aa 	bl	800da00 <__mcmp>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	db24      	blt.n	800c6fa <quorem+0xf2>
 800c6b0:	3601      	adds	r6, #1
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f04f 0c00 	mov.w	ip, #0
 800c6b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6bc:	f8d0 e000 	ldr.w	lr, [r0]
 800c6c0:	b293      	uxth	r3, r2
 800c6c2:	ebac 0303 	sub.w	r3, ip, r3
 800c6c6:	0c12      	lsrs	r2, r2, #16
 800c6c8:	fa13 f38e 	uxtah	r3, r3, lr
 800c6cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c6d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6da:	45c1      	cmp	r9, r8
 800c6dc:	f840 3b04 	str.w	r3, [r0], #4
 800c6e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c6e4:	d2e8      	bcs.n	800c6b8 <quorem+0xb0>
 800c6e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6ee:	b922      	cbnz	r2, 800c6fa <quorem+0xf2>
 800c6f0:	3b04      	subs	r3, #4
 800c6f2:	429d      	cmp	r5, r3
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	d30a      	bcc.n	800c70e <quorem+0x106>
 800c6f8:	613c      	str	r4, [r7, #16]
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	b003      	add	sp, #12
 800c6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c702:	6812      	ldr	r2, [r2, #0]
 800c704:	3b04      	subs	r3, #4
 800c706:	2a00      	cmp	r2, #0
 800c708:	d1cc      	bne.n	800c6a4 <quorem+0x9c>
 800c70a:	3c01      	subs	r4, #1
 800c70c:	e7c7      	b.n	800c69e <quorem+0x96>
 800c70e:	6812      	ldr	r2, [r2, #0]
 800c710:	3b04      	subs	r3, #4
 800c712:	2a00      	cmp	r2, #0
 800c714:	d1f0      	bne.n	800c6f8 <quorem+0xf0>
 800c716:	3c01      	subs	r4, #1
 800c718:	e7eb      	b.n	800c6f2 <quorem+0xea>
 800c71a:	2000      	movs	r0, #0
 800c71c:	e7ee      	b.n	800c6fc <quorem+0xf4>
	...

0800c720 <_dtoa_r>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	ed2d 8b02 	vpush	{d8}
 800c728:	ec57 6b10 	vmov	r6, r7, d0
 800c72c:	b095      	sub	sp, #84	; 0x54
 800c72e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c730:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c734:	9105      	str	r1, [sp, #20]
 800c736:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c73a:	4604      	mov	r4, r0
 800c73c:	9209      	str	r2, [sp, #36]	; 0x24
 800c73e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c740:	b975      	cbnz	r5, 800c760 <_dtoa_r+0x40>
 800c742:	2010      	movs	r0, #16
 800c744:	f000 fed6 	bl	800d4f4 <malloc>
 800c748:	4602      	mov	r2, r0
 800c74a:	6260      	str	r0, [r4, #36]	; 0x24
 800c74c:	b920      	cbnz	r0, 800c758 <_dtoa_r+0x38>
 800c74e:	4bb2      	ldr	r3, [pc, #712]	; (800ca18 <_dtoa_r+0x2f8>)
 800c750:	21ea      	movs	r1, #234	; 0xea
 800c752:	48b2      	ldr	r0, [pc, #712]	; (800ca1c <_dtoa_r+0x2fc>)
 800c754:	f001 fd8e 	bl	800e274 <__assert_func>
 800c758:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c75c:	6005      	str	r5, [r0, #0]
 800c75e:	60c5      	str	r5, [r0, #12]
 800c760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c762:	6819      	ldr	r1, [r3, #0]
 800c764:	b151      	cbz	r1, 800c77c <_dtoa_r+0x5c>
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	604a      	str	r2, [r1, #4]
 800c76a:	2301      	movs	r3, #1
 800c76c:	4093      	lsls	r3, r2
 800c76e:	608b      	str	r3, [r1, #8]
 800c770:	4620      	mov	r0, r4
 800c772:	f000 ff07 	bl	800d584 <_Bfree>
 800c776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c778:	2200      	movs	r2, #0
 800c77a:	601a      	str	r2, [r3, #0]
 800c77c:	1e3b      	subs	r3, r7, #0
 800c77e:	bfb9      	ittee	lt
 800c780:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c784:	9303      	strlt	r3, [sp, #12]
 800c786:	2300      	movge	r3, #0
 800c788:	f8c8 3000 	strge.w	r3, [r8]
 800c78c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c790:	4ba3      	ldr	r3, [pc, #652]	; (800ca20 <_dtoa_r+0x300>)
 800c792:	bfbc      	itt	lt
 800c794:	2201      	movlt	r2, #1
 800c796:	f8c8 2000 	strlt.w	r2, [r8]
 800c79a:	ea33 0309 	bics.w	r3, r3, r9
 800c79e:	d11b      	bne.n	800c7d8 <_dtoa_r+0xb8>
 800c7a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c7a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7a6:	6013      	str	r3, [r2, #0]
 800c7a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7ac:	4333      	orrs	r3, r6
 800c7ae:	f000 857a 	beq.w	800d2a6 <_dtoa_r+0xb86>
 800c7b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7b4:	b963      	cbnz	r3, 800c7d0 <_dtoa_r+0xb0>
 800c7b6:	4b9b      	ldr	r3, [pc, #620]	; (800ca24 <_dtoa_r+0x304>)
 800c7b8:	e024      	b.n	800c804 <_dtoa_r+0xe4>
 800c7ba:	4b9b      	ldr	r3, [pc, #620]	; (800ca28 <_dtoa_r+0x308>)
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	3308      	adds	r3, #8
 800c7c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7c2:	6013      	str	r3, [r2, #0]
 800c7c4:	9800      	ldr	r0, [sp, #0]
 800c7c6:	b015      	add	sp, #84	; 0x54
 800c7c8:	ecbd 8b02 	vpop	{d8}
 800c7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d0:	4b94      	ldr	r3, [pc, #592]	; (800ca24 <_dtoa_r+0x304>)
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	3303      	adds	r3, #3
 800c7d6:	e7f3      	b.n	800c7c0 <_dtoa_r+0xa0>
 800c7d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	ec51 0b17 	vmov	r0, r1, d7
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c7e8:	f7f4 f97e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7ec:	4680      	mov	r8, r0
 800c7ee:	b158      	cbz	r0, 800c808 <_dtoa_r+0xe8>
 800c7f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 8551 	beq.w	800d2a0 <_dtoa_r+0xb80>
 800c7fe:	488b      	ldr	r0, [pc, #556]	; (800ca2c <_dtoa_r+0x30c>)
 800c800:	6018      	str	r0, [r3, #0]
 800c802:	1e43      	subs	r3, r0, #1
 800c804:	9300      	str	r3, [sp, #0]
 800c806:	e7dd      	b.n	800c7c4 <_dtoa_r+0xa4>
 800c808:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c80c:	aa12      	add	r2, sp, #72	; 0x48
 800c80e:	a913      	add	r1, sp, #76	; 0x4c
 800c810:	4620      	mov	r0, r4
 800c812:	f001 f999 	bl	800db48 <__d2b>
 800c816:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c81a:	4683      	mov	fp, r0
 800c81c:	2d00      	cmp	r5, #0
 800c81e:	d07c      	beq.n	800c91a <_dtoa_r+0x1fa>
 800c820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c822:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c82a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c82e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c832:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c836:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c83a:	4b7d      	ldr	r3, [pc, #500]	; (800ca30 <_dtoa_r+0x310>)
 800c83c:	2200      	movs	r2, #0
 800c83e:	4630      	mov	r0, r6
 800c840:	4639      	mov	r1, r7
 800c842:	f7f3 fd31 	bl	80002a8 <__aeabi_dsub>
 800c846:	a36e      	add	r3, pc, #440	; (adr r3, 800ca00 <_dtoa_r+0x2e0>)
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	f7f3 fee4 	bl	8000618 <__aeabi_dmul>
 800c850:	a36d      	add	r3, pc, #436	; (adr r3, 800ca08 <_dtoa_r+0x2e8>)
 800c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c856:	f7f3 fd29 	bl	80002ac <__adddf3>
 800c85a:	4606      	mov	r6, r0
 800c85c:	4628      	mov	r0, r5
 800c85e:	460f      	mov	r7, r1
 800c860:	f7f3 fe70 	bl	8000544 <__aeabi_i2d>
 800c864:	a36a      	add	r3, pc, #424	; (adr r3, 800ca10 <_dtoa_r+0x2f0>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	f7f3 fed5 	bl	8000618 <__aeabi_dmul>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4630      	mov	r0, r6
 800c874:	4639      	mov	r1, r7
 800c876:	f7f3 fd19 	bl	80002ac <__adddf3>
 800c87a:	4606      	mov	r6, r0
 800c87c:	460f      	mov	r7, r1
 800c87e:	f7f4 f97b 	bl	8000b78 <__aeabi_d2iz>
 800c882:	2200      	movs	r2, #0
 800c884:	4682      	mov	sl, r0
 800c886:	2300      	movs	r3, #0
 800c888:	4630      	mov	r0, r6
 800c88a:	4639      	mov	r1, r7
 800c88c:	f7f4 f936 	bl	8000afc <__aeabi_dcmplt>
 800c890:	b148      	cbz	r0, 800c8a6 <_dtoa_r+0x186>
 800c892:	4650      	mov	r0, sl
 800c894:	f7f3 fe56 	bl	8000544 <__aeabi_i2d>
 800c898:	4632      	mov	r2, r6
 800c89a:	463b      	mov	r3, r7
 800c89c:	f7f4 f924 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8a0:	b908      	cbnz	r0, 800c8a6 <_dtoa_r+0x186>
 800c8a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8a6:	f1ba 0f16 	cmp.w	sl, #22
 800c8aa:	d854      	bhi.n	800c956 <_dtoa_r+0x236>
 800c8ac:	4b61      	ldr	r3, [pc, #388]	; (800ca34 <_dtoa_r+0x314>)
 800c8ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c8ba:	f7f4 f91f 	bl	8000afc <__aeabi_dcmplt>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d04b      	beq.n	800c95a <_dtoa_r+0x23a>
 800c8c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	930e      	str	r3, [sp, #56]	; 0x38
 800c8ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8cc:	1b5d      	subs	r5, r3, r5
 800c8ce:	1e6b      	subs	r3, r5, #1
 800c8d0:	9304      	str	r3, [sp, #16]
 800c8d2:	bf43      	ittte	mi
 800c8d4:	2300      	movmi	r3, #0
 800c8d6:	f1c5 0801 	rsbmi	r8, r5, #1
 800c8da:	9304      	strmi	r3, [sp, #16]
 800c8dc:	f04f 0800 	movpl.w	r8, #0
 800c8e0:	f1ba 0f00 	cmp.w	sl, #0
 800c8e4:	db3b      	blt.n	800c95e <_dtoa_r+0x23e>
 800c8e6:	9b04      	ldr	r3, [sp, #16]
 800c8e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c8ec:	4453      	add	r3, sl
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	9306      	str	r3, [sp, #24]
 800c8f4:	9b05      	ldr	r3, [sp, #20]
 800c8f6:	2b09      	cmp	r3, #9
 800c8f8:	d869      	bhi.n	800c9ce <_dtoa_r+0x2ae>
 800c8fa:	2b05      	cmp	r3, #5
 800c8fc:	bfc4      	itt	gt
 800c8fe:	3b04      	subgt	r3, #4
 800c900:	9305      	strgt	r3, [sp, #20]
 800c902:	9b05      	ldr	r3, [sp, #20]
 800c904:	f1a3 0302 	sub.w	r3, r3, #2
 800c908:	bfcc      	ite	gt
 800c90a:	2500      	movgt	r5, #0
 800c90c:	2501      	movle	r5, #1
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d869      	bhi.n	800c9e6 <_dtoa_r+0x2c6>
 800c912:	e8df f003 	tbb	[pc, r3]
 800c916:	4e2c      	.short	0x4e2c
 800c918:	5a4c      	.short	0x5a4c
 800c91a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c91e:	441d      	add	r5, r3
 800c920:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c924:	2b20      	cmp	r3, #32
 800c926:	bfc1      	itttt	gt
 800c928:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c92c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c930:	fa09 f303 	lslgt.w	r3, r9, r3
 800c934:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c938:	bfda      	itte	le
 800c93a:	f1c3 0320 	rsble	r3, r3, #32
 800c93e:	fa06 f003 	lslle.w	r0, r6, r3
 800c942:	4318      	orrgt	r0, r3
 800c944:	f7f3 fdee 	bl	8000524 <__aeabi_ui2d>
 800c948:	2301      	movs	r3, #1
 800c94a:	4606      	mov	r6, r0
 800c94c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c950:	3d01      	subs	r5, #1
 800c952:	9310      	str	r3, [sp, #64]	; 0x40
 800c954:	e771      	b.n	800c83a <_dtoa_r+0x11a>
 800c956:	2301      	movs	r3, #1
 800c958:	e7b6      	b.n	800c8c8 <_dtoa_r+0x1a8>
 800c95a:	900e      	str	r0, [sp, #56]	; 0x38
 800c95c:	e7b5      	b.n	800c8ca <_dtoa_r+0x1aa>
 800c95e:	f1ca 0300 	rsb	r3, sl, #0
 800c962:	9306      	str	r3, [sp, #24]
 800c964:	2300      	movs	r3, #0
 800c966:	eba8 080a 	sub.w	r8, r8, sl
 800c96a:	930d      	str	r3, [sp, #52]	; 0x34
 800c96c:	e7c2      	b.n	800c8f4 <_dtoa_r+0x1d4>
 800c96e:	2300      	movs	r3, #0
 800c970:	9308      	str	r3, [sp, #32]
 800c972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c974:	2b00      	cmp	r3, #0
 800c976:	dc39      	bgt.n	800c9ec <_dtoa_r+0x2cc>
 800c978:	f04f 0901 	mov.w	r9, #1
 800c97c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c980:	464b      	mov	r3, r9
 800c982:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c986:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c988:	2200      	movs	r2, #0
 800c98a:	6042      	str	r2, [r0, #4]
 800c98c:	2204      	movs	r2, #4
 800c98e:	f102 0614 	add.w	r6, r2, #20
 800c992:	429e      	cmp	r6, r3
 800c994:	6841      	ldr	r1, [r0, #4]
 800c996:	d92f      	bls.n	800c9f8 <_dtoa_r+0x2d8>
 800c998:	4620      	mov	r0, r4
 800c99a:	f000 fdb3 	bl	800d504 <_Balloc>
 800c99e:	9000      	str	r0, [sp, #0]
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d14b      	bne.n	800ca3c <_dtoa_r+0x31c>
 800c9a4:	4b24      	ldr	r3, [pc, #144]	; (800ca38 <_dtoa_r+0x318>)
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c9ac:	e6d1      	b.n	800c752 <_dtoa_r+0x32>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e7de      	b.n	800c970 <_dtoa_r+0x250>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	9308      	str	r3, [sp, #32]
 800c9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b8:	eb0a 0903 	add.w	r9, sl, r3
 800c9bc:	f109 0301 	add.w	r3, r9, #1
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	9301      	str	r3, [sp, #4]
 800c9c4:	bfb8      	it	lt
 800c9c6:	2301      	movlt	r3, #1
 800c9c8:	e7dd      	b.n	800c986 <_dtoa_r+0x266>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e7f2      	b.n	800c9b4 <_dtoa_r+0x294>
 800c9ce:	2501      	movs	r5, #1
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9305      	str	r3, [sp, #20]
 800c9d4:	9508      	str	r5, [sp, #32]
 800c9d6:	f04f 39ff 	mov.w	r9, #4294967295
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c9e0:	2312      	movs	r3, #18
 800c9e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c9e4:	e7cf      	b.n	800c986 <_dtoa_r+0x266>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	9308      	str	r3, [sp, #32]
 800c9ea:	e7f4      	b.n	800c9d6 <_dtoa_r+0x2b6>
 800c9ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c9f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c9f4:	464b      	mov	r3, r9
 800c9f6:	e7c6      	b.n	800c986 <_dtoa_r+0x266>
 800c9f8:	3101      	adds	r1, #1
 800c9fa:	6041      	str	r1, [r0, #4]
 800c9fc:	0052      	lsls	r2, r2, #1
 800c9fe:	e7c6      	b.n	800c98e <_dtoa_r+0x26e>
 800ca00:	636f4361 	.word	0x636f4361
 800ca04:	3fd287a7 	.word	0x3fd287a7
 800ca08:	8b60c8b3 	.word	0x8b60c8b3
 800ca0c:	3fc68a28 	.word	0x3fc68a28
 800ca10:	509f79fb 	.word	0x509f79fb
 800ca14:	3fd34413 	.word	0x3fd34413
 800ca18:	08011311 	.word	0x08011311
 800ca1c:	08011328 	.word	0x08011328
 800ca20:	7ff00000 	.word	0x7ff00000
 800ca24:	0801130d 	.word	0x0801130d
 800ca28:	08011304 	.word	0x08011304
 800ca2c:	080112e1 	.word	0x080112e1
 800ca30:	3ff80000 	.word	0x3ff80000
 800ca34:	08011480 	.word	0x08011480
 800ca38:	08011387 	.word	0x08011387
 800ca3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca3e:	9a00      	ldr	r2, [sp, #0]
 800ca40:	601a      	str	r2, [r3, #0]
 800ca42:	9b01      	ldr	r3, [sp, #4]
 800ca44:	2b0e      	cmp	r3, #14
 800ca46:	f200 80ad 	bhi.w	800cba4 <_dtoa_r+0x484>
 800ca4a:	2d00      	cmp	r5, #0
 800ca4c:	f000 80aa 	beq.w	800cba4 <_dtoa_r+0x484>
 800ca50:	f1ba 0f00 	cmp.w	sl, #0
 800ca54:	dd36      	ble.n	800cac4 <_dtoa_r+0x3a4>
 800ca56:	4ac3      	ldr	r2, [pc, #780]	; (800cd64 <_dtoa_r+0x644>)
 800ca58:	f00a 030f 	and.w	r3, sl, #15
 800ca5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca60:	ed93 7b00 	vldr	d7, [r3]
 800ca64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ca68:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ca6c:	eeb0 8a47 	vmov.f32	s16, s14
 800ca70:	eef0 8a67 	vmov.f32	s17, s15
 800ca74:	d016      	beq.n	800caa4 <_dtoa_r+0x384>
 800ca76:	4bbc      	ldr	r3, [pc, #752]	; (800cd68 <_dtoa_r+0x648>)
 800ca78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca80:	f7f3 fef4 	bl	800086c <__aeabi_ddiv>
 800ca84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca88:	f007 070f 	and.w	r7, r7, #15
 800ca8c:	2503      	movs	r5, #3
 800ca8e:	4eb6      	ldr	r6, [pc, #728]	; (800cd68 <_dtoa_r+0x648>)
 800ca90:	b957      	cbnz	r7, 800caa8 <_dtoa_r+0x388>
 800ca92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca96:	ec53 2b18 	vmov	r2, r3, d8
 800ca9a:	f7f3 fee7 	bl	800086c <__aeabi_ddiv>
 800ca9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800caa2:	e029      	b.n	800caf8 <_dtoa_r+0x3d8>
 800caa4:	2502      	movs	r5, #2
 800caa6:	e7f2      	b.n	800ca8e <_dtoa_r+0x36e>
 800caa8:	07f9      	lsls	r1, r7, #31
 800caaa:	d508      	bpl.n	800cabe <_dtoa_r+0x39e>
 800caac:	ec51 0b18 	vmov	r0, r1, d8
 800cab0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cab4:	f7f3 fdb0 	bl	8000618 <__aeabi_dmul>
 800cab8:	ec41 0b18 	vmov	d8, r0, r1
 800cabc:	3501      	adds	r5, #1
 800cabe:	107f      	asrs	r7, r7, #1
 800cac0:	3608      	adds	r6, #8
 800cac2:	e7e5      	b.n	800ca90 <_dtoa_r+0x370>
 800cac4:	f000 80a6 	beq.w	800cc14 <_dtoa_r+0x4f4>
 800cac8:	f1ca 0600 	rsb	r6, sl, #0
 800cacc:	4ba5      	ldr	r3, [pc, #660]	; (800cd64 <_dtoa_r+0x644>)
 800cace:	4fa6      	ldr	r7, [pc, #664]	; (800cd68 <_dtoa_r+0x648>)
 800cad0:	f006 020f 	and.w	r2, r6, #15
 800cad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cadc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cae0:	f7f3 fd9a 	bl	8000618 <__aeabi_dmul>
 800cae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cae8:	1136      	asrs	r6, r6, #4
 800caea:	2300      	movs	r3, #0
 800caec:	2502      	movs	r5, #2
 800caee:	2e00      	cmp	r6, #0
 800caf0:	f040 8085 	bne.w	800cbfe <_dtoa_r+0x4de>
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1d2      	bne.n	800ca9e <_dtoa_r+0x37e>
 800caf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f000 808c 	beq.w	800cc18 <_dtoa_r+0x4f8>
 800cb00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cb04:	4b99      	ldr	r3, [pc, #612]	; (800cd6c <_dtoa_r+0x64c>)
 800cb06:	2200      	movs	r2, #0
 800cb08:	4630      	mov	r0, r6
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	f7f3 fff6 	bl	8000afc <__aeabi_dcmplt>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	f000 8081 	beq.w	800cc18 <_dtoa_r+0x4f8>
 800cb16:	9b01      	ldr	r3, [sp, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d07d      	beq.n	800cc18 <_dtoa_r+0x4f8>
 800cb1c:	f1b9 0f00 	cmp.w	r9, #0
 800cb20:	dd3c      	ble.n	800cb9c <_dtoa_r+0x47c>
 800cb22:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cb26:	9307      	str	r3, [sp, #28]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	4b91      	ldr	r3, [pc, #580]	; (800cd70 <_dtoa_r+0x650>)
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	4639      	mov	r1, r7
 800cb30:	f7f3 fd72 	bl	8000618 <__aeabi_dmul>
 800cb34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb38:	3501      	adds	r5, #1
 800cb3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cb3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cb42:	4628      	mov	r0, r5
 800cb44:	f7f3 fcfe 	bl	8000544 <__aeabi_i2d>
 800cb48:	4632      	mov	r2, r6
 800cb4a:	463b      	mov	r3, r7
 800cb4c:	f7f3 fd64 	bl	8000618 <__aeabi_dmul>
 800cb50:	4b88      	ldr	r3, [pc, #544]	; (800cd74 <_dtoa_r+0x654>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	f7f3 fbaa 	bl	80002ac <__adddf3>
 800cb58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cb5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb60:	9303      	str	r3, [sp, #12]
 800cb62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d15c      	bne.n	800cc22 <_dtoa_r+0x502>
 800cb68:	4b83      	ldr	r3, [pc, #524]	; (800cd78 <_dtoa_r+0x658>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	4639      	mov	r1, r7
 800cb70:	f7f3 fb9a 	bl	80002a8 <__aeabi_dsub>
 800cb74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb78:	4606      	mov	r6, r0
 800cb7a:	460f      	mov	r7, r1
 800cb7c:	f7f3 ffdc 	bl	8000b38 <__aeabi_dcmpgt>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	f040 8296 	bne.w	800d0b2 <_dtoa_r+0x992>
 800cb86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb90:	4639      	mov	r1, r7
 800cb92:	f7f3 ffb3 	bl	8000afc <__aeabi_dcmplt>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	f040 8288 	bne.w	800d0ac <_dtoa_r+0x98c>
 800cb9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cba0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f2c0 8158 	blt.w	800ce5c <_dtoa_r+0x73c>
 800cbac:	f1ba 0f0e 	cmp.w	sl, #14
 800cbb0:	f300 8154 	bgt.w	800ce5c <_dtoa_r+0x73c>
 800cbb4:	4b6b      	ldr	r3, [pc, #428]	; (800cd64 <_dtoa_r+0x644>)
 800cbb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cbba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f280 80e3 	bge.w	800cd8c <_dtoa_r+0x66c>
 800cbc6:	9b01      	ldr	r3, [sp, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f300 80df 	bgt.w	800cd8c <_dtoa_r+0x66c>
 800cbce:	f040 826d 	bne.w	800d0ac <_dtoa_r+0x98c>
 800cbd2:	4b69      	ldr	r3, [pc, #420]	; (800cd78 <_dtoa_r+0x658>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	4649      	mov	r1, r9
 800cbda:	f7f3 fd1d 	bl	8000618 <__aeabi_dmul>
 800cbde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbe2:	f7f3 ff9f 	bl	8000b24 <__aeabi_dcmpge>
 800cbe6:	9e01      	ldr	r6, [sp, #4]
 800cbe8:	4637      	mov	r7, r6
 800cbea:	2800      	cmp	r0, #0
 800cbec:	f040 8243 	bne.w	800d076 <_dtoa_r+0x956>
 800cbf0:	9d00      	ldr	r5, [sp, #0]
 800cbf2:	2331      	movs	r3, #49	; 0x31
 800cbf4:	f805 3b01 	strb.w	r3, [r5], #1
 800cbf8:	f10a 0a01 	add.w	sl, sl, #1
 800cbfc:	e23f      	b.n	800d07e <_dtoa_r+0x95e>
 800cbfe:	07f2      	lsls	r2, r6, #31
 800cc00:	d505      	bpl.n	800cc0e <_dtoa_r+0x4ee>
 800cc02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc06:	f7f3 fd07 	bl	8000618 <__aeabi_dmul>
 800cc0a:	3501      	adds	r5, #1
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	1076      	asrs	r6, r6, #1
 800cc10:	3708      	adds	r7, #8
 800cc12:	e76c      	b.n	800caee <_dtoa_r+0x3ce>
 800cc14:	2502      	movs	r5, #2
 800cc16:	e76f      	b.n	800caf8 <_dtoa_r+0x3d8>
 800cc18:	9b01      	ldr	r3, [sp, #4]
 800cc1a:	f8cd a01c 	str.w	sl, [sp, #28]
 800cc1e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc20:	e78d      	b.n	800cb3e <_dtoa_r+0x41e>
 800cc22:	9900      	ldr	r1, [sp, #0]
 800cc24:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc28:	4b4e      	ldr	r3, [pc, #312]	; (800cd64 <_dtoa_r+0x644>)
 800cc2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc2e:	4401      	add	r1, r0
 800cc30:	9102      	str	r1, [sp, #8]
 800cc32:	9908      	ldr	r1, [sp, #32]
 800cc34:	eeb0 8a47 	vmov.f32	s16, s14
 800cc38:	eef0 8a67 	vmov.f32	s17, s15
 800cc3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc44:	2900      	cmp	r1, #0
 800cc46:	d045      	beq.n	800ccd4 <_dtoa_r+0x5b4>
 800cc48:	494c      	ldr	r1, [pc, #304]	; (800cd7c <_dtoa_r+0x65c>)
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	f7f3 fe0e 	bl	800086c <__aeabi_ddiv>
 800cc50:	ec53 2b18 	vmov	r2, r3, d8
 800cc54:	f7f3 fb28 	bl	80002a8 <__aeabi_dsub>
 800cc58:	9d00      	ldr	r5, [sp, #0]
 800cc5a:	ec41 0b18 	vmov	d8, r0, r1
 800cc5e:	4639      	mov	r1, r7
 800cc60:	4630      	mov	r0, r6
 800cc62:	f7f3 ff89 	bl	8000b78 <__aeabi_d2iz>
 800cc66:	900c      	str	r0, [sp, #48]	; 0x30
 800cc68:	f7f3 fc6c 	bl	8000544 <__aeabi_i2d>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	4630      	mov	r0, r6
 800cc72:	4639      	mov	r1, r7
 800cc74:	f7f3 fb18 	bl	80002a8 <__aeabi_dsub>
 800cc78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc7a:	3330      	adds	r3, #48	; 0x30
 800cc7c:	f805 3b01 	strb.w	r3, [r5], #1
 800cc80:	ec53 2b18 	vmov	r2, r3, d8
 800cc84:	4606      	mov	r6, r0
 800cc86:	460f      	mov	r7, r1
 800cc88:	f7f3 ff38 	bl	8000afc <__aeabi_dcmplt>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d165      	bne.n	800cd5c <_dtoa_r+0x63c>
 800cc90:	4632      	mov	r2, r6
 800cc92:	463b      	mov	r3, r7
 800cc94:	4935      	ldr	r1, [pc, #212]	; (800cd6c <_dtoa_r+0x64c>)
 800cc96:	2000      	movs	r0, #0
 800cc98:	f7f3 fb06 	bl	80002a8 <__aeabi_dsub>
 800cc9c:	ec53 2b18 	vmov	r2, r3, d8
 800cca0:	f7f3 ff2c 	bl	8000afc <__aeabi_dcmplt>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	f040 80b9 	bne.w	800ce1c <_dtoa_r+0x6fc>
 800ccaa:	9b02      	ldr	r3, [sp, #8]
 800ccac:	429d      	cmp	r5, r3
 800ccae:	f43f af75 	beq.w	800cb9c <_dtoa_r+0x47c>
 800ccb2:	4b2f      	ldr	r3, [pc, #188]	; (800cd70 <_dtoa_r+0x650>)
 800ccb4:	ec51 0b18 	vmov	r0, r1, d8
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f7f3 fcad 	bl	8000618 <__aeabi_dmul>
 800ccbe:	4b2c      	ldr	r3, [pc, #176]	; (800cd70 <_dtoa_r+0x650>)
 800ccc0:	ec41 0b18 	vmov	d8, r0, r1
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	4639      	mov	r1, r7
 800ccca:	f7f3 fca5 	bl	8000618 <__aeabi_dmul>
 800ccce:	4606      	mov	r6, r0
 800ccd0:	460f      	mov	r7, r1
 800ccd2:	e7c4      	b.n	800cc5e <_dtoa_r+0x53e>
 800ccd4:	ec51 0b17 	vmov	r0, r1, d7
 800ccd8:	f7f3 fc9e 	bl	8000618 <__aeabi_dmul>
 800ccdc:	9b02      	ldr	r3, [sp, #8]
 800ccde:	9d00      	ldr	r5, [sp, #0]
 800cce0:	930c      	str	r3, [sp, #48]	; 0x30
 800cce2:	ec41 0b18 	vmov	d8, r0, r1
 800cce6:	4639      	mov	r1, r7
 800cce8:	4630      	mov	r0, r6
 800ccea:	f7f3 ff45 	bl	8000b78 <__aeabi_d2iz>
 800ccee:	9011      	str	r0, [sp, #68]	; 0x44
 800ccf0:	f7f3 fc28 	bl	8000544 <__aeabi_i2d>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	4639      	mov	r1, r7
 800ccfc:	f7f3 fad4 	bl	80002a8 <__aeabi_dsub>
 800cd00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd02:	3330      	adds	r3, #48	; 0x30
 800cd04:	f805 3b01 	strb.w	r3, [r5], #1
 800cd08:	9b02      	ldr	r3, [sp, #8]
 800cd0a:	429d      	cmp	r5, r3
 800cd0c:	4606      	mov	r6, r0
 800cd0e:	460f      	mov	r7, r1
 800cd10:	f04f 0200 	mov.w	r2, #0
 800cd14:	d134      	bne.n	800cd80 <_dtoa_r+0x660>
 800cd16:	4b19      	ldr	r3, [pc, #100]	; (800cd7c <_dtoa_r+0x65c>)
 800cd18:	ec51 0b18 	vmov	r0, r1, d8
 800cd1c:	f7f3 fac6 	bl	80002ac <__adddf3>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	4630      	mov	r0, r6
 800cd26:	4639      	mov	r1, r7
 800cd28:	f7f3 ff06 	bl	8000b38 <__aeabi_dcmpgt>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d175      	bne.n	800ce1c <_dtoa_r+0x6fc>
 800cd30:	ec53 2b18 	vmov	r2, r3, d8
 800cd34:	4911      	ldr	r1, [pc, #68]	; (800cd7c <_dtoa_r+0x65c>)
 800cd36:	2000      	movs	r0, #0
 800cd38:	f7f3 fab6 	bl	80002a8 <__aeabi_dsub>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	460b      	mov	r3, r1
 800cd40:	4630      	mov	r0, r6
 800cd42:	4639      	mov	r1, r7
 800cd44:	f7f3 feda 	bl	8000afc <__aeabi_dcmplt>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	f43f af27 	beq.w	800cb9c <_dtoa_r+0x47c>
 800cd4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd50:	1e6b      	subs	r3, r5, #1
 800cd52:	930c      	str	r3, [sp, #48]	; 0x30
 800cd54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd58:	2b30      	cmp	r3, #48	; 0x30
 800cd5a:	d0f8      	beq.n	800cd4e <_dtoa_r+0x62e>
 800cd5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cd60:	e04a      	b.n	800cdf8 <_dtoa_r+0x6d8>
 800cd62:	bf00      	nop
 800cd64:	08011480 	.word	0x08011480
 800cd68:	08011458 	.word	0x08011458
 800cd6c:	3ff00000 	.word	0x3ff00000
 800cd70:	40240000 	.word	0x40240000
 800cd74:	401c0000 	.word	0x401c0000
 800cd78:	40140000 	.word	0x40140000
 800cd7c:	3fe00000 	.word	0x3fe00000
 800cd80:	4baf      	ldr	r3, [pc, #700]	; (800d040 <_dtoa_r+0x920>)
 800cd82:	f7f3 fc49 	bl	8000618 <__aeabi_dmul>
 800cd86:	4606      	mov	r6, r0
 800cd88:	460f      	mov	r7, r1
 800cd8a:	e7ac      	b.n	800cce6 <_dtoa_r+0x5c6>
 800cd8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd90:	9d00      	ldr	r5, [sp, #0]
 800cd92:	4642      	mov	r2, r8
 800cd94:	464b      	mov	r3, r9
 800cd96:	4630      	mov	r0, r6
 800cd98:	4639      	mov	r1, r7
 800cd9a:	f7f3 fd67 	bl	800086c <__aeabi_ddiv>
 800cd9e:	f7f3 feeb 	bl	8000b78 <__aeabi_d2iz>
 800cda2:	9002      	str	r0, [sp, #8]
 800cda4:	f7f3 fbce 	bl	8000544 <__aeabi_i2d>
 800cda8:	4642      	mov	r2, r8
 800cdaa:	464b      	mov	r3, r9
 800cdac:	f7f3 fc34 	bl	8000618 <__aeabi_dmul>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	f7f3 fa76 	bl	80002a8 <__aeabi_dsub>
 800cdbc:	9e02      	ldr	r6, [sp, #8]
 800cdbe:	9f01      	ldr	r7, [sp, #4]
 800cdc0:	3630      	adds	r6, #48	; 0x30
 800cdc2:	f805 6b01 	strb.w	r6, [r5], #1
 800cdc6:	9e00      	ldr	r6, [sp, #0]
 800cdc8:	1bae      	subs	r6, r5, r6
 800cdca:	42b7      	cmp	r7, r6
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	d137      	bne.n	800ce42 <_dtoa_r+0x722>
 800cdd2:	f7f3 fa6b 	bl	80002ac <__adddf3>
 800cdd6:	4642      	mov	r2, r8
 800cdd8:	464b      	mov	r3, r9
 800cdda:	4606      	mov	r6, r0
 800cddc:	460f      	mov	r7, r1
 800cdde:	f7f3 feab 	bl	8000b38 <__aeabi_dcmpgt>
 800cde2:	b9c8      	cbnz	r0, 800ce18 <_dtoa_r+0x6f8>
 800cde4:	4642      	mov	r2, r8
 800cde6:	464b      	mov	r3, r9
 800cde8:	4630      	mov	r0, r6
 800cdea:	4639      	mov	r1, r7
 800cdec:	f7f3 fe7c 	bl	8000ae8 <__aeabi_dcmpeq>
 800cdf0:	b110      	cbz	r0, 800cdf8 <_dtoa_r+0x6d8>
 800cdf2:	9b02      	ldr	r3, [sp, #8]
 800cdf4:	07d9      	lsls	r1, r3, #31
 800cdf6:	d40f      	bmi.n	800ce18 <_dtoa_r+0x6f8>
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	4659      	mov	r1, fp
 800cdfc:	f000 fbc2 	bl	800d584 <_Bfree>
 800ce00:	2300      	movs	r3, #0
 800ce02:	702b      	strb	r3, [r5, #0]
 800ce04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce06:	f10a 0001 	add.w	r0, sl, #1
 800ce0a:	6018      	str	r0, [r3, #0]
 800ce0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f43f acd8 	beq.w	800c7c4 <_dtoa_r+0xa4>
 800ce14:	601d      	str	r5, [r3, #0]
 800ce16:	e4d5      	b.n	800c7c4 <_dtoa_r+0xa4>
 800ce18:	f8cd a01c 	str.w	sl, [sp, #28]
 800ce1c:	462b      	mov	r3, r5
 800ce1e:	461d      	mov	r5, r3
 800ce20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce24:	2a39      	cmp	r2, #57	; 0x39
 800ce26:	d108      	bne.n	800ce3a <_dtoa_r+0x71a>
 800ce28:	9a00      	ldr	r2, [sp, #0]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d1f7      	bne.n	800ce1e <_dtoa_r+0x6fe>
 800ce2e:	9a07      	ldr	r2, [sp, #28]
 800ce30:	9900      	ldr	r1, [sp, #0]
 800ce32:	3201      	adds	r2, #1
 800ce34:	9207      	str	r2, [sp, #28]
 800ce36:	2230      	movs	r2, #48	; 0x30
 800ce38:	700a      	strb	r2, [r1, #0]
 800ce3a:	781a      	ldrb	r2, [r3, #0]
 800ce3c:	3201      	adds	r2, #1
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	e78c      	b.n	800cd5c <_dtoa_r+0x63c>
 800ce42:	4b7f      	ldr	r3, [pc, #508]	; (800d040 <_dtoa_r+0x920>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	f7f3 fbe7 	bl	8000618 <__aeabi_dmul>
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4606      	mov	r6, r0
 800ce50:	460f      	mov	r7, r1
 800ce52:	f7f3 fe49 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d09b      	beq.n	800cd92 <_dtoa_r+0x672>
 800ce5a:	e7cd      	b.n	800cdf8 <_dtoa_r+0x6d8>
 800ce5c:	9a08      	ldr	r2, [sp, #32]
 800ce5e:	2a00      	cmp	r2, #0
 800ce60:	f000 80c4 	beq.w	800cfec <_dtoa_r+0x8cc>
 800ce64:	9a05      	ldr	r2, [sp, #20]
 800ce66:	2a01      	cmp	r2, #1
 800ce68:	f300 80a8 	bgt.w	800cfbc <_dtoa_r+0x89c>
 800ce6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce6e:	2a00      	cmp	r2, #0
 800ce70:	f000 80a0 	beq.w	800cfb4 <_dtoa_r+0x894>
 800ce74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce78:	9e06      	ldr	r6, [sp, #24]
 800ce7a:	4645      	mov	r5, r8
 800ce7c:	9a04      	ldr	r2, [sp, #16]
 800ce7e:	2101      	movs	r1, #1
 800ce80:	441a      	add	r2, r3
 800ce82:	4620      	mov	r0, r4
 800ce84:	4498      	add	r8, r3
 800ce86:	9204      	str	r2, [sp, #16]
 800ce88:	f000 fc38 	bl	800d6fc <__i2b>
 800ce8c:	4607      	mov	r7, r0
 800ce8e:	2d00      	cmp	r5, #0
 800ce90:	dd0b      	ble.n	800ceaa <_dtoa_r+0x78a>
 800ce92:	9b04      	ldr	r3, [sp, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dd08      	ble.n	800ceaa <_dtoa_r+0x78a>
 800ce98:	42ab      	cmp	r3, r5
 800ce9a:	9a04      	ldr	r2, [sp, #16]
 800ce9c:	bfa8      	it	ge
 800ce9e:	462b      	movge	r3, r5
 800cea0:	eba8 0803 	sub.w	r8, r8, r3
 800cea4:	1aed      	subs	r5, r5, r3
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	9304      	str	r3, [sp, #16]
 800ceaa:	9b06      	ldr	r3, [sp, #24]
 800ceac:	b1fb      	cbz	r3, 800ceee <_dtoa_r+0x7ce>
 800ceae:	9b08      	ldr	r3, [sp, #32]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 809f 	beq.w	800cff4 <_dtoa_r+0x8d4>
 800ceb6:	2e00      	cmp	r6, #0
 800ceb8:	dd11      	ble.n	800cede <_dtoa_r+0x7be>
 800ceba:	4639      	mov	r1, r7
 800cebc:	4632      	mov	r2, r6
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 fcd8 	bl	800d874 <__pow5mult>
 800cec4:	465a      	mov	r2, fp
 800cec6:	4601      	mov	r1, r0
 800cec8:	4607      	mov	r7, r0
 800ceca:	4620      	mov	r0, r4
 800cecc:	f000 fc2c 	bl	800d728 <__multiply>
 800ced0:	4659      	mov	r1, fp
 800ced2:	9007      	str	r0, [sp, #28]
 800ced4:	4620      	mov	r0, r4
 800ced6:	f000 fb55 	bl	800d584 <_Bfree>
 800ceda:	9b07      	ldr	r3, [sp, #28]
 800cedc:	469b      	mov	fp, r3
 800cede:	9b06      	ldr	r3, [sp, #24]
 800cee0:	1b9a      	subs	r2, r3, r6
 800cee2:	d004      	beq.n	800ceee <_dtoa_r+0x7ce>
 800cee4:	4659      	mov	r1, fp
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 fcc4 	bl	800d874 <__pow5mult>
 800ceec:	4683      	mov	fp, r0
 800ceee:	2101      	movs	r1, #1
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 fc03 	bl	800d6fc <__i2b>
 800cef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	4606      	mov	r6, r0
 800cefc:	dd7c      	ble.n	800cff8 <_dtoa_r+0x8d8>
 800cefe:	461a      	mov	r2, r3
 800cf00:	4601      	mov	r1, r0
 800cf02:	4620      	mov	r0, r4
 800cf04:	f000 fcb6 	bl	800d874 <__pow5mult>
 800cf08:	9b05      	ldr	r3, [sp, #20]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	dd76      	ble.n	800cffe <_dtoa_r+0x8de>
 800cf10:	2300      	movs	r3, #0
 800cf12:	9306      	str	r3, [sp, #24]
 800cf14:	6933      	ldr	r3, [r6, #16]
 800cf16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cf1a:	6918      	ldr	r0, [r3, #16]
 800cf1c:	f000 fb9e 	bl	800d65c <__hi0bits>
 800cf20:	f1c0 0020 	rsb	r0, r0, #32
 800cf24:	9b04      	ldr	r3, [sp, #16]
 800cf26:	4418      	add	r0, r3
 800cf28:	f010 001f 	ands.w	r0, r0, #31
 800cf2c:	f000 8086 	beq.w	800d03c <_dtoa_r+0x91c>
 800cf30:	f1c0 0320 	rsb	r3, r0, #32
 800cf34:	2b04      	cmp	r3, #4
 800cf36:	dd7f      	ble.n	800d038 <_dtoa_r+0x918>
 800cf38:	f1c0 001c 	rsb	r0, r0, #28
 800cf3c:	9b04      	ldr	r3, [sp, #16]
 800cf3e:	4403      	add	r3, r0
 800cf40:	4480      	add	r8, r0
 800cf42:	4405      	add	r5, r0
 800cf44:	9304      	str	r3, [sp, #16]
 800cf46:	f1b8 0f00 	cmp.w	r8, #0
 800cf4a:	dd05      	ble.n	800cf58 <_dtoa_r+0x838>
 800cf4c:	4659      	mov	r1, fp
 800cf4e:	4642      	mov	r2, r8
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 fce9 	bl	800d928 <__lshift>
 800cf56:	4683      	mov	fp, r0
 800cf58:	9b04      	ldr	r3, [sp, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	dd05      	ble.n	800cf6a <_dtoa_r+0x84a>
 800cf5e:	4631      	mov	r1, r6
 800cf60:	461a      	mov	r2, r3
 800cf62:	4620      	mov	r0, r4
 800cf64:	f000 fce0 	bl	800d928 <__lshift>
 800cf68:	4606      	mov	r6, r0
 800cf6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d069      	beq.n	800d044 <_dtoa_r+0x924>
 800cf70:	4631      	mov	r1, r6
 800cf72:	4658      	mov	r0, fp
 800cf74:	f000 fd44 	bl	800da00 <__mcmp>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	da63      	bge.n	800d044 <_dtoa_r+0x924>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4659      	mov	r1, fp
 800cf80:	220a      	movs	r2, #10
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 fb20 	bl	800d5c8 <__multadd>
 800cf88:	9b08      	ldr	r3, [sp, #32]
 800cf8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf8e:	4683      	mov	fp, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f000 818f 	beq.w	800d2b4 <_dtoa_r+0xb94>
 800cf96:	4639      	mov	r1, r7
 800cf98:	2300      	movs	r3, #0
 800cf9a:	220a      	movs	r2, #10
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f000 fb13 	bl	800d5c8 <__multadd>
 800cfa2:	f1b9 0f00 	cmp.w	r9, #0
 800cfa6:	4607      	mov	r7, r0
 800cfa8:	f300 808e 	bgt.w	800d0c8 <_dtoa_r+0x9a8>
 800cfac:	9b05      	ldr	r3, [sp, #20]
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	dc50      	bgt.n	800d054 <_dtoa_r+0x934>
 800cfb2:	e089      	b.n	800d0c8 <_dtoa_r+0x9a8>
 800cfb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cfb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cfba:	e75d      	b.n	800ce78 <_dtoa_r+0x758>
 800cfbc:	9b01      	ldr	r3, [sp, #4]
 800cfbe:	1e5e      	subs	r6, r3, #1
 800cfc0:	9b06      	ldr	r3, [sp, #24]
 800cfc2:	42b3      	cmp	r3, r6
 800cfc4:	bfbf      	itttt	lt
 800cfc6:	9b06      	ldrlt	r3, [sp, #24]
 800cfc8:	9606      	strlt	r6, [sp, #24]
 800cfca:	1af2      	sublt	r2, r6, r3
 800cfcc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800cfce:	bfb6      	itet	lt
 800cfd0:	189b      	addlt	r3, r3, r2
 800cfd2:	1b9e      	subge	r6, r3, r6
 800cfd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cfd6:	9b01      	ldr	r3, [sp, #4]
 800cfd8:	bfb8      	it	lt
 800cfda:	2600      	movlt	r6, #0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	bfb5      	itete	lt
 800cfe0:	eba8 0503 	sublt.w	r5, r8, r3
 800cfe4:	9b01      	ldrge	r3, [sp, #4]
 800cfe6:	2300      	movlt	r3, #0
 800cfe8:	4645      	movge	r5, r8
 800cfea:	e747      	b.n	800ce7c <_dtoa_r+0x75c>
 800cfec:	9e06      	ldr	r6, [sp, #24]
 800cfee:	9f08      	ldr	r7, [sp, #32]
 800cff0:	4645      	mov	r5, r8
 800cff2:	e74c      	b.n	800ce8e <_dtoa_r+0x76e>
 800cff4:	9a06      	ldr	r2, [sp, #24]
 800cff6:	e775      	b.n	800cee4 <_dtoa_r+0x7c4>
 800cff8:	9b05      	ldr	r3, [sp, #20]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	dc18      	bgt.n	800d030 <_dtoa_r+0x910>
 800cffe:	9b02      	ldr	r3, [sp, #8]
 800d000:	b9b3      	cbnz	r3, 800d030 <_dtoa_r+0x910>
 800d002:	9b03      	ldr	r3, [sp, #12]
 800d004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d008:	b9a3      	cbnz	r3, 800d034 <_dtoa_r+0x914>
 800d00a:	9b03      	ldr	r3, [sp, #12]
 800d00c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d010:	0d1b      	lsrs	r3, r3, #20
 800d012:	051b      	lsls	r3, r3, #20
 800d014:	b12b      	cbz	r3, 800d022 <_dtoa_r+0x902>
 800d016:	9b04      	ldr	r3, [sp, #16]
 800d018:	3301      	adds	r3, #1
 800d01a:	9304      	str	r3, [sp, #16]
 800d01c:	f108 0801 	add.w	r8, r8, #1
 800d020:	2301      	movs	r3, #1
 800d022:	9306      	str	r3, [sp, #24]
 800d024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d026:	2b00      	cmp	r3, #0
 800d028:	f47f af74 	bne.w	800cf14 <_dtoa_r+0x7f4>
 800d02c:	2001      	movs	r0, #1
 800d02e:	e779      	b.n	800cf24 <_dtoa_r+0x804>
 800d030:	2300      	movs	r3, #0
 800d032:	e7f6      	b.n	800d022 <_dtoa_r+0x902>
 800d034:	9b02      	ldr	r3, [sp, #8]
 800d036:	e7f4      	b.n	800d022 <_dtoa_r+0x902>
 800d038:	d085      	beq.n	800cf46 <_dtoa_r+0x826>
 800d03a:	4618      	mov	r0, r3
 800d03c:	301c      	adds	r0, #28
 800d03e:	e77d      	b.n	800cf3c <_dtoa_r+0x81c>
 800d040:	40240000 	.word	0x40240000
 800d044:	9b01      	ldr	r3, [sp, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	dc38      	bgt.n	800d0bc <_dtoa_r+0x99c>
 800d04a:	9b05      	ldr	r3, [sp, #20]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	dd35      	ble.n	800d0bc <_dtoa_r+0x99c>
 800d050:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d054:	f1b9 0f00 	cmp.w	r9, #0
 800d058:	d10d      	bne.n	800d076 <_dtoa_r+0x956>
 800d05a:	4631      	mov	r1, r6
 800d05c:	464b      	mov	r3, r9
 800d05e:	2205      	movs	r2, #5
 800d060:	4620      	mov	r0, r4
 800d062:	f000 fab1 	bl	800d5c8 <__multadd>
 800d066:	4601      	mov	r1, r0
 800d068:	4606      	mov	r6, r0
 800d06a:	4658      	mov	r0, fp
 800d06c:	f000 fcc8 	bl	800da00 <__mcmp>
 800d070:	2800      	cmp	r0, #0
 800d072:	f73f adbd 	bgt.w	800cbf0 <_dtoa_r+0x4d0>
 800d076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d078:	9d00      	ldr	r5, [sp, #0]
 800d07a:	ea6f 0a03 	mvn.w	sl, r3
 800d07e:	f04f 0800 	mov.w	r8, #0
 800d082:	4631      	mov	r1, r6
 800d084:	4620      	mov	r0, r4
 800d086:	f000 fa7d 	bl	800d584 <_Bfree>
 800d08a:	2f00      	cmp	r7, #0
 800d08c:	f43f aeb4 	beq.w	800cdf8 <_dtoa_r+0x6d8>
 800d090:	f1b8 0f00 	cmp.w	r8, #0
 800d094:	d005      	beq.n	800d0a2 <_dtoa_r+0x982>
 800d096:	45b8      	cmp	r8, r7
 800d098:	d003      	beq.n	800d0a2 <_dtoa_r+0x982>
 800d09a:	4641      	mov	r1, r8
 800d09c:	4620      	mov	r0, r4
 800d09e:	f000 fa71 	bl	800d584 <_Bfree>
 800d0a2:	4639      	mov	r1, r7
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 fa6d 	bl	800d584 <_Bfree>
 800d0aa:	e6a5      	b.n	800cdf8 <_dtoa_r+0x6d8>
 800d0ac:	2600      	movs	r6, #0
 800d0ae:	4637      	mov	r7, r6
 800d0b0:	e7e1      	b.n	800d076 <_dtoa_r+0x956>
 800d0b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d0b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d0b8:	4637      	mov	r7, r6
 800d0ba:	e599      	b.n	800cbf0 <_dtoa_r+0x4d0>
 800d0bc:	9b08      	ldr	r3, [sp, #32]
 800d0be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 80fd 	beq.w	800d2c2 <_dtoa_r+0xba2>
 800d0c8:	2d00      	cmp	r5, #0
 800d0ca:	dd05      	ble.n	800d0d8 <_dtoa_r+0x9b8>
 800d0cc:	4639      	mov	r1, r7
 800d0ce:	462a      	mov	r2, r5
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f000 fc29 	bl	800d928 <__lshift>
 800d0d6:	4607      	mov	r7, r0
 800d0d8:	9b06      	ldr	r3, [sp, #24]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d05c      	beq.n	800d198 <_dtoa_r+0xa78>
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f000 fa0f 	bl	800d504 <_Balloc>
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	b928      	cbnz	r0, 800d0f6 <_dtoa_r+0x9d6>
 800d0ea:	4b80      	ldr	r3, [pc, #512]	; (800d2ec <_dtoa_r+0xbcc>)
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d0f2:	f7ff bb2e 	b.w	800c752 <_dtoa_r+0x32>
 800d0f6:	693a      	ldr	r2, [r7, #16]
 800d0f8:	3202      	adds	r2, #2
 800d0fa:	0092      	lsls	r2, r2, #2
 800d0fc:	f107 010c 	add.w	r1, r7, #12
 800d100:	300c      	adds	r0, #12
 800d102:	f7fe fde9 	bl	800bcd8 <memcpy>
 800d106:	2201      	movs	r2, #1
 800d108:	4629      	mov	r1, r5
 800d10a:	4620      	mov	r0, r4
 800d10c:	f000 fc0c 	bl	800d928 <__lshift>
 800d110:	9b00      	ldr	r3, [sp, #0]
 800d112:	3301      	adds	r3, #1
 800d114:	9301      	str	r3, [sp, #4]
 800d116:	9b00      	ldr	r3, [sp, #0]
 800d118:	444b      	add	r3, r9
 800d11a:	9307      	str	r3, [sp, #28]
 800d11c:	9b02      	ldr	r3, [sp, #8]
 800d11e:	f003 0301 	and.w	r3, r3, #1
 800d122:	46b8      	mov	r8, r7
 800d124:	9306      	str	r3, [sp, #24]
 800d126:	4607      	mov	r7, r0
 800d128:	9b01      	ldr	r3, [sp, #4]
 800d12a:	4631      	mov	r1, r6
 800d12c:	3b01      	subs	r3, #1
 800d12e:	4658      	mov	r0, fp
 800d130:	9302      	str	r3, [sp, #8]
 800d132:	f7ff fa69 	bl	800c608 <quorem>
 800d136:	4603      	mov	r3, r0
 800d138:	3330      	adds	r3, #48	; 0x30
 800d13a:	9004      	str	r0, [sp, #16]
 800d13c:	4641      	mov	r1, r8
 800d13e:	4658      	mov	r0, fp
 800d140:	9308      	str	r3, [sp, #32]
 800d142:	f000 fc5d 	bl	800da00 <__mcmp>
 800d146:	463a      	mov	r2, r7
 800d148:	4681      	mov	r9, r0
 800d14a:	4631      	mov	r1, r6
 800d14c:	4620      	mov	r0, r4
 800d14e:	f000 fc73 	bl	800da38 <__mdiff>
 800d152:	68c2      	ldr	r2, [r0, #12]
 800d154:	9b08      	ldr	r3, [sp, #32]
 800d156:	4605      	mov	r5, r0
 800d158:	bb02      	cbnz	r2, 800d19c <_dtoa_r+0xa7c>
 800d15a:	4601      	mov	r1, r0
 800d15c:	4658      	mov	r0, fp
 800d15e:	f000 fc4f 	bl	800da00 <__mcmp>
 800d162:	9b08      	ldr	r3, [sp, #32]
 800d164:	4602      	mov	r2, r0
 800d166:	4629      	mov	r1, r5
 800d168:	4620      	mov	r0, r4
 800d16a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d16e:	f000 fa09 	bl	800d584 <_Bfree>
 800d172:	9b05      	ldr	r3, [sp, #20]
 800d174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d176:	9d01      	ldr	r5, [sp, #4]
 800d178:	ea43 0102 	orr.w	r1, r3, r2
 800d17c:	9b06      	ldr	r3, [sp, #24]
 800d17e:	430b      	orrs	r3, r1
 800d180:	9b08      	ldr	r3, [sp, #32]
 800d182:	d10d      	bne.n	800d1a0 <_dtoa_r+0xa80>
 800d184:	2b39      	cmp	r3, #57	; 0x39
 800d186:	d029      	beq.n	800d1dc <_dtoa_r+0xabc>
 800d188:	f1b9 0f00 	cmp.w	r9, #0
 800d18c:	dd01      	ble.n	800d192 <_dtoa_r+0xa72>
 800d18e:	9b04      	ldr	r3, [sp, #16]
 800d190:	3331      	adds	r3, #49	; 0x31
 800d192:	9a02      	ldr	r2, [sp, #8]
 800d194:	7013      	strb	r3, [r2, #0]
 800d196:	e774      	b.n	800d082 <_dtoa_r+0x962>
 800d198:	4638      	mov	r0, r7
 800d19a:	e7b9      	b.n	800d110 <_dtoa_r+0x9f0>
 800d19c:	2201      	movs	r2, #1
 800d19e:	e7e2      	b.n	800d166 <_dtoa_r+0xa46>
 800d1a0:	f1b9 0f00 	cmp.w	r9, #0
 800d1a4:	db06      	blt.n	800d1b4 <_dtoa_r+0xa94>
 800d1a6:	9905      	ldr	r1, [sp, #20]
 800d1a8:	ea41 0909 	orr.w	r9, r1, r9
 800d1ac:	9906      	ldr	r1, [sp, #24]
 800d1ae:	ea59 0101 	orrs.w	r1, r9, r1
 800d1b2:	d120      	bne.n	800d1f6 <_dtoa_r+0xad6>
 800d1b4:	2a00      	cmp	r2, #0
 800d1b6:	ddec      	ble.n	800d192 <_dtoa_r+0xa72>
 800d1b8:	4659      	mov	r1, fp
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	4620      	mov	r0, r4
 800d1be:	9301      	str	r3, [sp, #4]
 800d1c0:	f000 fbb2 	bl	800d928 <__lshift>
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	4683      	mov	fp, r0
 800d1c8:	f000 fc1a 	bl	800da00 <__mcmp>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	9b01      	ldr	r3, [sp, #4]
 800d1d0:	dc02      	bgt.n	800d1d8 <_dtoa_r+0xab8>
 800d1d2:	d1de      	bne.n	800d192 <_dtoa_r+0xa72>
 800d1d4:	07da      	lsls	r2, r3, #31
 800d1d6:	d5dc      	bpl.n	800d192 <_dtoa_r+0xa72>
 800d1d8:	2b39      	cmp	r3, #57	; 0x39
 800d1da:	d1d8      	bne.n	800d18e <_dtoa_r+0xa6e>
 800d1dc:	9a02      	ldr	r2, [sp, #8]
 800d1de:	2339      	movs	r3, #57	; 0x39
 800d1e0:	7013      	strb	r3, [r2, #0]
 800d1e2:	462b      	mov	r3, r5
 800d1e4:	461d      	mov	r5, r3
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d1ec:	2a39      	cmp	r2, #57	; 0x39
 800d1ee:	d050      	beq.n	800d292 <_dtoa_r+0xb72>
 800d1f0:	3201      	adds	r2, #1
 800d1f2:	701a      	strb	r2, [r3, #0]
 800d1f4:	e745      	b.n	800d082 <_dtoa_r+0x962>
 800d1f6:	2a00      	cmp	r2, #0
 800d1f8:	dd03      	ble.n	800d202 <_dtoa_r+0xae2>
 800d1fa:	2b39      	cmp	r3, #57	; 0x39
 800d1fc:	d0ee      	beq.n	800d1dc <_dtoa_r+0xabc>
 800d1fe:	3301      	adds	r3, #1
 800d200:	e7c7      	b.n	800d192 <_dtoa_r+0xa72>
 800d202:	9a01      	ldr	r2, [sp, #4]
 800d204:	9907      	ldr	r1, [sp, #28]
 800d206:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d20a:	428a      	cmp	r2, r1
 800d20c:	d02a      	beq.n	800d264 <_dtoa_r+0xb44>
 800d20e:	4659      	mov	r1, fp
 800d210:	2300      	movs	r3, #0
 800d212:	220a      	movs	r2, #10
 800d214:	4620      	mov	r0, r4
 800d216:	f000 f9d7 	bl	800d5c8 <__multadd>
 800d21a:	45b8      	cmp	r8, r7
 800d21c:	4683      	mov	fp, r0
 800d21e:	f04f 0300 	mov.w	r3, #0
 800d222:	f04f 020a 	mov.w	r2, #10
 800d226:	4641      	mov	r1, r8
 800d228:	4620      	mov	r0, r4
 800d22a:	d107      	bne.n	800d23c <_dtoa_r+0xb1c>
 800d22c:	f000 f9cc 	bl	800d5c8 <__multadd>
 800d230:	4680      	mov	r8, r0
 800d232:	4607      	mov	r7, r0
 800d234:	9b01      	ldr	r3, [sp, #4]
 800d236:	3301      	adds	r3, #1
 800d238:	9301      	str	r3, [sp, #4]
 800d23a:	e775      	b.n	800d128 <_dtoa_r+0xa08>
 800d23c:	f000 f9c4 	bl	800d5c8 <__multadd>
 800d240:	4639      	mov	r1, r7
 800d242:	4680      	mov	r8, r0
 800d244:	2300      	movs	r3, #0
 800d246:	220a      	movs	r2, #10
 800d248:	4620      	mov	r0, r4
 800d24a:	f000 f9bd 	bl	800d5c8 <__multadd>
 800d24e:	4607      	mov	r7, r0
 800d250:	e7f0      	b.n	800d234 <_dtoa_r+0xb14>
 800d252:	f1b9 0f00 	cmp.w	r9, #0
 800d256:	9a00      	ldr	r2, [sp, #0]
 800d258:	bfcc      	ite	gt
 800d25a:	464d      	movgt	r5, r9
 800d25c:	2501      	movle	r5, #1
 800d25e:	4415      	add	r5, r2
 800d260:	f04f 0800 	mov.w	r8, #0
 800d264:	4659      	mov	r1, fp
 800d266:	2201      	movs	r2, #1
 800d268:	4620      	mov	r0, r4
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	f000 fb5c 	bl	800d928 <__lshift>
 800d270:	4631      	mov	r1, r6
 800d272:	4683      	mov	fp, r0
 800d274:	f000 fbc4 	bl	800da00 <__mcmp>
 800d278:	2800      	cmp	r0, #0
 800d27a:	dcb2      	bgt.n	800d1e2 <_dtoa_r+0xac2>
 800d27c:	d102      	bne.n	800d284 <_dtoa_r+0xb64>
 800d27e:	9b01      	ldr	r3, [sp, #4]
 800d280:	07db      	lsls	r3, r3, #31
 800d282:	d4ae      	bmi.n	800d1e2 <_dtoa_r+0xac2>
 800d284:	462b      	mov	r3, r5
 800d286:	461d      	mov	r5, r3
 800d288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d28c:	2a30      	cmp	r2, #48	; 0x30
 800d28e:	d0fa      	beq.n	800d286 <_dtoa_r+0xb66>
 800d290:	e6f7      	b.n	800d082 <_dtoa_r+0x962>
 800d292:	9a00      	ldr	r2, [sp, #0]
 800d294:	429a      	cmp	r2, r3
 800d296:	d1a5      	bne.n	800d1e4 <_dtoa_r+0xac4>
 800d298:	f10a 0a01 	add.w	sl, sl, #1
 800d29c:	2331      	movs	r3, #49	; 0x31
 800d29e:	e779      	b.n	800d194 <_dtoa_r+0xa74>
 800d2a0:	4b13      	ldr	r3, [pc, #76]	; (800d2f0 <_dtoa_r+0xbd0>)
 800d2a2:	f7ff baaf 	b.w	800c804 <_dtoa_r+0xe4>
 800d2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f47f aa86 	bne.w	800c7ba <_dtoa_r+0x9a>
 800d2ae:	4b11      	ldr	r3, [pc, #68]	; (800d2f4 <_dtoa_r+0xbd4>)
 800d2b0:	f7ff baa8 	b.w	800c804 <_dtoa_r+0xe4>
 800d2b4:	f1b9 0f00 	cmp.w	r9, #0
 800d2b8:	dc03      	bgt.n	800d2c2 <_dtoa_r+0xba2>
 800d2ba:	9b05      	ldr	r3, [sp, #20]
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	f73f aec9 	bgt.w	800d054 <_dtoa_r+0x934>
 800d2c2:	9d00      	ldr	r5, [sp, #0]
 800d2c4:	4631      	mov	r1, r6
 800d2c6:	4658      	mov	r0, fp
 800d2c8:	f7ff f99e 	bl	800c608 <quorem>
 800d2cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d2d0:	f805 3b01 	strb.w	r3, [r5], #1
 800d2d4:	9a00      	ldr	r2, [sp, #0]
 800d2d6:	1aaa      	subs	r2, r5, r2
 800d2d8:	4591      	cmp	r9, r2
 800d2da:	ddba      	ble.n	800d252 <_dtoa_r+0xb32>
 800d2dc:	4659      	mov	r1, fp
 800d2de:	2300      	movs	r3, #0
 800d2e0:	220a      	movs	r2, #10
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f000 f970 	bl	800d5c8 <__multadd>
 800d2e8:	4683      	mov	fp, r0
 800d2ea:	e7eb      	b.n	800d2c4 <_dtoa_r+0xba4>
 800d2ec:	08011387 	.word	0x08011387
 800d2f0:	080112e0 	.word	0x080112e0
 800d2f4:	08011304 	.word	0x08011304

0800d2f8 <std>:
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	b510      	push	{r4, lr}
 800d2fc:	4604      	mov	r4, r0
 800d2fe:	e9c0 3300 	strd	r3, r3, [r0]
 800d302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d306:	6083      	str	r3, [r0, #8]
 800d308:	8181      	strh	r1, [r0, #12]
 800d30a:	6643      	str	r3, [r0, #100]	; 0x64
 800d30c:	81c2      	strh	r2, [r0, #14]
 800d30e:	6183      	str	r3, [r0, #24]
 800d310:	4619      	mov	r1, r3
 800d312:	2208      	movs	r2, #8
 800d314:	305c      	adds	r0, #92	; 0x5c
 800d316:	f7fe fced 	bl	800bcf4 <memset>
 800d31a:	4b05      	ldr	r3, [pc, #20]	; (800d330 <std+0x38>)
 800d31c:	6263      	str	r3, [r4, #36]	; 0x24
 800d31e:	4b05      	ldr	r3, [pc, #20]	; (800d334 <std+0x3c>)
 800d320:	62a3      	str	r3, [r4, #40]	; 0x28
 800d322:	4b05      	ldr	r3, [pc, #20]	; (800d338 <std+0x40>)
 800d324:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d326:	4b05      	ldr	r3, [pc, #20]	; (800d33c <std+0x44>)
 800d328:	6224      	str	r4, [r4, #32]
 800d32a:	6323      	str	r3, [r4, #48]	; 0x30
 800d32c:	bd10      	pop	{r4, pc}
 800d32e:	bf00      	nop
 800d330:	0800e049 	.word	0x0800e049
 800d334:	0800e06b 	.word	0x0800e06b
 800d338:	0800e0a3 	.word	0x0800e0a3
 800d33c:	0800e0c7 	.word	0x0800e0c7

0800d340 <_cleanup_r>:
 800d340:	4901      	ldr	r1, [pc, #4]	; (800d348 <_cleanup_r+0x8>)
 800d342:	f000 b8af 	b.w	800d4a4 <_fwalk_reent>
 800d346:	bf00      	nop
 800d348:	0800e3dd 	.word	0x0800e3dd

0800d34c <__sfmoreglue>:
 800d34c:	b570      	push	{r4, r5, r6, lr}
 800d34e:	1e4a      	subs	r2, r1, #1
 800d350:	2568      	movs	r5, #104	; 0x68
 800d352:	4355      	muls	r5, r2
 800d354:	460e      	mov	r6, r1
 800d356:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d35a:	f000 fcb1 	bl	800dcc0 <_malloc_r>
 800d35e:	4604      	mov	r4, r0
 800d360:	b140      	cbz	r0, 800d374 <__sfmoreglue+0x28>
 800d362:	2100      	movs	r1, #0
 800d364:	e9c0 1600 	strd	r1, r6, [r0]
 800d368:	300c      	adds	r0, #12
 800d36a:	60a0      	str	r0, [r4, #8]
 800d36c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d370:	f7fe fcc0 	bl	800bcf4 <memset>
 800d374:	4620      	mov	r0, r4
 800d376:	bd70      	pop	{r4, r5, r6, pc}

0800d378 <__sfp_lock_acquire>:
 800d378:	4801      	ldr	r0, [pc, #4]	; (800d380 <__sfp_lock_acquire+0x8>)
 800d37a:	f000 b8b8 	b.w	800d4ee <__retarget_lock_acquire_recursive>
 800d37e:	bf00      	nop
 800d380:	20022108 	.word	0x20022108

0800d384 <__sfp_lock_release>:
 800d384:	4801      	ldr	r0, [pc, #4]	; (800d38c <__sfp_lock_release+0x8>)
 800d386:	f000 b8b3 	b.w	800d4f0 <__retarget_lock_release_recursive>
 800d38a:	bf00      	nop
 800d38c:	20022108 	.word	0x20022108

0800d390 <__sinit_lock_acquire>:
 800d390:	4801      	ldr	r0, [pc, #4]	; (800d398 <__sinit_lock_acquire+0x8>)
 800d392:	f000 b8ac 	b.w	800d4ee <__retarget_lock_acquire_recursive>
 800d396:	bf00      	nop
 800d398:	20022103 	.word	0x20022103

0800d39c <__sinit_lock_release>:
 800d39c:	4801      	ldr	r0, [pc, #4]	; (800d3a4 <__sinit_lock_release+0x8>)
 800d39e:	f000 b8a7 	b.w	800d4f0 <__retarget_lock_release_recursive>
 800d3a2:	bf00      	nop
 800d3a4:	20022103 	.word	0x20022103

0800d3a8 <__sinit>:
 800d3a8:	b510      	push	{r4, lr}
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	f7ff fff0 	bl	800d390 <__sinit_lock_acquire>
 800d3b0:	69a3      	ldr	r3, [r4, #24]
 800d3b2:	b11b      	cbz	r3, 800d3bc <__sinit+0x14>
 800d3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3b8:	f7ff bff0 	b.w	800d39c <__sinit_lock_release>
 800d3bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d3c0:	6523      	str	r3, [r4, #80]	; 0x50
 800d3c2:	4b13      	ldr	r3, [pc, #76]	; (800d410 <__sinit+0x68>)
 800d3c4:	4a13      	ldr	r2, [pc, #76]	; (800d414 <__sinit+0x6c>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d3ca:	42a3      	cmp	r3, r4
 800d3cc:	bf04      	itt	eq
 800d3ce:	2301      	moveq	r3, #1
 800d3d0:	61a3      	streq	r3, [r4, #24]
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f000 f820 	bl	800d418 <__sfp>
 800d3d8:	6060      	str	r0, [r4, #4]
 800d3da:	4620      	mov	r0, r4
 800d3dc:	f000 f81c 	bl	800d418 <__sfp>
 800d3e0:	60a0      	str	r0, [r4, #8]
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f000 f818 	bl	800d418 <__sfp>
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	60e0      	str	r0, [r4, #12]
 800d3ec:	2104      	movs	r1, #4
 800d3ee:	6860      	ldr	r0, [r4, #4]
 800d3f0:	f7ff ff82 	bl	800d2f8 <std>
 800d3f4:	68a0      	ldr	r0, [r4, #8]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	2109      	movs	r1, #9
 800d3fa:	f7ff ff7d 	bl	800d2f8 <std>
 800d3fe:	68e0      	ldr	r0, [r4, #12]
 800d400:	2202      	movs	r2, #2
 800d402:	2112      	movs	r1, #18
 800d404:	f7ff ff78 	bl	800d2f8 <std>
 800d408:	2301      	movs	r3, #1
 800d40a:	61a3      	str	r3, [r4, #24]
 800d40c:	e7d2      	b.n	800d3b4 <__sinit+0xc>
 800d40e:	bf00      	nop
 800d410:	080112cc 	.word	0x080112cc
 800d414:	0800d341 	.word	0x0800d341

0800d418 <__sfp>:
 800d418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41a:	4607      	mov	r7, r0
 800d41c:	f7ff ffac 	bl	800d378 <__sfp_lock_acquire>
 800d420:	4b1e      	ldr	r3, [pc, #120]	; (800d49c <__sfp+0x84>)
 800d422:	681e      	ldr	r6, [r3, #0]
 800d424:	69b3      	ldr	r3, [r6, #24]
 800d426:	b913      	cbnz	r3, 800d42e <__sfp+0x16>
 800d428:	4630      	mov	r0, r6
 800d42a:	f7ff ffbd 	bl	800d3a8 <__sinit>
 800d42e:	3648      	adds	r6, #72	; 0x48
 800d430:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d434:	3b01      	subs	r3, #1
 800d436:	d503      	bpl.n	800d440 <__sfp+0x28>
 800d438:	6833      	ldr	r3, [r6, #0]
 800d43a:	b30b      	cbz	r3, 800d480 <__sfp+0x68>
 800d43c:	6836      	ldr	r6, [r6, #0]
 800d43e:	e7f7      	b.n	800d430 <__sfp+0x18>
 800d440:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d444:	b9d5      	cbnz	r5, 800d47c <__sfp+0x64>
 800d446:	4b16      	ldr	r3, [pc, #88]	; (800d4a0 <__sfp+0x88>)
 800d448:	60e3      	str	r3, [r4, #12]
 800d44a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d44e:	6665      	str	r5, [r4, #100]	; 0x64
 800d450:	f000 f84c 	bl	800d4ec <__retarget_lock_init_recursive>
 800d454:	f7ff ff96 	bl	800d384 <__sfp_lock_release>
 800d458:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d45c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d460:	6025      	str	r5, [r4, #0]
 800d462:	61a5      	str	r5, [r4, #24]
 800d464:	2208      	movs	r2, #8
 800d466:	4629      	mov	r1, r5
 800d468:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d46c:	f7fe fc42 	bl	800bcf4 <memset>
 800d470:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d474:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d478:	4620      	mov	r0, r4
 800d47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d47c:	3468      	adds	r4, #104	; 0x68
 800d47e:	e7d9      	b.n	800d434 <__sfp+0x1c>
 800d480:	2104      	movs	r1, #4
 800d482:	4638      	mov	r0, r7
 800d484:	f7ff ff62 	bl	800d34c <__sfmoreglue>
 800d488:	4604      	mov	r4, r0
 800d48a:	6030      	str	r0, [r6, #0]
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d1d5      	bne.n	800d43c <__sfp+0x24>
 800d490:	f7ff ff78 	bl	800d384 <__sfp_lock_release>
 800d494:	230c      	movs	r3, #12
 800d496:	603b      	str	r3, [r7, #0]
 800d498:	e7ee      	b.n	800d478 <__sfp+0x60>
 800d49a:	bf00      	nop
 800d49c:	080112cc 	.word	0x080112cc
 800d4a0:	ffff0001 	.word	0xffff0001

0800d4a4 <_fwalk_reent>:
 800d4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	4688      	mov	r8, r1
 800d4ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d4b0:	2700      	movs	r7, #0
 800d4b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4b6:	f1b9 0901 	subs.w	r9, r9, #1
 800d4ba:	d505      	bpl.n	800d4c8 <_fwalk_reent+0x24>
 800d4bc:	6824      	ldr	r4, [r4, #0]
 800d4be:	2c00      	cmp	r4, #0
 800d4c0:	d1f7      	bne.n	800d4b2 <_fwalk_reent+0xe>
 800d4c2:	4638      	mov	r0, r7
 800d4c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4c8:	89ab      	ldrh	r3, [r5, #12]
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d907      	bls.n	800d4de <_fwalk_reent+0x3a>
 800d4ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	d003      	beq.n	800d4de <_fwalk_reent+0x3a>
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	4630      	mov	r0, r6
 800d4da:	47c0      	blx	r8
 800d4dc:	4307      	orrs	r7, r0
 800d4de:	3568      	adds	r5, #104	; 0x68
 800d4e0:	e7e9      	b.n	800d4b6 <_fwalk_reent+0x12>
	...

0800d4e4 <_localeconv_r>:
 800d4e4:	4800      	ldr	r0, [pc, #0]	; (800d4e8 <_localeconv_r+0x4>)
 800d4e6:	4770      	bx	lr
 800d4e8:	200001bc 	.word	0x200001bc

0800d4ec <__retarget_lock_init_recursive>:
 800d4ec:	4770      	bx	lr

0800d4ee <__retarget_lock_acquire_recursive>:
 800d4ee:	4770      	bx	lr

0800d4f0 <__retarget_lock_release_recursive>:
 800d4f0:	4770      	bx	lr
	...

0800d4f4 <malloc>:
 800d4f4:	4b02      	ldr	r3, [pc, #8]	; (800d500 <malloc+0xc>)
 800d4f6:	4601      	mov	r1, r0
 800d4f8:	6818      	ldr	r0, [r3, #0]
 800d4fa:	f000 bbe1 	b.w	800dcc0 <_malloc_r>
 800d4fe:	bf00      	nop
 800d500:	20000068 	.word	0x20000068

0800d504 <_Balloc>:
 800d504:	b570      	push	{r4, r5, r6, lr}
 800d506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d508:	4604      	mov	r4, r0
 800d50a:	460d      	mov	r5, r1
 800d50c:	b976      	cbnz	r6, 800d52c <_Balloc+0x28>
 800d50e:	2010      	movs	r0, #16
 800d510:	f7ff fff0 	bl	800d4f4 <malloc>
 800d514:	4602      	mov	r2, r0
 800d516:	6260      	str	r0, [r4, #36]	; 0x24
 800d518:	b920      	cbnz	r0, 800d524 <_Balloc+0x20>
 800d51a:	4b18      	ldr	r3, [pc, #96]	; (800d57c <_Balloc+0x78>)
 800d51c:	4818      	ldr	r0, [pc, #96]	; (800d580 <_Balloc+0x7c>)
 800d51e:	2166      	movs	r1, #102	; 0x66
 800d520:	f000 fea8 	bl	800e274 <__assert_func>
 800d524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d528:	6006      	str	r6, [r0, #0]
 800d52a:	60c6      	str	r6, [r0, #12]
 800d52c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d52e:	68f3      	ldr	r3, [r6, #12]
 800d530:	b183      	cbz	r3, 800d554 <_Balloc+0x50>
 800d532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d53a:	b9b8      	cbnz	r0, 800d56c <_Balloc+0x68>
 800d53c:	2101      	movs	r1, #1
 800d53e:	fa01 f605 	lsl.w	r6, r1, r5
 800d542:	1d72      	adds	r2, r6, #5
 800d544:	0092      	lsls	r2, r2, #2
 800d546:	4620      	mov	r0, r4
 800d548:	f000 fb5a 	bl	800dc00 <_calloc_r>
 800d54c:	b160      	cbz	r0, 800d568 <_Balloc+0x64>
 800d54e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d552:	e00e      	b.n	800d572 <_Balloc+0x6e>
 800d554:	2221      	movs	r2, #33	; 0x21
 800d556:	2104      	movs	r1, #4
 800d558:	4620      	mov	r0, r4
 800d55a:	f000 fb51 	bl	800dc00 <_calloc_r>
 800d55e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d560:	60f0      	str	r0, [r6, #12]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1e4      	bne.n	800d532 <_Balloc+0x2e>
 800d568:	2000      	movs	r0, #0
 800d56a:	bd70      	pop	{r4, r5, r6, pc}
 800d56c:	6802      	ldr	r2, [r0, #0]
 800d56e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d572:	2300      	movs	r3, #0
 800d574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d578:	e7f7      	b.n	800d56a <_Balloc+0x66>
 800d57a:	bf00      	nop
 800d57c:	08011311 	.word	0x08011311
 800d580:	080113f8 	.word	0x080113f8

0800d584 <_Bfree>:
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d588:	4605      	mov	r5, r0
 800d58a:	460c      	mov	r4, r1
 800d58c:	b976      	cbnz	r6, 800d5ac <_Bfree+0x28>
 800d58e:	2010      	movs	r0, #16
 800d590:	f7ff ffb0 	bl	800d4f4 <malloc>
 800d594:	4602      	mov	r2, r0
 800d596:	6268      	str	r0, [r5, #36]	; 0x24
 800d598:	b920      	cbnz	r0, 800d5a4 <_Bfree+0x20>
 800d59a:	4b09      	ldr	r3, [pc, #36]	; (800d5c0 <_Bfree+0x3c>)
 800d59c:	4809      	ldr	r0, [pc, #36]	; (800d5c4 <_Bfree+0x40>)
 800d59e:	218a      	movs	r1, #138	; 0x8a
 800d5a0:	f000 fe68 	bl	800e274 <__assert_func>
 800d5a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5a8:	6006      	str	r6, [r0, #0]
 800d5aa:	60c6      	str	r6, [r0, #12]
 800d5ac:	b13c      	cbz	r4, 800d5be <_Bfree+0x3a>
 800d5ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d5b0:	6862      	ldr	r2, [r4, #4]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5b8:	6021      	str	r1, [r4, #0]
 800d5ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d5be:	bd70      	pop	{r4, r5, r6, pc}
 800d5c0:	08011311 	.word	0x08011311
 800d5c4:	080113f8 	.word	0x080113f8

0800d5c8 <__multadd>:
 800d5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5cc:	690e      	ldr	r6, [r1, #16]
 800d5ce:	4607      	mov	r7, r0
 800d5d0:	4698      	mov	r8, r3
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	f101 0014 	add.w	r0, r1, #20
 800d5d8:	2300      	movs	r3, #0
 800d5da:	6805      	ldr	r5, [r0, #0]
 800d5dc:	b2a9      	uxth	r1, r5
 800d5de:	fb02 8101 	mla	r1, r2, r1, r8
 800d5e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d5e6:	0c2d      	lsrs	r5, r5, #16
 800d5e8:	fb02 c505 	mla	r5, r2, r5, ip
 800d5ec:	b289      	uxth	r1, r1
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d5f4:	429e      	cmp	r6, r3
 800d5f6:	f840 1b04 	str.w	r1, [r0], #4
 800d5fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d5fe:	dcec      	bgt.n	800d5da <__multadd+0x12>
 800d600:	f1b8 0f00 	cmp.w	r8, #0
 800d604:	d022      	beq.n	800d64c <__multadd+0x84>
 800d606:	68a3      	ldr	r3, [r4, #8]
 800d608:	42b3      	cmp	r3, r6
 800d60a:	dc19      	bgt.n	800d640 <__multadd+0x78>
 800d60c:	6861      	ldr	r1, [r4, #4]
 800d60e:	4638      	mov	r0, r7
 800d610:	3101      	adds	r1, #1
 800d612:	f7ff ff77 	bl	800d504 <_Balloc>
 800d616:	4605      	mov	r5, r0
 800d618:	b928      	cbnz	r0, 800d626 <__multadd+0x5e>
 800d61a:	4602      	mov	r2, r0
 800d61c:	4b0d      	ldr	r3, [pc, #52]	; (800d654 <__multadd+0x8c>)
 800d61e:	480e      	ldr	r0, [pc, #56]	; (800d658 <__multadd+0x90>)
 800d620:	21b5      	movs	r1, #181	; 0xb5
 800d622:	f000 fe27 	bl	800e274 <__assert_func>
 800d626:	6922      	ldr	r2, [r4, #16]
 800d628:	3202      	adds	r2, #2
 800d62a:	f104 010c 	add.w	r1, r4, #12
 800d62e:	0092      	lsls	r2, r2, #2
 800d630:	300c      	adds	r0, #12
 800d632:	f7fe fb51 	bl	800bcd8 <memcpy>
 800d636:	4621      	mov	r1, r4
 800d638:	4638      	mov	r0, r7
 800d63a:	f7ff ffa3 	bl	800d584 <_Bfree>
 800d63e:	462c      	mov	r4, r5
 800d640:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d644:	3601      	adds	r6, #1
 800d646:	f8c3 8014 	str.w	r8, [r3, #20]
 800d64a:	6126      	str	r6, [r4, #16]
 800d64c:	4620      	mov	r0, r4
 800d64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d652:	bf00      	nop
 800d654:	08011387 	.word	0x08011387
 800d658:	080113f8 	.word	0x080113f8

0800d65c <__hi0bits>:
 800d65c:	0c03      	lsrs	r3, r0, #16
 800d65e:	041b      	lsls	r3, r3, #16
 800d660:	b9d3      	cbnz	r3, 800d698 <__hi0bits+0x3c>
 800d662:	0400      	lsls	r0, r0, #16
 800d664:	2310      	movs	r3, #16
 800d666:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d66a:	bf04      	itt	eq
 800d66c:	0200      	lsleq	r0, r0, #8
 800d66e:	3308      	addeq	r3, #8
 800d670:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d674:	bf04      	itt	eq
 800d676:	0100      	lsleq	r0, r0, #4
 800d678:	3304      	addeq	r3, #4
 800d67a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d67e:	bf04      	itt	eq
 800d680:	0080      	lsleq	r0, r0, #2
 800d682:	3302      	addeq	r3, #2
 800d684:	2800      	cmp	r0, #0
 800d686:	db05      	blt.n	800d694 <__hi0bits+0x38>
 800d688:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d68c:	f103 0301 	add.w	r3, r3, #1
 800d690:	bf08      	it	eq
 800d692:	2320      	moveq	r3, #32
 800d694:	4618      	mov	r0, r3
 800d696:	4770      	bx	lr
 800d698:	2300      	movs	r3, #0
 800d69a:	e7e4      	b.n	800d666 <__hi0bits+0xa>

0800d69c <__lo0bits>:
 800d69c:	6803      	ldr	r3, [r0, #0]
 800d69e:	f013 0207 	ands.w	r2, r3, #7
 800d6a2:	4601      	mov	r1, r0
 800d6a4:	d00b      	beq.n	800d6be <__lo0bits+0x22>
 800d6a6:	07da      	lsls	r2, r3, #31
 800d6a8:	d424      	bmi.n	800d6f4 <__lo0bits+0x58>
 800d6aa:	0798      	lsls	r0, r3, #30
 800d6ac:	bf49      	itett	mi
 800d6ae:	085b      	lsrmi	r3, r3, #1
 800d6b0:	089b      	lsrpl	r3, r3, #2
 800d6b2:	2001      	movmi	r0, #1
 800d6b4:	600b      	strmi	r3, [r1, #0]
 800d6b6:	bf5c      	itt	pl
 800d6b8:	600b      	strpl	r3, [r1, #0]
 800d6ba:	2002      	movpl	r0, #2
 800d6bc:	4770      	bx	lr
 800d6be:	b298      	uxth	r0, r3
 800d6c0:	b9b0      	cbnz	r0, 800d6f0 <__lo0bits+0x54>
 800d6c2:	0c1b      	lsrs	r3, r3, #16
 800d6c4:	2010      	movs	r0, #16
 800d6c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d6ca:	bf04      	itt	eq
 800d6cc:	0a1b      	lsreq	r3, r3, #8
 800d6ce:	3008      	addeq	r0, #8
 800d6d0:	071a      	lsls	r2, r3, #28
 800d6d2:	bf04      	itt	eq
 800d6d4:	091b      	lsreq	r3, r3, #4
 800d6d6:	3004      	addeq	r0, #4
 800d6d8:	079a      	lsls	r2, r3, #30
 800d6da:	bf04      	itt	eq
 800d6dc:	089b      	lsreq	r3, r3, #2
 800d6de:	3002      	addeq	r0, #2
 800d6e0:	07da      	lsls	r2, r3, #31
 800d6e2:	d403      	bmi.n	800d6ec <__lo0bits+0x50>
 800d6e4:	085b      	lsrs	r3, r3, #1
 800d6e6:	f100 0001 	add.w	r0, r0, #1
 800d6ea:	d005      	beq.n	800d6f8 <__lo0bits+0x5c>
 800d6ec:	600b      	str	r3, [r1, #0]
 800d6ee:	4770      	bx	lr
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	e7e8      	b.n	800d6c6 <__lo0bits+0x2a>
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	4770      	bx	lr
 800d6f8:	2020      	movs	r0, #32
 800d6fa:	4770      	bx	lr

0800d6fc <__i2b>:
 800d6fc:	b510      	push	{r4, lr}
 800d6fe:	460c      	mov	r4, r1
 800d700:	2101      	movs	r1, #1
 800d702:	f7ff feff 	bl	800d504 <_Balloc>
 800d706:	4602      	mov	r2, r0
 800d708:	b928      	cbnz	r0, 800d716 <__i2b+0x1a>
 800d70a:	4b05      	ldr	r3, [pc, #20]	; (800d720 <__i2b+0x24>)
 800d70c:	4805      	ldr	r0, [pc, #20]	; (800d724 <__i2b+0x28>)
 800d70e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d712:	f000 fdaf 	bl	800e274 <__assert_func>
 800d716:	2301      	movs	r3, #1
 800d718:	6144      	str	r4, [r0, #20]
 800d71a:	6103      	str	r3, [r0, #16]
 800d71c:	bd10      	pop	{r4, pc}
 800d71e:	bf00      	nop
 800d720:	08011387 	.word	0x08011387
 800d724:	080113f8 	.word	0x080113f8

0800d728 <__multiply>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	4614      	mov	r4, r2
 800d72e:	690a      	ldr	r2, [r1, #16]
 800d730:	6923      	ldr	r3, [r4, #16]
 800d732:	429a      	cmp	r2, r3
 800d734:	bfb8      	it	lt
 800d736:	460b      	movlt	r3, r1
 800d738:	460d      	mov	r5, r1
 800d73a:	bfbc      	itt	lt
 800d73c:	4625      	movlt	r5, r4
 800d73e:	461c      	movlt	r4, r3
 800d740:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d744:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d748:	68ab      	ldr	r3, [r5, #8]
 800d74a:	6869      	ldr	r1, [r5, #4]
 800d74c:	eb0a 0709 	add.w	r7, sl, r9
 800d750:	42bb      	cmp	r3, r7
 800d752:	b085      	sub	sp, #20
 800d754:	bfb8      	it	lt
 800d756:	3101      	addlt	r1, #1
 800d758:	f7ff fed4 	bl	800d504 <_Balloc>
 800d75c:	b930      	cbnz	r0, 800d76c <__multiply+0x44>
 800d75e:	4602      	mov	r2, r0
 800d760:	4b42      	ldr	r3, [pc, #264]	; (800d86c <__multiply+0x144>)
 800d762:	4843      	ldr	r0, [pc, #268]	; (800d870 <__multiply+0x148>)
 800d764:	f240 115d 	movw	r1, #349	; 0x15d
 800d768:	f000 fd84 	bl	800e274 <__assert_func>
 800d76c:	f100 0614 	add.w	r6, r0, #20
 800d770:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d774:	4633      	mov	r3, r6
 800d776:	2200      	movs	r2, #0
 800d778:	4543      	cmp	r3, r8
 800d77a:	d31e      	bcc.n	800d7ba <__multiply+0x92>
 800d77c:	f105 0c14 	add.w	ip, r5, #20
 800d780:	f104 0314 	add.w	r3, r4, #20
 800d784:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d788:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d78c:	9202      	str	r2, [sp, #8]
 800d78e:	ebac 0205 	sub.w	r2, ip, r5
 800d792:	3a15      	subs	r2, #21
 800d794:	f022 0203 	bic.w	r2, r2, #3
 800d798:	3204      	adds	r2, #4
 800d79a:	f105 0115 	add.w	r1, r5, #21
 800d79e:	458c      	cmp	ip, r1
 800d7a0:	bf38      	it	cc
 800d7a2:	2204      	movcc	r2, #4
 800d7a4:	9201      	str	r2, [sp, #4]
 800d7a6:	9a02      	ldr	r2, [sp, #8]
 800d7a8:	9303      	str	r3, [sp, #12]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d808      	bhi.n	800d7c0 <__multiply+0x98>
 800d7ae:	2f00      	cmp	r7, #0
 800d7b0:	dc55      	bgt.n	800d85e <__multiply+0x136>
 800d7b2:	6107      	str	r7, [r0, #16]
 800d7b4:	b005      	add	sp, #20
 800d7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ba:	f843 2b04 	str.w	r2, [r3], #4
 800d7be:	e7db      	b.n	800d778 <__multiply+0x50>
 800d7c0:	f8b3 a000 	ldrh.w	sl, [r3]
 800d7c4:	f1ba 0f00 	cmp.w	sl, #0
 800d7c8:	d020      	beq.n	800d80c <__multiply+0xe4>
 800d7ca:	f105 0e14 	add.w	lr, r5, #20
 800d7ce:	46b1      	mov	r9, r6
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d7d6:	f8d9 b000 	ldr.w	fp, [r9]
 800d7da:	b2a1      	uxth	r1, r4
 800d7dc:	fa1f fb8b 	uxth.w	fp, fp
 800d7e0:	fb0a b101 	mla	r1, sl, r1, fp
 800d7e4:	4411      	add	r1, r2
 800d7e6:	f8d9 2000 	ldr.w	r2, [r9]
 800d7ea:	0c24      	lsrs	r4, r4, #16
 800d7ec:	0c12      	lsrs	r2, r2, #16
 800d7ee:	fb0a 2404 	mla	r4, sl, r4, r2
 800d7f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d7f6:	b289      	uxth	r1, r1
 800d7f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d7fc:	45f4      	cmp	ip, lr
 800d7fe:	f849 1b04 	str.w	r1, [r9], #4
 800d802:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d806:	d8e4      	bhi.n	800d7d2 <__multiply+0xaa>
 800d808:	9901      	ldr	r1, [sp, #4]
 800d80a:	5072      	str	r2, [r6, r1]
 800d80c:	9a03      	ldr	r2, [sp, #12]
 800d80e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d812:	3304      	adds	r3, #4
 800d814:	f1b9 0f00 	cmp.w	r9, #0
 800d818:	d01f      	beq.n	800d85a <__multiply+0x132>
 800d81a:	6834      	ldr	r4, [r6, #0]
 800d81c:	f105 0114 	add.w	r1, r5, #20
 800d820:	46b6      	mov	lr, r6
 800d822:	f04f 0a00 	mov.w	sl, #0
 800d826:	880a      	ldrh	r2, [r1, #0]
 800d828:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d82c:	fb09 b202 	mla	r2, r9, r2, fp
 800d830:	4492      	add	sl, r2
 800d832:	b2a4      	uxth	r4, r4
 800d834:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d838:	f84e 4b04 	str.w	r4, [lr], #4
 800d83c:	f851 4b04 	ldr.w	r4, [r1], #4
 800d840:	f8be 2000 	ldrh.w	r2, [lr]
 800d844:	0c24      	lsrs	r4, r4, #16
 800d846:	fb09 2404 	mla	r4, r9, r4, r2
 800d84a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d84e:	458c      	cmp	ip, r1
 800d850:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d854:	d8e7      	bhi.n	800d826 <__multiply+0xfe>
 800d856:	9a01      	ldr	r2, [sp, #4]
 800d858:	50b4      	str	r4, [r6, r2]
 800d85a:	3604      	adds	r6, #4
 800d85c:	e7a3      	b.n	800d7a6 <__multiply+0x7e>
 800d85e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1a5      	bne.n	800d7b2 <__multiply+0x8a>
 800d866:	3f01      	subs	r7, #1
 800d868:	e7a1      	b.n	800d7ae <__multiply+0x86>
 800d86a:	bf00      	nop
 800d86c:	08011387 	.word	0x08011387
 800d870:	080113f8 	.word	0x080113f8

0800d874 <__pow5mult>:
 800d874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d878:	4615      	mov	r5, r2
 800d87a:	f012 0203 	ands.w	r2, r2, #3
 800d87e:	4606      	mov	r6, r0
 800d880:	460f      	mov	r7, r1
 800d882:	d007      	beq.n	800d894 <__pow5mult+0x20>
 800d884:	4c25      	ldr	r4, [pc, #148]	; (800d91c <__pow5mult+0xa8>)
 800d886:	3a01      	subs	r2, #1
 800d888:	2300      	movs	r3, #0
 800d88a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d88e:	f7ff fe9b 	bl	800d5c8 <__multadd>
 800d892:	4607      	mov	r7, r0
 800d894:	10ad      	asrs	r5, r5, #2
 800d896:	d03d      	beq.n	800d914 <__pow5mult+0xa0>
 800d898:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d89a:	b97c      	cbnz	r4, 800d8bc <__pow5mult+0x48>
 800d89c:	2010      	movs	r0, #16
 800d89e:	f7ff fe29 	bl	800d4f4 <malloc>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	6270      	str	r0, [r6, #36]	; 0x24
 800d8a6:	b928      	cbnz	r0, 800d8b4 <__pow5mult+0x40>
 800d8a8:	4b1d      	ldr	r3, [pc, #116]	; (800d920 <__pow5mult+0xac>)
 800d8aa:	481e      	ldr	r0, [pc, #120]	; (800d924 <__pow5mult+0xb0>)
 800d8ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d8b0:	f000 fce0 	bl	800e274 <__assert_func>
 800d8b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8b8:	6004      	str	r4, [r0, #0]
 800d8ba:	60c4      	str	r4, [r0, #12]
 800d8bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d8c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8c4:	b94c      	cbnz	r4, 800d8da <__pow5mult+0x66>
 800d8c6:	f240 2171 	movw	r1, #625	; 0x271
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	f7ff ff16 	bl	800d6fc <__i2b>
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	6003      	str	r3, [r0, #0]
 800d8da:	f04f 0900 	mov.w	r9, #0
 800d8de:	07eb      	lsls	r3, r5, #31
 800d8e0:	d50a      	bpl.n	800d8f8 <__pow5mult+0x84>
 800d8e2:	4639      	mov	r1, r7
 800d8e4:	4622      	mov	r2, r4
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f7ff ff1e 	bl	800d728 <__multiply>
 800d8ec:	4639      	mov	r1, r7
 800d8ee:	4680      	mov	r8, r0
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f7ff fe47 	bl	800d584 <_Bfree>
 800d8f6:	4647      	mov	r7, r8
 800d8f8:	106d      	asrs	r5, r5, #1
 800d8fa:	d00b      	beq.n	800d914 <__pow5mult+0xa0>
 800d8fc:	6820      	ldr	r0, [r4, #0]
 800d8fe:	b938      	cbnz	r0, 800d910 <__pow5mult+0x9c>
 800d900:	4622      	mov	r2, r4
 800d902:	4621      	mov	r1, r4
 800d904:	4630      	mov	r0, r6
 800d906:	f7ff ff0f 	bl	800d728 <__multiply>
 800d90a:	6020      	str	r0, [r4, #0]
 800d90c:	f8c0 9000 	str.w	r9, [r0]
 800d910:	4604      	mov	r4, r0
 800d912:	e7e4      	b.n	800d8de <__pow5mult+0x6a>
 800d914:	4638      	mov	r0, r7
 800d916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d91a:	bf00      	nop
 800d91c:	08011548 	.word	0x08011548
 800d920:	08011311 	.word	0x08011311
 800d924:	080113f8 	.word	0x080113f8

0800d928 <__lshift>:
 800d928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d92c:	460c      	mov	r4, r1
 800d92e:	6849      	ldr	r1, [r1, #4]
 800d930:	6923      	ldr	r3, [r4, #16]
 800d932:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d936:	68a3      	ldr	r3, [r4, #8]
 800d938:	4607      	mov	r7, r0
 800d93a:	4691      	mov	r9, r2
 800d93c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d940:	f108 0601 	add.w	r6, r8, #1
 800d944:	42b3      	cmp	r3, r6
 800d946:	db0b      	blt.n	800d960 <__lshift+0x38>
 800d948:	4638      	mov	r0, r7
 800d94a:	f7ff fddb 	bl	800d504 <_Balloc>
 800d94e:	4605      	mov	r5, r0
 800d950:	b948      	cbnz	r0, 800d966 <__lshift+0x3e>
 800d952:	4602      	mov	r2, r0
 800d954:	4b28      	ldr	r3, [pc, #160]	; (800d9f8 <__lshift+0xd0>)
 800d956:	4829      	ldr	r0, [pc, #164]	; (800d9fc <__lshift+0xd4>)
 800d958:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d95c:	f000 fc8a 	bl	800e274 <__assert_func>
 800d960:	3101      	adds	r1, #1
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	e7ee      	b.n	800d944 <__lshift+0x1c>
 800d966:	2300      	movs	r3, #0
 800d968:	f100 0114 	add.w	r1, r0, #20
 800d96c:	f100 0210 	add.w	r2, r0, #16
 800d970:	4618      	mov	r0, r3
 800d972:	4553      	cmp	r3, sl
 800d974:	db33      	blt.n	800d9de <__lshift+0xb6>
 800d976:	6920      	ldr	r0, [r4, #16]
 800d978:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d97c:	f104 0314 	add.w	r3, r4, #20
 800d980:	f019 091f 	ands.w	r9, r9, #31
 800d984:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d988:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d98c:	d02b      	beq.n	800d9e6 <__lshift+0xbe>
 800d98e:	f1c9 0e20 	rsb	lr, r9, #32
 800d992:	468a      	mov	sl, r1
 800d994:	2200      	movs	r2, #0
 800d996:	6818      	ldr	r0, [r3, #0]
 800d998:	fa00 f009 	lsl.w	r0, r0, r9
 800d99c:	4302      	orrs	r2, r0
 800d99e:	f84a 2b04 	str.w	r2, [sl], #4
 800d9a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a6:	459c      	cmp	ip, r3
 800d9a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d9ac:	d8f3      	bhi.n	800d996 <__lshift+0x6e>
 800d9ae:	ebac 0304 	sub.w	r3, ip, r4
 800d9b2:	3b15      	subs	r3, #21
 800d9b4:	f023 0303 	bic.w	r3, r3, #3
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	f104 0015 	add.w	r0, r4, #21
 800d9be:	4584      	cmp	ip, r0
 800d9c0:	bf38      	it	cc
 800d9c2:	2304      	movcc	r3, #4
 800d9c4:	50ca      	str	r2, [r1, r3]
 800d9c6:	b10a      	cbz	r2, 800d9cc <__lshift+0xa4>
 800d9c8:	f108 0602 	add.w	r6, r8, #2
 800d9cc:	3e01      	subs	r6, #1
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	612e      	str	r6, [r5, #16]
 800d9d2:	4621      	mov	r1, r4
 800d9d4:	f7ff fdd6 	bl	800d584 <_Bfree>
 800d9d8:	4628      	mov	r0, r5
 800d9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9de:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	e7c5      	b.n	800d972 <__lshift+0x4a>
 800d9e6:	3904      	subs	r1, #4
 800d9e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9f0:	459c      	cmp	ip, r3
 800d9f2:	d8f9      	bhi.n	800d9e8 <__lshift+0xc0>
 800d9f4:	e7ea      	b.n	800d9cc <__lshift+0xa4>
 800d9f6:	bf00      	nop
 800d9f8:	08011387 	.word	0x08011387
 800d9fc:	080113f8 	.word	0x080113f8

0800da00 <__mcmp>:
 800da00:	b530      	push	{r4, r5, lr}
 800da02:	6902      	ldr	r2, [r0, #16]
 800da04:	690c      	ldr	r4, [r1, #16]
 800da06:	1b12      	subs	r2, r2, r4
 800da08:	d10e      	bne.n	800da28 <__mcmp+0x28>
 800da0a:	f100 0314 	add.w	r3, r0, #20
 800da0e:	3114      	adds	r1, #20
 800da10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800da14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800da18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800da1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800da20:	42a5      	cmp	r5, r4
 800da22:	d003      	beq.n	800da2c <__mcmp+0x2c>
 800da24:	d305      	bcc.n	800da32 <__mcmp+0x32>
 800da26:	2201      	movs	r2, #1
 800da28:	4610      	mov	r0, r2
 800da2a:	bd30      	pop	{r4, r5, pc}
 800da2c:	4283      	cmp	r3, r0
 800da2e:	d3f3      	bcc.n	800da18 <__mcmp+0x18>
 800da30:	e7fa      	b.n	800da28 <__mcmp+0x28>
 800da32:	f04f 32ff 	mov.w	r2, #4294967295
 800da36:	e7f7      	b.n	800da28 <__mcmp+0x28>

0800da38 <__mdiff>:
 800da38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	460c      	mov	r4, r1
 800da3e:	4606      	mov	r6, r0
 800da40:	4611      	mov	r1, r2
 800da42:	4620      	mov	r0, r4
 800da44:	4617      	mov	r7, r2
 800da46:	f7ff ffdb 	bl	800da00 <__mcmp>
 800da4a:	1e05      	subs	r5, r0, #0
 800da4c:	d110      	bne.n	800da70 <__mdiff+0x38>
 800da4e:	4629      	mov	r1, r5
 800da50:	4630      	mov	r0, r6
 800da52:	f7ff fd57 	bl	800d504 <_Balloc>
 800da56:	b930      	cbnz	r0, 800da66 <__mdiff+0x2e>
 800da58:	4b39      	ldr	r3, [pc, #228]	; (800db40 <__mdiff+0x108>)
 800da5a:	4602      	mov	r2, r0
 800da5c:	f240 2132 	movw	r1, #562	; 0x232
 800da60:	4838      	ldr	r0, [pc, #224]	; (800db44 <__mdiff+0x10c>)
 800da62:	f000 fc07 	bl	800e274 <__assert_func>
 800da66:	2301      	movs	r3, #1
 800da68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da70:	bfa4      	itt	ge
 800da72:	463b      	movge	r3, r7
 800da74:	4627      	movge	r7, r4
 800da76:	4630      	mov	r0, r6
 800da78:	6879      	ldr	r1, [r7, #4]
 800da7a:	bfa6      	itte	ge
 800da7c:	461c      	movge	r4, r3
 800da7e:	2500      	movge	r5, #0
 800da80:	2501      	movlt	r5, #1
 800da82:	f7ff fd3f 	bl	800d504 <_Balloc>
 800da86:	b920      	cbnz	r0, 800da92 <__mdiff+0x5a>
 800da88:	4b2d      	ldr	r3, [pc, #180]	; (800db40 <__mdiff+0x108>)
 800da8a:	4602      	mov	r2, r0
 800da8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800da90:	e7e6      	b.n	800da60 <__mdiff+0x28>
 800da92:	693e      	ldr	r6, [r7, #16]
 800da94:	60c5      	str	r5, [r0, #12]
 800da96:	6925      	ldr	r5, [r4, #16]
 800da98:	f107 0114 	add.w	r1, r7, #20
 800da9c:	f104 0914 	add.w	r9, r4, #20
 800daa0:	f100 0e14 	add.w	lr, r0, #20
 800daa4:	f107 0210 	add.w	r2, r7, #16
 800daa8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800daac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dab0:	46f2      	mov	sl, lr
 800dab2:	2700      	movs	r7, #0
 800dab4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dab8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dabc:	fa1f f883 	uxth.w	r8, r3
 800dac0:	fa17 f78b 	uxtah	r7, r7, fp
 800dac4:	0c1b      	lsrs	r3, r3, #16
 800dac6:	eba7 0808 	sub.w	r8, r7, r8
 800daca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dace:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dad2:	fa1f f888 	uxth.w	r8, r8
 800dad6:	141f      	asrs	r7, r3, #16
 800dad8:	454d      	cmp	r5, r9
 800dada:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dade:	f84a 3b04 	str.w	r3, [sl], #4
 800dae2:	d8e7      	bhi.n	800dab4 <__mdiff+0x7c>
 800dae4:	1b2b      	subs	r3, r5, r4
 800dae6:	3b15      	subs	r3, #21
 800dae8:	f023 0303 	bic.w	r3, r3, #3
 800daec:	3304      	adds	r3, #4
 800daee:	3415      	adds	r4, #21
 800daf0:	42a5      	cmp	r5, r4
 800daf2:	bf38      	it	cc
 800daf4:	2304      	movcc	r3, #4
 800daf6:	4419      	add	r1, r3
 800daf8:	4473      	add	r3, lr
 800dafa:	469e      	mov	lr, r3
 800dafc:	460d      	mov	r5, r1
 800dafe:	4565      	cmp	r5, ip
 800db00:	d30e      	bcc.n	800db20 <__mdiff+0xe8>
 800db02:	f10c 0203 	add.w	r2, ip, #3
 800db06:	1a52      	subs	r2, r2, r1
 800db08:	f022 0203 	bic.w	r2, r2, #3
 800db0c:	3903      	subs	r1, #3
 800db0e:	458c      	cmp	ip, r1
 800db10:	bf38      	it	cc
 800db12:	2200      	movcc	r2, #0
 800db14:	441a      	add	r2, r3
 800db16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800db1a:	b17b      	cbz	r3, 800db3c <__mdiff+0x104>
 800db1c:	6106      	str	r6, [r0, #16]
 800db1e:	e7a5      	b.n	800da6c <__mdiff+0x34>
 800db20:	f855 8b04 	ldr.w	r8, [r5], #4
 800db24:	fa17 f488 	uxtah	r4, r7, r8
 800db28:	1422      	asrs	r2, r4, #16
 800db2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800db2e:	b2a4      	uxth	r4, r4
 800db30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800db34:	f84e 4b04 	str.w	r4, [lr], #4
 800db38:	1417      	asrs	r7, r2, #16
 800db3a:	e7e0      	b.n	800dafe <__mdiff+0xc6>
 800db3c:	3e01      	subs	r6, #1
 800db3e:	e7ea      	b.n	800db16 <__mdiff+0xde>
 800db40:	08011387 	.word	0x08011387
 800db44:	080113f8 	.word	0x080113f8

0800db48 <__d2b>:
 800db48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db4c:	4689      	mov	r9, r1
 800db4e:	2101      	movs	r1, #1
 800db50:	ec57 6b10 	vmov	r6, r7, d0
 800db54:	4690      	mov	r8, r2
 800db56:	f7ff fcd5 	bl	800d504 <_Balloc>
 800db5a:	4604      	mov	r4, r0
 800db5c:	b930      	cbnz	r0, 800db6c <__d2b+0x24>
 800db5e:	4602      	mov	r2, r0
 800db60:	4b25      	ldr	r3, [pc, #148]	; (800dbf8 <__d2b+0xb0>)
 800db62:	4826      	ldr	r0, [pc, #152]	; (800dbfc <__d2b+0xb4>)
 800db64:	f240 310a 	movw	r1, #778	; 0x30a
 800db68:	f000 fb84 	bl	800e274 <__assert_func>
 800db6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800db70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db74:	bb35      	cbnz	r5, 800dbc4 <__d2b+0x7c>
 800db76:	2e00      	cmp	r6, #0
 800db78:	9301      	str	r3, [sp, #4]
 800db7a:	d028      	beq.n	800dbce <__d2b+0x86>
 800db7c:	4668      	mov	r0, sp
 800db7e:	9600      	str	r6, [sp, #0]
 800db80:	f7ff fd8c 	bl	800d69c <__lo0bits>
 800db84:	9900      	ldr	r1, [sp, #0]
 800db86:	b300      	cbz	r0, 800dbca <__d2b+0x82>
 800db88:	9a01      	ldr	r2, [sp, #4]
 800db8a:	f1c0 0320 	rsb	r3, r0, #32
 800db8e:	fa02 f303 	lsl.w	r3, r2, r3
 800db92:	430b      	orrs	r3, r1
 800db94:	40c2      	lsrs	r2, r0
 800db96:	6163      	str	r3, [r4, #20]
 800db98:	9201      	str	r2, [sp, #4]
 800db9a:	9b01      	ldr	r3, [sp, #4]
 800db9c:	61a3      	str	r3, [r4, #24]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	bf14      	ite	ne
 800dba2:	2202      	movne	r2, #2
 800dba4:	2201      	moveq	r2, #1
 800dba6:	6122      	str	r2, [r4, #16]
 800dba8:	b1d5      	cbz	r5, 800dbe0 <__d2b+0x98>
 800dbaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dbae:	4405      	add	r5, r0
 800dbb0:	f8c9 5000 	str.w	r5, [r9]
 800dbb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dbb8:	f8c8 0000 	str.w	r0, [r8]
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	b003      	add	sp, #12
 800dbc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbc8:	e7d5      	b.n	800db76 <__d2b+0x2e>
 800dbca:	6161      	str	r1, [r4, #20]
 800dbcc:	e7e5      	b.n	800db9a <__d2b+0x52>
 800dbce:	a801      	add	r0, sp, #4
 800dbd0:	f7ff fd64 	bl	800d69c <__lo0bits>
 800dbd4:	9b01      	ldr	r3, [sp, #4]
 800dbd6:	6163      	str	r3, [r4, #20]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	6122      	str	r2, [r4, #16]
 800dbdc:	3020      	adds	r0, #32
 800dbde:	e7e3      	b.n	800dba8 <__d2b+0x60>
 800dbe0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbe4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dbe8:	f8c9 0000 	str.w	r0, [r9]
 800dbec:	6918      	ldr	r0, [r3, #16]
 800dbee:	f7ff fd35 	bl	800d65c <__hi0bits>
 800dbf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbf6:	e7df      	b.n	800dbb8 <__d2b+0x70>
 800dbf8:	08011387 	.word	0x08011387
 800dbfc:	080113f8 	.word	0x080113f8

0800dc00 <_calloc_r>:
 800dc00:	b513      	push	{r0, r1, r4, lr}
 800dc02:	434a      	muls	r2, r1
 800dc04:	4611      	mov	r1, r2
 800dc06:	9201      	str	r2, [sp, #4]
 800dc08:	f000 f85a 	bl	800dcc0 <_malloc_r>
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	b118      	cbz	r0, 800dc18 <_calloc_r+0x18>
 800dc10:	9a01      	ldr	r2, [sp, #4]
 800dc12:	2100      	movs	r1, #0
 800dc14:	f7fe f86e 	bl	800bcf4 <memset>
 800dc18:	4620      	mov	r0, r4
 800dc1a:	b002      	add	sp, #8
 800dc1c:	bd10      	pop	{r4, pc}
	...

0800dc20 <_free_r>:
 800dc20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc22:	2900      	cmp	r1, #0
 800dc24:	d048      	beq.n	800dcb8 <_free_r+0x98>
 800dc26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc2a:	9001      	str	r0, [sp, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f1a1 0404 	sub.w	r4, r1, #4
 800dc32:	bfb8      	it	lt
 800dc34:	18e4      	addlt	r4, r4, r3
 800dc36:	f000 fca7 	bl	800e588 <__malloc_lock>
 800dc3a:	4a20      	ldr	r2, [pc, #128]	; (800dcbc <_free_r+0x9c>)
 800dc3c:	9801      	ldr	r0, [sp, #4]
 800dc3e:	6813      	ldr	r3, [r2, #0]
 800dc40:	4615      	mov	r5, r2
 800dc42:	b933      	cbnz	r3, 800dc52 <_free_r+0x32>
 800dc44:	6063      	str	r3, [r4, #4]
 800dc46:	6014      	str	r4, [r2, #0]
 800dc48:	b003      	add	sp, #12
 800dc4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc4e:	f000 bca1 	b.w	800e594 <__malloc_unlock>
 800dc52:	42a3      	cmp	r3, r4
 800dc54:	d90b      	bls.n	800dc6e <_free_r+0x4e>
 800dc56:	6821      	ldr	r1, [r4, #0]
 800dc58:	1862      	adds	r2, r4, r1
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	bf04      	itt	eq
 800dc5e:	681a      	ldreq	r2, [r3, #0]
 800dc60:	685b      	ldreq	r3, [r3, #4]
 800dc62:	6063      	str	r3, [r4, #4]
 800dc64:	bf04      	itt	eq
 800dc66:	1852      	addeq	r2, r2, r1
 800dc68:	6022      	streq	r2, [r4, #0]
 800dc6a:	602c      	str	r4, [r5, #0]
 800dc6c:	e7ec      	b.n	800dc48 <_free_r+0x28>
 800dc6e:	461a      	mov	r2, r3
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	b10b      	cbz	r3, 800dc78 <_free_r+0x58>
 800dc74:	42a3      	cmp	r3, r4
 800dc76:	d9fa      	bls.n	800dc6e <_free_r+0x4e>
 800dc78:	6811      	ldr	r1, [r2, #0]
 800dc7a:	1855      	adds	r5, r2, r1
 800dc7c:	42a5      	cmp	r5, r4
 800dc7e:	d10b      	bne.n	800dc98 <_free_r+0x78>
 800dc80:	6824      	ldr	r4, [r4, #0]
 800dc82:	4421      	add	r1, r4
 800dc84:	1854      	adds	r4, r2, r1
 800dc86:	42a3      	cmp	r3, r4
 800dc88:	6011      	str	r1, [r2, #0]
 800dc8a:	d1dd      	bne.n	800dc48 <_free_r+0x28>
 800dc8c:	681c      	ldr	r4, [r3, #0]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	6053      	str	r3, [r2, #4]
 800dc92:	4421      	add	r1, r4
 800dc94:	6011      	str	r1, [r2, #0]
 800dc96:	e7d7      	b.n	800dc48 <_free_r+0x28>
 800dc98:	d902      	bls.n	800dca0 <_free_r+0x80>
 800dc9a:	230c      	movs	r3, #12
 800dc9c:	6003      	str	r3, [r0, #0]
 800dc9e:	e7d3      	b.n	800dc48 <_free_r+0x28>
 800dca0:	6825      	ldr	r5, [r4, #0]
 800dca2:	1961      	adds	r1, r4, r5
 800dca4:	428b      	cmp	r3, r1
 800dca6:	bf04      	itt	eq
 800dca8:	6819      	ldreq	r1, [r3, #0]
 800dcaa:	685b      	ldreq	r3, [r3, #4]
 800dcac:	6063      	str	r3, [r4, #4]
 800dcae:	bf04      	itt	eq
 800dcb0:	1949      	addeq	r1, r1, r5
 800dcb2:	6021      	streq	r1, [r4, #0]
 800dcb4:	6054      	str	r4, [r2, #4]
 800dcb6:	e7c7      	b.n	800dc48 <_free_r+0x28>
 800dcb8:	b003      	add	sp, #12
 800dcba:	bd30      	pop	{r4, r5, pc}
 800dcbc:	20021c64 	.word	0x20021c64

0800dcc0 <_malloc_r>:
 800dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc2:	1ccd      	adds	r5, r1, #3
 800dcc4:	f025 0503 	bic.w	r5, r5, #3
 800dcc8:	3508      	adds	r5, #8
 800dcca:	2d0c      	cmp	r5, #12
 800dccc:	bf38      	it	cc
 800dcce:	250c      	movcc	r5, #12
 800dcd0:	2d00      	cmp	r5, #0
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	db01      	blt.n	800dcda <_malloc_r+0x1a>
 800dcd6:	42a9      	cmp	r1, r5
 800dcd8:	d903      	bls.n	800dce2 <_malloc_r+0x22>
 800dcda:	230c      	movs	r3, #12
 800dcdc:	6033      	str	r3, [r6, #0]
 800dcde:	2000      	movs	r0, #0
 800dce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dce2:	f000 fc51 	bl	800e588 <__malloc_lock>
 800dce6:	4921      	ldr	r1, [pc, #132]	; (800dd6c <_malloc_r+0xac>)
 800dce8:	680a      	ldr	r2, [r1, #0]
 800dcea:	4614      	mov	r4, r2
 800dcec:	b99c      	cbnz	r4, 800dd16 <_malloc_r+0x56>
 800dcee:	4f20      	ldr	r7, [pc, #128]	; (800dd70 <_malloc_r+0xb0>)
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	b923      	cbnz	r3, 800dcfe <_malloc_r+0x3e>
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f000 f996 	bl	800e028 <_sbrk_r>
 800dcfc:	6038      	str	r0, [r7, #0]
 800dcfe:	4629      	mov	r1, r5
 800dd00:	4630      	mov	r0, r6
 800dd02:	f000 f991 	bl	800e028 <_sbrk_r>
 800dd06:	1c43      	adds	r3, r0, #1
 800dd08:	d123      	bne.n	800dd52 <_malloc_r+0x92>
 800dd0a:	230c      	movs	r3, #12
 800dd0c:	6033      	str	r3, [r6, #0]
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f000 fc40 	bl	800e594 <__malloc_unlock>
 800dd14:	e7e3      	b.n	800dcde <_malloc_r+0x1e>
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	1b5b      	subs	r3, r3, r5
 800dd1a:	d417      	bmi.n	800dd4c <_malloc_r+0x8c>
 800dd1c:	2b0b      	cmp	r3, #11
 800dd1e:	d903      	bls.n	800dd28 <_malloc_r+0x68>
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	441c      	add	r4, r3
 800dd24:	6025      	str	r5, [r4, #0]
 800dd26:	e004      	b.n	800dd32 <_malloc_r+0x72>
 800dd28:	6863      	ldr	r3, [r4, #4]
 800dd2a:	42a2      	cmp	r2, r4
 800dd2c:	bf0c      	ite	eq
 800dd2e:	600b      	streq	r3, [r1, #0]
 800dd30:	6053      	strne	r3, [r2, #4]
 800dd32:	4630      	mov	r0, r6
 800dd34:	f000 fc2e 	bl	800e594 <__malloc_unlock>
 800dd38:	f104 000b 	add.w	r0, r4, #11
 800dd3c:	1d23      	adds	r3, r4, #4
 800dd3e:	f020 0007 	bic.w	r0, r0, #7
 800dd42:	1ac2      	subs	r2, r0, r3
 800dd44:	d0cc      	beq.n	800dce0 <_malloc_r+0x20>
 800dd46:	1a1b      	subs	r3, r3, r0
 800dd48:	50a3      	str	r3, [r4, r2]
 800dd4a:	e7c9      	b.n	800dce0 <_malloc_r+0x20>
 800dd4c:	4622      	mov	r2, r4
 800dd4e:	6864      	ldr	r4, [r4, #4]
 800dd50:	e7cc      	b.n	800dcec <_malloc_r+0x2c>
 800dd52:	1cc4      	adds	r4, r0, #3
 800dd54:	f024 0403 	bic.w	r4, r4, #3
 800dd58:	42a0      	cmp	r0, r4
 800dd5a:	d0e3      	beq.n	800dd24 <_malloc_r+0x64>
 800dd5c:	1a21      	subs	r1, r4, r0
 800dd5e:	4630      	mov	r0, r6
 800dd60:	f000 f962 	bl	800e028 <_sbrk_r>
 800dd64:	3001      	adds	r0, #1
 800dd66:	d1dd      	bne.n	800dd24 <_malloc_r+0x64>
 800dd68:	e7cf      	b.n	800dd0a <_malloc_r+0x4a>
 800dd6a:	bf00      	nop
 800dd6c:	20021c64 	.word	0x20021c64
 800dd70:	20021c68 	.word	0x20021c68

0800dd74 <__sfputc_r>:
 800dd74:	6893      	ldr	r3, [r2, #8]
 800dd76:	3b01      	subs	r3, #1
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	b410      	push	{r4}
 800dd7c:	6093      	str	r3, [r2, #8]
 800dd7e:	da08      	bge.n	800dd92 <__sfputc_r+0x1e>
 800dd80:	6994      	ldr	r4, [r2, #24]
 800dd82:	42a3      	cmp	r3, r4
 800dd84:	db01      	blt.n	800dd8a <__sfputc_r+0x16>
 800dd86:	290a      	cmp	r1, #10
 800dd88:	d103      	bne.n	800dd92 <__sfputc_r+0x1e>
 800dd8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd8e:	f000 b99f 	b.w	800e0d0 <__swbuf_r>
 800dd92:	6813      	ldr	r3, [r2, #0]
 800dd94:	1c58      	adds	r0, r3, #1
 800dd96:	6010      	str	r0, [r2, #0]
 800dd98:	7019      	strb	r1, [r3, #0]
 800dd9a:	4608      	mov	r0, r1
 800dd9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <__sfputs_r>:
 800dda2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda4:	4606      	mov	r6, r0
 800dda6:	460f      	mov	r7, r1
 800dda8:	4614      	mov	r4, r2
 800ddaa:	18d5      	adds	r5, r2, r3
 800ddac:	42ac      	cmp	r4, r5
 800ddae:	d101      	bne.n	800ddb4 <__sfputs_r+0x12>
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	e007      	b.n	800ddc4 <__sfputs_r+0x22>
 800ddb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddb8:	463a      	mov	r2, r7
 800ddba:	4630      	mov	r0, r6
 800ddbc:	f7ff ffda 	bl	800dd74 <__sfputc_r>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d1f3      	bne.n	800ddac <__sfputs_r+0xa>
 800ddc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddc8 <_vfiprintf_r>:
 800ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	460d      	mov	r5, r1
 800ddce:	b09d      	sub	sp, #116	; 0x74
 800ddd0:	4614      	mov	r4, r2
 800ddd2:	4698      	mov	r8, r3
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	b118      	cbz	r0, 800dde0 <_vfiprintf_r+0x18>
 800ddd8:	6983      	ldr	r3, [r0, #24]
 800ddda:	b90b      	cbnz	r3, 800dde0 <_vfiprintf_r+0x18>
 800dddc:	f7ff fae4 	bl	800d3a8 <__sinit>
 800dde0:	4b89      	ldr	r3, [pc, #548]	; (800e008 <_vfiprintf_r+0x240>)
 800dde2:	429d      	cmp	r5, r3
 800dde4:	d11b      	bne.n	800de1e <_vfiprintf_r+0x56>
 800dde6:	6875      	ldr	r5, [r6, #4]
 800dde8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddea:	07d9      	lsls	r1, r3, #31
 800ddec:	d405      	bmi.n	800ddfa <_vfiprintf_r+0x32>
 800ddee:	89ab      	ldrh	r3, [r5, #12]
 800ddf0:	059a      	lsls	r2, r3, #22
 800ddf2:	d402      	bmi.n	800ddfa <_vfiprintf_r+0x32>
 800ddf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddf6:	f7ff fb7a 	bl	800d4ee <__retarget_lock_acquire_recursive>
 800ddfa:	89ab      	ldrh	r3, [r5, #12]
 800ddfc:	071b      	lsls	r3, r3, #28
 800ddfe:	d501      	bpl.n	800de04 <_vfiprintf_r+0x3c>
 800de00:	692b      	ldr	r3, [r5, #16]
 800de02:	b9eb      	cbnz	r3, 800de40 <_vfiprintf_r+0x78>
 800de04:	4629      	mov	r1, r5
 800de06:	4630      	mov	r0, r6
 800de08:	f000 f9c6 	bl	800e198 <__swsetup_r>
 800de0c:	b1c0      	cbz	r0, 800de40 <_vfiprintf_r+0x78>
 800de0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de10:	07dc      	lsls	r4, r3, #31
 800de12:	d50e      	bpl.n	800de32 <_vfiprintf_r+0x6a>
 800de14:	f04f 30ff 	mov.w	r0, #4294967295
 800de18:	b01d      	add	sp, #116	; 0x74
 800de1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de1e:	4b7b      	ldr	r3, [pc, #492]	; (800e00c <_vfiprintf_r+0x244>)
 800de20:	429d      	cmp	r5, r3
 800de22:	d101      	bne.n	800de28 <_vfiprintf_r+0x60>
 800de24:	68b5      	ldr	r5, [r6, #8]
 800de26:	e7df      	b.n	800dde8 <_vfiprintf_r+0x20>
 800de28:	4b79      	ldr	r3, [pc, #484]	; (800e010 <_vfiprintf_r+0x248>)
 800de2a:	429d      	cmp	r5, r3
 800de2c:	bf08      	it	eq
 800de2e:	68f5      	ldreq	r5, [r6, #12]
 800de30:	e7da      	b.n	800dde8 <_vfiprintf_r+0x20>
 800de32:	89ab      	ldrh	r3, [r5, #12]
 800de34:	0598      	lsls	r0, r3, #22
 800de36:	d4ed      	bmi.n	800de14 <_vfiprintf_r+0x4c>
 800de38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de3a:	f7ff fb59 	bl	800d4f0 <__retarget_lock_release_recursive>
 800de3e:	e7e9      	b.n	800de14 <_vfiprintf_r+0x4c>
 800de40:	2300      	movs	r3, #0
 800de42:	9309      	str	r3, [sp, #36]	; 0x24
 800de44:	2320      	movs	r3, #32
 800de46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800de4e:	2330      	movs	r3, #48	; 0x30
 800de50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e014 <_vfiprintf_r+0x24c>
 800de54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de58:	f04f 0901 	mov.w	r9, #1
 800de5c:	4623      	mov	r3, r4
 800de5e:	469a      	mov	sl, r3
 800de60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de64:	b10a      	cbz	r2, 800de6a <_vfiprintf_r+0xa2>
 800de66:	2a25      	cmp	r2, #37	; 0x25
 800de68:	d1f9      	bne.n	800de5e <_vfiprintf_r+0x96>
 800de6a:	ebba 0b04 	subs.w	fp, sl, r4
 800de6e:	d00b      	beq.n	800de88 <_vfiprintf_r+0xc0>
 800de70:	465b      	mov	r3, fp
 800de72:	4622      	mov	r2, r4
 800de74:	4629      	mov	r1, r5
 800de76:	4630      	mov	r0, r6
 800de78:	f7ff ff93 	bl	800dda2 <__sfputs_r>
 800de7c:	3001      	adds	r0, #1
 800de7e:	f000 80aa 	beq.w	800dfd6 <_vfiprintf_r+0x20e>
 800de82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de84:	445a      	add	r2, fp
 800de86:	9209      	str	r2, [sp, #36]	; 0x24
 800de88:	f89a 3000 	ldrb.w	r3, [sl]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f000 80a2 	beq.w	800dfd6 <_vfiprintf_r+0x20e>
 800de92:	2300      	movs	r3, #0
 800de94:	f04f 32ff 	mov.w	r2, #4294967295
 800de98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de9c:	f10a 0a01 	add.w	sl, sl, #1
 800dea0:	9304      	str	r3, [sp, #16]
 800dea2:	9307      	str	r3, [sp, #28]
 800dea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dea8:	931a      	str	r3, [sp, #104]	; 0x68
 800deaa:	4654      	mov	r4, sl
 800deac:	2205      	movs	r2, #5
 800deae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb2:	4858      	ldr	r0, [pc, #352]	; (800e014 <_vfiprintf_r+0x24c>)
 800deb4:	f7f2 f9a4 	bl	8000200 <memchr>
 800deb8:	9a04      	ldr	r2, [sp, #16]
 800deba:	b9d8      	cbnz	r0, 800def4 <_vfiprintf_r+0x12c>
 800debc:	06d1      	lsls	r1, r2, #27
 800debe:	bf44      	itt	mi
 800dec0:	2320      	movmi	r3, #32
 800dec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dec6:	0713      	lsls	r3, r2, #28
 800dec8:	bf44      	itt	mi
 800deca:	232b      	movmi	r3, #43	; 0x2b
 800decc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded0:	f89a 3000 	ldrb.w	r3, [sl]
 800ded4:	2b2a      	cmp	r3, #42	; 0x2a
 800ded6:	d015      	beq.n	800df04 <_vfiprintf_r+0x13c>
 800ded8:	9a07      	ldr	r2, [sp, #28]
 800deda:	4654      	mov	r4, sl
 800dedc:	2000      	movs	r0, #0
 800dede:	f04f 0c0a 	mov.w	ip, #10
 800dee2:	4621      	mov	r1, r4
 800dee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dee8:	3b30      	subs	r3, #48	; 0x30
 800deea:	2b09      	cmp	r3, #9
 800deec:	d94e      	bls.n	800df8c <_vfiprintf_r+0x1c4>
 800deee:	b1b0      	cbz	r0, 800df1e <_vfiprintf_r+0x156>
 800def0:	9207      	str	r2, [sp, #28]
 800def2:	e014      	b.n	800df1e <_vfiprintf_r+0x156>
 800def4:	eba0 0308 	sub.w	r3, r0, r8
 800def8:	fa09 f303 	lsl.w	r3, r9, r3
 800defc:	4313      	orrs	r3, r2
 800defe:	9304      	str	r3, [sp, #16]
 800df00:	46a2      	mov	sl, r4
 800df02:	e7d2      	b.n	800deaa <_vfiprintf_r+0xe2>
 800df04:	9b03      	ldr	r3, [sp, #12]
 800df06:	1d19      	adds	r1, r3, #4
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	9103      	str	r1, [sp, #12]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	bfbb      	ittet	lt
 800df10:	425b      	neglt	r3, r3
 800df12:	f042 0202 	orrlt.w	r2, r2, #2
 800df16:	9307      	strge	r3, [sp, #28]
 800df18:	9307      	strlt	r3, [sp, #28]
 800df1a:	bfb8      	it	lt
 800df1c:	9204      	strlt	r2, [sp, #16]
 800df1e:	7823      	ldrb	r3, [r4, #0]
 800df20:	2b2e      	cmp	r3, #46	; 0x2e
 800df22:	d10c      	bne.n	800df3e <_vfiprintf_r+0x176>
 800df24:	7863      	ldrb	r3, [r4, #1]
 800df26:	2b2a      	cmp	r3, #42	; 0x2a
 800df28:	d135      	bne.n	800df96 <_vfiprintf_r+0x1ce>
 800df2a:	9b03      	ldr	r3, [sp, #12]
 800df2c:	1d1a      	adds	r2, r3, #4
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	9203      	str	r2, [sp, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	bfb8      	it	lt
 800df36:	f04f 33ff 	movlt.w	r3, #4294967295
 800df3a:	3402      	adds	r4, #2
 800df3c:	9305      	str	r3, [sp, #20]
 800df3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e024 <_vfiprintf_r+0x25c>
 800df42:	7821      	ldrb	r1, [r4, #0]
 800df44:	2203      	movs	r2, #3
 800df46:	4650      	mov	r0, sl
 800df48:	f7f2 f95a 	bl	8000200 <memchr>
 800df4c:	b140      	cbz	r0, 800df60 <_vfiprintf_r+0x198>
 800df4e:	2340      	movs	r3, #64	; 0x40
 800df50:	eba0 000a 	sub.w	r0, r0, sl
 800df54:	fa03 f000 	lsl.w	r0, r3, r0
 800df58:	9b04      	ldr	r3, [sp, #16]
 800df5a:	4303      	orrs	r3, r0
 800df5c:	3401      	adds	r4, #1
 800df5e:	9304      	str	r3, [sp, #16]
 800df60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df64:	482c      	ldr	r0, [pc, #176]	; (800e018 <_vfiprintf_r+0x250>)
 800df66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df6a:	2206      	movs	r2, #6
 800df6c:	f7f2 f948 	bl	8000200 <memchr>
 800df70:	2800      	cmp	r0, #0
 800df72:	d03f      	beq.n	800dff4 <_vfiprintf_r+0x22c>
 800df74:	4b29      	ldr	r3, [pc, #164]	; (800e01c <_vfiprintf_r+0x254>)
 800df76:	bb1b      	cbnz	r3, 800dfc0 <_vfiprintf_r+0x1f8>
 800df78:	9b03      	ldr	r3, [sp, #12]
 800df7a:	3307      	adds	r3, #7
 800df7c:	f023 0307 	bic.w	r3, r3, #7
 800df80:	3308      	adds	r3, #8
 800df82:	9303      	str	r3, [sp, #12]
 800df84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df86:	443b      	add	r3, r7
 800df88:	9309      	str	r3, [sp, #36]	; 0x24
 800df8a:	e767      	b.n	800de5c <_vfiprintf_r+0x94>
 800df8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800df90:	460c      	mov	r4, r1
 800df92:	2001      	movs	r0, #1
 800df94:	e7a5      	b.n	800dee2 <_vfiprintf_r+0x11a>
 800df96:	2300      	movs	r3, #0
 800df98:	3401      	adds	r4, #1
 800df9a:	9305      	str	r3, [sp, #20]
 800df9c:	4619      	mov	r1, r3
 800df9e:	f04f 0c0a 	mov.w	ip, #10
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfa8:	3a30      	subs	r2, #48	; 0x30
 800dfaa:	2a09      	cmp	r2, #9
 800dfac:	d903      	bls.n	800dfb6 <_vfiprintf_r+0x1ee>
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d0c5      	beq.n	800df3e <_vfiprintf_r+0x176>
 800dfb2:	9105      	str	r1, [sp, #20]
 800dfb4:	e7c3      	b.n	800df3e <_vfiprintf_r+0x176>
 800dfb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfba:	4604      	mov	r4, r0
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e7f0      	b.n	800dfa2 <_vfiprintf_r+0x1da>
 800dfc0:	ab03      	add	r3, sp, #12
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	462a      	mov	r2, r5
 800dfc6:	4b16      	ldr	r3, [pc, #88]	; (800e020 <_vfiprintf_r+0x258>)
 800dfc8:	a904      	add	r1, sp, #16
 800dfca:	4630      	mov	r0, r6
 800dfcc:	f7fd ff3a 	bl	800be44 <_printf_float>
 800dfd0:	4607      	mov	r7, r0
 800dfd2:	1c78      	adds	r0, r7, #1
 800dfd4:	d1d6      	bne.n	800df84 <_vfiprintf_r+0x1bc>
 800dfd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfd8:	07d9      	lsls	r1, r3, #31
 800dfda:	d405      	bmi.n	800dfe8 <_vfiprintf_r+0x220>
 800dfdc:	89ab      	ldrh	r3, [r5, #12]
 800dfde:	059a      	lsls	r2, r3, #22
 800dfe0:	d402      	bmi.n	800dfe8 <_vfiprintf_r+0x220>
 800dfe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfe4:	f7ff fa84 	bl	800d4f0 <__retarget_lock_release_recursive>
 800dfe8:	89ab      	ldrh	r3, [r5, #12]
 800dfea:	065b      	lsls	r3, r3, #25
 800dfec:	f53f af12 	bmi.w	800de14 <_vfiprintf_r+0x4c>
 800dff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dff2:	e711      	b.n	800de18 <_vfiprintf_r+0x50>
 800dff4:	ab03      	add	r3, sp, #12
 800dff6:	9300      	str	r3, [sp, #0]
 800dff8:	462a      	mov	r2, r5
 800dffa:	4b09      	ldr	r3, [pc, #36]	; (800e020 <_vfiprintf_r+0x258>)
 800dffc:	a904      	add	r1, sp, #16
 800dffe:	4630      	mov	r0, r6
 800e000:	f7fe f9c4 	bl	800c38c <_printf_i>
 800e004:	e7e4      	b.n	800dfd0 <_vfiprintf_r+0x208>
 800e006:	bf00      	nop
 800e008:	080113b8 	.word	0x080113b8
 800e00c:	080113d8 	.word	0x080113d8
 800e010:	08011398 	.word	0x08011398
 800e014:	08011554 	.word	0x08011554
 800e018:	0801155e 	.word	0x0801155e
 800e01c:	0800be45 	.word	0x0800be45
 800e020:	0800dda3 	.word	0x0800dda3
 800e024:	0801155a 	.word	0x0801155a

0800e028 <_sbrk_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	4d06      	ldr	r5, [pc, #24]	; (800e044 <_sbrk_r+0x1c>)
 800e02c:	2300      	movs	r3, #0
 800e02e:	4604      	mov	r4, r0
 800e030:	4608      	mov	r0, r1
 800e032:	602b      	str	r3, [r5, #0]
 800e034:	f7f3 ffee 	bl	8002014 <_sbrk>
 800e038:	1c43      	adds	r3, r0, #1
 800e03a:	d102      	bne.n	800e042 <_sbrk_r+0x1a>
 800e03c:	682b      	ldr	r3, [r5, #0]
 800e03e:	b103      	cbz	r3, 800e042 <_sbrk_r+0x1a>
 800e040:	6023      	str	r3, [r4, #0]
 800e042:	bd38      	pop	{r3, r4, r5, pc}
 800e044:	2002210c 	.word	0x2002210c

0800e048 <__sread>:
 800e048:	b510      	push	{r4, lr}
 800e04a:	460c      	mov	r4, r1
 800e04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e050:	f000 faa6 	bl	800e5a0 <_read_r>
 800e054:	2800      	cmp	r0, #0
 800e056:	bfab      	itete	ge
 800e058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e05a:	89a3      	ldrhlt	r3, [r4, #12]
 800e05c:	181b      	addge	r3, r3, r0
 800e05e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e062:	bfac      	ite	ge
 800e064:	6563      	strge	r3, [r4, #84]	; 0x54
 800e066:	81a3      	strhlt	r3, [r4, #12]
 800e068:	bd10      	pop	{r4, pc}

0800e06a <__swrite>:
 800e06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e06e:	461f      	mov	r7, r3
 800e070:	898b      	ldrh	r3, [r1, #12]
 800e072:	05db      	lsls	r3, r3, #23
 800e074:	4605      	mov	r5, r0
 800e076:	460c      	mov	r4, r1
 800e078:	4616      	mov	r6, r2
 800e07a:	d505      	bpl.n	800e088 <__swrite+0x1e>
 800e07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e080:	2302      	movs	r3, #2
 800e082:	2200      	movs	r2, #0
 800e084:	f000 f9f8 	bl	800e478 <_lseek_r>
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e08e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e092:	81a3      	strh	r3, [r4, #12]
 800e094:	4632      	mov	r2, r6
 800e096:	463b      	mov	r3, r7
 800e098:	4628      	mov	r0, r5
 800e09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e09e:	f000 b869 	b.w	800e174 <_write_r>

0800e0a2 <__sseek>:
 800e0a2:	b510      	push	{r4, lr}
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0aa:	f000 f9e5 	bl	800e478 <_lseek_r>
 800e0ae:	1c43      	adds	r3, r0, #1
 800e0b0:	89a3      	ldrh	r3, [r4, #12]
 800e0b2:	bf15      	itete	ne
 800e0b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0be:	81a3      	strheq	r3, [r4, #12]
 800e0c0:	bf18      	it	ne
 800e0c2:	81a3      	strhne	r3, [r4, #12]
 800e0c4:	bd10      	pop	{r4, pc}

0800e0c6 <__sclose>:
 800e0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ca:	f000 b8f1 	b.w	800e2b0 <_close_r>
	...

0800e0d0 <__swbuf_r>:
 800e0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d2:	460e      	mov	r6, r1
 800e0d4:	4614      	mov	r4, r2
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	b118      	cbz	r0, 800e0e2 <__swbuf_r+0x12>
 800e0da:	6983      	ldr	r3, [r0, #24]
 800e0dc:	b90b      	cbnz	r3, 800e0e2 <__swbuf_r+0x12>
 800e0de:	f7ff f963 	bl	800d3a8 <__sinit>
 800e0e2:	4b21      	ldr	r3, [pc, #132]	; (800e168 <__swbuf_r+0x98>)
 800e0e4:	429c      	cmp	r4, r3
 800e0e6:	d12b      	bne.n	800e140 <__swbuf_r+0x70>
 800e0e8:	686c      	ldr	r4, [r5, #4]
 800e0ea:	69a3      	ldr	r3, [r4, #24]
 800e0ec:	60a3      	str	r3, [r4, #8]
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	071a      	lsls	r2, r3, #28
 800e0f2:	d52f      	bpl.n	800e154 <__swbuf_r+0x84>
 800e0f4:	6923      	ldr	r3, [r4, #16]
 800e0f6:	b36b      	cbz	r3, 800e154 <__swbuf_r+0x84>
 800e0f8:	6923      	ldr	r3, [r4, #16]
 800e0fa:	6820      	ldr	r0, [r4, #0]
 800e0fc:	1ac0      	subs	r0, r0, r3
 800e0fe:	6963      	ldr	r3, [r4, #20]
 800e100:	b2f6      	uxtb	r6, r6
 800e102:	4283      	cmp	r3, r0
 800e104:	4637      	mov	r7, r6
 800e106:	dc04      	bgt.n	800e112 <__swbuf_r+0x42>
 800e108:	4621      	mov	r1, r4
 800e10a:	4628      	mov	r0, r5
 800e10c:	f000 f966 	bl	800e3dc <_fflush_r>
 800e110:	bb30      	cbnz	r0, 800e160 <__swbuf_r+0x90>
 800e112:	68a3      	ldr	r3, [r4, #8]
 800e114:	3b01      	subs	r3, #1
 800e116:	60a3      	str	r3, [r4, #8]
 800e118:	6823      	ldr	r3, [r4, #0]
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	6022      	str	r2, [r4, #0]
 800e11e:	701e      	strb	r6, [r3, #0]
 800e120:	6963      	ldr	r3, [r4, #20]
 800e122:	3001      	adds	r0, #1
 800e124:	4283      	cmp	r3, r0
 800e126:	d004      	beq.n	800e132 <__swbuf_r+0x62>
 800e128:	89a3      	ldrh	r3, [r4, #12]
 800e12a:	07db      	lsls	r3, r3, #31
 800e12c:	d506      	bpl.n	800e13c <__swbuf_r+0x6c>
 800e12e:	2e0a      	cmp	r6, #10
 800e130:	d104      	bne.n	800e13c <__swbuf_r+0x6c>
 800e132:	4621      	mov	r1, r4
 800e134:	4628      	mov	r0, r5
 800e136:	f000 f951 	bl	800e3dc <_fflush_r>
 800e13a:	b988      	cbnz	r0, 800e160 <__swbuf_r+0x90>
 800e13c:	4638      	mov	r0, r7
 800e13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e140:	4b0a      	ldr	r3, [pc, #40]	; (800e16c <__swbuf_r+0x9c>)
 800e142:	429c      	cmp	r4, r3
 800e144:	d101      	bne.n	800e14a <__swbuf_r+0x7a>
 800e146:	68ac      	ldr	r4, [r5, #8]
 800e148:	e7cf      	b.n	800e0ea <__swbuf_r+0x1a>
 800e14a:	4b09      	ldr	r3, [pc, #36]	; (800e170 <__swbuf_r+0xa0>)
 800e14c:	429c      	cmp	r4, r3
 800e14e:	bf08      	it	eq
 800e150:	68ec      	ldreq	r4, [r5, #12]
 800e152:	e7ca      	b.n	800e0ea <__swbuf_r+0x1a>
 800e154:	4621      	mov	r1, r4
 800e156:	4628      	mov	r0, r5
 800e158:	f000 f81e 	bl	800e198 <__swsetup_r>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d0cb      	beq.n	800e0f8 <__swbuf_r+0x28>
 800e160:	f04f 37ff 	mov.w	r7, #4294967295
 800e164:	e7ea      	b.n	800e13c <__swbuf_r+0x6c>
 800e166:	bf00      	nop
 800e168:	080113b8 	.word	0x080113b8
 800e16c:	080113d8 	.word	0x080113d8
 800e170:	08011398 	.word	0x08011398

0800e174 <_write_r>:
 800e174:	b538      	push	{r3, r4, r5, lr}
 800e176:	4d07      	ldr	r5, [pc, #28]	; (800e194 <_write_r+0x20>)
 800e178:	4604      	mov	r4, r0
 800e17a:	4608      	mov	r0, r1
 800e17c:	4611      	mov	r1, r2
 800e17e:	2200      	movs	r2, #0
 800e180:	602a      	str	r2, [r5, #0]
 800e182:	461a      	mov	r2, r3
 800e184:	f7f3 fef5 	bl	8001f72 <_write>
 800e188:	1c43      	adds	r3, r0, #1
 800e18a:	d102      	bne.n	800e192 <_write_r+0x1e>
 800e18c:	682b      	ldr	r3, [r5, #0]
 800e18e:	b103      	cbz	r3, 800e192 <_write_r+0x1e>
 800e190:	6023      	str	r3, [r4, #0]
 800e192:	bd38      	pop	{r3, r4, r5, pc}
 800e194:	2002210c 	.word	0x2002210c

0800e198 <__swsetup_r>:
 800e198:	4b32      	ldr	r3, [pc, #200]	; (800e264 <__swsetup_r+0xcc>)
 800e19a:	b570      	push	{r4, r5, r6, lr}
 800e19c:	681d      	ldr	r5, [r3, #0]
 800e19e:	4606      	mov	r6, r0
 800e1a0:	460c      	mov	r4, r1
 800e1a2:	b125      	cbz	r5, 800e1ae <__swsetup_r+0x16>
 800e1a4:	69ab      	ldr	r3, [r5, #24]
 800e1a6:	b913      	cbnz	r3, 800e1ae <__swsetup_r+0x16>
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	f7ff f8fd 	bl	800d3a8 <__sinit>
 800e1ae:	4b2e      	ldr	r3, [pc, #184]	; (800e268 <__swsetup_r+0xd0>)
 800e1b0:	429c      	cmp	r4, r3
 800e1b2:	d10f      	bne.n	800e1d4 <__swsetup_r+0x3c>
 800e1b4:	686c      	ldr	r4, [r5, #4]
 800e1b6:	89a3      	ldrh	r3, [r4, #12]
 800e1b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1bc:	0719      	lsls	r1, r3, #28
 800e1be:	d42c      	bmi.n	800e21a <__swsetup_r+0x82>
 800e1c0:	06dd      	lsls	r5, r3, #27
 800e1c2:	d411      	bmi.n	800e1e8 <__swsetup_r+0x50>
 800e1c4:	2309      	movs	r3, #9
 800e1c6:	6033      	str	r3, [r6, #0]
 800e1c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e1cc:	81a3      	strh	r3, [r4, #12]
 800e1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d2:	e03e      	b.n	800e252 <__swsetup_r+0xba>
 800e1d4:	4b25      	ldr	r3, [pc, #148]	; (800e26c <__swsetup_r+0xd4>)
 800e1d6:	429c      	cmp	r4, r3
 800e1d8:	d101      	bne.n	800e1de <__swsetup_r+0x46>
 800e1da:	68ac      	ldr	r4, [r5, #8]
 800e1dc:	e7eb      	b.n	800e1b6 <__swsetup_r+0x1e>
 800e1de:	4b24      	ldr	r3, [pc, #144]	; (800e270 <__swsetup_r+0xd8>)
 800e1e0:	429c      	cmp	r4, r3
 800e1e2:	bf08      	it	eq
 800e1e4:	68ec      	ldreq	r4, [r5, #12]
 800e1e6:	e7e6      	b.n	800e1b6 <__swsetup_r+0x1e>
 800e1e8:	0758      	lsls	r0, r3, #29
 800e1ea:	d512      	bpl.n	800e212 <__swsetup_r+0x7a>
 800e1ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1ee:	b141      	cbz	r1, 800e202 <__swsetup_r+0x6a>
 800e1f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1f4:	4299      	cmp	r1, r3
 800e1f6:	d002      	beq.n	800e1fe <__swsetup_r+0x66>
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	f7ff fd11 	bl	800dc20 <_free_r>
 800e1fe:	2300      	movs	r3, #0
 800e200:	6363      	str	r3, [r4, #52]	; 0x34
 800e202:	89a3      	ldrh	r3, [r4, #12]
 800e204:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e208:	81a3      	strh	r3, [r4, #12]
 800e20a:	2300      	movs	r3, #0
 800e20c:	6063      	str	r3, [r4, #4]
 800e20e:	6923      	ldr	r3, [r4, #16]
 800e210:	6023      	str	r3, [r4, #0]
 800e212:	89a3      	ldrh	r3, [r4, #12]
 800e214:	f043 0308 	orr.w	r3, r3, #8
 800e218:	81a3      	strh	r3, [r4, #12]
 800e21a:	6923      	ldr	r3, [r4, #16]
 800e21c:	b94b      	cbnz	r3, 800e232 <__swsetup_r+0x9a>
 800e21e:	89a3      	ldrh	r3, [r4, #12]
 800e220:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e228:	d003      	beq.n	800e232 <__swsetup_r+0x9a>
 800e22a:	4621      	mov	r1, r4
 800e22c:	4630      	mov	r0, r6
 800e22e:	f000 f959 	bl	800e4e4 <__smakebuf_r>
 800e232:	89a0      	ldrh	r0, [r4, #12]
 800e234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e238:	f010 0301 	ands.w	r3, r0, #1
 800e23c:	d00a      	beq.n	800e254 <__swsetup_r+0xbc>
 800e23e:	2300      	movs	r3, #0
 800e240:	60a3      	str	r3, [r4, #8]
 800e242:	6963      	ldr	r3, [r4, #20]
 800e244:	425b      	negs	r3, r3
 800e246:	61a3      	str	r3, [r4, #24]
 800e248:	6923      	ldr	r3, [r4, #16]
 800e24a:	b943      	cbnz	r3, 800e25e <__swsetup_r+0xc6>
 800e24c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e250:	d1ba      	bne.n	800e1c8 <__swsetup_r+0x30>
 800e252:	bd70      	pop	{r4, r5, r6, pc}
 800e254:	0781      	lsls	r1, r0, #30
 800e256:	bf58      	it	pl
 800e258:	6963      	ldrpl	r3, [r4, #20]
 800e25a:	60a3      	str	r3, [r4, #8]
 800e25c:	e7f4      	b.n	800e248 <__swsetup_r+0xb0>
 800e25e:	2000      	movs	r0, #0
 800e260:	e7f7      	b.n	800e252 <__swsetup_r+0xba>
 800e262:	bf00      	nop
 800e264:	20000068 	.word	0x20000068
 800e268:	080113b8 	.word	0x080113b8
 800e26c:	080113d8 	.word	0x080113d8
 800e270:	08011398 	.word	0x08011398

0800e274 <__assert_func>:
 800e274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e276:	4614      	mov	r4, r2
 800e278:	461a      	mov	r2, r3
 800e27a:	4b09      	ldr	r3, [pc, #36]	; (800e2a0 <__assert_func+0x2c>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4605      	mov	r5, r0
 800e280:	68d8      	ldr	r0, [r3, #12]
 800e282:	b14c      	cbz	r4, 800e298 <__assert_func+0x24>
 800e284:	4b07      	ldr	r3, [pc, #28]	; (800e2a4 <__assert_func+0x30>)
 800e286:	9100      	str	r1, [sp, #0]
 800e288:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e28c:	4906      	ldr	r1, [pc, #24]	; (800e2a8 <__assert_func+0x34>)
 800e28e:	462b      	mov	r3, r5
 800e290:	f000 f8e0 	bl	800e454 <fiprintf>
 800e294:	f000 f9a3 	bl	800e5de <abort>
 800e298:	4b04      	ldr	r3, [pc, #16]	; (800e2ac <__assert_func+0x38>)
 800e29a:	461c      	mov	r4, r3
 800e29c:	e7f3      	b.n	800e286 <__assert_func+0x12>
 800e29e:	bf00      	nop
 800e2a0:	20000068 	.word	0x20000068
 800e2a4:	08011565 	.word	0x08011565
 800e2a8:	08011572 	.word	0x08011572
 800e2ac:	080115a0 	.word	0x080115a0

0800e2b0 <_close_r>:
 800e2b0:	b538      	push	{r3, r4, r5, lr}
 800e2b2:	4d06      	ldr	r5, [pc, #24]	; (800e2cc <_close_r+0x1c>)
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	4608      	mov	r0, r1
 800e2ba:	602b      	str	r3, [r5, #0]
 800e2bc:	f7f3 fe75 	bl	8001faa <_close>
 800e2c0:	1c43      	adds	r3, r0, #1
 800e2c2:	d102      	bne.n	800e2ca <_close_r+0x1a>
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	b103      	cbz	r3, 800e2ca <_close_r+0x1a>
 800e2c8:	6023      	str	r3, [r4, #0]
 800e2ca:	bd38      	pop	{r3, r4, r5, pc}
 800e2cc:	2002210c 	.word	0x2002210c

0800e2d0 <__sflush_r>:
 800e2d0:	898a      	ldrh	r2, [r1, #12]
 800e2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	0710      	lsls	r0, r2, #28
 800e2da:	460c      	mov	r4, r1
 800e2dc:	d458      	bmi.n	800e390 <__sflush_r+0xc0>
 800e2de:	684b      	ldr	r3, [r1, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	dc05      	bgt.n	800e2f0 <__sflush_r+0x20>
 800e2e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	dc02      	bgt.n	800e2f0 <__sflush_r+0x20>
 800e2ea:	2000      	movs	r0, #0
 800e2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2f2:	2e00      	cmp	r6, #0
 800e2f4:	d0f9      	beq.n	800e2ea <__sflush_r+0x1a>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e2fc:	682f      	ldr	r7, [r5, #0]
 800e2fe:	602b      	str	r3, [r5, #0]
 800e300:	d032      	beq.n	800e368 <__sflush_r+0x98>
 800e302:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e304:	89a3      	ldrh	r3, [r4, #12]
 800e306:	075a      	lsls	r2, r3, #29
 800e308:	d505      	bpl.n	800e316 <__sflush_r+0x46>
 800e30a:	6863      	ldr	r3, [r4, #4]
 800e30c:	1ac0      	subs	r0, r0, r3
 800e30e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e310:	b10b      	cbz	r3, 800e316 <__sflush_r+0x46>
 800e312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e314:	1ac0      	subs	r0, r0, r3
 800e316:	2300      	movs	r3, #0
 800e318:	4602      	mov	r2, r0
 800e31a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e31c:	6a21      	ldr	r1, [r4, #32]
 800e31e:	4628      	mov	r0, r5
 800e320:	47b0      	blx	r6
 800e322:	1c43      	adds	r3, r0, #1
 800e324:	89a3      	ldrh	r3, [r4, #12]
 800e326:	d106      	bne.n	800e336 <__sflush_r+0x66>
 800e328:	6829      	ldr	r1, [r5, #0]
 800e32a:	291d      	cmp	r1, #29
 800e32c:	d82c      	bhi.n	800e388 <__sflush_r+0xb8>
 800e32e:	4a2a      	ldr	r2, [pc, #168]	; (800e3d8 <__sflush_r+0x108>)
 800e330:	40ca      	lsrs	r2, r1
 800e332:	07d6      	lsls	r6, r2, #31
 800e334:	d528      	bpl.n	800e388 <__sflush_r+0xb8>
 800e336:	2200      	movs	r2, #0
 800e338:	6062      	str	r2, [r4, #4]
 800e33a:	04d9      	lsls	r1, r3, #19
 800e33c:	6922      	ldr	r2, [r4, #16]
 800e33e:	6022      	str	r2, [r4, #0]
 800e340:	d504      	bpl.n	800e34c <__sflush_r+0x7c>
 800e342:	1c42      	adds	r2, r0, #1
 800e344:	d101      	bne.n	800e34a <__sflush_r+0x7a>
 800e346:	682b      	ldr	r3, [r5, #0]
 800e348:	b903      	cbnz	r3, 800e34c <__sflush_r+0x7c>
 800e34a:	6560      	str	r0, [r4, #84]	; 0x54
 800e34c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e34e:	602f      	str	r7, [r5, #0]
 800e350:	2900      	cmp	r1, #0
 800e352:	d0ca      	beq.n	800e2ea <__sflush_r+0x1a>
 800e354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e358:	4299      	cmp	r1, r3
 800e35a:	d002      	beq.n	800e362 <__sflush_r+0x92>
 800e35c:	4628      	mov	r0, r5
 800e35e:	f7ff fc5f 	bl	800dc20 <_free_r>
 800e362:	2000      	movs	r0, #0
 800e364:	6360      	str	r0, [r4, #52]	; 0x34
 800e366:	e7c1      	b.n	800e2ec <__sflush_r+0x1c>
 800e368:	6a21      	ldr	r1, [r4, #32]
 800e36a:	2301      	movs	r3, #1
 800e36c:	4628      	mov	r0, r5
 800e36e:	47b0      	blx	r6
 800e370:	1c41      	adds	r1, r0, #1
 800e372:	d1c7      	bne.n	800e304 <__sflush_r+0x34>
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d0c4      	beq.n	800e304 <__sflush_r+0x34>
 800e37a:	2b1d      	cmp	r3, #29
 800e37c:	d001      	beq.n	800e382 <__sflush_r+0xb2>
 800e37e:	2b16      	cmp	r3, #22
 800e380:	d101      	bne.n	800e386 <__sflush_r+0xb6>
 800e382:	602f      	str	r7, [r5, #0]
 800e384:	e7b1      	b.n	800e2ea <__sflush_r+0x1a>
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e38c:	81a3      	strh	r3, [r4, #12]
 800e38e:	e7ad      	b.n	800e2ec <__sflush_r+0x1c>
 800e390:	690f      	ldr	r7, [r1, #16]
 800e392:	2f00      	cmp	r7, #0
 800e394:	d0a9      	beq.n	800e2ea <__sflush_r+0x1a>
 800e396:	0793      	lsls	r3, r2, #30
 800e398:	680e      	ldr	r6, [r1, #0]
 800e39a:	bf08      	it	eq
 800e39c:	694b      	ldreq	r3, [r1, #20]
 800e39e:	600f      	str	r7, [r1, #0]
 800e3a0:	bf18      	it	ne
 800e3a2:	2300      	movne	r3, #0
 800e3a4:	eba6 0807 	sub.w	r8, r6, r7
 800e3a8:	608b      	str	r3, [r1, #8]
 800e3aa:	f1b8 0f00 	cmp.w	r8, #0
 800e3ae:	dd9c      	ble.n	800e2ea <__sflush_r+0x1a>
 800e3b0:	6a21      	ldr	r1, [r4, #32]
 800e3b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3b4:	4643      	mov	r3, r8
 800e3b6:	463a      	mov	r2, r7
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	47b0      	blx	r6
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	dc06      	bgt.n	800e3ce <__sflush_r+0xfe>
 800e3c0:	89a3      	ldrh	r3, [r4, #12]
 800e3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3c6:	81a3      	strh	r3, [r4, #12]
 800e3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3cc:	e78e      	b.n	800e2ec <__sflush_r+0x1c>
 800e3ce:	4407      	add	r7, r0
 800e3d0:	eba8 0800 	sub.w	r8, r8, r0
 800e3d4:	e7e9      	b.n	800e3aa <__sflush_r+0xda>
 800e3d6:	bf00      	nop
 800e3d8:	20400001 	.word	0x20400001

0800e3dc <_fflush_r>:
 800e3dc:	b538      	push	{r3, r4, r5, lr}
 800e3de:	690b      	ldr	r3, [r1, #16]
 800e3e0:	4605      	mov	r5, r0
 800e3e2:	460c      	mov	r4, r1
 800e3e4:	b913      	cbnz	r3, 800e3ec <_fflush_r+0x10>
 800e3e6:	2500      	movs	r5, #0
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	b118      	cbz	r0, 800e3f6 <_fflush_r+0x1a>
 800e3ee:	6983      	ldr	r3, [r0, #24]
 800e3f0:	b90b      	cbnz	r3, 800e3f6 <_fflush_r+0x1a>
 800e3f2:	f7fe ffd9 	bl	800d3a8 <__sinit>
 800e3f6:	4b14      	ldr	r3, [pc, #80]	; (800e448 <_fflush_r+0x6c>)
 800e3f8:	429c      	cmp	r4, r3
 800e3fa:	d11b      	bne.n	800e434 <_fflush_r+0x58>
 800e3fc:	686c      	ldr	r4, [r5, #4]
 800e3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d0ef      	beq.n	800e3e6 <_fflush_r+0xa>
 800e406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e408:	07d0      	lsls	r0, r2, #31
 800e40a:	d404      	bmi.n	800e416 <_fflush_r+0x3a>
 800e40c:	0599      	lsls	r1, r3, #22
 800e40e:	d402      	bmi.n	800e416 <_fflush_r+0x3a>
 800e410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e412:	f7ff f86c 	bl	800d4ee <__retarget_lock_acquire_recursive>
 800e416:	4628      	mov	r0, r5
 800e418:	4621      	mov	r1, r4
 800e41a:	f7ff ff59 	bl	800e2d0 <__sflush_r>
 800e41e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e420:	07da      	lsls	r2, r3, #31
 800e422:	4605      	mov	r5, r0
 800e424:	d4e0      	bmi.n	800e3e8 <_fflush_r+0xc>
 800e426:	89a3      	ldrh	r3, [r4, #12]
 800e428:	059b      	lsls	r3, r3, #22
 800e42a:	d4dd      	bmi.n	800e3e8 <_fflush_r+0xc>
 800e42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e42e:	f7ff f85f 	bl	800d4f0 <__retarget_lock_release_recursive>
 800e432:	e7d9      	b.n	800e3e8 <_fflush_r+0xc>
 800e434:	4b05      	ldr	r3, [pc, #20]	; (800e44c <_fflush_r+0x70>)
 800e436:	429c      	cmp	r4, r3
 800e438:	d101      	bne.n	800e43e <_fflush_r+0x62>
 800e43a:	68ac      	ldr	r4, [r5, #8]
 800e43c:	e7df      	b.n	800e3fe <_fflush_r+0x22>
 800e43e:	4b04      	ldr	r3, [pc, #16]	; (800e450 <_fflush_r+0x74>)
 800e440:	429c      	cmp	r4, r3
 800e442:	bf08      	it	eq
 800e444:	68ec      	ldreq	r4, [r5, #12]
 800e446:	e7da      	b.n	800e3fe <_fflush_r+0x22>
 800e448:	080113b8 	.word	0x080113b8
 800e44c:	080113d8 	.word	0x080113d8
 800e450:	08011398 	.word	0x08011398

0800e454 <fiprintf>:
 800e454:	b40e      	push	{r1, r2, r3}
 800e456:	b503      	push	{r0, r1, lr}
 800e458:	4601      	mov	r1, r0
 800e45a:	ab03      	add	r3, sp, #12
 800e45c:	4805      	ldr	r0, [pc, #20]	; (800e474 <fiprintf+0x20>)
 800e45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e462:	6800      	ldr	r0, [r0, #0]
 800e464:	9301      	str	r3, [sp, #4]
 800e466:	f7ff fcaf 	bl	800ddc8 <_vfiprintf_r>
 800e46a:	b002      	add	sp, #8
 800e46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e470:	b003      	add	sp, #12
 800e472:	4770      	bx	lr
 800e474:	20000068 	.word	0x20000068

0800e478 <_lseek_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	4d07      	ldr	r5, [pc, #28]	; (800e498 <_lseek_r+0x20>)
 800e47c:	4604      	mov	r4, r0
 800e47e:	4608      	mov	r0, r1
 800e480:	4611      	mov	r1, r2
 800e482:	2200      	movs	r2, #0
 800e484:	602a      	str	r2, [r5, #0]
 800e486:	461a      	mov	r2, r3
 800e488:	f7f3 fdb6 	bl	8001ff8 <_lseek>
 800e48c:	1c43      	adds	r3, r0, #1
 800e48e:	d102      	bne.n	800e496 <_lseek_r+0x1e>
 800e490:	682b      	ldr	r3, [r5, #0]
 800e492:	b103      	cbz	r3, 800e496 <_lseek_r+0x1e>
 800e494:	6023      	str	r3, [r4, #0]
 800e496:	bd38      	pop	{r3, r4, r5, pc}
 800e498:	2002210c 	.word	0x2002210c

0800e49c <__swhatbuf_r>:
 800e49c:	b570      	push	{r4, r5, r6, lr}
 800e49e:	460e      	mov	r6, r1
 800e4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4a4:	2900      	cmp	r1, #0
 800e4a6:	b096      	sub	sp, #88	; 0x58
 800e4a8:	4614      	mov	r4, r2
 800e4aa:	461d      	mov	r5, r3
 800e4ac:	da07      	bge.n	800e4be <__swhatbuf_r+0x22>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	602b      	str	r3, [r5, #0]
 800e4b2:	89b3      	ldrh	r3, [r6, #12]
 800e4b4:	061a      	lsls	r2, r3, #24
 800e4b6:	d410      	bmi.n	800e4da <__swhatbuf_r+0x3e>
 800e4b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4bc:	e00e      	b.n	800e4dc <__swhatbuf_r+0x40>
 800e4be:	466a      	mov	r2, sp
 800e4c0:	f000 f894 	bl	800e5ec <_fstat_r>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	dbf2      	blt.n	800e4ae <__swhatbuf_r+0x12>
 800e4c8:	9a01      	ldr	r2, [sp, #4]
 800e4ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e4ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e4d2:	425a      	negs	r2, r3
 800e4d4:	415a      	adcs	r2, r3
 800e4d6:	602a      	str	r2, [r5, #0]
 800e4d8:	e7ee      	b.n	800e4b8 <__swhatbuf_r+0x1c>
 800e4da:	2340      	movs	r3, #64	; 0x40
 800e4dc:	2000      	movs	r0, #0
 800e4de:	6023      	str	r3, [r4, #0]
 800e4e0:	b016      	add	sp, #88	; 0x58
 800e4e2:	bd70      	pop	{r4, r5, r6, pc}

0800e4e4 <__smakebuf_r>:
 800e4e4:	898b      	ldrh	r3, [r1, #12]
 800e4e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4e8:	079d      	lsls	r5, r3, #30
 800e4ea:	4606      	mov	r6, r0
 800e4ec:	460c      	mov	r4, r1
 800e4ee:	d507      	bpl.n	800e500 <__smakebuf_r+0x1c>
 800e4f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e4f4:	6023      	str	r3, [r4, #0]
 800e4f6:	6123      	str	r3, [r4, #16]
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	6163      	str	r3, [r4, #20]
 800e4fc:	b002      	add	sp, #8
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	ab01      	add	r3, sp, #4
 800e502:	466a      	mov	r2, sp
 800e504:	f7ff ffca 	bl	800e49c <__swhatbuf_r>
 800e508:	9900      	ldr	r1, [sp, #0]
 800e50a:	4605      	mov	r5, r0
 800e50c:	4630      	mov	r0, r6
 800e50e:	f7ff fbd7 	bl	800dcc0 <_malloc_r>
 800e512:	b948      	cbnz	r0, 800e528 <__smakebuf_r+0x44>
 800e514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e518:	059a      	lsls	r2, r3, #22
 800e51a:	d4ef      	bmi.n	800e4fc <__smakebuf_r+0x18>
 800e51c:	f023 0303 	bic.w	r3, r3, #3
 800e520:	f043 0302 	orr.w	r3, r3, #2
 800e524:	81a3      	strh	r3, [r4, #12]
 800e526:	e7e3      	b.n	800e4f0 <__smakebuf_r+0xc>
 800e528:	4b0d      	ldr	r3, [pc, #52]	; (800e560 <__smakebuf_r+0x7c>)
 800e52a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e52c:	89a3      	ldrh	r3, [r4, #12]
 800e52e:	6020      	str	r0, [r4, #0]
 800e530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e534:	81a3      	strh	r3, [r4, #12]
 800e536:	9b00      	ldr	r3, [sp, #0]
 800e538:	6163      	str	r3, [r4, #20]
 800e53a:	9b01      	ldr	r3, [sp, #4]
 800e53c:	6120      	str	r0, [r4, #16]
 800e53e:	b15b      	cbz	r3, 800e558 <__smakebuf_r+0x74>
 800e540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e544:	4630      	mov	r0, r6
 800e546:	f000 f863 	bl	800e610 <_isatty_r>
 800e54a:	b128      	cbz	r0, 800e558 <__smakebuf_r+0x74>
 800e54c:	89a3      	ldrh	r3, [r4, #12]
 800e54e:	f023 0303 	bic.w	r3, r3, #3
 800e552:	f043 0301 	orr.w	r3, r3, #1
 800e556:	81a3      	strh	r3, [r4, #12]
 800e558:	89a0      	ldrh	r0, [r4, #12]
 800e55a:	4305      	orrs	r5, r0
 800e55c:	81a5      	strh	r5, [r4, #12]
 800e55e:	e7cd      	b.n	800e4fc <__smakebuf_r+0x18>
 800e560:	0800d341 	.word	0x0800d341

0800e564 <__ascii_mbtowc>:
 800e564:	b082      	sub	sp, #8
 800e566:	b901      	cbnz	r1, 800e56a <__ascii_mbtowc+0x6>
 800e568:	a901      	add	r1, sp, #4
 800e56a:	b142      	cbz	r2, 800e57e <__ascii_mbtowc+0x1a>
 800e56c:	b14b      	cbz	r3, 800e582 <__ascii_mbtowc+0x1e>
 800e56e:	7813      	ldrb	r3, [r2, #0]
 800e570:	600b      	str	r3, [r1, #0]
 800e572:	7812      	ldrb	r2, [r2, #0]
 800e574:	1e10      	subs	r0, r2, #0
 800e576:	bf18      	it	ne
 800e578:	2001      	movne	r0, #1
 800e57a:	b002      	add	sp, #8
 800e57c:	4770      	bx	lr
 800e57e:	4610      	mov	r0, r2
 800e580:	e7fb      	b.n	800e57a <__ascii_mbtowc+0x16>
 800e582:	f06f 0001 	mvn.w	r0, #1
 800e586:	e7f8      	b.n	800e57a <__ascii_mbtowc+0x16>

0800e588 <__malloc_lock>:
 800e588:	4801      	ldr	r0, [pc, #4]	; (800e590 <__malloc_lock+0x8>)
 800e58a:	f7fe bfb0 	b.w	800d4ee <__retarget_lock_acquire_recursive>
 800e58e:	bf00      	nop
 800e590:	20022104 	.word	0x20022104

0800e594 <__malloc_unlock>:
 800e594:	4801      	ldr	r0, [pc, #4]	; (800e59c <__malloc_unlock+0x8>)
 800e596:	f7fe bfab 	b.w	800d4f0 <__retarget_lock_release_recursive>
 800e59a:	bf00      	nop
 800e59c:	20022104 	.word	0x20022104

0800e5a0 <_read_r>:
 800e5a0:	b538      	push	{r3, r4, r5, lr}
 800e5a2:	4d07      	ldr	r5, [pc, #28]	; (800e5c0 <_read_r+0x20>)
 800e5a4:	4604      	mov	r4, r0
 800e5a6:	4608      	mov	r0, r1
 800e5a8:	4611      	mov	r1, r2
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	602a      	str	r2, [r5, #0]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	f7f3 fcc2 	bl	8001f38 <_read>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	d102      	bne.n	800e5be <_read_r+0x1e>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	b103      	cbz	r3, 800e5be <_read_r+0x1e>
 800e5bc:	6023      	str	r3, [r4, #0]
 800e5be:	bd38      	pop	{r3, r4, r5, pc}
 800e5c0:	2002210c 	.word	0x2002210c

0800e5c4 <__ascii_wctomb>:
 800e5c4:	b149      	cbz	r1, 800e5da <__ascii_wctomb+0x16>
 800e5c6:	2aff      	cmp	r2, #255	; 0xff
 800e5c8:	bf85      	ittet	hi
 800e5ca:	238a      	movhi	r3, #138	; 0x8a
 800e5cc:	6003      	strhi	r3, [r0, #0]
 800e5ce:	700a      	strbls	r2, [r1, #0]
 800e5d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e5d4:	bf98      	it	ls
 800e5d6:	2001      	movls	r0, #1
 800e5d8:	4770      	bx	lr
 800e5da:	4608      	mov	r0, r1
 800e5dc:	4770      	bx	lr

0800e5de <abort>:
 800e5de:	b508      	push	{r3, lr}
 800e5e0:	2006      	movs	r0, #6
 800e5e2:	f000 f84d 	bl	800e680 <raise>
 800e5e6:	2001      	movs	r0, #1
 800e5e8:	f7f3 fc9c 	bl	8001f24 <_exit>

0800e5ec <_fstat_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	4d07      	ldr	r5, [pc, #28]	; (800e60c <_fstat_r+0x20>)
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	4608      	mov	r0, r1
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	602b      	str	r3, [r5, #0]
 800e5fa:	f7f3 fce2 	bl	8001fc2 <_fstat>
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	d102      	bne.n	800e608 <_fstat_r+0x1c>
 800e602:	682b      	ldr	r3, [r5, #0]
 800e604:	b103      	cbz	r3, 800e608 <_fstat_r+0x1c>
 800e606:	6023      	str	r3, [r4, #0]
 800e608:	bd38      	pop	{r3, r4, r5, pc}
 800e60a:	bf00      	nop
 800e60c:	2002210c 	.word	0x2002210c

0800e610 <_isatty_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4d06      	ldr	r5, [pc, #24]	; (800e62c <_isatty_r+0x1c>)
 800e614:	2300      	movs	r3, #0
 800e616:	4604      	mov	r4, r0
 800e618:	4608      	mov	r0, r1
 800e61a:	602b      	str	r3, [r5, #0]
 800e61c:	f7f3 fce1 	bl	8001fe2 <_isatty>
 800e620:	1c43      	adds	r3, r0, #1
 800e622:	d102      	bne.n	800e62a <_isatty_r+0x1a>
 800e624:	682b      	ldr	r3, [r5, #0]
 800e626:	b103      	cbz	r3, 800e62a <_isatty_r+0x1a>
 800e628:	6023      	str	r3, [r4, #0]
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	2002210c 	.word	0x2002210c

0800e630 <_raise_r>:
 800e630:	291f      	cmp	r1, #31
 800e632:	b538      	push	{r3, r4, r5, lr}
 800e634:	4604      	mov	r4, r0
 800e636:	460d      	mov	r5, r1
 800e638:	d904      	bls.n	800e644 <_raise_r+0x14>
 800e63a:	2316      	movs	r3, #22
 800e63c:	6003      	str	r3, [r0, #0]
 800e63e:	f04f 30ff 	mov.w	r0, #4294967295
 800e642:	bd38      	pop	{r3, r4, r5, pc}
 800e644:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e646:	b112      	cbz	r2, 800e64e <_raise_r+0x1e>
 800e648:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e64c:	b94b      	cbnz	r3, 800e662 <_raise_r+0x32>
 800e64e:	4620      	mov	r0, r4
 800e650:	f000 f830 	bl	800e6b4 <_getpid_r>
 800e654:	462a      	mov	r2, r5
 800e656:	4601      	mov	r1, r0
 800e658:	4620      	mov	r0, r4
 800e65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e65e:	f000 b817 	b.w	800e690 <_kill_r>
 800e662:	2b01      	cmp	r3, #1
 800e664:	d00a      	beq.n	800e67c <_raise_r+0x4c>
 800e666:	1c59      	adds	r1, r3, #1
 800e668:	d103      	bne.n	800e672 <_raise_r+0x42>
 800e66a:	2316      	movs	r3, #22
 800e66c:	6003      	str	r3, [r0, #0]
 800e66e:	2001      	movs	r0, #1
 800e670:	e7e7      	b.n	800e642 <_raise_r+0x12>
 800e672:	2400      	movs	r4, #0
 800e674:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e678:	4628      	mov	r0, r5
 800e67a:	4798      	blx	r3
 800e67c:	2000      	movs	r0, #0
 800e67e:	e7e0      	b.n	800e642 <_raise_r+0x12>

0800e680 <raise>:
 800e680:	4b02      	ldr	r3, [pc, #8]	; (800e68c <raise+0xc>)
 800e682:	4601      	mov	r1, r0
 800e684:	6818      	ldr	r0, [r3, #0]
 800e686:	f7ff bfd3 	b.w	800e630 <_raise_r>
 800e68a:	bf00      	nop
 800e68c:	20000068 	.word	0x20000068

0800e690 <_kill_r>:
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4d07      	ldr	r5, [pc, #28]	; (800e6b0 <_kill_r+0x20>)
 800e694:	2300      	movs	r3, #0
 800e696:	4604      	mov	r4, r0
 800e698:	4608      	mov	r0, r1
 800e69a:	4611      	mov	r1, r2
 800e69c:	602b      	str	r3, [r5, #0]
 800e69e:	f7f3 fc31 	bl	8001f04 <_kill>
 800e6a2:	1c43      	adds	r3, r0, #1
 800e6a4:	d102      	bne.n	800e6ac <_kill_r+0x1c>
 800e6a6:	682b      	ldr	r3, [r5, #0]
 800e6a8:	b103      	cbz	r3, 800e6ac <_kill_r+0x1c>
 800e6aa:	6023      	str	r3, [r4, #0]
 800e6ac:	bd38      	pop	{r3, r4, r5, pc}
 800e6ae:	bf00      	nop
 800e6b0:	2002210c 	.word	0x2002210c

0800e6b4 <_getpid_r>:
 800e6b4:	f7f3 bc1e 	b.w	8001ef4 <_getpid>

0800e6b8 <_init>:
 800e6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ba:	bf00      	nop
 800e6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6be:	bc08      	pop	{r3}
 800e6c0:	469e      	mov	lr, r3
 800e6c2:	4770      	bx	lr

0800e6c4 <_fini>:
 800e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c6:	bf00      	nop
 800e6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ca:	bc08      	pop	{r3}
 800e6cc:	469e      	mov	lr, r3
 800e6ce:	4770      	bx	lr
