
2021_FreeRTOS_FISE3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fc4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003360  08011178  08011178  00021178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080144d8  080144d8  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  080144d8  080144d8  000244d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080144e0  080144e0  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080144e0  080144e0  000244e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080144e4  080144e4  000244e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080144e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00021ef4  20000238  08014720  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2002212c  08014720  0003212c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030428  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062c3  00000000  00000000  00060690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a8  00000000  00000000  00066958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef8  00000000  00000000  00068b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004a249  00000000  00000000  0006a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029557  00000000  00000000  000b4c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5144  00000000  00000000  000de198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d32dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ed8  00000000  00000000  001d3330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000238 	.word	0x20000238
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801115c 	.word	0x0801115c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000023c 	.word	0x2000023c
 80001ec:	0801115c 	.word	0x0801115c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <MX_DMA2D_Init+0x60>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef6:	f003 fa0d 	bl	8004314 <HAL_DMA2D_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f00:	f000 fe72 	bl	8001be8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f04:	2101      	movs	r1, #1
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000f08:	f003 fc72 	bl	80047f0 <HAL_DMA2D_ConfigLayer>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f12:	f000 fe69 	bl	8001be8 <Error_Handler>
  }

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20021c6c 	.word	0x20021c6c
 8000f20:	4002b000 	.word	0x4002b000

08000f24 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_DMA2D_MspInit+0x48>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d115      	bne.n	8000f62 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	205a      	movs	r0, #90	; 0x5a
 8000f58:	f002 ffd2 	bl	8003f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f5c:	205a      	movs	r0, #90	; 0x5a
 8000f5e:	f002 ffeb 	bl	8003f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	4002b000 	.word	0x4002b000
 8000f70:	40023800 	.word	0x40023800

08000f74 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_FMC_Init+0x98>)
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <MX_FMC_Init+0x9c>)
 8000f90:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_FMC_Init+0x98>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_FMC_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_FMC_Init+0x98>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_FMC_Init+0x98>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_FMC_Init+0x98>)
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_FMC_Init+0x98>)
 8000fb2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000fb6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_FMC_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_FMC_Init+0x98>)
 8000fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_FMC_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_FMC_Init+0x98>)
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_FMC_Init+0x98>)
 8000ff6:	f006 fba1 	bl	800773c <HAL_SDRAM_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001000:	f000 fdf2 	bl	8001be8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20021cac 	.word	0x20021cac
 8001010:	a0000140 	.word	0xa0000140

08001014 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <HAL_FMC_MspInit+0x104>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d16f      	bne.n	8001110 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_FMC_MspInit+0x104>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_FMC_MspInit+0x108>)
 800103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6393      	str	r3, [r2, #56]	; 0x38
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001052:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001056:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001064:	230c      	movs	r3, #12
 8001066:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	482c      	ldr	r0, [pc, #176]	; (8001120 <HAL_FMC_MspInit+0x10c>)
 800106e:	f003 fced 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001072:	2301      	movs	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001082:	230c      	movs	r3, #12
 8001084:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4826      	ldr	r0, [pc, #152]	; (8001124 <HAL_FMC_MspInit+0x110>)
 800108c:	f003 fcde 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001090:	f248 1333 	movw	r3, #33075	; 0x8133
 8001094:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	481f      	ldr	r0, [pc, #124]	; (8001128 <HAL_FMC_MspInit+0x114>)
 80010ac:	f003 fcce 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010b4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c2:	230c      	movs	r3, #12
 80010c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <HAL_FMC_MspInit+0x118>)
 80010cc:	f003 fcbe 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80010d0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80010d4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e2:	230c      	movs	r3, #12
 80010e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <HAL_FMC_MspInit+0x11c>)
 80010ec:	f003 fcae 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001100:	230c      	movs	r3, #12
 8001102:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <HAL_FMC_MspInit+0x120>)
 800110a:	f003 fc9f 	bl	8004a4c <HAL_GPIO_Init>
 800110e:	e000      	b.n	8001112 <HAL_FMC_MspInit+0xfe>
    return;
 8001110:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000254 	.word	0x20000254
 800111c:	40023800 	.word	0x40023800
 8001120:	40021400 	.word	0x40021400
 8001124:	40020800 	.word	0x40020800
 8001128:	40021800 	.word	0x40021800
 800112c:	40021000 	.word	0x40021000
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40020400 	.word	0x40020400

08001138 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001140:	f7ff ff68 	bl	8001014 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <vApplicationGetTimerTaskMemory>:
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize )
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <vApplicationGetTimerTaskMemory+0x2c>)
 800115c:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <vApplicationGetTimerTaskMemory+0x30>)
 8001162:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	200004bc 	.word	0x200004bc
 800117c:	20000520 	.word	0x20000520

08001180 <vApplicationGetIdleTaskMemory>:

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a07      	ldr	r2, [pc, #28]	; (80011ac <vApplicationGetIdleTaskMemory+0x2c>)
 8001190:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <vApplicationGetIdleTaskMemory+0x30>)
 8001196:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000258 	.word	0x20000258
 80011b0:	200002bc 	.word	0x200002bc

080011b4 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08e      	sub	sp, #56	; 0x38
 80011b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	4b89      	ldr	r3, [pc, #548]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a88      	ldr	r2, [pc, #544]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b86      	ldr	r3, [pc, #536]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	4b82      	ldr	r3, [pc, #520]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a81      	ldr	r2, [pc, #516]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a7a      	ldr	r2, [pc, #488]	; (80013f4 <MX_GPIO_Init+0x240>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b78      	ldr	r3, [pc, #480]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b74      	ldr	r3, [pc, #464]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a73      	ldr	r2, [pc, #460]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b71      	ldr	r3, [pc, #452]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a6c      	ldr	r2, [pc, #432]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <MX_GPIO_Init+0x240>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <MX_GPIO_Init+0x240>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a5e      	ldr	r2, [pc, #376]	; (80013f4 <MX_GPIO_Init+0x240>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b55      	ldr	r3, [pc, #340]	; (80013f4 <MX_GPIO_Init+0x240>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2116      	movs	r1, #22
 80012ae:	4852      	ldr	r0, [pc, #328]	; (80013f8 <MX_GPIO_Init+0x244>)
 80012b0:	f003 fe84 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	4850      	ldr	r0, [pc, #320]	; (80013fc <MX_GPIO_Init+0x248>)
 80012ba:	f003 fe7f 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80012c4:	484e      	ldr	r0, [pc, #312]	; (8001400 <MX_GPIO_Init+0x24c>)
 80012c6:	f003 fe79 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012d0:	484c      	ldr	r0, [pc, #304]	; (8001404 <MX_GPIO_Init+0x250>)
 80012d2:	f003 fe73 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80012d6:	2316      	movs	r3, #22
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4842      	ldr	r0, [pc, #264]	; (80013f8 <MX_GPIO_Init+0x244>)
 80012ee:	f003 fbad 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80012f2:	f248 0307 	movw	r3, #32775	; 0x8007
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f8:	4b43      	ldr	r3, [pc, #268]	; (8001408 <MX_GPIO_Init+0x254>)
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	483d      	ldr	r0, [pc, #244]	; (80013fc <MX_GPIO_Init+0x248>)
 8001308:	f003 fba0 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4836      	ldr	r0, [pc, #216]	; (80013fc <MX_GPIO_Init+0x248>)
 8001324:	f003 fb92 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <MX_GPIO_Init+0x254>)
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	482f      	ldr	r0, [pc, #188]	; (80013f8 <MX_GPIO_Init+0x244>)
 800133c:	f003 fb86 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001340:	2304      	movs	r3, #4
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	482e      	ldr	r0, [pc, #184]	; (800140c <MX_GPIO_Init+0x258>)
 8001354:	f003 fb7a 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001358:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800136a:	230c      	movs	r3, #12
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4825      	ldr	r0, [pc, #148]	; (800140c <MX_GPIO_Init+0x258>)
 8001376:	f003 fb69 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_GPIO_Init+0x258>)
 8001390:	f003 fb5c 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_GPIO_Init+0x24c>)
 80013aa:	f003 fb4f 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80013ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_GPIO_Init+0x24c>)
 80013c8:	f003 fb40 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80013cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_GPIO_Init+0x250>)
 80013e6:	f003 fb31 	bl	8004a4c <HAL_GPIO_Init>

}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021800 	.word	0x40021800
 8001408:	10120000 	.word	0x10120000
 800140c:	40020400 	.word	0x40020400

08001410 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_I2C3_Init+0x74>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <MX_I2C3_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_I2C3_Init+0x74>)
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <MX_I2C3_Init+0x7c>)
 800141e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_I2C3_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_I2C3_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_I2C3_Init+0x74>)
 800142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001432:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_I2C3_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C3_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_I2C3_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C3_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_I2C3_Init+0x74>)
 800144e:	f003 fdcf 	bl	8004ff0 <HAL_I2C_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001458:	f000 fbc6 	bl	8001be8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <MX_I2C3_Init+0x74>)
 8001460:	f004 feb3 	bl	80061ca <HAL_I2CEx_ConfigAnalogFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800146a:	f000 fbbd 	bl	8001be8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C3_Init+0x74>)
 8001472:	f004 fee6 	bl	8006242 <HAL_I2CEx_ConfigDigitalFilter>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800147c:	f000 fbb4 	bl	8001be8 <Error_Handler>
  }

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20021ce0 	.word	0x20021ce0
 8001488:	40005c00 	.word	0x40005c00
 800148c:	000186a0 	.word	0x000186a0

08001490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <HAL_I2C_MspInit+0xc4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d14b      	bne.n	800154a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014fc:	2304      	movs	r3, #4
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4815      	ldr	r0, [pc, #84]	; (800155c <HAL_I2C_MspInit+0xcc>)
 8001508:	f003 faa0 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800150c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001512:	2312      	movs	r3, #18
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800151e:	2304      	movs	r3, #4
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <HAL_I2C_MspInit+0xd0>)
 800152a:	f003 fa8f 	bl	8004a4c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005c00 	.word	0x40005c00
 8001558:	40023800 	.word	0x40023800
 800155c:	40020800 	.word	0x40020800
 8001560:	40020000 	.word	0x40020000

08001564 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2234      	movs	r2, #52	; 0x34
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00b fd9f 	bl	800d0b4 <memset>

  hltdc.Instance = LTDC;
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <MX_LTDC_Init+0xf8>)
 8001578:	4a39      	ldr	r2, [pc, #228]	; (8001660 <MX_LTDC_Init+0xfc>)
 800157a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800157c:	4b37      	ldr	r3, [pc, #220]	; (800165c <MX_LTDC_Init+0xf8>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <MX_LTDC_Init+0xf8>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001588:	4b34      	ldr	r3, [pc, #208]	; (800165c <MX_LTDC_Init+0xf8>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <MX_LTDC_Init+0xf8>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <MX_LTDC_Init+0xf8>)
 8001596:	2209      	movs	r2, #9
 8001598:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <MX_LTDC_Init+0xf8>)
 800159c:	2201      	movs	r2, #1
 800159e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <MX_LTDC_Init+0xf8>)
 80015a2:	221d      	movs	r2, #29
 80015a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <MX_LTDC_Init+0xf8>)
 80015a8:	2203      	movs	r2, #3
 80015aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <MX_LTDC_Init+0xf8>)
 80015ae:	f240 120d 	movw	r2, #269	; 0x10d
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <MX_LTDC_Init+0xf8>)
 80015b6:	f240 1243 	movw	r2, #323	; 0x143
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <MX_LTDC_Init+0xf8>)
 80015be:	f240 1217 	movw	r2, #279	; 0x117
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_LTDC_Init+0xf8>)
 80015c6:	f240 1247 	movw	r2, #327	; 0x147
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_LTDC_Init+0xf8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_LTDC_Init+0xf8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_LTDC_Init+0xf8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015e4:	481d      	ldr	r0, [pc, #116]	; (800165c <MX_LTDC_Init+0xf8>)
 80015e6:	f004 fe6b 	bl	80062c0 <HAL_LTDC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80015f0:	f000 fafa 	bl	8001be8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80015f8:	23f0      	movs	r3, #240	; 0xf0
 80015fa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001600:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001604:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001606:	2302      	movs	r3, #2
 8001608:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001612:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001616:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001618:	2307      	movs	r3, #7
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800161c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001622:	23f0      	movs	r3, #240	; 0xf0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001626:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_LTDC_Init+0xf8>)
 8001646:	f004 ffcd 	bl	80065e4 <HAL_LTDC_ConfigLayer>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001650:	f000 faca 	bl	8001be8 <Error_Handler>
  }

}
 8001654:	bf00      	nop
 8001656:	3738      	adds	r7, #56	; 0x38
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20021d34 	.word	0x20021d34
 8001660:	40016800 	.word	0x40016800

08001664 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a7b      	ldr	r2, [pc, #492]	; (8001870 <HAL_LTDC_MspInit+0x20c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	f040 80f0 	bne.w	8001868 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	4b79      	ldr	r3, [pc, #484]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	4a78      	ldr	r2, [pc, #480]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001696:	6453      	str	r3, [r2, #68]	; 0x44
 8001698:	4b76      	ldr	r3, [pc, #472]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	4b72      	ldr	r3, [pc, #456]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4a71      	ldr	r2, [pc, #452]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ae:	f043 0320 	orr.w	r3, r3, #32
 80016b2:	6313      	str	r3, [r2, #48]	; 0x30
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	4b64      	ldr	r3, [pc, #400]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	4a63      	ldr	r2, [pc, #396]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	6313      	str	r3, [r2, #48]	; 0x30
 80016ec:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	4a5c      	ldr	r2, [pc, #368]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001706:	6313      	str	r3, [r2, #48]	; 0x30
 8001708:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b56      	ldr	r3, [pc, #344]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a55      	ldr	r2, [pc, #340]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800175e:	230e      	movs	r3, #14
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4843      	ldr	r0, [pc, #268]	; (8001878 <HAL_LTDC_MspInit+0x214>)
 800176a:	f003 f96f 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800176e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001780:	230e      	movs	r3, #14
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	483c      	ldr	r0, [pc, #240]	; (800187c <HAL_LTDC_MspInit+0x218>)
 800178c:	f003 f95e 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001790:	2303      	movs	r3, #3
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017a0:	2309      	movs	r3, #9
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4835      	ldr	r0, [pc, #212]	; (8001880 <HAL_LTDC_MspInit+0x21c>)
 80017ac:	f003 f94e 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80017b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017c2:	230e      	movs	r3, #14
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	482c      	ldr	r0, [pc, #176]	; (8001880 <HAL_LTDC_MspInit+0x21c>)
 80017ce:	f003 f93d 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80017d2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017e4:	230e      	movs	r3, #14
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4825      	ldr	r0, [pc, #148]	; (8001884 <HAL_LTDC_MspInit+0x220>)
 80017f0:	f003 f92c 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80017f4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001806:	230e      	movs	r3, #14
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	4619      	mov	r1, r3
 8001810:	481d      	ldr	r0, [pc, #116]	; (8001888 <HAL_LTDC_MspInit+0x224>)
 8001812:	f003 f91b 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001816:	2348      	movs	r3, #72	; 0x48
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001826:	230e      	movs	r3, #14
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	4816      	ldr	r0, [pc, #88]	; (800188c <HAL_LTDC_MspInit+0x228>)
 8001832:	f003 f90b 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001836:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001848:	2309      	movs	r3, #9
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <HAL_LTDC_MspInit+0x220>)
 8001854:	f003 f8fa 	bl	8004a4c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2105      	movs	r1, #5
 800185c:	2058      	movs	r0, #88	; 0x58
 800185e:	f002 fb4f 	bl	8003f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001862:	2058      	movs	r0, #88	; 0x58
 8001864:	f002 fb68 	bl	8003f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40016800 	.word	0x40016800
 8001874:	40023800 	.word	0x40023800
 8001878:	40021400 	.word	0x40021400
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40021800 	.word	0x40021800
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00

08001890 <RTOS_AppConfigureTimerForRuntimeStats>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t RTOS_RunTimeCounter;

void RTOS_AppConfigureTimerForRuntimeStats(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  RTOS_RunTimeCounter = 0;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <RTOS_AppConfigureTimerForRuntimeStats+0x14>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <RTOS_AppConfigureTimerForRuntimeStats+0x18>)
 800189c:	f006 fd83 	bl	80083a6 <HAL_TIM_Base_Start_IT>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20021df8 	.word	0x20021df8
 80018a8:	20021fcc 	.word	0x20021fcc

080018ac <RTOS_AppGetRuntimeCounterValueFromISR>:

uint32_t RTOS_AppGetRuntimeCounterValueFromISR(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return RTOS_RunTimeCounter;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <RTOS_AppGetRuntimeCounterValueFromISR+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20021df8 	.word	0x20021df8

080018c4 <__io_putchar>:

/*Redirecting printf to USART1*/
int __io_putchar(int ch)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80018cc:	1d39      	adds	r1, r7, #4
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	2201      	movs	r2, #1
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <__io_putchar+0x20>)
 80018d6:	f007 f996 	bl	8008c06 <HAL_UART_Transmit>
	return ch;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20021efc 	.word	0x20021efc

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ee:	f002 f9e9 	bl	8003cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f2:	f000 f8dd 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f6:	f7ff fc5d 	bl	80011b4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80018fa:	f7ff fae1 	bl	8000ec0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80018fe:	f7ff fb39 	bl	8000f74 <MX_FMC_Init>
  MX_I2C3_Init();
 8001902:	f7ff fd85 	bl	8001410 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001906:	f7ff fe2d 	bl	8001564 <MX_LTDC_Init>
  MX_SPI5_Init();
 800190a:	f000 f975 	bl	8001bf8 <MX_SPI5_Init>
  MX_TIM1_Init();
 800190e:	f000 fe61 	bl	80025d4 <MX_TIM1_Init>
  MX_TIM7_Init();
 8001912:	f000 fefd 	bl	8002710 <MX_TIM7_Init>
  MX_TIM5_Init();
 8001916:	f000 fead 	bl	8002674 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800191a:	f000 ff8b 	bl	8002834 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*LEDs turned on*/
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001924:	4852      	ldr	r0, [pc, #328]	; (8001a70 <main+0x188>)
 8001926:	f003 fb49 	bl	8004fbc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001930:	484f      	ldr	r0, [pc, #316]	; (8001a70 <main+0x188>)
 8001932:	f003 fb43 	bl	8004fbc <HAL_GPIO_WritePin>

 /*LCD screen initialization and test*/
	BSP_LCD_Init();
 8001936:	f001 fb7b 	bl	8003030 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 800193a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800193e:	2000      	movs	r0, #0
 8001940:	f001 fbf8 	bl	8003134 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8001944:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001948:	2001      	movs	r0, #1
 800194a:	f001 fbf3 	bl	8003134 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 800194e:	2001      	movs	r0, #1
 8001950:	f001 fc54 	bl	80031fc <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001954:	f001 fdee 	bl	8003534 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f001 fcc0 	bl	80032e0 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 8001960:	4844      	ldr	r0, [pc, #272]	; (8001a74 <main+0x18c>)
 8001962:	f001 fc8d 	bl	8003280 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001966:	f04f 30ff 	mov.w	r0, #4294967295
 800196a:	f001 fc6f 	bl	800324c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_B_TELECOM);
 800196e:	4842      	ldr	r0, [pc, #264]	; (8001a78 <main+0x190>)
 8001970:	f001 fc54 	bl	800321c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"PROJET", CENTER_MODE);
 8001974:	f001 fc9e 	bl	80032b4 <BSP_LCD_GetFont>
 8001978:	4603      	mov	r3, r0
 800197a:	88d9      	ldrh	r1, [r3, #6]
 800197c:	2301      	movs	r3, #1
 800197e:	4a3f      	ldr	r2, [pc, #252]	; (8001a7c <main+0x194>)
 8001980:	2000      	movs	r0, #0
 8001982:	f001 fd19 	bl	80033b8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"SYSTEMES", CENTER_MODE);
 8001986:	f001 fc95 	bl	80032b4 <BSP_LCD_GetFont>
 800198a:	4603      	mov	r3, r0
 800198c:	88db      	ldrh	r3, [r3, #6]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b299      	uxth	r1, r3
 8001992:	2301      	movs	r3, #1
 8001994:	4a3a      	ldr	r2, [pc, #232]	; (8001a80 <main+0x198>)
 8001996:	2000      	movs	r0, #0
 8001998:	f001 fd0e 	bl	80033b8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"TEMPS REEL", CENTER_MODE);
 800199c:	f001 fc8a 	bl	80032b4 <BSP_LCD_GetFont>
 80019a0:	4603      	mov	r3, r0
 80019a2:	88db      	ldrh	r3, [r3, #6]
 80019a4:	461a      	mov	r2, r3
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	b299      	uxth	r1, r3
 80019ac:	2301      	movs	r3, #1
 80019ae:	4a35      	ldr	r2, [pc, #212]	; (8001a84 <main+0x19c>)
 80019b0:	2000      	movs	r0, #0
 80019b2:	f001 fd01 	bl	80033b8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_G_TELECOM);
 80019b6:	4834      	ldr	r0, [pc, #208]	; (8001a88 <main+0x1a0>)
 80019b8:	f001 fc30 	bl	800321c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"2021/2022", CENTER_MODE);
 80019bc:	f001 fc7a 	bl	80032b4 <BSP_LCD_GetFont>
 80019c0:	4603      	mov	r3, r0
 80019c2:	88db      	ldrh	r3, [r3, #6]
 80019c4:	461a      	mov	r2, r3
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	b299      	uxth	r1, r3
 80019cc:	2301      	movs	r3, #1
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <main+0x1a4>)
 80019d0:	2000      	movs	r0, #0
 80019d2:	f001 fcf1 	bl	80033b8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_R_TELECOM);
 80019d6:	482e      	ldr	r0, [pc, #184]	; (8001a90 <main+0x1a8>)
 80019d8:	f001 fc20 	bl	800321c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"TELECOM STE", CENTER_MODE);
 80019dc:	f001 fc6a 	bl	80032b4 <BSP_LCD_GetFont>
 80019e0:	4603      	mov	r3, r0
 80019e2:	88db      	ldrh	r3, [r3, #6]
 80019e4:	461a      	mov	r2, r3
 80019e6:	00d2      	lsls	r2, r2, #3
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	b299      	uxth	r1, r3
 80019ec:	2301      	movs	r3, #1
 80019ee:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <main+0x1ac>)
 80019f0:	2000      	movs	r0, #0
 80019f2:	f001 fce1 	bl	80033b8 <BSP_LCD_DisplayStringAt>


	HAL_Delay(2000);
 80019f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019fa:	f002 f9a5 	bl	8003d48 <HAL_Delay>
	BSP_LCD_SetFont(&Font12);
 80019fe:	4826      	ldr	r0, [pc, #152]	; (8001a98 <main+0x1b0>)
 8001a00:	f001 fc3e 	bl	8003280 <BSP_LCD_SetFont>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f001 fc6a 	bl	80032e0 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a0c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a10:	f001 fc04 	bl	800321c <BSP_LCD_SetTextColor>

/*LEDs turned off*/
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1a:	4815      	ldr	r0, [pc, #84]	; (8001a70 <main+0x188>)
 8001a1c:	f003 face 	bl	8004fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	4812      	ldr	r0, [pc, #72]	; (8001a70 <main+0x188>)
 8001a28:	f003 fac8 	bl	8004fbc <HAL_GPIO_WritePin>

/*I2C3 bus scan*/
	I2C_Scan(&hi2c3,I2C_add);
 8001a2c:	491b      	ldr	r1, [pc, #108]	; (8001a9c <main+0x1b4>)
 8001a2e:	481c      	ldr	r0, [pc, #112]	; (8001aa0 <main+0x1b8>)
 8001a30:	f00b f86c 	bl	800cb0c <I2C_Scan>

/*Sensors initialization*/
	Init(&hi2c3);
 8001a34:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <main+0x1b8>)
 8001a36:	f00b f892 	bl	800cb5e <Init>
	Init_BMP280(&hi2c3);
 8001a3a:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <main+0x1b8>)
 8001a3c:	f00b f8ea 	bl	800cc14 <Init_BMP280>

/*I2C3 bus scan*/
	I2C_Scan(&hi2c3,I2C_add);
 8001a40:	4916      	ldr	r1, [pc, #88]	; (8001a9c <main+0x1b4>)
 8001a42:	4817      	ldr	r0, [pc, #92]	; (8001aa0 <main+0x1b8>)
 8001a44:	f00b f862 	bl	800cb0c <I2C_Scan>
/* Start scheduler FreeRTOS*/

	TaskHandle_t xHandleTaskInit;

	/* Create the task init. */
	if( xTaskCreate(
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2300      	movs	r3, #0
 8001a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a56:	4913      	ldr	r1, [pc, #76]	; (8001aa4 <main+0x1bc>)
 8001a58:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <main+0x1c0>)
 8001a5a:	f009 f832 	bl	800aac2 <xTaskCreate>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <main+0x182>
	1000,
	NULL,
	4,
	&xHandleTaskInit
	) != pdPASS ){
		printf("Init task created");
 8001a64:	4811      	ldr	r0, [pc, #68]	; (8001aac <main+0x1c4>)
 8001a66:	f00b ff97 	bl	800d998 <iprintf>
	}
	vTaskStartScheduler();
 8001a6a:	f009 fa03 	bl	800ae74 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <main+0x186>
 8001a70:	40021800 	.word	0x40021800
 8001a74:	20000048 	.word	0x20000048
 8001a78:	ff065784 	.word	0xff065784
 8001a7c:	08011178 	.word	0x08011178
 8001a80:	08011180 	.word	0x08011180
 8001a84:	0801118c 	.word	0x0801118c
 8001a88:	ff81b835 	.word	0xff81b835
 8001a8c:	08011198 	.word	0x08011198
 8001a90:	ff813c2f 	.word	0xff813c2f
 8001a94:	080111a4 	.word	0x080111a4
 8001a98:	20000050 	.word	0x20000050
 8001a9c:	20021e08 	.word	0x20021e08
 8001aa0:	20021ce0 	.word	0x20021ce0
 8001aa4:	080111b0 	.word	0x080111b0
 8001aa8:	08002129 	.word	0x08002129
 8001aac:	080111bc 	.word	0x080111bc

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0a0      	sub	sp, #128	; 0x80
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aba:	2230      	movs	r2, #48	; 0x30
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00b faf8 	bl	800d0b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2230      	movs	r2, #48	; 0x30
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00b fae9 	bl	800d0b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <SystemClock_Config+0x10c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a34      	ldr	r2, [pc, #208]	; (8001bbc <SystemClock_Config+0x10c>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <SystemClock_Config+0x10c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a2e      	ldr	r2, [pc, #184]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b22:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b24:	2302      	movs	r3, #2
 8001b26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b32:	23b4      	movs	r3, #180	; 0xb4
 8001b34:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 ff9e 	bl	8006a84 <HAL_RCC_OscConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b4e:	f000 f84b 	bl	8001be8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b52:	f004 ff47 	bl	80069e4 <HAL_PWREx_EnableOverDrive>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001b5c:	f000 f844 	bl	8001be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	230f      	movs	r3, #15
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b64:	2302      	movs	r3, #2
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 f9f0 	bl	8006f64 <HAL_RCC_ClockConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001b8a:	f000 f82d 	bl	8001be8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001b92:	233c      	movs	r3, #60	; 0x3c
 8001b94:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001b96:	2305      	movs	r3, #5
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 fc0b 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001bb0:	f000 f81a 	bl	8001be8 <Error_Handler>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3780      	adds	r7, #128	; 0x80
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bd6:	f002 f897 	bl	8003d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40001000 	.word	0x40001000

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <MX_SPI5_Init+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c08:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c28:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c2c:	2218      	movs	r2, #24
 8001c2e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c44:	220a      	movs	r2, #10
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c4a:	f005 fdf6 	bl	800783a <HAL_SPI_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c54:	f7ff ffc8 	bl	8001be8 <Error_Handler>
  }

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20021e58 	.word	0x20021e58
 8001c60:	40015000 	.word	0x40015000

08001c64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <HAL_SPI_MspInit+0x84>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12c      	bne.n	8001ce0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001cbe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_SPI_MspInit+0x8c>)
 8001cdc:	f002 feb6 	bl	8004a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40015000 	.word	0x40015000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40021400 	.word	0x40021400

08001cf4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_SPI_MspDeInit+0x30>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10a      	bne.n	8001d1c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_SPI_MspDeInit+0x34>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_SPI_MspDeInit+0x34>)
 8001d0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001d12:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_SPI_MspDeInit+0x38>)
 8001d18:	f003 f844 	bl	8004da4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40015000 	.word	0x40015000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40021400 	.word	0x40021400

08001d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_MspInit+0x54>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_MspInit+0x54>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_MspInit+0x54>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_MspInit+0x54>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_MspInit+0x54>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_MspInit+0x54>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	210f      	movs	r1, #15
 8001d72:	f06f 0001 	mvn.w	r0, #1
 8001d76:	f002 f8c3 	bl	8003f00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	2036      	movs	r0, #54	; 0x36
 8001d9e:	f002 f8af 	bl	8003f00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001da2:	2036      	movs	r0, #54	; 0x36
 8001da4:	f002 f8c8 	bl	8003f38 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_InitTick+0xa4>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <HAL_InitTick+0xa4>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6413      	str	r3, [r2, #64]	; 0x40
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_InitTick+0xa4>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc4:	f107 0210 	add.w	r2, r7, #16
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 fac4 	bl	800735c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001dd4:	f005 fa9a 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_InitTick+0xa8>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9b      	lsrs	r3, r3, #18
 8001de8:	3b01      	subs	r3, #1
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_InitTick+0xac>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_InitTick+0xb0>)
 8001df0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_InitTick+0xac>)
 8001df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_InitTick+0xac>)
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_InitTick+0xac>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_InitTick+0xac>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_InitTick+0xac>)
 8001e0e:	f006 fa9f 	bl	8008350 <HAL_TIM_Base_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e18:	4806      	ldr	r0, [pc, #24]	; (8001e34 <HAL_InitTick+0xac>)
 8001e1a:	f006 fac4 	bl	80083a6 <HAL_TIM_Base_Start_IT>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3730      	adds	r7, #48	; 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	431bde83 	.word	0x431bde83
 8001e34:	20021eb0 	.word	0x20021eb0
 8001e38:	40001000 	.word	0x40001000

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <MemManage_Handler+0x4>

08001e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <USART1_IRQHandler+0x10>)
 8001e76:	f006 ff5f 	bl	8008d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20021efc 	.word	0x20021efc

08001e84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM5_IRQHandler+0x10>)
 8001e8a:	f006 fab0 	bl	80083ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20021f4c 	.word	0x20021f4c

08001e98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <TIM6_DAC_IRQHandler+0x10>)
 8001e9e:	f006 faa6 	bl	80083ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20021eb0 	.word	0x20021eb0

08001eac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	RTOS_RunTimeCounter++;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <TIM7_IRQHandler+0x18>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <TIM7_IRQHandler+0x18>)
 8001eb8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <TIM7_IRQHandler+0x1c>)
 8001ebc:	f006 fa97 	bl	80083ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20021df8 	.word	0x20021df8
 8001ec8:	20021fcc 	.word	0x20021fcc

08001ecc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <LTDC_IRQHandler+0x10>)
 8001ed2:	f004 fac5 	bl	8006460 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20021d34 	.word	0x20021d34

08001ee0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA2D_IRQHandler+0x10>)
 8001ee6:	f002 fb72 	bl	80045ce <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20021c6c 	.word	0x20021c6c

08001ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
	return 1;
 8001ef8:	2301      	movs	r3, #1
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_kill>:

int _kill(int pid, int sig)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f0e:	f00b f885 	bl	800d01c <__errno>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2216      	movs	r2, #22
 8001f16:	601a      	str	r2, [r3, #0]
	return -1;
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_exit>:

void _exit (int status)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ffe7 	bl	8001f04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f36:	e7fe      	b.n	8001f36 <_exit+0x12>

08001f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e00a      	b.n	8001f60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f4a:	f3af 8000 	nop.w
 8001f4e:	4601      	mov	r1, r0
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	60ba      	str	r2, [r7, #8]
 8001f56:	b2ca      	uxtb	r2, r1
 8001f58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf0      	blt.n	8001f4a <_read+0x12>
	}

return len;
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e009      	b.n	8001f98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc99 	bl	80018c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbf1      	blt.n	8001f84 <_write+0x12>
	}
	return len;
 8001fa0:	687b      	ldr	r3, [r7, #4]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_close>:

int _close(int file)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
	return -1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd2:	605a      	str	r2, [r3, #4]
	return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_isatty>:

int _isatty(int file)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	return 1;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
	return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f00a ffea 	bl	800d01c <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20030000 	.word	0x20030000
 8002074:	00000400 	.word	0x00000400
 8002078:	20002460 	.word	0x20002460
 800207c:	20022130 	.word	0x20022130

08002080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <SystemInit+0x28>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <SystemInit+0x28>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SystemInit+0x28>)
 8002096:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800209a:	609a      	str	r2, [r3, #8]
#endif
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <vCallbackT1>:
{
	double pitch;
	double roll;
}message_calcul;

void  vCallbackT1(TimerHandle_t xTimer){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(SemB_1a);
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <vCallbackT1+0x20>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	f007 ff9b 	bl	8009ff8 <xQueueGenericSend>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20021ef0 	.word	0x20021ef0

080020d0 <vCallbackT2>:

void  vCallbackT2(TimerHandle_t xTimer){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(SemB_1b);
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <vCallbackT2+0x20>)
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	2300      	movs	r3, #0
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	f007 ff89 	bl	8009ff8 <xQueueGenericSend>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20021ef4 	.word	0x20021ef4

080020f4 <vCallbackT3>:


void vCallbackT3(TimerHandle_t xTimer){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(SemB_3);
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <vCallbackT3+0x2c>)
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	2300      	movs	r3, #0
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	f007 ff77 	bl	8009ff8 <xQueueGenericSend>
	xSemaphoreGive(SemB_4);
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <vCallbackT3+0x30>)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	f007 ff70 	bl	8009ff8 <xQueueGenericSend>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20021f48 	.word	0x20021f48
 8002124:	20021f44 	.word	0x20021f44

08002128 <vTaskInit>:




void vTaskInit(void *pvParameters ){
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af02      	add	r7, sp, #8
 800212e:	6078      	str	r0, [r7, #4]
	//---------------------------------------
	// TIMER - START
	//---------------------------------------

	// Creation des timers
	Timer1 = xTimerCreate("Timer1", pdMS_TO_TICKS(10), pdTRUE, ( void * ) 0, vCallbackT1 );
 8002130:	4b8a      	ldr	r3, [pc, #552]	; (800235c <vTaskInit+0x234>)
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2300      	movs	r3, #0
 8002136:	2201      	movs	r2, #1
 8002138:	210a      	movs	r1, #10
 800213a:	4889      	ldr	r0, [pc, #548]	; (8002360 <vTaskInit+0x238>)
 800213c:	f009 fd76 	bl	800bc2c <xTimerCreate>
 8002140:	6138      	str	r0, [r7, #16]
	Timer2 = xTimerCreate("Timer2", pdMS_TO_TICKS(20), pdTRUE, ( void * ) 0, vCallbackT2 );
 8002142:	4b88      	ldr	r3, [pc, #544]	; (8002364 <vTaskInit+0x23c>)
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	2201      	movs	r2, #1
 800214a:	2114      	movs	r1, #20
 800214c:	4886      	ldr	r0, [pc, #536]	; (8002368 <vTaskInit+0x240>)
 800214e:	f009 fd6d 	bl	800bc2c <xTimerCreate>
 8002152:	60f8      	str	r0, [r7, #12]
	Timer3 = xTimerCreate("Timer3", pdMS_TO_TICKS(100), pdTRUE, ( void * ) 0, vCallbackT3 );
 8002154:	4b85      	ldr	r3, [pc, #532]	; (800236c <vTaskInit+0x244>)
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2300      	movs	r3, #0
 800215a:	2201      	movs	r2, #1
 800215c:	2164      	movs	r1, #100	; 0x64
 800215e:	4884      	ldr	r0, [pc, #528]	; (8002370 <vTaskInit+0x248>)
 8002160:	f009 fd64 	bl	800bc2c <xTimerCreate>
 8002164:	60b8      	str	r0, [r7, #8]
	// SEMAPHORE - START
	//---------------------------------------

	// création des sémaphores binaires

	SemB_1a = xSemaphoreCreateBinary();
 8002166:	2203      	movs	r2, #3
 8002168:	2100      	movs	r1, #0
 800216a:	2001      	movs	r0, #1
 800216c:	f007 fee0 	bl	8009f30 <xQueueGenericCreate>
 8002170:	4603      	mov	r3, r0
 8002172:	4a80      	ldr	r2, [pc, #512]	; (8002374 <vTaskInit+0x24c>)
 8002174:	6013      	str	r3, [r2, #0]
	SemB_1b = xSemaphoreCreateBinary();
 8002176:	2203      	movs	r2, #3
 8002178:	2100      	movs	r1, #0
 800217a:	2001      	movs	r0, #1
 800217c:	f007 fed8 	bl	8009f30 <xQueueGenericCreate>
 8002180:	4603      	mov	r3, r0
 8002182:	4a7d      	ldr	r2, [pc, #500]	; (8002378 <vTaskInit+0x250>)
 8002184:	6013      	str	r3, [r2, #0]
	SemB_3  = xSemaphoreCreateBinary();
 8002186:	2203      	movs	r2, #3
 8002188:	2100      	movs	r1, #0
 800218a:	2001      	movs	r0, #1
 800218c:	f007 fed0 	bl	8009f30 <xQueueGenericCreate>
 8002190:	4603      	mov	r3, r0
 8002192:	4a7a      	ldr	r2, [pc, #488]	; (800237c <vTaskInit+0x254>)
 8002194:	6013      	str	r3, [r2, #0]
	SemB_4  = xSemaphoreCreateBinary();
 8002196:	2203      	movs	r2, #3
 8002198:	2100      	movs	r1, #0
 800219a:	2001      	movs	r0, #1
 800219c:	f007 fec8 	bl	8009f30 <xQueueGenericCreate>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4a77      	ldr	r2, [pc, #476]	; (8002380 <vTaskInit+0x258>)
 80021a4:	6013      	str	r3, [r2, #0]

	// vérification

	if(SemB_1a==NULL || SemB_1b==NULL || SemB_3==NULL || SemB_4==NULL)
 80021a6:	4b73      	ldr	r3, [pc, #460]	; (8002374 <vTaskInit+0x24c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <vTaskInit+0x9e>
 80021ae:	4b72      	ldr	r3, [pc, #456]	; (8002378 <vTaskInit+0x250>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <vTaskInit+0x9e>
 80021b6:	4b71      	ldr	r3, [pc, #452]	; (800237c <vTaskInit+0x254>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <vTaskInit+0x9e>
 80021be:	4b70      	ldr	r3, [pc, #448]	; (8002380 <vTaskInit+0x258>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <vTaskInit+0xaa>
	{
		printf("Erreur création sémaphore  !\r\n");
 80021c6:	486f      	ldr	r0, [pc, #444]	; (8002384 <vTaskInit+0x25c>)
 80021c8:	f00b fc6c 	bl	800daa4 <puts>
		exit(1);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f00a ff2b 	bl	800d028 <exit>
	}

	// Debug

	vQueueAddToRegistry(SemB_1a, "SemB_1a");
 80021d2:	4b68      	ldr	r3, [pc, #416]	; (8002374 <vTaskInit+0x24c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	496c      	ldr	r1, [pc, #432]	; (8002388 <vTaskInit+0x260>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f008 fbb7 	bl	800a94c <vQueueAddToRegistry>
	vQueueAddToRegistry(SemB_1b, "SemB_1b");
 80021de:	4b66      	ldr	r3, [pc, #408]	; (8002378 <vTaskInit+0x250>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	496a      	ldr	r1, [pc, #424]	; (800238c <vTaskInit+0x264>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f008 fbb1 	bl	800a94c <vQueueAddToRegistry>
	vQueueAddToRegistry(SemB_3, "SemB_3");
 80021ea:	4b64      	ldr	r3, [pc, #400]	; (800237c <vTaskInit+0x254>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4968      	ldr	r1, [pc, #416]	; (8002390 <vTaskInit+0x268>)
 80021f0:	4618      	mov	r0, r3
 80021f2:	f008 fbab 	bl	800a94c <vQueueAddToRegistry>
	vQueueAddToRegistry(SemB_4, "SemB_4");
 80021f6:	4b62      	ldr	r3, [pc, #392]	; (8002380 <vTaskInit+0x258>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4966      	ldr	r1, [pc, #408]	; (8002394 <vTaskInit+0x26c>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f008 fba5 	bl	800a94c <vQueueAddToRegistry>

	//---------------------------------------
	// TACHE - START
	//---------------------------------------

	xTaskCreate(vTask1a, "task 1a", 1000, NULL, 3, NULL);
 8002202:	2300      	movs	r3, #0
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	2303      	movs	r3, #3
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2300      	movs	r3, #0
 800220c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002210:	4961      	ldr	r1, [pc, #388]	; (8002398 <vTaskInit+0x270>)
 8002212:	4862      	ldr	r0, [pc, #392]	; (800239c <vTaskInit+0x274>)
 8002214:	f008 fc55 	bl	800aac2 <xTaskCreate>
	xTaskCreate(vTask1b, "task 1b", 1000, NULL, 3, NULL);
 8002218:	2300      	movs	r3, #0
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2303      	movs	r3, #3
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2300      	movs	r3, #0
 8002222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002226:	495e      	ldr	r1, [pc, #376]	; (80023a0 <vTaskInit+0x278>)
 8002228:	485e      	ldr	r0, [pc, #376]	; (80023a4 <vTaskInit+0x27c>)
 800222a:	f008 fc4a 	bl	800aac2 <xTaskCreate>
	xTaskCreate(vTask2a, "task 2a", 1000, NULL, 2, NULL);
 800222e:	2300      	movs	r3, #0
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	2302      	movs	r3, #2
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2300      	movs	r3, #0
 8002238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800223c:	495a      	ldr	r1, [pc, #360]	; (80023a8 <vTaskInit+0x280>)
 800223e:	485b      	ldr	r0, [pc, #364]	; (80023ac <vTaskInit+0x284>)
 8002240:	f008 fc3f 	bl	800aac2 <xTaskCreate>
	xTaskCreate(vTask2b, "task 2b", 1000, NULL, 0, NULL);
 8002244:	2300      	movs	r3, #0
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	2300      	movs	r3, #0
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2300      	movs	r3, #0
 800224e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002252:	4957      	ldr	r1, [pc, #348]	; (80023b0 <vTaskInit+0x288>)
 8002254:	4857      	ldr	r0, [pc, #348]	; (80023b4 <vTaskInit+0x28c>)
 8002256:	f008 fc34 	bl	800aac2 <xTaskCreate>
	xTaskCreate(vTask3, "task 3", 1000, NULL, 1, NULL);
 800225a:	2300      	movs	r3, #0
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	2301      	movs	r3, #1
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2300      	movs	r3, #0
 8002264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002268:	4953      	ldr	r1, [pc, #332]	; (80023b8 <vTaskInit+0x290>)
 800226a:	4854      	ldr	r0, [pc, #336]	; (80023bc <vTaskInit+0x294>)
 800226c:	f008 fc29 	bl	800aac2 <xTaskCreate>
	xTaskCreate(vTask4, "task 4", 1000, NULL, 0, NULL);
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2300      	movs	r3, #0
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2300      	movs	r3, #0
 800227a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800227e:	4950      	ldr	r1, [pc, #320]	; (80023c0 <vTaskInit+0x298>)
 8002280:	4850      	ldr	r0, [pc, #320]	; (80023c4 <vTaskInit+0x29c>)
 8002282:	f008 fc1e 	bl	800aac2 <xTaskCreate>
	// TACHE - END
	//---------------------------------------

	// Creation Queue

	xQueueT1a_T2a = xQueueCreate( 10, sizeof( message_capteur ) );
 8002286:	2200      	movs	r2, #0
 8002288:	2130      	movs	r1, #48	; 0x30
 800228a:	200a      	movs	r0, #10
 800228c:	f007 fe50 	bl	8009f30 <xQueueGenericCreate>
 8002290:	4603      	mov	r3, r0
 8002292:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <vTaskInit+0x2a0>)
 8002294:	6013      	str	r3, [r2, #0]

	if( xQueueT1a_T2a == NULL )
 8002296:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <vTaskInit+0x2a0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <vTaskInit+0x17c>
	{
	  printf("Erreur creation queue\n\r");
 800229e:	484b      	ldr	r0, [pc, #300]	; (80023cc <vTaskInit+0x2a4>)
 80022a0:	f00b fb7a 	bl	800d998 <iprintf>
	}

	xQueueT2a_T3 = xQueueCreate( 10, sizeof( message_calcul ) );
 80022a4:	2200      	movs	r2, #0
 80022a6:	2110      	movs	r1, #16
 80022a8:	200a      	movs	r0, #10
 80022aa:	f007 fe41 	bl	8009f30 <xQueueGenericCreate>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4a47      	ldr	r2, [pc, #284]	; (80023d0 <vTaskInit+0x2a8>)
 80022b2:	6013      	str	r3, [r2, #0]

	if( xQueueT1a_T2a == NULL )
 80022b4:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <vTaskInit+0x2a0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <vTaskInit+0x19a>
	{
	  printf("Erreur creation queue\n\r");
 80022bc:	4843      	ldr	r0, [pc, #268]	; (80023cc <vTaskInit+0x2a4>)
 80022be:	f00b fb6b 	bl	800d998 <iprintf>
	}

	xQueueT2a_T4 = xQueueCreate( 10, sizeof( message_calcul ) );
 80022c2:	2200      	movs	r2, #0
 80022c4:	2110      	movs	r1, #16
 80022c6:	200a      	movs	r0, #10
 80022c8:	f007 fe32 	bl	8009f30 <xQueueGenericCreate>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4a41      	ldr	r2, [pc, #260]	; (80023d4 <vTaskInit+0x2ac>)
 80022d0:	6013      	str	r3, [r2, #0]

	if( xQueueT1a_T2a == NULL )
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <vTaskInit+0x2a0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <vTaskInit+0x1b8>
	{
	  printf("Erreur creation queue\n\r");
 80022da:	483c      	ldr	r0, [pc, #240]	; (80023cc <vTaskInit+0x2a4>)
 80022dc:	f00b fb5c 	bl	800d998 <iprintf>
	}


	// Demarrage des timers
	if( ( Timer1 != NULL ) && ( Timer2 != NULL ) && ( Timer3 != NULL ) ){
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d026      	beq.n	8002334 <vTaskInit+0x20c>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <vTaskInit+0x20c>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d020      	beq.n	8002334 <vTaskInit+0x20c>
		xTimer1Started = xTimerStart( Timer1, 0 );
 80022f2:	f008 fed1 	bl	800b098 <xTaskGetTickCount>
 80022f6:	4602      	mov	r2, r0
 80022f8:	2300      	movs	r3, #0
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2300      	movs	r3, #0
 80022fe:	2101      	movs	r1, #1
 8002300:	6938      	ldr	r0, [r7, #16]
 8002302:	f009 fcef 	bl	800bce4 <xTimerGenericCommand>
 8002306:	61f8      	str	r0, [r7, #28]
		xTimer2Started = xTimerStart( Timer3, 0 );
 8002308:	f008 fec6 	bl	800b098 <xTaskGetTickCount>
 800230c:	4602      	mov	r2, r0
 800230e:	2300      	movs	r3, #0
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2300      	movs	r3, #0
 8002314:	2101      	movs	r1, #1
 8002316:	68b8      	ldr	r0, [r7, #8]
 8002318:	f009 fce4 	bl	800bce4 <xTimerGenericCommand>
 800231c:	61b8      	str	r0, [r7, #24]
		xTimer3Started = xTimerStart( Timer3, 0 );
 800231e:	f008 febb 	bl	800b098 <xTaskGetTickCount>
 8002322:	4602      	mov	r2, r0
 8002324:	2300      	movs	r3, #0
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2300      	movs	r3, #0
 800232a:	2101      	movs	r1, #1
 800232c:	68b8      	ldr	r0, [r7, #8]
 800232e:	f009 fcd9 	bl	800bce4 <xTimerGenericCommand>
 8002332:	6178      	str	r0, [r7, #20]
	}

	if( ( xTimer1Started == pdPASS ) && ( xTimer2Started == pdPASS ) && ( xTimer3Started == pdPASS ) )
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d108      	bne.n	800234c <vTaskInit+0x224>
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <vTaskInit+0x224>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <vTaskInit+0x224>
	 {
		printf("Timers running\n\r");
 8002346:	4824      	ldr	r0, [pc, #144]	; (80023d8 <vTaskInit+0x2b0>)
 8002348:	f00b fb26 	bl	800d998 <iprintf>
	 }
	// Destruction de la tache
	vTaskDelete(NULL);
 800234c:	2000      	movs	r0, #0
 800234e:	f008 fd01 	bl	800ad54 <vTaskDelete>
}
 8002352:	bf00      	nop
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	080020ad 	.word	0x080020ad
 8002360:	080111d0 	.word	0x080111d0
 8002364:	080020d1 	.word	0x080020d1
 8002368:	080111d8 	.word	0x080111d8
 800236c:	080020f5 	.word	0x080020f5
 8002370:	080111e0 	.word	0x080111e0
 8002374:	20021ef0 	.word	0x20021ef0
 8002378:	20021ef4 	.word	0x20021ef4
 800237c:	20021f48 	.word	0x20021f48
 8002380:	20021f44 	.word	0x20021f44
 8002384:	080111e8 	.word	0x080111e8
 8002388:	08011208 	.word	0x08011208
 800238c:	08011210 	.word	0x08011210
 8002390:	08011218 	.word	0x08011218
 8002394:	08011220 	.word	0x08011220
 8002398:	08011228 	.word	0x08011228
 800239c:	080023dd 	.word	0x080023dd
 80023a0:	08011230 	.word	0x08011230
 80023a4:	08002449 	.word	0x08002449
 80023a8:	08011238 	.word	0x08011238
 80023ac:	08002471 	.word	0x08002471
 80023b0:	08011240 	.word	0x08011240
 80023b4:	0800251d 	.word	0x0800251d
 80023b8:	08011248 	.word	0x08011248
 80023bc:	08002529 	.word	0x08002529
 80023c0:	08011250 	.word	0x08011250
 80023c4:	08002589 	.word	0x08002589
 80023c8:	20021f3c 	.word	0x20021f3c
 80023cc:	08011258 	.word	0x08011258
 80023d0:	20021f40 	.word	0x20021f40
 80023d4:	20021ef8 	.word	0x20021ef8
 80023d8:	08011270 	.word	0x08011270

080023dc <vTask1a>:


void vTask1a(void *pvParameters ){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08e      	sub	sp, #56	; 0x38
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	message_capteur message;

	while(1)
	{
		printf("Tache1a\n\r");
 80023e4:	4813      	ldr	r0, [pc, #76]	; (8002434 <vTask1a+0x58>)
 80023e6:	f00b fad7 	bl	800d998 <iprintf>
		xSemaphoreTake(SemB_1a, portMAX_DELAY);
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <vTask1a+0x5c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f04f 31ff 	mov.w	r1, #4294967295
 80023f2:	4618      	mov	r0, r3
 80023f4:	f008 f876 	bl	800a4e4 <xQueueSemaphoreTake>

		// Section critique ( à faire )

		MeasureA(&hi2c3,message.acc);
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	4619      	mov	r1, r3
 80023fe:	480f      	ldr	r0, [pc, #60]	; (800243c <vTask1a+0x60>)
 8002400:	f00a fc3e 	bl	800cc80 <MeasureA>
		MeasureG(&hi2c3,message.gyro);
 8002404:	f107 0308 	add.w	r3, r7, #8
 8002408:	3318      	adds	r3, #24
 800240a:	4619      	mov	r1, r3
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <vTask1a+0x60>)
 800240e:	f00a fcc7 	bl	800cda0 <MeasureG>

	    if( xQueueSend( xQueueT1a_T2a, ( void * ) &message, portMAX_DELAY) != pdPASS )
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <vTask1a+0x64>)
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	f107 0108 	add.w	r1, r7, #8
 800241a:	2300      	movs	r3, #0
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	f007 fdea 	bl	8009ff8 <xQueueGenericSend>
 8002424:	4603      	mov	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d0dc      	beq.n	80023e4 <vTask1a+0x8>
	    {
	        printf("Erreur envoi data\n\r");
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <vTask1a+0x68>)
 800242c:	f00b fab4 	bl	800d998 <iprintf>
		printf("Tache1a\n\r");
 8002430:	e7d8      	b.n	80023e4 <vTask1a+0x8>
 8002432:	bf00      	nop
 8002434:	08011284 	.word	0x08011284
 8002438:	20021ef0 	.word	0x20021ef0
 800243c:	20021ce0 	.word	0x20021ce0
 8002440:	20021f3c 	.word	0x20021f3c
 8002444:	08011290 	.word	0x08011290

08002448 <vTask1b>:
	    }
	  }
}

void vTask1b(void *pvParameters ){
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("Tache1b\n\r");
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <vTask1b+0x20>)
 8002452:	f00b faa1 	bl	800d998 <iprintf>
		xSemaphoreTake(SemB_1b, portMAX_DELAY);
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <vTask1b+0x24>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f04f 31ff 	mov.w	r1, #4294967295
 800245e:	4618      	mov	r0, r3
 8002460:	f008 f840 	bl	800a4e4 <xQueueSemaphoreTake>
		printf("Tache1b\n\r");
 8002464:	e7f4      	b.n	8002450 <vTask1b+0x8>
 8002466:	bf00      	nop
 8002468:	080112a4 	.word	0x080112a4
 800246c:	20021ef4 	.word	0x20021ef4

08002470 <vTask2a>:

	}
}

void vTask2a(void *pvParameters ){
 8002470:	b580      	push	{r7, lr}
 8002472:	b092      	sub	sp, #72	; 0x48
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	message_capteur message;
	message_calcul messageC;

	while(1)
	{
		printf("Tache2a\n\r");
 8002478:	4821      	ldr	r0, [pc, #132]	; (8002500 <vTask2a+0x90>)
 800247a:	f00b fa8d 	bl	800d998 <iprintf>
		if( xQueueReceive( xQueueT1a_T2a, ( void * ) &message, portMAX_DELAY ) != pdPASS )
 800247e:	4b21      	ldr	r3, [pc, #132]	; (8002504 <vTask2a+0x94>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f107 0118 	add.w	r1, r7, #24
 8002486:	f04f 32ff 	mov.w	r2, #4294967295
 800248a:	4618      	mov	r0, r3
 800248c:	f007 ff4a 	bl	800a324 <xQueueReceive>
 8002490:	4603      	mov	r3, r0
 8002492:	2b01      	cmp	r3, #1
 8002494:	d002      	beq.n	800249c <vTask2a+0x2c>
		{
			printf("Erreur recepetion data\n\r");
 8002496:	481c      	ldr	r0, [pc, #112]	; (8002508 <vTask2a+0x98>)
 8002498:	f00b fa7e 	bl	800d998 <iprintf>
		}


		   Pitch(&hi2c3, message.acc, &messageC.pitch);
 800249c:	f107 0208 	add.w	r2, r7, #8
 80024a0:	f107 0318 	add.w	r3, r7, #24
 80024a4:	4619      	mov	r1, r3
 80024a6:	4819      	ldr	r0, [pc, #100]	; (800250c <vTask2a+0x9c>)
 80024a8:	f00a fd55 	bl	800cf56 <Pitch>
		   Roll(&hi2c3, message.acc, &messageC.roll);
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	f103 0208 	add.w	r2, r3, #8
 80024b4:	f107 0318 	add.w	r3, r7, #24
 80024b8:	4619      	mov	r1, r3
 80024ba:	4814      	ldr	r0, [pc, #80]	; (800250c <vTask2a+0x9c>)
 80024bc:	f00a fd28 	bl	800cf10 <Roll>

		    if( xQueueSend( xQueueT2a_T3, ( void * ) &messageC, portMAX_DELAY) != pdPASS )
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <vTask2a+0xa0>)
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	f107 0108 	add.w	r1, r7, #8
 80024c8:	2300      	movs	r3, #0
 80024ca:	f04f 32ff 	mov.w	r2, #4294967295
 80024ce:	f007 fd93 	bl	8009ff8 <xQueueGenericSend>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d002      	beq.n	80024de <vTask2a+0x6e>
		    {
		        printf("Erreur envoi data\n\r");
 80024d8:	480e      	ldr	r0, [pc, #56]	; (8002514 <vTask2a+0xa4>)
 80024da:	f00b fa5d 	bl	800d998 <iprintf>
		    }

		    if( xQueueSend( xQueueT2a_T4, ( void * ) &messageC, portMAX_DELAY) != pdPASS )
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <vTask2a+0xa8>)
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	f107 0108 	add.w	r1, r7, #8
 80024e6:	2300      	movs	r3, #0
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	f007 fd84 	bl	8009ff8 <xQueueGenericSend>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d0c0      	beq.n	8002478 <vTask2a+0x8>
		    {
		        printf("Erreur envoi data\n\r");
 80024f6:	4807      	ldr	r0, [pc, #28]	; (8002514 <vTask2a+0xa4>)
 80024f8:	f00b fa4e 	bl	800d998 <iprintf>
		printf("Tache2a\n\r");
 80024fc:	e7bc      	b.n	8002478 <vTask2a+0x8>
 80024fe:	bf00      	nop
 8002500:	080112b0 	.word	0x080112b0
 8002504:	20021f3c 	.word	0x20021f3c
 8002508:	080112bc 	.word	0x080112bc
 800250c:	20021ce0 	.word	0x20021ce0
 8002510:	20021f40 	.word	0x20021f40
 8002514:	08011290 	.word	0x08011290
 8002518:	20021ef8 	.word	0x20021ef8

0800251c <vTask2b>:


	}
}

void vTask2b(void *pvParameters ){
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	while(1)
 8002524:	e7fe      	b.n	8002524 <vTask2b+0x8>
	...

08002528 <vTask3>:
	{

	}
}

void vTask3(void *pvParameters ){
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	message_calcul message;
	while(1)
	{
		xSemaphoreTake(SemB_3, portMAX_DELAY);
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <vTask3+0x4c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	4618      	mov	r0, r3
 800253a:	f007 ffd3 	bl	800a4e4 <xQueueSemaphoreTake>
		if( xQueueReceive( xQueueT2a_T3, ( void * ) &message, portMAX_DELAY ) != pdPASS )
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <vTask3+0x50>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f107 0108 	add.w	r1, r7, #8
 8002546:	f04f 32ff 	mov.w	r2, #4294967295
 800254a:	4618      	mov	r0, r3
 800254c:	f007 feea 	bl	800a324 <xQueueReceive>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	d002      	beq.n	800255c <vTask3+0x34>
		{
			printf("Erreur recepetion data RS232\n\r");
 8002556:	4809      	ldr	r0, [pc, #36]	; (800257c <vTask3+0x54>)
 8002558:	f00b fa1e 	bl	800d998 <iprintf>
		}

		printf("pitch=%2.2f deg/s\n\r",message.roll);
 800255c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002560:	4807      	ldr	r0, [pc, #28]	; (8002580 <vTask3+0x58>)
 8002562:	f00b fa19 	bl	800d998 <iprintf>
		printf("roll=%2.2f deg/s\n\r",message.pitch);
 8002566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800256a:	4806      	ldr	r0, [pc, #24]	; (8002584 <vTask3+0x5c>)
 800256c:	f00b fa14 	bl	800d998 <iprintf>
		xSemaphoreTake(SemB_3, portMAX_DELAY);
 8002570:	e7de      	b.n	8002530 <vTask3+0x8>
 8002572:	bf00      	nop
 8002574:	20021f48 	.word	0x20021f48
 8002578:	20021f40 	.word	0x20021f40
 800257c:	080112d8 	.word	0x080112d8
 8002580:	080112f8 	.word	0x080112f8
 8002584:	0801130c 	.word	0x0801130c

08002588 <vTask4>:


	}
}

void vTask4(void *pvParameters ){
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	message_calcul message;
	while(1)
	{
		printf("tache4\n\r");
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <vTask4+0x3c>)
 8002592:	f00b fa01 	bl	800d998 <iprintf>
		xSemaphoreTake(SemB_4, portMAX_DELAY);
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <vTask4+0x40>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f04f 31ff 	mov.w	r1, #4294967295
 800259e:	4618      	mov	r0, r3
 80025a0:	f007 ffa0 	bl	800a4e4 <xQueueSemaphoreTake>
		if( xQueueReceive( xQueueT2a_T4, ( void * ) &message, portMAX_DELAY ) != pdPASS )
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <vTask4+0x44>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f107 0108 	add.w	r1, r7, #8
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	4618      	mov	r0, r3
 80025b2:	f007 feb7 	bl	800a324 <xQueueReceive>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d0e9      	beq.n	8002590 <vTask4+0x8>
		{
			printf("Erreur recepetion data RS232\n\r");
 80025bc:	4804      	ldr	r0, [pc, #16]	; (80025d0 <vTask4+0x48>)
 80025be:	f00b f9eb 	bl	800d998 <iprintf>
		printf("tache4\n\r");
 80025c2:	e7e5      	b.n	8002590 <vTask4+0x8>
 80025c4:	08011320 	.word	0x08011320
 80025c8:	20021f44 	.word	0x20021f44
 80025cc:	20021ef8 	.word	0x20021ef8
 80025d0:	080112d8 	.word	0x080112d8

080025d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e8:	463b      	mov	r3, r7
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	; (800266c <MX_TIM1_Init+0x98>)
 80025f2:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <MX_TIM1_Init+0x9c>)
 80025f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <MX_TIM1_Init+0x98>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <MX_TIM1_Init+0x98>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <MX_TIM1_Init+0x98>)
 8002604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002608:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <MX_TIM1_Init+0x98>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <MX_TIM1_Init+0x98>)
 8002612:	2200      	movs	r2, #0
 8002614:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <MX_TIM1_Init+0x98>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800261c:	4813      	ldr	r0, [pc, #76]	; (800266c <MX_TIM1_Init+0x98>)
 800261e:	f005 fe97 	bl	8008350 <HAL_TIM_Base_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002628:	f7ff fade 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	4619      	mov	r1, r3
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <MX_TIM1_Init+0x98>)
 800263a:	f005 ffe0 	bl	80085fe <HAL_TIM_ConfigClockSource>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002644:	f7ff fad0 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002650:	463b      	mov	r3, r7
 8002652:	4619      	mov	r1, r3
 8002654:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_TIM1_Init+0x98>)
 8002656:	f006 f9f9 	bl	8008a4c <HAL_TIMEx_MasterConfigSynchronization>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002660:	f7ff fac2 	bl	8001be8 <Error_Handler>
  }

}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20021f8c 	.word	0x20021f8c
 8002670:	40010000 	.word	0x40010000

08002674 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002688:	463b      	mov	r3, r7
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <MX_TIM5_Init+0x94>)
 8002692:	4a1e      	ldr	r2, [pc, #120]	; (800270c <MX_TIM5_Init+0x98>)
 8002694:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <MX_TIM5_Init+0x94>)
 8002698:	2200      	movs	r2, #0
 800269a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <MX_TIM5_Init+0x94>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80026a2:	4b19      	ldr	r3, [pc, #100]	; (8002708 <MX_TIM5_Init+0x94>)
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <MX_TIM5_Init+0x94>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <MX_TIM5_Init+0x94>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026b6:	4814      	ldr	r0, [pc, #80]	; (8002708 <MX_TIM5_Init+0x94>)
 80026b8:	f005 fe4a 	bl	8008350 <HAL_TIM_Base_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80026c2:	f7ff fa91 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	4619      	mov	r1, r3
 80026d2:	480d      	ldr	r0, [pc, #52]	; (8002708 <MX_TIM5_Init+0x94>)
 80026d4:	f005 ff93 	bl	80085fe <HAL_TIM_ConfigClockSource>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80026de:	f7ff fa83 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026ea:	463b      	mov	r3, r7
 80026ec:	4619      	mov	r1, r3
 80026ee:	4806      	ldr	r0, [pc, #24]	; (8002708 <MX_TIM5_Init+0x94>)
 80026f0:	f006 f9ac 	bl	8008a4c <HAL_TIMEx_MasterConfigSynchronization>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80026fa:	f7ff fa75 	bl	8001be8 <Error_Handler>
  }

}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20021f4c 	.word	0x20021f4c
 800270c:	40000c00 	.word	0x40000c00

08002710 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002716:	463b      	mov	r3, r7
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <MX_TIM7_Init+0x64>)
 8002720:	4a15      	ldr	r2, [pc, #84]	; (8002778 <MX_TIM7_Init+0x68>)
 8002722:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <MX_TIM7_Init+0x64>)
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <MX_TIM7_Init+0x64>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <MX_TIM7_Init+0x64>)
 8002732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002736:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_TIM7_Init+0x64>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800273e:	480d      	ldr	r0, [pc, #52]	; (8002774 <MX_TIM7_Init+0x64>)
 8002740:	f005 fe06 	bl	8008350 <HAL_TIM_Base_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800274a:	f7ff fa4d 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002756:	463b      	mov	r3, r7
 8002758:	4619      	mov	r1, r3
 800275a:	4806      	ldr	r0, [pc, #24]	; (8002774 <MX_TIM7_Init+0x64>)
 800275c:	f006 f976 	bl	8008a4c <HAL_TIMEx_MasterConfigSynchronization>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002766:	f7ff fa3f 	bl	8001be8 <Error_Handler>
  }

}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20021fcc 	.word	0x20021fcc
 8002778:	40001400 	.word	0x40001400

0800277c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a26      	ldr	r2, [pc, #152]	; (8002824 <HAL_TIM_Base_MspInit+0xa8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	4b25      	ldr	r3, [pc, #148]	; (8002828 <HAL_TIM_Base_MspInit+0xac>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a24      	ldr	r2, [pc, #144]	; (8002828 <HAL_TIM_Base_MspInit+0xac>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_TIM_Base_MspInit+0xac>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80027aa:	e036      	b.n	800281a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_TIM_Base_MspInit+0xb0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d116      	bne.n	80027e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_TIM_Base_MspInit+0xac>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a1a      	ldr	r2, [pc, #104]	; (8002828 <HAL_TIM_Base_MspInit+0xac>)
 80027c0:	f043 0308 	orr.w	r3, r3, #8
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_TIM_Base_MspInit+0xac>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2105      	movs	r1, #5
 80027d6:	2032      	movs	r0, #50	; 0x32
 80027d8:	f001 fb92 	bl	8003f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80027dc:	2032      	movs	r0, #50	; 0x32
 80027de:	f001 fbab 	bl	8003f38 <HAL_NVIC_EnableIRQ>
}
 80027e2:	e01a      	b.n	800281a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a11      	ldr	r2, [pc, #68]	; (8002830 <HAL_TIM_Base_MspInit+0xb4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d115      	bne.n	800281a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_TIM_Base_MspInit+0xac>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <HAL_TIM_Base_MspInit+0xac>)
 80027f8:	f043 0320 	orr.w	r3, r3, #32
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_TIM_Base_MspInit+0xac>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2105      	movs	r1, #5
 800280e:	2037      	movs	r0, #55	; 0x37
 8002810:	f001 fb76 	bl	8003f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002814:	2037      	movs	r0, #55	; 0x37
 8002816:	f001 fb8f 	bl	8003f38 <HAL_NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40010000 	.word	0x40010000
 8002828:	40023800 	.word	0x40023800
 800282c:	40000c00 	.word	0x40000c00
 8002830:	40001400 	.word	0x40001400

08002834 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <MX_USART1_UART_Init+0x50>)
 800283c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800285a:	220c      	movs	r2, #12
 800285c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800286c:	f006 f97e 	bl	8008b6c <HAL_UART_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002876:	f7ff f9b7 	bl	8001be8 <Error_Handler>
  }

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20021efc 	.word	0x20021efc
 8002884:	40011000 	.word	0x40011000

08002888 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_UART_MspInit+0x94>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d134      	bne.n	8002914 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <HAL_UART_MspInit+0x98>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <HAL_UART_MspInit+0x98>)
 80028b4:	f043 0310 	orr.w	r3, r3, #16
 80028b8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_UART_MspInit+0x98>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <HAL_UART_MspInit+0x98>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a14      	ldr	r2, [pc, #80]	; (8002920 <HAL_UART_MspInit+0x98>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_UART_MspInit+0x98>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80028e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028f4:	2307      	movs	r3, #7
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4619      	mov	r1, r3
 80028fe:	4809      	ldr	r0, [pc, #36]	; (8002924 <HAL_UART_MspInit+0x9c>)
 8002900:	f002 f8a4 	bl	8004a4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2105      	movs	r1, #5
 8002908:	2025      	movs	r0, #37	; 0x25
 800290a:	f001 faf9 	bl	8003f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800290e:	2025      	movs	r0, #37	; 0x25
 8002910:	f001 fb12 	bl	8003f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002914:	bf00      	nop
 8002916:	3728      	adds	r7, #40	; 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40011000 	.word	0x40011000
 8002920:	40023800 	.word	0x40023800
 8002924:	40020000 	.word	0x40020000

08002928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002960 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800292c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800292e:	e003      	b.n	8002938 <LoopCopyDataInit>

08002930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002936:	3104      	adds	r1, #4

08002938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002938:	480b      	ldr	r0, [pc, #44]	; (8002968 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800293c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800293e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002940:	d3f6      	bcc.n	8002930 <CopyDataInit>
  ldr  r2, =_sbss
 8002942:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002944:	e002      	b.n	800294c <LoopFillZerobss>

08002946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002946:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002948:	f842 3b04 	str.w	r3, [r2], #4

0800294c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800294e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002950:	d3f9      	bcc.n	8002946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002952:	f7ff fb95 	bl	8002080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002956:	f00a fb7b 	bl	800d050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295a:	f7fe ffc5 	bl	80018e8 <main>
  bx  lr    
 800295e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002960:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002964:	080144e8 	.word	0x080144e8
  ldr  r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800296c:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8002970:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8002974:	2002212c 	.word	0x2002212c

08002978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002978:	e7fe      	b.n	8002978 <ADC_IRQHandler>

0800297a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800297e:	f000 fa5d 	bl	8002e3c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002982:	20ca      	movs	r0, #202	; 0xca
 8002984:	f000 f95d 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002988:	20c3      	movs	r0, #195	; 0xc3
 800298a:	f000 f967 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800298e:	2008      	movs	r0, #8
 8002990:	f000 f964 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002994:	2050      	movs	r0, #80	; 0x50
 8002996:	f000 f961 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800299a:	20cf      	movs	r0, #207	; 0xcf
 800299c:	f000 f951 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f000 f95b 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80029a6:	20c1      	movs	r0, #193	; 0xc1
 80029a8:	f000 f958 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80029ac:	2030      	movs	r0, #48	; 0x30
 80029ae:	f000 f955 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80029b2:	20ed      	movs	r0, #237	; 0xed
 80029b4:	f000 f945 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80029b8:	2064      	movs	r0, #100	; 0x64
 80029ba:	f000 f94f 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80029be:	2003      	movs	r0, #3
 80029c0:	f000 f94c 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80029c4:	2012      	movs	r0, #18
 80029c6:	f000 f949 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80029ca:	2081      	movs	r0, #129	; 0x81
 80029cc:	f000 f946 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80029d0:	20e8      	movs	r0, #232	; 0xe8
 80029d2:	f000 f936 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80029d6:	2085      	movs	r0, #133	; 0x85
 80029d8:	f000 f940 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80029dc:	2000      	movs	r0, #0
 80029de:	f000 f93d 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80029e2:	2078      	movs	r0, #120	; 0x78
 80029e4:	f000 f93a 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80029e8:	20cb      	movs	r0, #203	; 0xcb
 80029ea:	f000 f92a 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80029ee:	2039      	movs	r0, #57	; 0x39
 80029f0:	f000 f934 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80029f4:	202c      	movs	r0, #44	; 0x2c
 80029f6:	f000 f931 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f000 f92e 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002a00:	2034      	movs	r0, #52	; 0x34
 8002a02:	f000 f92b 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002a06:	2002      	movs	r0, #2
 8002a08:	f000 f928 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002a0c:	20f7      	movs	r0, #247	; 0xf7
 8002a0e:	f000 f918 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002a12:	2020      	movs	r0, #32
 8002a14:	f000 f922 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002a18:	20ea      	movs	r0, #234	; 0xea
 8002a1a:	f000 f912 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f000 f91c 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f000 f919 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002a2a:	20b1      	movs	r0, #177	; 0xb1
 8002a2c:	f000 f909 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f000 f913 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002a36:	201b      	movs	r0, #27
 8002a38:	f000 f910 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002a3c:	20b6      	movs	r0, #182	; 0xb6
 8002a3e:	f000 f900 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002a42:	200a      	movs	r0, #10
 8002a44:	f000 f90a 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002a48:	20a2      	movs	r0, #162	; 0xa2
 8002a4a:	f000 f907 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002a4e:	20c0      	movs	r0, #192	; 0xc0
 8002a50:	f000 f8f7 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002a54:	2010      	movs	r0, #16
 8002a56:	f000 f901 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002a5a:	20c1      	movs	r0, #193	; 0xc1
 8002a5c:	f000 f8f1 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002a60:	2010      	movs	r0, #16
 8002a62:	f000 f8fb 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002a66:	20c5      	movs	r0, #197	; 0xc5
 8002a68:	f000 f8eb 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002a6c:	2045      	movs	r0, #69	; 0x45
 8002a6e:	f000 f8f5 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002a72:	2015      	movs	r0, #21
 8002a74:	f000 f8f2 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002a78:	20c7      	movs	r0, #199	; 0xc7
 8002a7a:	f000 f8e2 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002a7e:	2090      	movs	r0, #144	; 0x90
 8002a80:	f000 f8ec 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002a84:	2036      	movs	r0, #54	; 0x36
 8002a86:	f000 f8dc 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002a8a:	20c8      	movs	r0, #200	; 0xc8
 8002a8c:	f000 f8e6 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002a90:	20f2      	movs	r0, #242	; 0xf2
 8002a92:	f000 f8d6 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f000 f8e0 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002a9c:	20b0      	movs	r0, #176	; 0xb0
 8002a9e:	f000 f8d0 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002aa2:	20c2      	movs	r0, #194	; 0xc2
 8002aa4:	f000 f8da 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002aa8:	20b6      	movs	r0, #182	; 0xb6
 8002aaa:	f000 f8ca 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002aae:	200a      	movs	r0, #10
 8002ab0:	f000 f8d4 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002ab4:	20a7      	movs	r0, #167	; 0xa7
 8002ab6:	f000 f8d1 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002aba:	2027      	movs	r0, #39	; 0x27
 8002abc:	f000 f8ce 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002ac0:	2004      	movs	r0, #4
 8002ac2:	f000 f8cb 	bl	8002c5c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002ac6:	202a      	movs	r0, #42	; 0x2a
 8002ac8:	f000 f8bb 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f000 f8c5 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f000 f8c2 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f000 f8bf 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002ade:	20ef      	movs	r0, #239	; 0xef
 8002ae0:	f000 f8bc 	bl	8002c5c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002ae4:	202b      	movs	r0, #43	; 0x2b
 8002ae6:	f000 f8ac 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f000 f8b6 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f000 f8b3 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002af6:	2001      	movs	r0, #1
 8002af8:	f000 f8b0 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002afc:	203f      	movs	r0, #63	; 0x3f
 8002afe:	f000 f8ad 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002b02:	20f6      	movs	r0, #246	; 0xf6
 8002b04:	f000 f89d 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f000 f8a7 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f000 f8a4 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002b14:	2006      	movs	r0, #6
 8002b16:	f000 f8a1 	bl	8002c5c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002b1a:	202c      	movs	r0, #44	; 0x2c
 8002b1c:	f000 f891 	bl	8002c42 <ili9341_WriteReg>
  LCD_Delay(200);
 8002b20:	20c8      	movs	r0, #200	; 0xc8
 8002b22:	f000 fa79 	bl	8003018 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002b26:	2026      	movs	r0, #38	; 0x26
 8002b28:	f000 f88b 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f000 f895 	bl	8002c5c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002b32:	20e0      	movs	r0, #224	; 0xe0
 8002b34:	f000 f885 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002b38:	200f      	movs	r0, #15
 8002b3a:	f000 f88f 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002b3e:	2029      	movs	r0, #41	; 0x29
 8002b40:	f000 f88c 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002b44:	2024      	movs	r0, #36	; 0x24
 8002b46:	f000 f889 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002b4a:	200c      	movs	r0, #12
 8002b4c:	f000 f886 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002b50:	200e      	movs	r0, #14
 8002b52:	f000 f883 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002b56:	2009      	movs	r0, #9
 8002b58:	f000 f880 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002b5c:	204e      	movs	r0, #78	; 0x4e
 8002b5e:	f000 f87d 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002b62:	2078      	movs	r0, #120	; 0x78
 8002b64:	f000 f87a 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002b68:	203c      	movs	r0, #60	; 0x3c
 8002b6a:	f000 f877 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002b6e:	2009      	movs	r0, #9
 8002b70:	f000 f874 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002b74:	2013      	movs	r0, #19
 8002b76:	f000 f871 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002b7a:	2005      	movs	r0, #5
 8002b7c:	f000 f86e 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002b80:	2017      	movs	r0, #23
 8002b82:	f000 f86b 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002b86:	2011      	movs	r0, #17
 8002b88:	f000 f868 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f000 f865 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002b92:	20e1      	movs	r0, #225	; 0xe1
 8002b94:	f000 f855 	bl	8002c42 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f000 f85f 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002b9e:	2016      	movs	r0, #22
 8002ba0:	f000 f85c 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002ba4:	201b      	movs	r0, #27
 8002ba6:	f000 f859 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002baa:	2004      	movs	r0, #4
 8002bac:	f000 f856 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002bb0:	2011      	movs	r0, #17
 8002bb2:	f000 f853 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002bb6:	2007      	movs	r0, #7
 8002bb8:	f000 f850 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002bbc:	2031      	movs	r0, #49	; 0x31
 8002bbe:	f000 f84d 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002bc2:	2033      	movs	r0, #51	; 0x33
 8002bc4:	f000 f84a 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002bc8:	2042      	movs	r0, #66	; 0x42
 8002bca:	f000 f847 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002bce:	2005      	movs	r0, #5
 8002bd0:	f000 f844 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002bd4:	200c      	movs	r0, #12
 8002bd6:	f000 f841 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002bda:	200a      	movs	r0, #10
 8002bdc:	f000 f83e 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002be0:	2028      	movs	r0, #40	; 0x28
 8002be2:	f000 f83b 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002be6:	202f      	movs	r0, #47	; 0x2f
 8002be8:	f000 f838 	bl	8002c5c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002bec:	200f      	movs	r0, #15
 8002bee:	f000 f835 	bl	8002c5c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002bf2:	2011      	movs	r0, #17
 8002bf4:	f000 f825 	bl	8002c42 <ili9341_WriteReg>
  LCD_Delay(200);
 8002bf8:	20c8      	movs	r0, #200	; 0xc8
 8002bfa:	f000 fa0d 	bl	8003018 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002bfe:	2029      	movs	r0, #41	; 0x29
 8002c00:	f000 f81f 	bl	8002c42 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002c04:	202c      	movs	r0, #44	; 0x2c
 8002c06:	f000 f81c 	bl	8002c42 <ili9341_WriteReg>
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002c12:	f000 f913 	bl	8002e3c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002c16:	2103      	movs	r1, #3
 8002c18:	20d3      	movs	r0, #211	; 0xd3
 8002c1a:	f000 f82c 	bl	8002c76 <ili9341_ReadData>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	b29b      	uxth	r3, r3
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002c2a:	2029      	movs	r0, #41	; 0x29
 8002c2c:	f000 f809 	bl	8002c42 <ili9341_WriteReg>
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002c38:	2028      	movs	r0, #40	; 0x28
 8002c3a:	f000 f802 	bl	8002c42 <ili9341_WriteReg>
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f98e 	bl	8002f70 <LCD_IO_WriteReg>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f95f 	bl	8002f2c <LCD_IO_WriteData>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	460a      	mov	r2, r1
 8002c80:	80fb      	strh	r3, [r7, #6]
 8002c82:	4613      	mov	r3, r2
 8002c84:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002c86:	797a      	ldrb	r2, [r7, #5]
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 f991 	bl	8002fb4 <LCD_IO_ReadData>
 8002c92:	4603      	mov	r3, r0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002ca0:	23f0      	movs	r3, #240	; 0xf0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002cb0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002cc4:	4819      	ldr	r0, [pc, #100]	; (8002d2c <SPIx_Init+0x6c>)
 8002cc6:	f005 fa23 	bl	8008110 <HAL_SPI_GetState>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d12b      	bne.n	8002d28 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002cd0:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <SPIx_Init+0x6c>)
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <SPIx_Init+0x70>)
 8002cd4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <SPIx_Init+0x6c>)
 8002cd8:	2218      	movs	r2, #24
 8002cda:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <SPIx_Init+0x6c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <SPIx_Init+0x6c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <SPIx_Init+0x6c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <SPIx_Init+0x6c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002cf4:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <SPIx_Init+0x6c>)
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <SPIx_Init+0x6c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <SPIx_Init+0x6c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <SPIx_Init+0x6c>)
 8002d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <SPIx_Init+0x6c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <SPIx_Init+0x6c>)
 8002d16:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d1a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <SPIx_Init+0x6c>)
 8002d1e:	f000 f853 	bl	8002dc8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002d22:	4802      	ldr	r0, [pc, #8]	; (8002d2c <SPIx_Init+0x6c>)
 8002d24:	f004 fd89 	bl	800783a <HAL_SPI_Init>
  } 
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20002464 	.word	0x20002464
 8002d30:	40015000 	.word	0x40015000

08002d34 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <SPIx_Read+0x38>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f107 0108 	add.w	r1, r7, #8
 8002d4e:	4808      	ldr	r0, [pc, #32]	; (8002d70 <SPIx_Read+0x3c>)
 8002d50:	f004 ff33 	bl	8007bba <HAL_SPI_Receive>
 8002d54:	4603      	mov	r3, r0
 8002d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002d5e:	f000 f827 	bl	8002db0 <SPIx_Error>
  }
  
  return readvalue;
 8002d62:	68bb      	ldr	r3, [r7, #8]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	2000003c 	.word	0x2000003c
 8002d70:	20002464 	.word	0x20002464

08002d74 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <SPIx_Write+0x34>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	1db9      	adds	r1, r7, #6
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4808      	ldr	r0, [pc, #32]	; (8002dac <SPIx_Write+0x38>)
 8002d8c:	f004 fde1 	bl	8007952 <HAL_SPI_Transmit>
 8002d90:	4603      	mov	r3, r0
 8002d92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002d9a:	f000 f809 	bl	8002db0 <SPIx_Error>
  }
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2000003c 	.word	0x2000003c
 8002dac:	20002464 	.word	0x20002464

08002db0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002db4:	4803      	ldr	r0, [pc, #12]	; (8002dc4 <SPIx_Error+0x14>)
 8002db6:	f004 fda4 	bl	8007902 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002dba:	f7ff ff81 	bl	8002cc0 <SPIx_Init>
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20002464 	.word	0x20002464

08002dc8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <SPIx_MspInit+0x6c>)
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <SPIx_MspInit+0x6c>)
 8002dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dde:	6453      	str	r3, [r2, #68]	; 0x44
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <SPIx_MspInit+0x6c>)
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <SPIx_MspInit+0x6c>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <SPIx_MspInit+0x6c>)
 8002df6:	f043 0320 	orr.w	r3, r3, #32
 8002dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <SPIx_MspInit+0x6c>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002e08:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002e12:	2302      	movs	r3, #2
 8002e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002e16:	2301      	movs	r3, #1
 8002e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4619      	mov	r1, r3
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <SPIx_MspInit+0x70>)
 8002e26:	f001 fe11 	bl	8004a4c <HAL_GPIO_Init>
}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40021400 	.word	0x40021400

08002e3c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002e42:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <LCD_IO_Init+0xe0>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d164      	bne.n	8002f14 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002e4a:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <LCD_IO_Init+0xe0>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <LCD_IO_Init+0xe4>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4a31      	ldr	r2, [pc, #196]	; (8002f20 <LCD_IO_Init+0xe4>)
 8002e5a:	f043 0308 	orr.w	r3, r3, #8
 8002e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e60:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <LCD_IO_Init+0xe4>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002e72:	2301      	movs	r3, #1
 8002e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	4619      	mov	r1, r3
 8002e84:	4827      	ldr	r0, [pc, #156]	; (8002f24 <LCD_IO_Init+0xe8>)
 8002e86:	f001 fde1 	bl	8004a4c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <LCD_IO_Init+0xe4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <LCD_IO_Init+0xe4>)
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <LCD_IO_Init+0xe4>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002eac:	2301      	movs	r3, #1
 8002eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4819      	ldr	r0, [pc, #100]	; (8002f24 <LCD_IO_Init+0xe8>)
 8002ec0:	f001 fdc4 	bl	8004a4c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <LCD_IO_Init+0xe4>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <LCD_IO_Init+0xe4>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <LCD_IO_Init+0xe4>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002eec:	2302      	movs	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	480c      	ldr	r0, [pc, #48]	; (8002f28 <LCD_IO_Init+0xec>)
 8002ef8:	f001 fda8 	bl	8004a4c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002efc:	2200      	movs	r2, #0
 8002efe:	2104      	movs	r1, #4
 8002f00:	4809      	ldr	r0, [pc, #36]	; (8002f28 <LCD_IO_Init+0xec>)
 8002f02:	f002 f85b 	bl	8004fbc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002f06:	2201      	movs	r2, #1
 8002f08:	2104      	movs	r1, #4
 8002f0a:	4807      	ldr	r0, [pc, #28]	; (8002f28 <LCD_IO_Init+0xec>)
 8002f0c:	f002 f856 	bl	8004fbc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002f10:	f7ff fed6 	bl	8002cc0 <SPIx_Init>
  }
}
 8002f14:	bf00      	nop
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	200024bc 	.word	0x200024bc
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020c00 	.word	0x40020c00
 8002f28:	40020800 	.word	0x40020800

08002f2c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002f36:	2201      	movs	r2, #1
 8002f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f3c:	480a      	ldr	r0, [pc, #40]	; (8002f68 <LCD_IO_WriteData+0x3c>)
 8002f3e:	f002 f83d 	bl	8004fbc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002f42:	2200      	movs	r2, #0
 8002f44:	2104      	movs	r1, #4
 8002f46:	4809      	ldr	r0, [pc, #36]	; (8002f6c <LCD_IO_WriteData+0x40>)
 8002f48:	f002 f838 	bl	8004fbc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff10 	bl	8002d74 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002f54:	2201      	movs	r2, #1
 8002f56:	2104      	movs	r1, #4
 8002f58:	4804      	ldr	r0, [pc, #16]	; (8002f6c <LCD_IO_WriteData+0x40>)
 8002f5a:	f002 f82f 	bl	8004fbc <HAL_GPIO_WritePin>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40020c00 	.word	0x40020c00
 8002f6c:	40020800 	.word	0x40020800

08002f70 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f80:	480a      	ldr	r0, [pc, #40]	; (8002fac <LCD_IO_WriteReg+0x3c>)
 8002f82:	f002 f81b 	bl	8004fbc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002f86:	2200      	movs	r2, #0
 8002f88:	2104      	movs	r1, #4
 8002f8a:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <LCD_IO_WriteReg+0x40>)
 8002f8c:	f002 f816 	bl	8004fbc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff feed 	bl	8002d74 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	4804      	ldr	r0, [pc, #16]	; (8002fb0 <LCD_IO_WriteReg+0x40>)
 8002fa0:	f002 f80c 	bl	8004fbc <HAL_GPIO_WritePin>
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40020c00 	.word	0x40020c00
 8002fb0:	40020800 	.word	0x40020800

08002fb4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	80fb      	strh	r3, [r7, #6]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2104      	movs	r1, #4
 8002fcc:	4810      	ldr	r0, [pc, #64]	; (8003010 <LCD_IO_ReadData+0x5c>)
 8002fce:	f001 fff5 	bl	8004fbc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fd8:	480e      	ldr	r0, [pc, #56]	; (8003014 <LCD_IO_ReadData+0x60>)
 8002fda:	f001 ffef 	bl	8004fbc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fec7 	bl	8002d74 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002fe6:	797b      	ldrb	r3, [r7, #5]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fea3 	bl	8002d34 <SPIx_Read>
 8002fee:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ff6:	4807      	ldr	r0, [pc, #28]	; (8003014 <LCD_IO_ReadData+0x60>)
 8002ff8:	f001 ffe0 	bl	8004fbc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	2104      	movs	r1, #4
 8003000:	4803      	ldr	r0, [pc, #12]	; (8003010 <LCD_IO_ReadData+0x5c>)
 8003002:	f001 ffdb 	bl	8004fbc <HAL_GPIO_WritePin>
  
  return readvalue;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40020800 	.word	0x40020800
 8003014:	40020c00 	.word	0x40020c00

08003018 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fe91 	bl	8003d48 <HAL_Delay>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003034:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <BSP_LCD_Init+0xbc>)
 8003036:	4a2e      	ldr	r2, [pc, #184]	; (80030f0 <BSP_LCD_Init+0xc0>)
 8003038:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800303a:	4b2c      	ldr	r3, [pc, #176]	; (80030ec <BSP_LCD_Init+0xbc>)
 800303c:	2209      	movs	r2, #9
 800303e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003040:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <BSP_LCD_Init+0xbc>)
 8003042:	2201      	movs	r2, #1
 8003044:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003046:	4b29      	ldr	r3, [pc, #164]	; (80030ec <BSP_LCD_Init+0xbc>)
 8003048:	221d      	movs	r2, #29
 800304a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800304c:	4b27      	ldr	r3, [pc, #156]	; (80030ec <BSP_LCD_Init+0xbc>)
 800304e:	2203      	movs	r2, #3
 8003050:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003052:	4b26      	ldr	r3, [pc, #152]	; (80030ec <BSP_LCD_Init+0xbc>)
 8003054:	f240 120d 	movw	r2, #269	; 0x10d
 8003058:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <BSP_LCD_Init+0xbc>)
 800305c:	f240 1243 	movw	r2, #323	; 0x143
 8003060:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <BSP_LCD_Init+0xbc>)
 8003064:	f240 1217 	movw	r2, #279	; 0x117
 8003068:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <BSP_LCD_Init+0xbc>)
 800306c:	f240 1247 	movw	r2, #327	; 0x147
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <BSP_LCD_Init+0xbc>)
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800307a:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <BSP_LCD_Init+0xbc>)
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <BSP_LCD_Init+0xbc>)
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <BSP_LCD_Init+0xc4>)
 800308c:	2208      	movs	r2, #8
 800308e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003090:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <BSP_LCD_Init+0xc4>)
 8003092:	22c0      	movs	r2, #192	; 0xc0
 8003094:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <BSP_LCD_Init+0xc4>)
 8003098:	2204      	movs	r2, #4
 800309a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800309c:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <BSP_LCD_Init+0xc4>)
 800309e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80030a4:	4813      	ldr	r0, [pc, #76]	; (80030f4 <BSP_LCD_Init+0xc4>)
 80030a6:	f004 f98b 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <BSP_LCD_Init+0xbc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <BSP_LCD_Init+0xbc>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80030b6:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <BSP_LCD_Init+0xbc>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <BSP_LCD_Init+0xbc>)
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80030c2:	f000 fa47 	bl	8003554 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80030c6:	4809      	ldr	r0, [pc, #36]	; (80030ec <BSP_LCD_Init+0xbc>)
 80030c8:	f003 f8fa 	bl	80062c0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <BSP_LCD_Init+0xc8>)
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <BSP_LCD_Init+0xcc>)
 80030d0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <BSP_LCD_Init+0xc8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80030da:	f000 fc29 	bl	8003930 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80030de:	4808      	ldr	r0, [pc, #32]	; (8003100 <BSP_LCD_Init+0xd0>)
 80030e0:	f000 f8ce 	bl	8003280 <BSP_LCD_SetFont>

  return LCD_OK;
 80030e4:	2300      	movs	r3, #0
}  
 80030e6:	4618      	mov	r0, r3
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2002200c 	.word	0x2002200c
 80030f0:	40016800 	.word	0x40016800
 80030f4:	20002500 	.word	0x20002500
 80030f8:	200220b4 	.word	0x200220b4
 80030fc:	20000004 	.word	0x20000004
 8003100:	20000040 	.word	0x20000040

08003104 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <BSP_LCD_GetXSize+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	4798      	blx	r3
 8003110:	4603      	mov	r3, r0
}
 8003112:	4618      	mov	r0, r3
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200220b4 	.word	0x200220b4

0800311c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <BSP_LCD_GetYSize+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	4798      	blx	r3
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200220b4 	.word	0x200220b4

08003134 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003134:	b580      	push	{r7, lr}
 8003136:	b090      	sub	sp, #64	; 0x40
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003144:	f7ff ffde 	bl	8003104 <BSP_LCD_GetXSize>
 8003148:	4603      	mov	r3, r0
 800314a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003150:	f7ff ffe4 	bl	800311c <BSP_LCD_GetYSize>
 8003154:	4603      	mov	r3, r0
 8003156:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003160:	23ff      	movs	r3, #255	; 0xff
 8003162:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800317a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003180:	2307      	movs	r3, #7
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003184:	f7ff ffbe 	bl	8003104 <BSP_LCD_GetXSize>
 8003188:	4603      	mov	r3, r0
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800318c:	f7ff ffc6 	bl	800311c <BSP_LCD_GetYSize>
 8003190:	4603      	mov	r3, r0
 8003192:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	f107 030c 	add.w	r3, r7, #12
 800319a:	4619      	mov	r1, r3
 800319c:	4814      	ldr	r0, [pc, #80]	; (80031f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800319e:	f003 fa21 	bl	80065e4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80031a2:	88fa      	ldrh	r2, [r7, #6]
 80031a4:	4913      	ldr	r1, [pc, #76]	; (80031f4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	3304      	adds	r3, #4
 80031b2:	f04f 32ff 	mov.w	r2, #4294967295
 80031b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	490e      	ldr	r1, [pc, #56]	; (80031f4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80031bc:	4613      	mov	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3308      	adds	r3, #8
 80031c8:	4a0b      	ldr	r2, [pc, #44]	; (80031f8 <BSP_LCD_LayerDefaultInit+0xc4>)
 80031ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	4909      	ldr	r1, [pc, #36]	; (80031f4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80031de:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80031e0:	4803      	ldr	r0, [pc, #12]	; (80031f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80031e2:	f003 fa3d 	bl	8006660 <HAL_LTDC_EnableDither>
}
 80031e6:	bf00      	nop
 80031e8:	3740      	adds	r7, #64	; 0x40
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	2002200c 	.word	0x2002200c
 80031f4:	20002534 	.word	0x20002534
 80031f8:	20000040 	.word	0x20000040

080031fc <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <BSP_LCD_SelectLayer+0x1c>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6013      	str	r3, [r2, #0]
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20002530 	.word	0x20002530

0800321c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <BSP_LCD_SetTextColor+0x28>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4907      	ldr	r1, [pc, #28]	; (8003248 <BSP_LCD_SetTextColor+0x2c>)
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	601a      	str	r2, [r3, #0]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	20002530 	.word	0x20002530
 8003248:	20002534 	.word	0x20002534

0800324c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <BSP_LCD_SetBackColor+0x2c>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4908      	ldr	r1, [pc, #32]	; (800327c <BSP_LCD_SetBackColor+0x30>)
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	3304      	adds	r3, #4
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	601a      	str	r2, [r3, #0]
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20002530 	.word	0x20002530
 800327c:	20002534 	.word	0x20002534

08003280 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <BSP_LCD_SetFont+0x2c>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4908      	ldr	r1, [pc, #32]	; (80032b0 <BSP_LCD_SetFont+0x30>)
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3308      	adds	r3, #8
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20002530 	.word	0x20002530
 80032b0:	20002534 	.word	0x20002534

080032b4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80032b8:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <BSP_LCD_GetFont+0x24>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4907      	ldr	r1, [pc, #28]	; (80032dc <BSP_LCD_GetFont+0x28>)
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	3308      	adds	r3, #8
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20002530 	.word	0x20002530
 80032dc:	20002534 	.word	0x20002534

080032e0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80032e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <BSP_LCD_Clear+0x48>)
 80032ea:	681c      	ldr	r4, [r3, #0]
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <BSP_LCD_Clear+0x48>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0e      	ldr	r2, [pc, #56]	; (800332c <BSP_LCD_Clear+0x4c>)
 80032f2:	2134      	movs	r1, #52	; 0x34
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	335c      	adds	r3, #92	; 0x5c
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461e      	mov	r6, r3
 8003300:	f7ff ff00 	bl	8003104 <BSP_LCD_GetXSize>
 8003304:	4605      	mov	r5, r0
 8003306:	f7ff ff09 	bl	800311c <BSP_LCD_GetYSize>
 800330a:	4602      	mov	r2, r0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	2300      	movs	r3, #0
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	462a      	mov	r2, r5
 8003318:	4631      	mov	r1, r6
 800331a:	4620      	mov	r0, r4
 800331c:	f000 fad0 	bl	80038c0 <FillBuffer>
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003328:	20002530 	.word	0x20002530
 800332c:	2002200c 	.word	0x2002200c

08003330 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	80fb      	strh	r3, [r7, #6]
 800333a:	460b      	mov	r3, r1
 800333c:	80bb      	strh	r3, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <BSP_LCD_DisplayChar+0x80>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	491b      	ldr	r1, [pc, #108]	; (80033b4 <BSP_LCD_DisplayChar+0x84>)
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3308      	adds	r3, #8
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <BSP_LCD_DisplayChar+0x80>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4c14      	ldr	r4, [pc, #80]	; (80033b4 <BSP_LCD_DisplayChar+0x84>)
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4423      	add	r3, r4
 800336e:	3308      	adds	r3, #8
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003374:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003378:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <BSP_LCD_DisplayChar+0x80>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4c0d      	ldr	r4, [pc, #52]	; (80033b4 <BSP_LCD_DisplayChar+0x84>)
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4423      	add	r3, r4
 8003388:	3308      	adds	r3, #8
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	889b      	ldrh	r3, [r3, #4]
 800338e:	3307      	adds	r3, #7
 8003390:	2b00      	cmp	r3, #0
 8003392:	da00      	bge.n	8003396 <BSP_LCD_DisplayChar+0x66>
 8003394:	3307      	adds	r3, #7
 8003396:	10db      	asrs	r3, r3, #3
 8003398:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800339c:	18ca      	adds	r2, r1, r3
 800339e:	88b9      	ldrh	r1, [r7, #4]
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f9d2 	bl	800374c <DrawChar>
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd90      	pop	{r4, r7, pc}
 80033b0:	20002530 	.word	0x20002530
 80033b4:	20002534 	.word	0x20002534

080033b8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80033b8:	b5b0      	push	{r4, r5, r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60ba      	str	r2, [r7, #8]
 80033c0:	461a      	mov	r2, r3
 80033c2:	4603      	mov	r3, r0
 80033c4:	81fb      	strh	r3, [r7, #14]
 80033c6:	460b      	mov	r3, r1
 80033c8:	81bb      	strh	r3, [r7, #12]
 80033ca:	4613      	mov	r3, r2
 80033cc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80033ce:	2301      	movs	r3, #1
 80033d0:	83fb      	strh	r3, [r7, #30]
 80033d2:	2300      	movs	r3, #0
 80033d4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80033e2:	e002      	b.n	80033ea <BSP_LCD_DisplayStringAt+0x32>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	3301      	adds	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	617a      	str	r2, [r7, #20]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f6      	bne.n	80033e4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80033f6:	f7ff fe85 	bl	8003104 <BSP_LCD_GetXSize>
 80033fa:	4601      	mov	r1, r0
 80033fc:	4b4b      	ldr	r3, [pc, #300]	; (800352c <BSP_LCD_DisplayStringAt+0x174>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	484b      	ldr	r0, [pc, #300]	; (8003530 <BSP_LCD_DisplayStringAt+0x178>)
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4403      	add	r3, r0
 800340c:	3308      	adds	r3, #8
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	889b      	ldrh	r3, [r3, #4]
 8003412:	fbb1 f3f3 	udiv	r3, r1, r3
 8003416:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d01c      	beq.n	8003458 <BSP_LCD_DisplayStringAt+0xa0>
 800341e:	2b03      	cmp	r3, #3
 8003420:	dc33      	bgt.n	800348a <BSP_LCD_DisplayStringAt+0xd2>
 8003422:	2b01      	cmp	r3, #1
 8003424:	d002      	beq.n	800342c <BSP_LCD_DisplayStringAt+0x74>
 8003426:	2b02      	cmp	r3, #2
 8003428:	d019      	beq.n	800345e <BSP_LCD_DisplayStringAt+0xa6>
 800342a:	e02e      	b.n	800348a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	1ad1      	subs	r1, r2, r3
 8003432:	4b3e      	ldr	r3, [pc, #248]	; (800352c <BSP_LCD_DisplayStringAt+0x174>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	483e      	ldr	r0, [pc, #248]	; (8003530 <BSP_LCD_DisplayStringAt+0x178>)
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4403      	add	r3, r0
 8003442:	3308      	adds	r3, #8
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	889b      	ldrh	r3, [r3, #4]
 8003448:	fb03 f301 	mul.w	r3, r3, r1
 800344c:	085b      	lsrs	r3, r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	89fb      	ldrh	r3, [r7, #14]
 8003452:	4413      	add	r3, r2
 8003454:	83fb      	strh	r3, [r7, #30]
      break;
 8003456:	e01b      	b.n	8003490 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003458:	89fb      	ldrh	r3, [r7, #14]
 800345a:	83fb      	strh	r3, [r7, #30]
      break;
 800345c:	e018      	b.n	8003490 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	b299      	uxth	r1, r3
 8003466:	4b31      	ldr	r3, [pc, #196]	; (800352c <BSP_LCD_DisplayStringAt+0x174>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4831      	ldr	r0, [pc, #196]	; (8003530 <BSP_LCD_DisplayStringAt+0x178>)
 800346c:	4613      	mov	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4403      	add	r3, r0
 8003476:	3308      	adds	r3, #8
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	889b      	ldrh	r3, [r3, #4]
 800347c:	fb11 f303 	smulbb	r3, r1, r3
 8003480:	b29a      	uxth	r2, r3
 8003482:	89fb      	ldrh	r3, [r7, #14]
 8003484:	4413      	add	r3, r2
 8003486:	83fb      	strh	r3, [r7, #30]
      break;
 8003488:	e002      	b.n	8003490 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800348a:	89fb      	ldrh	r3, [r7, #14]
 800348c:	83fb      	strh	r3, [r7, #30]
      break;
 800348e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003490:	e01a      	b.n	80034c8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	89b9      	ldrh	r1, [r7, #12]
 8003498:	8bfb      	ldrh	r3, [r7, #30]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff48 	bl	8003330 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <BSP_LCD_DisplayStringAt+0x174>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4922      	ldr	r1, [pc, #136]	; (8003530 <BSP_LCD_DisplayStringAt+0x178>)
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3308      	adds	r3, #8
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	889a      	ldrh	r2, [r3, #4]
 80034b6:	8bfb      	ldrh	r3, [r7, #30]
 80034b8:	4413      	add	r3, r2
 80034ba:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	3301      	adds	r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
    i++;
 80034c2:	8bbb      	ldrh	r3, [r7, #28]
 80034c4:	3301      	adds	r3, #1
 80034c6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2dc      	uxtb	r4, r3
 80034d6:	f7ff fe15 	bl	8003104 <BSP_LCD_GetXSize>
 80034da:	8bb9      	ldrh	r1, [r7, #28]
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <BSP_LCD_DisplayStringAt+0x174>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4d13      	ldr	r5, [pc, #76]	; (8003530 <BSP_LCD_DisplayStringAt+0x178>)
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	442b      	add	r3, r5
 80034ec:	3308      	adds	r3, #8
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	889b      	ldrh	r3, [r3, #4]
 80034f2:	fb03 f301 	mul.w	r3, r3, r1
 80034f6:	1ac3      	subs	r3, r0, r3
 80034f8:	b299      	uxth	r1, r3
 80034fa:	4b0c      	ldr	r3, [pc, #48]	; (800352c <BSP_LCD_DisplayStringAt+0x174>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	480c      	ldr	r0, [pc, #48]	; (8003530 <BSP_LCD_DisplayStringAt+0x178>)
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4403      	add	r3, r0
 800350a:	3308      	adds	r3, #8
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	889b      	ldrh	r3, [r3, #4]
 8003510:	4299      	cmp	r1, r3
 8003512:	bf2c      	ite	cs
 8003514:	2301      	movcs	r3, #1
 8003516:	2300      	movcc	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4023      	ands	r3, r4
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1b7      	bne.n	8003492 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bdb0      	pop	{r4, r5, r7, pc}
 800352c:	20002530 	.word	0x20002530
 8003530:	20002534 	.word	0x20002534

08003534 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <BSP_LCD_DisplayOn+0x1c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003542:	4b03      	ldr	r3, [pc, #12]	; (8003550 <BSP_LCD_DisplayOn+0x1c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4798      	blx	r3
  }
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200220b4 	.word	0x200220b4

08003554 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08e      	sub	sp, #56	; 0x38
 8003558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	4a60      	ldr	r2, [pc, #384]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 8003564:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003568:	6453      	str	r3, [r2, #68]	; 0x44
 800356a:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	4b5a      	ldr	r3, [pc, #360]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a59      	ldr	r2, [pc, #356]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 8003580:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b57      	ldr	r3, [pc, #348]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a52      	ldr	r2, [pc, #328]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a4b      	ldr	r2, [pc, #300]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a44      	ldr	r2, [pc, #272]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b42      	ldr	r3, [pc, #264]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	4a3d      	ldr	r2, [pc, #244]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 80035f0:	f043 0308 	orr.w	r3, r3, #8
 80035f4:	6313      	str	r3, [r2, #48]	; 0x30
 80035f6:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a36      	ldr	r2, [pc, #216]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 800360c:	f043 0320 	orr.w	r3, r3, #32
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	607b      	str	r3, [r7, #4]
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4a2f      	ldr	r2, [pc, #188]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 8003628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <BSP_LCD_MspInit+0x190>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800363a:	f641 0358 	movw	r3, #6232	; 0x1858
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003640:	2302      	movs	r3, #2
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003648:	2302      	movs	r3, #2
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800364c:	230e      	movs	r3, #14
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003654:	4619      	mov	r1, r3
 8003656:	4824      	ldr	r0, [pc, #144]	; (80036e8 <BSP_LCD_MspInit+0x194>)
 8003658:	f001 f9f8 	bl	8004a4c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800365c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003666:	4619      	mov	r1, r3
 8003668:	4820      	ldr	r0, [pc, #128]	; (80036ec <BSP_LCD_MspInit+0x198>)
 800366a:	f001 f9ef 	bl	8004a4c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800366e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003678:	4619      	mov	r1, r3
 800367a:	481d      	ldr	r0, [pc, #116]	; (80036f0 <BSP_LCD_MspInit+0x19c>)
 800367c:	f001 f9e6 	bl	8004a4c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003680:	2348      	movs	r3, #72	; 0x48
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003688:	4619      	mov	r1, r3
 800368a:	481a      	ldr	r0, [pc, #104]	; (80036f4 <BSP_LCD_MspInit+0x1a0>)
 800368c:	f001 f9de 	bl	8004a4c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369a:	4619      	mov	r1, r3
 800369c:	4816      	ldr	r0, [pc, #88]	; (80036f8 <BSP_LCD_MspInit+0x1a4>)
 800369e:	f001 f9d5 	bl	8004a4c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80036a2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80036a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ac:	4619      	mov	r1, r3
 80036ae:	4813      	ldr	r0, [pc, #76]	; (80036fc <BSP_LCD_MspInit+0x1a8>)
 80036b0:	f001 f9cc 	bl	8004a4c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80036b4:	2303      	movs	r3, #3
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80036b8:	2309      	movs	r3, #9
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80036bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c0:	4619      	mov	r1, r3
 80036c2:	480a      	ldr	r0, [pc, #40]	; (80036ec <BSP_LCD_MspInit+0x198>)
 80036c4:	f001 f9c2 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80036c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80036ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d2:	4619      	mov	r1, r3
 80036d4:	4809      	ldr	r0, [pc, #36]	; (80036fc <BSP_LCD_MspInit+0x1a8>)
 80036d6:	f001 f9b9 	bl	8004a4c <HAL_GPIO_Init>
}
 80036da:	bf00      	nop
 80036dc:	3738      	adds	r7, #56	; 0x38
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40020400 	.word	0x40020400
 80036f0:	40020800 	.word	0x40020800
 80036f4:	40020c00 	.word	0x40020c00
 80036f8:	40021400 	.word	0x40021400
 80036fc:	40021800 	.word	0x40021800

08003700 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003700:	b5b0      	push	{r4, r5, r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	603a      	str	r2, [r7, #0]
 800370a:	80fb      	strh	r3, [r7, #6]
 800370c:	460b      	mov	r3, r1
 800370e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <BSP_LCD_DrawPixel+0x44>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0c      	ldr	r2, [pc, #48]	; (8003748 <BSP_LCD_DrawPixel+0x48>)
 8003716:	2134      	movs	r1, #52	; 0x34
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	335c      	adds	r3, #92	; 0x5c
 8003720:	681c      	ldr	r4, [r3, #0]
 8003722:	88bd      	ldrh	r5, [r7, #4]
 8003724:	f7ff fcee 	bl	8003104 <BSP_LCD_GetXSize>
 8003728:	4603      	mov	r3, r0
 800372a:	fb03 f205 	mul.w	r2, r3, r5
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4423      	add	r3, r4
 8003736:	461a      	mov	r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bdb0      	pop	{r4, r5, r7, pc}
 8003744:	20002530 	.word	0x20002530
 8003748:	2002200c 	.word	0x2002200c

0800374c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	603a      	str	r2, [r7, #0]
 8003756:	80fb      	strh	r3, [r7, #6]
 8003758:	460b      	mov	r3, r1
 800375a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	2300      	movs	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003768:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <DrawChar+0x16c>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4953      	ldr	r1, [pc, #332]	; (80038bc <DrawChar+0x170>)
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	3308      	adds	r3, #8
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	88db      	ldrh	r3, [r3, #6]
 800377e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003780:	4b4d      	ldr	r3, [pc, #308]	; (80038b8 <DrawChar+0x16c>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	494d      	ldr	r1, [pc, #308]	; (80038bc <DrawChar+0x170>)
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3308      	adds	r3, #8
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	889b      	ldrh	r3, [r3, #4]
 8003796:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003798:	8a3b      	ldrh	r3, [r7, #16]
 800379a:	3307      	adds	r3, #7
 800379c:	2b00      	cmp	r3, #0
 800379e:	da00      	bge.n	80037a2 <DrawChar+0x56>
 80037a0:	3307      	adds	r3, #7
 80037a2:	10db      	asrs	r3, r3, #3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	8a3b      	ldrh	r3, [r7, #16]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e076      	b.n	80038a6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80037b8:	8a3b      	ldrh	r3, [r7, #16]
 80037ba:	3307      	adds	r3, #7
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da00      	bge.n	80037c2 <DrawChar+0x76>
 80037c0:	3307      	adds	r3, #7
 80037c2:	10db      	asrs	r3, r3, #3
 80037c4:	461a      	mov	r2, r3
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	fb03 f302 	mul.w	r3, r3, r2
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80037d2:	8a3b      	ldrh	r3, [r7, #16]
 80037d4:	3307      	adds	r3, #7
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	da00      	bge.n	80037dc <DrawChar+0x90>
 80037da:	3307      	adds	r3, #7
 80037dc:	10db      	asrs	r3, r3, #3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d002      	beq.n	80037e8 <DrawChar+0x9c>
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d004      	beq.n	80037f0 <DrawChar+0xa4>
 80037e6:	e00c      	b.n	8003802 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	617b      	str	r3, [r7, #20]
      break;
 80037ee:	e016      	b.n	800381e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	3201      	adds	r2, #1
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
      break;
 8003800:	e00d      	b.n	800381e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	041a      	lsls	r2, r3, #16
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	3301      	adds	r3, #1
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	4313      	orrs	r3, r2
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	3202      	adds	r2, #2
 8003816:	7812      	ldrb	r2, [r2, #0]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
      break;
 800381c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	e036      	b.n	8003892 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003824:	8a3a      	ldrh	r2, [r7, #16]
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	1ad2      	subs	r2, r2, r3
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	4413      	add	r3, r2
 800382e:	3b01      	subs	r3, #1
 8003830:	2201      	movs	r2, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	461a      	mov	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d012      	beq.n	8003866 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	b29a      	uxth	r2, r3
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	4413      	add	r3, r2
 8003848:	b298      	uxth	r0, r3
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <DrawChar+0x16c>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	491b      	ldr	r1, [pc, #108]	; (80038bc <DrawChar+0x170>)
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	88bb      	ldrh	r3, [r7, #4]
 800385e:	4619      	mov	r1, r3
 8003860:	f7ff ff4e 	bl	8003700 <BSP_LCD_DrawPixel>
 8003864:	e012      	b.n	800388c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	b29a      	uxth	r2, r3
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	4413      	add	r3, r2
 800386e:	b298      	uxth	r0, r3
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <DrawChar+0x16c>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4911      	ldr	r1, [pc, #68]	; (80038bc <DrawChar+0x170>)
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3304      	adds	r3, #4
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	88bb      	ldrh	r3, [r7, #4]
 8003886:	4619      	mov	r1, r3
 8003888:	f7ff ff3a 	bl	8003700 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	3301      	adds	r3, #1
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	8a3b      	ldrh	r3, [r7, #16]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	429a      	cmp	r2, r3
 8003898:	d3c4      	bcc.n	8003824 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800389a:	88bb      	ldrh	r3, [r7, #4]
 800389c:	3301      	adds	r3, #1
 800389e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	3301      	adds	r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	8a7b      	ldrh	r3, [r7, #18]
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d384      	bcc.n	80037b8 <DrawChar+0x6c>
  }
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20002530 	.word	0x20002530
 80038bc:	20002534 	.word	0x20002534

080038c0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <FillBuffer+0x68>)
 80038d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038d4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <FillBuffer+0x68>)
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80038dc:	4a12      	ldr	r2, [pc, #72]	; (8003928 <FillBuffer+0x68>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <FillBuffer+0x68>)
 80038e4:	4a11      	ldr	r2, [pc, #68]	; (800392c <FillBuffer+0x6c>)
 80038e6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80038e8:	480f      	ldr	r0, [pc, #60]	; (8003928 <FillBuffer+0x68>)
 80038ea:	f000 fd13 	bl	8004314 <HAL_DMA2D_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d115      	bne.n	8003920 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80038f4:	68f9      	ldr	r1, [r7, #12]
 80038f6:	480c      	ldr	r0, [pc, #48]	; (8003928 <FillBuffer+0x68>)
 80038f8:	f000 ff7a 	bl	80047f0 <HAL_DMA2D_ConfigLayer>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10e      	bne.n	8003920 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69f9      	ldr	r1, [r7, #28]
 800390c:	4806      	ldr	r0, [pc, #24]	; (8003928 <FillBuffer+0x68>)
 800390e:	f000 fd4a 	bl	80043a6 <HAL_DMA2D_Start>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003918:	210a      	movs	r1, #10
 800391a:	4803      	ldr	r0, [pc, #12]	; (8003928 <FillBuffer+0x68>)
 800391c:	f000 fd6e 	bl	80043fc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	200024c0 	.word	0x200024c0
 800392c:	4002b000 	.word	0x4002b000

08003930 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <BSP_SDRAM_Init+0xac>)
 8003936:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <BSP_SDRAM_Init+0xb0>)
 8003938:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <BSP_SDRAM_Init+0xb4>)
 800393c:	2202      	movs	r2, #2
 800393e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003940:	4b28      	ldr	r3, [pc, #160]	; (80039e4 <BSP_SDRAM_Init+0xb4>)
 8003942:	2207      	movs	r2, #7
 8003944:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003946:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <BSP_SDRAM_Init+0xb4>)
 8003948:	2204      	movs	r2, #4
 800394a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <BSP_SDRAM_Init+0xb4>)
 800394e:	2207      	movs	r2, #7
 8003950:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003952:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <BSP_SDRAM_Init+0xb4>)
 8003954:	2202      	movs	r2, #2
 8003956:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003958:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <BSP_SDRAM_Init+0xb4>)
 800395a:	2202      	movs	r2, #2
 800395c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800395e:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <BSP_SDRAM_Init+0xb4>)
 8003960:	2202      	movs	r2, #2
 8003962:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <BSP_SDRAM_Init+0xac>)
 8003966:	2201      	movs	r2, #1
 8003968:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800396a:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <BSP_SDRAM_Init+0xac>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <BSP_SDRAM_Init+0xac>)
 8003972:	2204      	movs	r2, #4
 8003974:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003976:	4b19      	ldr	r3, [pc, #100]	; (80039dc <BSP_SDRAM_Init+0xac>)
 8003978:	2210      	movs	r2, #16
 800397a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800397c:	4b17      	ldr	r3, [pc, #92]	; (80039dc <BSP_SDRAM_Init+0xac>)
 800397e:	2240      	movs	r2, #64	; 0x40
 8003980:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <BSP_SDRAM_Init+0xac>)
 8003984:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003988:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <BSP_SDRAM_Init+0xac>)
 800398c:	2200      	movs	r2, #0
 800398e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003990:	4b12      	ldr	r3, [pc, #72]	; (80039dc <BSP_SDRAM_Init+0xac>)
 8003992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003996:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003998:	4b10      	ldr	r3, [pc, #64]	; (80039dc <BSP_SDRAM_Init+0xac>)
 800399a:	2200      	movs	r2, #0
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <BSP_SDRAM_Init+0xac>)
 80039a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039a4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80039a6:	2100      	movs	r1, #0
 80039a8:	480c      	ldr	r0, [pc, #48]	; (80039dc <BSP_SDRAM_Init+0xac>)
 80039aa:	f000 f87f 	bl	8003aac <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80039ae:	490d      	ldr	r1, [pc, #52]	; (80039e4 <BSP_SDRAM_Init+0xb4>)
 80039b0:	480a      	ldr	r0, [pc, #40]	; (80039dc <BSP_SDRAM_Init+0xac>)
 80039b2:	f003 fec3 	bl	800773c <HAL_SDRAM_Init>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <BSP_SDRAM_Init+0xb8>)
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e002      	b.n	80039ca <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <BSP_SDRAM_Init+0xb8>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80039ca:	f240 506a 	movw	r0, #1386	; 0x56a
 80039ce:	f000 f80d 	bl	80039ec <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <BSP_SDRAM_Init+0xb8>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	2000254c 	.word	0x2000254c
 80039e0:	a0000140 	.word	0xa0000140
 80039e4:	20002580 	.word	0x20002580
 80039e8:	20000058 	.word	0x20000058

080039ec <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80039f8:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a00:	2208      	movs	r2, #8
 8003a02:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003a04:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003a0a:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a14:	4923      	ldr	r1, [pc, #140]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a16:	4824      	ldr	r0, [pc, #144]	; (8003aa8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a18:	f003 fec4 	bl	80077a4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f000 f993 	bl	8003d48 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003a22:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a24:	2202      	movs	r2, #2
 8003a26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a28:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a3e:	4919      	ldr	r1, [pc, #100]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a40:	4819      	ldr	r0, [pc, #100]	; (8003aa8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a42:	f003 feaf 	bl	80077a4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a46:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a48:	2203      	movs	r2, #3
 8003a4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a4c:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a4e:	2208      	movs	r2, #8
 8003a50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a54:	2204      	movs	r2, #4
 8003a56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a62:	4910      	ldr	r1, [pc, #64]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a64:	4810      	ldr	r0, [pc, #64]	; (8003aa8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a66:	f003 fe9d 	bl	80077a4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003a6a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003a6e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003a70:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a72:	2204      	movs	r2, #4
 8003a74:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a78:	2208      	movs	r2, #8
 8003a7a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a86:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a8c:	4905      	ldr	r1, [pc, #20]	; (8003aa4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a8e:	4806      	ldr	r0, [pc, #24]	; (8003aa8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a90:	f003 fe88 	bl	80077a4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4804      	ldr	r0, [pc, #16]	; (8003aa8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a98:	f003 feaf 	bl	80077fa <HAL_SDRAM_ProgramRefreshRate>
}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	2000259c 	.word	0x2000259c
 8003aa8:	2000254c 	.word	0x2000254c

08003aac <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b090      	sub	sp, #64	; 0x40
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80ec 	beq.w	8003c96 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac2:	4b77      	ldr	r3, [pc, #476]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	4a76      	ldr	r2, [pc, #472]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6393      	str	r3, [r2, #56]	; 0x38
 8003ace:	4b74      	ldr	r3, [pc, #464]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	4b70      	ldr	r3, [pc, #448]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a6f      	ldr	r2, [pc, #444]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003ae4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	623b      	str	r3, [r7, #32]
 8003afa:	4b69      	ldr	r3, [pc, #420]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a68      	ldr	r2, [pc, #416]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b66      	ldr	r3, [pc, #408]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	4b62      	ldr	r3, [pc, #392]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4a61      	ldr	r2, [pc, #388]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6313      	str	r3, [r2, #48]	; 0x30
 8003b22:	4b5f      	ldr	r3, [pc, #380]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	4b5b      	ldr	r3, [pc, #364]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4a5a      	ldr	r2, [pc, #360]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b38:	f043 0308 	orr.w	r3, r3, #8
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3e:	4b58      	ldr	r3, [pc, #352]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	4b54      	ldr	r3, [pc, #336]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a53      	ldr	r2, [pc, #332]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b54:	f043 0310 	orr.w	r3, r3, #16
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b51      	ldr	r3, [pc, #324]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a4c      	ldr	r2, [pc, #304]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b70:	f043 0320 	orr.w	r3, r3, #32
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a45      	ldr	r2, [pc, #276]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <BSP_SDRAM_MspInit+0x1f4>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003baa:	230c      	movs	r3, #12
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003bae:	2360      	movs	r3, #96	; 0x60
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	483a      	ldr	r0, [pc, #232]	; (8003ca4 <BSP_SDRAM_MspInit+0x1f8>)
 8003bba:	f000 ff47 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4837      	ldr	r0, [pc, #220]	; (8003ca8 <BSP_SDRAM_MspInit+0x1fc>)
 8003bca:	f000 ff3f 	bl	8004a4c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003bce:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4834      	ldr	r0, [pc, #208]	; (8003cac <BSP_SDRAM_MspInit+0x200>)
 8003bdc:	f000 ff36 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003be0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bea:	4619      	mov	r1, r3
 8003bec:	4830      	ldr	r0, [pc, #192]	; (8003cb0 <BSP_SDRAM_MspInit+0x204>)
 8003bee:	f000 ff2d 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003bf2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	482d      	ldr	r0, [pc, #180]	; (8003cb4 <BSP_SDRAM_MspInit+0x208>)
 8003c00:	f000 ff24 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003c04:	f248 1333 	movw	r3, #33075	; 0x8133
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4829      	ldr	r0, [pc, #164]	; (8003cb8 <BSP_SDRAM_MspInit+0x20c>)
 8003c12:	f000 ff1b 	bl	8004a4c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003c16:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003c1c:	4b27      	ldr	r3, [pc, #156]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c28:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003c2a:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c30:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c32:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c38:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c40:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003c48:	4b1c      	ldr	r3, [pc, #112]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c4e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c56:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c58:	2203      	movs	r2, #3
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003c5c:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003c62:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003c68:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c6a:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <BSP_SDRAM_MspInit+0x214>)
 8003c6c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
 8003c74:	4a11      	ldr	r2, [pc, #68]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003c7a:	4810      	ldr	r0, [pc, #64]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c7c:	f000 fa18 	bl	80040b0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003c80:	480e      	ldr	r0, [pc, #56]	; (8003cbc <BSP_SDRAM_MspInit+0x210>)
 8003c82:	f000 f967 	bl	8003f54 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	210f      	movs	r1, #15
 8003c8a:	2038      	movs	r0, #56	; 0x38
 8003c8c:	f000 f938 	bl	8003f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003c90:	2038      	movs	r0, #56	; 0x38
 8003c92:	f000 f951 	bl	8003f38 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003c96:	bf00      	nop
 8003c98:	3740      	adds	r7, #64	; 0x40
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	40021800 	.word	0x40021800
 8003cbc:	200025ac 	.word	0x200025ac
 8003cc0:	40026410 	.word	0x40026410

08003cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <HAL_Init+0x40>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <HAL_Init+0x40>)
 8003cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_Init+0x40>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <HAL_Init+0x40>)
 8003cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_Init+0x40>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <HAL_Init+0x40>)
 8003ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cec:	2003      	movs	r0, #3
 8003cee:	f000 f8fc 	bl	8003eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f7fe f848 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cf8:	f7fe f81a 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023c00 	.word	0x40023c00

08003d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_IncTick+0x20>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_IncTick+0x24>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4413      	add	r3, r2
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_IncTick+0x24>)
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000060 	.word	0x20000060
 8003d2c:	200220b8 	.word	0x200220b8

08003d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return uwTick;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_GetTick+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200220b8 	.word	0x200220b8

08003d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d50:	f7ff ffee 	bl	8003d30 <HAL_GetTick>
 8003d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d005      	beq.n	8003d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_Delay+0x44>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d6e:	bf00      	nop
 8003d70:	f7ff ffde 	bl	8003d30 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d8f7      	bhi.n	8003d70 <HAL_Delay+0x28>
  {
  }
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000060 	.word	0x20000060

08003d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dac:	4013      	ands	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dc2:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	60d3      	str	r3, [r2, #12]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	f003 0307 	and.w	r3, r3, #7
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	db0b      	blt.n	8003e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	f003 021f 	and.w	r2, r3, #31
 8003e0c:	4907      	ldr	r1, [pc, #28]	; (8003e2c <__NVIC_EnableIRQ+0x38>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2001      	movs	r0, #1
 8003e16:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000e100 	.word	0xe000e100

08003e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	db0a      	blt.n	8003e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	490c      	ldr	r1, [pc, #48]	; (8003e7c <__NVIC_SetPriority+0x4c>)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	440b      	add	r3, r1
 8003e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e58:	e00a      	b.n	8003e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4908      	ldr	r1, [pc, #32]	; (8003e80 <__NVIC_SetPriority+0x50>)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3b04      	subs	r3, #4
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	761a      	strb	r2, [r3, #24]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000e100 	.word	0xe000e100
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f1c3 0307 	rsb	r3, r3, #7
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	bf28      	it	cs
 8003ea2:	2304      	movcs	r3, #4
 8003ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d902      	bls.n	8003eb4 <NVIC_EncodePriority+0x30>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3b03      	subs	r3, #3
 8003eb2:	e000      	b.n	8003eb6 <NVIC_EncodePriority+0x32>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	4313      	orrs	r3, r2
         );
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3724      	adds	r7, #36	; 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ff4c 	bl	8003d90 <__NVIC_SetPriorityGrouping>
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f12:	f7ff ff61 	bl	8003dd8 <__NVIC_GetPriorityGrouping>
 8003f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	6978      	ldr	r0, [r7, #20]
 8003f1e:	f7ff ffb1 	bl	8003e84 <NVIC_EncodePriority>
 8003f22:	4602      	mov	r2, r0
 8003f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ff80 	bl	8003e30 <__NVIC_SetPriority>
}
 8003f30:	bf00      	nop
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ff54 	bl	8003df4 <__NVIC_EnableIRQ>
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f60:	f7ff fee6 	bl	8003d30 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e099      	b.n	80040a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f90:	e00f      	b.n	8003fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f92:	f7ff fecd 	bl	8003d30 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d908      	bls.n	8003fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e078      	b.n	80040a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e8      	bne.n	8003f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4b38      	ldr	r3, [pc, #224]	; (80040ac <HAL_DMA_Init+0x158>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	2b04      	cmp	r3, #4
 800400a:	d107      	bne.n	800401c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	4313      	orrs	r3, r2
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 0307 	bic.w	r3, r3, #7
 8004032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b04      	cmp	r3, #4
 8004044:	d117      	bne.n	8004076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00e      	beq.n	8004076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f8df 	bl	800421c <DMA_CheckFifoParam>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2240      	movs	r2, #64	; 0x40
 8004068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004072:	2301      	movs	r3, #1
 8004074:	e016      	b.n	80040a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f896 	bl	80041b0 <DMA_CalcBaseAndBitshift>
 8004084:	4603      	mov	r3, r0
 8004086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	223f      	movs	r2, #63	; 0x3f
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	f010803f 	.word	0xf010803f

080040b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e050      	b.n	8004164 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d101      	bne.n	80040d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
 80040d0:	e048      	b.n	8004164 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2221      	movs	r2, #33	; 0x21
 8004110:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f84c 	bl	80041b0 <DMA_CalcBaseAndBitshift>
 8004118:	4603      	mov	r3, r0
 800411a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	223f      	movs	r2, #63	; 0x3f
 8004146:	409a      	lsls	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d004      	beq.n	800418a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2280      	movs	r2, #128	; 0x80
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e00c      	b.n	80041a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2205      	movs	r2, #5
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3b10      	subs	r3, #16
 80041c0:	4a14      	ldr	r2, [pc, #80]	; (8004214 <DMA_CalcBaseAndBitshift+0x64>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ca:	4a13      	ldr	r2, [pc, #76]	; (8004218 <DMA_CalcBaseAndBitshift+0x68>)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d909      	bls.n	80041f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041e6:	f023 0303 	bic.w	r3, r3, #3
 80041ea:	1d1a      	adds	r2, r3, #4
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	659a      	str	r2, [r3, #88]	; 0x58
 80041f0:	e007      	b.n	8004202 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	aaaaaaab 	.word	0xaaaaaaab
 8004218:	08013ea0 	.word	0x08013ea0

0800421c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11f      	bne.n	8004276 <DMA_CheckFifoParam+0x5a>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d856      	bhi.n	80042ea <DMA_CheckFifoParam+0xce>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <DMA_CheckFifoParam+0x28>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004255 	.word	0x08004255
 8004248:	08004267 	.word	0x08004267
 800424c:	08004255 	.word	0x08004255
 8004250:	080042eb 	.word	0x080042eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d046      	beq.n	80042ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004264:	e043      	b.n	80042ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800426e:	d140      	bne.n	80042f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004274:	e03d      	b.n	80042f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427e:	d121      	bne.n	80042c4 <DMA_CheckFifoParam+0xa8>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d837      	bhi.n	80042f6 <DMA_CheckFifoParam+0xda>
 8004286:	a201      	add	r2, pc, #4	; (adr r2, 800428c <DMA_CheckFifoParam+0x70>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080042a3 	.word	0x080042a3
 8004294:	0800429d 	.word	0x0800429d
 8004298:	080042b5 	.word	0x080042b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      break;
 80042a0:	e030      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d025      	beq.n	80042fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b2:	e022      	b.n	80042fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042bc:	d11f      	bne.n	80042fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042c2:	e01c      	b.n	80042fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d903      	bls.n	80042d2 <DMA_CheckFifoParam+0xb6>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d003      	beq.n	80042d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042d0:	e018      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
      break;
 80042d6:	e015      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00e      	beq.n	8004302 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
      break;
 80042e8:	e00b      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      break;
 80042ea:	bf00      	nop
 80042ec:	e00a      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042ee:	bf00      	nop
 80042f0:	e008      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
 80042f4:	e006      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
 80042f8:	e004      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;   
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 8004302:	bf00      	nop
    }
  } 
  
  return status; 
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e03b      	b.n	800439e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc fdf2 	bl	8000f24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	f023 0107 	bic.w	r1, r3, #7
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800437e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68d1      	ldr	r1, [r2, #12]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	430b      	orrs	r3, r1
 800438c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af02      	add	r7, sp, #8
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_DMA2D_Start+0x1c>
 80043be:	2302      	movs	r3, #2
 80043c0:	e018      	b.n	80043f4 <HAL_DMA2D_Start+0x4e>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fa99 	bl	8004914 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d056      	beq.n	80044c6 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004418:	f7ff fc8a 	bl	8003d30 <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800441e:	e04b      	b.n	80044b8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800442e:	2b00      	cmp	r3, #0
 8004430:	d023      	beq.n	800447a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	f043 0202 	orr.w	r2, r3, #2
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	f043 0201 	orr.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2221      	movs	r2, #33	; 0x21
 8004464:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2204      	movs	r2, #4
 800446a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e0a5      	b.n	80045c6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d01a      	beq.n	80044b8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004482:	f7ff fc55 	bl	8003d30 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <HAL_DMA2D_PollForTransfer+0x9c>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10f      	bne.n	80044b8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2203      	movs	r2, #3
 80044a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e086      	b.n	80045c6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0ac      	beq.n	8004420 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d061      	beq.n	80045ac <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80044e8:	f7ff fc22 	bl	8003d30 <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80044ee:	e056      	b.n	800459e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d02e      	beq.n	8004560 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	f043 0204 	orr.w	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	f043 0202 	orr.w	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	f043 0201 	orr.w	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2229      	movs	r2, #41	; 0x29
 800454a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2204      	movs	r2, #4
 8004550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e032      	b.n	80045c6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004566:	d01a      	beq.n	800459e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004568:	f7ff fbe2 	bl	8003d30 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d302      	bcc.n	800457e <HAL_DMA2D_PollForTransfer+0x182>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2203      	movs	r2, #3
 800458e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e013      	b.n	80045c6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0a1      	beq.n	80044f0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2212      	movs	r2, #18
 80045b2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d026      	beq.n	800463e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d021      	beq.n	800463e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004608:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	f043 0201 	orr.w	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2201      	movs	r2, #1
 800461c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2204      	movs	r2, #4
 8004622:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d026      	beq.n	8004696 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d021      	beq.n	8004696 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004660:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2220      	movs	r2, #32
 8004668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	f043 0202 	orr.w	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2204      	movs	r2, #4
 800467a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d026      	beq.n	80046ee <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d021      	beq.n	80046ee <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2208      	movs	r2, #8
 80046c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	f043 0204 	orr.w	r2, r3, #4
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2204      	movs	r2, #4
 80046d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00e      	beq.n	8004720 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004710:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2204      	movs	r2, #4
 8004718:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f853 	bl	80047c6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d024      	beq.n	8004774 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01f      	beq.n	8004774 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004742:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2202      	movs	r2, #2
 800474a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01f      	beq.n	80047be <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01a      	beq.n	80047be <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004796:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2210      	movs	r2, #16
 800479e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f80e 	bl	80047da <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_DMA2D_ConfigLayer+0x20>
 800480c:	2302      	movs	r3, #2
 800480e:	e079      	b.n	8004904 <HAL_DMA2D_ConfigLayer+0x114>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	3318      	adds	r3, #24
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800483a:	4b35      	ldr	r3, [pc, #212]	; (8004910 <HAL_DMA2D_ConfigLayer+0x120>)
 800483c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b0a      	cmp	r3, #10
 8004844:	d003      	beq.n	800484e <HAL_DMA2D_ConfigLayer+0x5e>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b09      	cmp	r3, #9
 800484c:	d107      	bne.n	800485e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e005      	b.n	800486a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	061b      	lsls	r3, r3, #24
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d120      	bne.n	80048b2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	43db      	mvns	r3, r3
 800487a:	ea02 0103 	and.w	r1, r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	430a      	orrs	r2, r1
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b0a      	cmp	r3, #10
 8004898:	d003      	beq.n	80048a2 <HAL_DMA2D_ConfigLayer+0xb2>
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b09      	cmp	r3, #9
 80048a0:	d127      	bne.n	80048f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28
 80048b0:	e01f      	b.n	80048f2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	ea02 0103 	and.w	r1, r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b0a      	cmp	r3, #10
 80048da:	d003      	beq.n	80048e4 <HAL_DMA2D_ConfigLayer+0xf4>
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b09      	cmp	r3, #9
 80048e2:	d106      	bne.n	80048f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80048f0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	ff03000f 	.word	0xff03000f

08004914 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004914:	b480      	push	{r7}
 8004916:	b08b      	sub	sp, #44	; 0x2c
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004928:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	041a      	lsls	r2, r3, #16
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	431a      	orrs	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800494c:	d174      	bne.n	8004a38 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004954:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800495c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004964:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d108      	bne.n	8004986 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	431a      	orrs	r2, r3
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	4313      	orrs	r3, r2
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
 8004984:	e053      	b.n	8004a2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d106      	bne.n	800499c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4313      	orrs	r3, r2
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	e048      	b.n	8004a2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d111      	bne.n	80049c8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	0cdb      	lsrs	r3, r3, #19
 80049a8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	0a9b      	lsrs	r3, r3, #10
 80049ae:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	08db      	lsrs	r3, r3, #3
 80049b4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	02db      	lsls	r3, r3, #11
 80049be:	4313      	orrs	r3, r2
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
 80049c6:	e032      	b.n	8004a2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d117      	bne.n	8004a00 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	0fdb      	lsrs	r3, r3, #31
 80049d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	0cdb      	lsrs	r3, r3, #19
 80049da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	0adb      	lsrs	r3, r3, #11
 80049e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	08db      	lsrs	r3, r3, #3
 80049e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	029b      	lsls	r3, r3, #10
 80049f0:	431a      	orrs	r2, r3
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	03db      	lsls	r3, r3, #15
 80049f6:	4313      	orrs	r3, r2
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	e016      	b.n	8004a2e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	0f1b      	lsrs	r3, r3, #28
 8004a04:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	0d1b      	lsrs	r3, r3, #20
 8004a0a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	0b1b      	lsrs	r3, r3, #12
 8004a10:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	011a      	lsls	r2, r3, #4
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	431a      	orrs	r2, r3
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	4313      	orrs	r3, r2
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004a36:	e003      	b.n	8004a40 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	60da      	str	r2, [r3, #12]
}
 8004a40:	bf00      	nop
 8004a42:	372c      	adds	r7, #44	; 0x2c
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e177      	b.n	8004d58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a68:	2201      	movs	r2, #1
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	f040 8166 	bne.w	8004d52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_GPIO_Init+0x5a>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d007      	beq.n	8004aa6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a9a:	2b11      	cmp	r3, #17
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b12      	cmp	r3, #18
 8004aa4:	d130      	bne.n	8004b08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004adc:	2201      	movs	r2, #1
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	f003 0201 	and.w	r2, r3, #1
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	2203      	movs	r2, #3
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0xfc>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b12      	cmp	r3, #18
 8004b46:	d123      	bne.n	8004b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	08da      	lsrs	r2, r3, #3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3208      	adds	r2, #8
 8004b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	220f      	movs	r2, #15
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	08da      	lsrs	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3208      	adds	r2, #8
 8004b8a:	69b9      	ldr	r1, [r7, #24]
 8004b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 0203 	and.w	r2, r3, #3
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80c0 	beq.w	8004d52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	4b66      	ldr	r3, [pc, #408]	; (8004d70 <HAL_GPIO_Init+0x324>)
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	4a65      	ldr	r2, [pc, #404]	; (8004d70 <HAL_GPIO_Init+0x324>)
 8004bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004be0:	6453      	str	r3, [r2, #68]	; 0x44
 8004be2:	4b63      	ldr	r3, [pc, #396]	; (8004d70 <HAL_GPIO_Init+0x324>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bee:	4a61      	ldr	r2, [pc, #388]	; (8004d74 <HAL_GPIO_Init+0x328>)
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	220f      	movs	r2, #15
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a58      	ldr	r2, [pc, #352]	; (8004d78 <HAL_GPIO_Init+0x32c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d037      	beq.n	8004c8a <HAL_GPIO_Init+0x23e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a57      	ldr	r2, [pc, #348]	; (8004d7c <HAL_GPIO_Init+0x330>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d031      	beq.n	8004c86 <HAL_GPIO_Init+0x23a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a56      	ldr	r2, [pc, #344]	; (8004d80 <HAL_GPIO_Init+0x334>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02b      	beq.n	8004c82 <HAL_GPIO_Init+0x236>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a55      	ldr	r2, [pc, #340]	; (8004d84 <HAL_GPIO_Init+0x338>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d025      	beq.n	8004c7e <HAL_GPIO_Init+0x232>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a54      	ldr	r2, [pc, #336]	; (8004d88 <HAL_GPIO_Init+0x33c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01f      	beq.n	8004c7a <HAL_GPIO_Init+0x22e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a53      	ldr	r2, [pc, #332]	; (8004d8c <HAL_GPIO_Init+0x340>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d019      	beq.n	8004c76 <HAL_GPIO_Init+0x22a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a52      	ldr	r2, [pc, #328]	; (8004d90 <HAL_GPIO_Init+0x344>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_GPIO_Init+0x226>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a51      	ldr	r2, [pc, #324]	; (8004d94 <HAL_GPIO_Init+0x348>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00d      	beq.n	8004c6e <HAL_GPIO_Init+0x222>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a50      	ldr	r2, [pc, #320]	; (8004d98 <HAL_GPIO_Init+0x34c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <HAL_GPIO_Init+0x21e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4f      	ldr	r2, [pc, #316]	; (8004d9c <HAL_GPIO_Init+0x350>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_GPIO_Init+0x21a>
 8004c62:	2309      	movs	r3, #9
 8004c64:	e012      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c66:	230a      	movs	r3, #10
 8004c68:	e010      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	e00e      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c6e:	2307      	movs	r3, #7
 8004c70:	e00c      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c72:	2306      	movs	r3, #6
 8004c74:	e00a      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c76:	2305      	movs	r3, #5
 8004c78:	e008      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	e006      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e004      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e002      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	f002 0203 	and.w	r2, r2, #3
 8004c92:	0092      	lsls	r2, r2, #2
 8004c94:	4093      	lsls	r3, r2
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c9c:	4935      	ldr	r1, [pc, #212]	; (8004d74 <HAL_GPIO_Init+0x328>)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004caa:	4b3d      	ldr	r3, [pc, #244]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cce:	4a34      	ldr	r2, [pc, #208]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004cd4:	4b32      	ldr	r3, [pc, #200]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cf8:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cfe:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d22:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d28:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d4c:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	f67f ae84 	bls.w	8004a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	3724      	adds	r7, #36	; 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020400 	.word	0x40020400
 8004d80:	40020800 	.word	0x40020800
 8004d84:	40020c00 	.word	0x40020c00
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40021400 	.word	0x40021400
 8004d90:	40021800 	.word	0x40021800
 8004d94:	40021c00 	.word	0x40021c00
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40022400 	.word	0x40022400
 8004da0:	40013c00 	.word	0x40013c00

08004da4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e0d9      	b.n	8004f74 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	f040 80c9 	bne.w	8004f6e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004ddc:	4a6b      	ldr	r2, [pc, #428]	; (8004f8c <HAL_GPIO_DeInit+0x1e8>)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	089b      	lsrs	r3, r3, #2
 8004de2:	3302      	adds	r3, #2
 8004de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	220f      	movs	r2, #15
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a63      	ldr	r2, [pc, #396]	; (8004f90 <HAL_GPIO_DeInit+0x1ec>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d037      	beq.n	8004e76 <HAL_GPIO_DeInit+0xd2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a62      	ldr	r2, [pc, #392]	; (8004f94 <HAL_GPIO_DeInit+0x1f0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d031      	beq.n	8004e72 <HAL_GPIO_DeInit+0xce>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a61      	ldr	r2, [pc, #388]	; (8004f98 <HAL_GPIO_DeInit+0x1f4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02b      	beq.n	8004e6e <HAL_GPIO_DeInit+0xca>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a60      	ldr	r2, [pc, #384]	; (8004f9c <HAL_GPIO_DeInit+0x1f8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d025      	beq.n	8004e6a <HAL_GPIO_DeInit+0xc6>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a5f      	ldr	r2, [pc, #380]	; (8004fa0 <HAL_GPIO_DeInit+0x1fc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01f      	beq.n	8004e66 <HAL_GPIO_DeInit+0xc2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a5e      	ldr	r2, [pc, #376]	; (8004fa4 <HAL_GPIO_DeInit+0x200>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d019      	beq.n	8004e62 <HAL_GPIO_DeInit+0xbe>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a5d      	ldr	r2, [pc, #372]	; (8004fa8 <HAL_GPIO_DeInit+0x204>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_GPIO_DeInit+0xba>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a5c      	ldr	r2, [pc, #368]	; (8004fac <HAL_GPIO_DeInit+0x208>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00d      	beq.n	8004e5a <HAL_GPIO_DeInit+0xb6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a5b      	ldr	r2, [pc, #364]	; (8004fb0 <HAL_GPIO_DeInit+0x20c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <HAL_GPIO_DeInit+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a5a      	ldr	r2, [pc, #360]	; (8004fb4 <HAL_GPIO_DeInit+0x210>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d101      	bne.n	8004e52 <HAL_GPIO_DeInit+0xae>
 8004e4e:	2309      	movs	r3, #9
 8004e50:	e012      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e52:	230a      	movs	r3, #10
 8004e54:	e010      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e56:	2308      	movs	r3, #8
 8004e58:	e00e      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e5a:	2307      	movs	r3, #7
 8004e5c:	e00c      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e5e:	2306      	movs	r3, #6
 8004e60:	e00a      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e62:	2305      	movs	r3, #5
 8004e64:	e008      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e66:	2304      	movs	r3, #4
 8004e68:	e006      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e004      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e002      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e76:	2300      	movs	r3, #0
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	f002 0203 	and.w	r2, r2, #3
 8004e7e:	0092      	lsls	r2, r2, #2
 8004e80:	4093      	lsls	r3, r2
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d132      	bne.n	8004eee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004e88:	4b4b      	ldr	r3, [pc, #300]	; (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	4949      	ldr	r1, [pc, #292]	; (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004e96:	4b48      	ldr	r3, [pc, #288]	; (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	4946      	ldr	r1, [pc, #280]	; (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004ea4:	4b44      	ldr	r3, [pc, #272]	; (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	4942      	ldr	r1, [pc, #264]	; (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004eb2:	4b41      	ldr	r3, [pc, #260]	; (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	493f      	ldr	r1, [pc, #252]	; (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	220f      	movs	r2, #15
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ed0:	4a2e      	ldr	r2, [pc, #184]	; (8004f8c <HAL_GPIO_DeInit+0x1e8>)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	089b      	lsrs	r3, r3, #2
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	482a      	ldr	r0, [pc, #168]	; (8004f8c <HAL_GPIO_DeInit+0x1e8>)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	089b      	lsrs	r3, r3, #2
 8004ee6:	400a      	ands	r2, r1
 8004ee8:	3302      	adds	r3, #2
 8004eea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	2103      	movs	r1, #3
 8004ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	401a      	ands	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	08da      	lsrs	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3208      	adds	r2, #8
 8004f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	220f      	movs	r2, #15
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	08d2      	lsrs	r2, r2, #3
 8004f24:	4019      	ands	r1, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3208      	adds	r2, #8
 8004f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	2103      	movs	r1, #3
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	2101      	movs	r1, #1
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	2103      	movs	r1, #3
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	401a      	ands	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	3301      	adds	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	f67f af22 	bls.w	8004dc0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	40020000 	.word	0x40020000
 8004f94:	40020400 	.word	0x40020400
 8004f98:	40020800 	.word	0x40020800
 8004f9c:	40020c00 	.word	0x40020c00
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40021400 	.word	0x40021400
 8004fa8:	40021800 	.word	0x40021800
 8004fac:	40021c00 	.word	0x40021c00
 8004fb0:	40022000 	.word	0x40022000
 8004fb4:	40022400 	.word	0x40022400
 8004fb8:	40013c00 	.word	0x40013c00

08004fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	807b      	strh	r3, [r7, #2]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fcc:	787b      	ldrb	r3, [r7, #1]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fd8:	e003      	b.n	8004fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	041a      	lsls	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	619a      	str	r2, [r3, #24]
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e12b      	b.n	800525a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fc fa3a 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2224      	movs	r2, #36	; 0x24
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005054:	f002 f95a 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 8005058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4a81      	ldr	r2, [pc, #516]	; (8005264 <HAL_I2C_Init+0x274>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d807      	bhi.n	8005074 <HAL_I2C_Init+0x84>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a80      	ldr	r2, [pc, #512]	; (8005268 <HAL_I2C_Init+0x278>)
 8005068:	4293      	cmp	r3, r2
 800506a:	bf94      	ite	ls
 800506c:	2301      	movls	r3, #1
 800506e:	2300      	movhi	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e006      	b.n	8005082 <HAL_I2C_Init+0x92>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a7d      	ldr	r2, [pc, #500]	; (800526c <HAL_I2C_Init+0x27c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	bf94      	ite	ls
 800507c:	2301      	movls	r3, #1
 800507e:	2300      	movhi	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e0e7      	b.n	800525a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4a78      	ldr	r2, [pc, #480]	; (8005270 <HAL_I2C_Init+0x280>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	0c9b      	lsrs	r3, r3, #18
 8005094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4a6a      	ldr	r2, [pc, #424]	; (8005264 <HAL_I2C_Init+0x274>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d802      	bhi.n	80050c4 <HAL_I2C_Init+0xd4>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	3301      	adds	r3, #1
 80050c2:	e009      	b.n	80050d8 <HAL_I2C_Init+0xe8>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	4a69      	ldr	r2, [pc, #420]	; (8005274 <HAL_I2C_Init+0x284>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	099b      	lsrs	r3, r3, #6
 80050d6:	3301      	adds	r3, #1
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	430b      	orrs	r3, r1
 80050de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	495c      	ldr	r1, [pc, #368]	; (8005264 <HAL_I2C_Init+0x274>)
 80050f4:	428b      	cmp	r3, r1
 80050f6:	d819      	bhi.n	800512c <HAL_I2C_Init+0x13c>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1e59      	subs	r1, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fbb1 f3f3 	udiv	r3, r1, r3
 8005106:	1c59      	adds	r1, r3, #1
 8005108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800510c:	400b      	ands	r3, r1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_I2C_Init+0x138>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1e59      	subs	r1, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005120:	3301      	adds	r3, #1
 8005122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005126:	e051      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 8005128:	2304      	movs	r3, #4
 800512a:	e04f      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d111      	bne.n	8005158 <HAL_I2C_Init+0x168>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1e58      	subs	r0, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	440b      	add	r3, r1
 8005142:	fbb0 f3f3 	udiv	r3, r0, r3
 8005146:	3301      	adds	r3, #1
 8005148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf0c      	ite	eq
 8005150:	2301      	moveq	r3, #1
 8005152:	2300      	movne	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e012      	b.n	800517e <HAL_I2C_Init+0x18e>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1e58      	subs	r0, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	0099      	lsls	r1, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	fbb0 f3f3 	udiv	r3, r0, r3
 800516e:	3301      	adds	r3, #1
 8005170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_I2C_Init+0x196>
 8005182:	2301      	movs	r3, #1
 8005184:	e022      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10e      	bne.n	80051ac <HAL_I2C_Init+0x1bc>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1e58      	subs	r0, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6859      	ldr	r1, [r3, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	440b      	add	r3, r1
 800519c:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a0:	3301      	adds	r3, #1
 80051a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051aa:	e00f      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	1e58      	subs	r0, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6859      	ldr	r1, [r3, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	0099      	lsls	r1, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c2:	3301      	adds	r3, #1
 80051c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	6809      	ldr	r1, [r1, #0]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69da      	ldr	r2, [r3, #28]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6911      	ldr	r1, [r2, #16]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68d2      	ldr	r2, [r2, #12]
 8005206:	4311      	orrs	r1, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	430b      	orrs	r3, r1
 800520e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	000186a0 	.word	0x000186a0
 8005268:	001e847f 	.word	0x001e847f
 800526c:	003d08ff 	.word	0x003d08ff
 8005270:	431bde83 	.word	0x431bde83
 8005274:	10624dd3 	.word	0x10624dd3

08005278 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	461a      	mov	r2, r3
 8005286:	4603      	mov	r3, r0
 8005288:	817b      	strh	r3, [r7, #10]
 800528a:	460b      	mov	r3, r1
 800528c:	813b      	strh	r3, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005292:	f7fe fd4d 	bl	8003d30 <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	f040 80d9 	bne.w	8005458 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	2319      	movs	r3, #25
 80052ac:	2201      	movs	r2, #1
 80052ae:	496d      	ldr	r1, [pc, #436]	; (8005464 <HAL_I2C_Mem_Write+0x1ec>)
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fdad 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
 80052be:	e0cc      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_I2C_Mem_Write+0x56>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e0c5      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d007      	beq.n	80052f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2221      	movs	r2, #33	; 0x21
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2240      	movs	r2, #64	; 0x40
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a4d      	ldr	r2, [pc, #308]	; (8005468 <HAL_I2C_Mem_Write+0x1f0>)
 8005334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005336:	88f8      	ldrh	r0, [r7, #6]
 8005338:	893a      	ldrh	r2, [r7, #8]
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	4603      	mov	r3, r0
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fbe4 	bl	8005b14 <I2C_RequestMemoryWrite>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d052      	beq.n	80053f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e081      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fe2e 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	2b04      	cmp	r3, #4
 800536c:	d107      	bne.n	800537e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e06b      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d11b      	bne.n	80053f8 <HAL_I2C_Mem_Write+0x180>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d017      	beq.n	80053f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1aa      	bne.n	8005356 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fe1a 	bl	800603e <I2C_WaitOnBTFFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00d      	beq.n	800542c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	2b04      	cmp	r3, #4
 8005416:	d107      	bne.n	8005428 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005426:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e016      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	00100002 	.word	0x00100002
 8005468:	ffff0000 	.word	0xffff0000

0800546c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08c      	sub	sp, #48	; 0x30
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	461a      	mov	r2, r3
 800547a:	4603      	mov	r3, r0
 800547c:	817b      	strh	r3, [r7, #10]
 800547e:	460b      	mov	r3, r1
 8005480:	813b      	strh	r3, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005486:	f7fe fc53 	bl	8003d30 <HAL_GetTick>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b20      	cmp	r3, #32
 8005496:	f040 8208 	bne.w	80058aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	2319      	movs	r3, #25
 80054a0:	2201      	movs	r2, #1
 80054a2:	497b      	ldr	r1, [pc, #492]	; (8005690 <HAL_I2C_Mem_Read+0x224>)
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fcb3 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
 80054b2:	e1fb      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_I2C_Mem_Read+0x56>
 80054be:	2302      	movs	r3, #2
 80054c0:	e1f4      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d007      	beq.n	80054e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2222      	movs	r2, #34	; 0x22
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2240      	movs	r2, #64	; 0x40
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a5b      	ldr	r2, [pc, #364]	; (8005694 <HAL_I2C_Mem_Read+0x228>)
 8005528:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800552a:	88f8      	ldrh	r0, [r7, #6]
 800552c:	893a      	ldrh	r2, [r7, #8]
 800552e:	8979      	ldrh	r1, [r7, #10]
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	4603      	mov	r3, r0
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fb80 	bl	8005c40 <I2C_RequestMemoryRead>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e1b0      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554e:	2b00      	cmp	r3, #0
 8005550:	d113      	bne.n	800557a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005552:	2300      	movs	r3, #0
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	623b      	str	r3, [r7, #32]
 8005566:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e184      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557e:	2b01      	cmp	r3, #1
 8005580:	d11b      	bne.n	80055ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005590:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	e164      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d11b      	bne.n	80055fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	e144      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005610:	e138      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005616:	2b03      	cmp	r3, #3
 8005618:	f200 80f1 	bhi.w	80057fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005620:	2b01      	cmp	r3, #1
 8005622:	d123      	bne.n	800566c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fd49 	bl	80060c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e139      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	855a      	strh	r2, [r3, #42]	; 0x2a
 800566a:	e10b      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	2b02      	cmp	r3, #2
 8005672:	d14e      	bne.n	8005712 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	2200      	movs	r2, #0
 800567c:	4906      	ldr	r1, [pc, #24]	; (8005698 <HAL_I2C_Mem_Read+0x22c>)
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fbc6 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e10e      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
 800568e:	bf00      	nop
 8005690:	00100002 	.word	0x00100002
 8005694:	ffff0000 	.word	0xffff0000
 8005698:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005710:	e0b8      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	2200      	movs	r2, #0
 800571a:	4966      	ldr	r1, [pc, #408]	; (80058b4 <HAL_I2C_Mem_Read+0x448>)
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fb77 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0bf      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	2200      	movs	r2, #0
 8005776:	494f      	ldr	r1, [pc, #316]	; (80058b4 <HAL_I2C_Mem_Read+0x448>)
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fb49 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e091      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057fc:	e042      	b.n	8005884 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005800:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fc5c 	bl	80060c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e04c      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b04      	cmp	r3, #4
 8005850:	d118      	bne.n	8005884 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	f47f aec2 	bne.w	8005612 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e000      	b.n	80058ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80058aa:	2302      	movs	r3, #2
  }
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3728      	adds	r7, #40	; 0x28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	00010004 	.word	0x00010004

080058b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08a      	sub	sp, #40	; 0x28
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	607a      	str	r2, [r7, #4]
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	460b      	mov	r3, r1
 80058c6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80058c8:	f7fe fa32 	bl	8003d30 <HAL_GetTick>
 80058cc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80058ce:	2301      	movs	r3, #1
 80058d0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b20      	cmp	r3, #32
 80058dc:	f040 8111 	bne.w	8005b02 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	2319      	movs	r3, #25
 80058e6:	2201      	movs	r2, #1
 80058e8:	4988      	ldr	r1, [pc, #544]	; (8005b0c <HAL_I2C_IsDeviceReady+0x254>)
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fa90 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
 80058f8:	e104      	b.n	8005b04 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_I2C_IsDeviceReady+0x50>
 8005904:	2302      	movs	r3, #2
 8005906:	e0fd      	b.n	8005b04 <HAL_I2C_IsDeviceReady+0x24c>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	d007      	beq.n	800592e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0201 	orr.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800593c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2224      	movs	r2, #36	; 0x24
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4a70      	ldr	r2, [pc, #448]	; (8005b10 <HAL_I2C_IsDeviceReady+0x258>)
 8005950:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005960:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2200      	movs	r2, #0
 800596a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 fa4e 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00d      	beq.n	8005996 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005988:	d103      	bne.n	8005992 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e0b6      	b.n	8005b04 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005996:	897b      	ldrh	r3, [r7, #10]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80059a6:	f7fe f9c3 	bl	8003d30 <HAL_GetTick>
 80059aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	bf0c      	ite	eq
 80059ba:	2301      	moveq	r3, #1
 80059bc:	2300      	movne	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d0:	bf0c      	ite	eq
 80059d2:	2301      	moveq	r3, #1
 80059d4:	2300      	movne	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80059da:	e025      	b.n	8005a28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059dc:	f7fe f9a8 	bl	8003d30 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d302      	bcc.n	80059f2 <HAL_I2C_IsDeviceReady+0x13a>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d103      	bne.n	80059fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	22a0      	movs	r2, #160	; 0xa0
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	bf0c      	ite	eq
 8005a08:	2301      	moveq	r3, #1
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2ba0      	cmp	r3, #160	; 0xa0
 8005a32:	d005      	beq.n	8005a40 <HAL_I2C_IsDeviceReady+0x188>
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d102      	bne.n	8005a40 <HAL_I2C_IsDeviceReady+0x188>
 8005a3a:	7dbb      	ldrb	r3, [r7, #22]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0cd      	beq.n	80059dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d129      	bne.n	8005aaa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a66:	2300      	movs	r3, #0
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	2319      	movs	r3, #25
 8005a82:	2201      	movs	r2, #1
 8005a84:	4921      	ldr	r1, [pc, #132]	; (8005b0c <HAL_I2C_IsDeviceReady+0x254>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f9c2 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e036      	b.n	8005b04 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e02c      	b.n	8005b04 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ac2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	2319      	movs	r3, #25
 8005aca:	2201      	movs	r2, #1
 8005acc:	490f      	ldr	r1, [pc, #60]	; (8005b0c <HAL_I2C_IsDeviceReady+0x254>)
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f99e 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e012      	b.n	8005b04 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	f4ff af32 	bcc.w	8005952 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e000      	b.n	8005b04 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
  }
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	00100002 	.word	0x00100002
 8005b10:	ffff0000 	.word	0xffff0000

08005b14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	817b      	strh	r3, [r7, #10]
 8005b26:	460b      	mov	r3, r1
 8005b28:	813b      	strh	r3, [r7, #8]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f960 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00d      	beq.n	8005b72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b64:	d103      	bne.n	8005b6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e05f      	b.n	8005c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b72:	897b      	ldrh	r3, [r7, #10]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	492d      	ldr	r1, [pc, #180]	; (8005c3c <I2C_RequestMemoryWrite+0x128>)
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f998 	bl	8005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e04c      	b.n	8005c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb0:	6a39      	ldr	r1, [r7, #32]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fa02 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d107      	bne.n	8005bd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e02b      	b.n	8005c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d105      	bne.n	8005bec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005be0:	893b      	ldrh	r3, [r7, #8]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	611a      	str	r2, [r3, #16]
 8005bea:	e021      	b.n	8005c30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bec:	893b      	ldrh	r3, [r7, #8]
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfc:	6a39      	ldr	r1, [r7, #32]
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f9dc 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00d      	beq.n	8005c26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d107      	bne.n	8005c22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e005      	b.n	8005c32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c26:	893b      	ldrh	r3, [r7, #8]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	00010002 	.word	0x00010002

08005c40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	4608      	mov	r0, r1
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	817b      	strh	r3, [r7, #10]
 8005c52:	460b      	mov	r3, r1
 8005c54:	813b      	strh	r3, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f8c2 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca0:	d103      	bne.n	8005caa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e0aa      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cae:	897b      	ldrh	r3, [r7, #10]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	4952      	ldr	r1, [pc, #328]	; (8005e0c <I2C_RequestMemoryRead+0x1cc>)
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f8fa 	bl	8005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e097      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cec:	6a39      	ldr	r1, [r7, #32]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f964 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d107      	bne.n	8005d12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e076      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d105      	bne.n	8005d28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d1c:	893b      	ldrh	r3, [r7, #8]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]
 8005d26:	e021      	b.n	8005d6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d28:	893b      	ldrh	r3, [r7, #8]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d38:	6a39      	ldr	r1, [r7, #32]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f93e 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d107      	bne.n	8005d5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e050      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d62:	893b      	ldrh	r3, [r7, #8]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	6a39      	ldr	r1, [r7, #32]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f923 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00d      	beq.n	8005d98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d107      	bne.n	8005d94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e035      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005da6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f82b 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dce:	d103      	bne.n	8005dd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e013      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	6a3a      	ldr	r2, [r7, #32]
 8005df0:	4906      	ldr	r1, [pc, #24]	; (8005e0c <I2C_RequestMemoryRead+0x1cc>)
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f863 	bl	8005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	00010002 	.word	0x00010002

08005e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e20:	e025      	b.n	8005e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d021      	beq.n	8005e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2a:	f7fd ff81 	bl	8003d30 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d302      	bcc.n	8005e40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d116      	bne.n	8005e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e023      	b.n	8005eb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d10d      	bne.n	8005e94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	43da      	mvns	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	e00c      	b.n	8005eae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	43da      	mvns	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d0b6      	beq.n	8005e22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ecc:	e051      	b.n	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005edc:	d123      	bne.n	8005f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ef6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f043 0204 	orr.w	r2, r3, #4
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e046      	b.n	8005fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d021      	beq.n	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2e:	f7fd feff 	bl	8003d30 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d302      	bcc.n	8005f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d116      	bne.n	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f043 0220 	orr.w	r2, r3, #32
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e020      	b.n	8005fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	0c1b      	lsrs	r3, r3, #16
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d10c      	bne.n	8005f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	43da      	mvns	r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bf14      	ite	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	2300      	moveq	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	e00b      	b.n	8005fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	43da      	mvns	r2, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bf14      	ite	ne
 8005fa8:	2301      	movne	r3, #1
 8005faa:	2300      	moveq	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d18d      	bne.n	8005ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fc8:	e02d      	b.n	8006026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f8ce 	bl	800616c <I2C_IsAcknowledgeFailed>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e02d      	b.n	8006036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d021      	beq.n	8006026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe2:	f7fd fea5 	bl	8003d30 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d302      	bcc.n	8005ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d116      	bne.n	8006026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e007      	b.n	8006036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006030:	2b80      	cmp	r3, #128	; 0x80
 8006032:	d1ca      	bne.n	8005fca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800604a:	e02d      	b.n	80060a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f88d 	bl	800616c <I2C_IsAcknowledgeFailed>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e02d      	b.n	80060b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d021      	beq.n	80060a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006064:	f7fd fe64 	bl	8003d30 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	429a      	cmp	r2, r3
 8006072:	d302      	bcc.n	800607a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d116      	bne.n	80060a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	f043 0220 	orr.w	r2, r3, #32
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e007      	b.n	80060b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d1ca      	bne.n	800604c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060cc:	e042      	b.n	8006154 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d119      	bne.n	8006110 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0210 	mvn.w	r2, #16
 80060e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e029      	b.n	8006164 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006110:	f7fd fe0e 	bl	8003d30 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d116      	bne.n	8006154 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f043 0220 	orr.w	r2, r3, #32
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e007      	b.n	8006164 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d1b5      	bne.n	80060ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006182:	d11b      	bne.n	80061bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800618c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	f043 0204 	orr.w	r2, r3, #4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e000      	b.n	80061be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d129      	bne.n	8006234 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2224      	movs	r2, #36	; 0x24
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0210 	bic.w	r2, r2, #16
 8006206:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e000      	b.n	8006236 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006242:	b480      	push	{r7}
 8006244:	b085      	sub	sp, #20
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b20      	cmp	r3, #32
 800625a:	d12a      	bne.n	80062b2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2224      	movs	r2, #36	; 0x24
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0201 	bic.w	r2, r2, #1
 8006272:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800627c:	89fb      	ldrh	r3, [r7, #14]
 800627e:	f023 030f 	bic.w	r3, r3, #15
 8006282:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	b29a      	uxth	r2, r3
 8006288:	89fb      	ldrh	r3, [r7, #14]
 800628a:	4313      	orrs	r3, r2
 800628c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	89fa      	ldrh	r2, [r7, #14]
 8006294:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0201 	orr.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e000      	b.n	80062b4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80062b2:	2302      	movs	r3, #2
  }
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e0bf      	b.n	8006452 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fb f9bc 	bl	8001664 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006302:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6999      	ldr	r1, [r3, #24]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006318:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6899      	ldr	r1, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b4a      	ldr	r3, [pc, #296]	; (800645c <HAL_LTDC_Init+0x19c>)
 8006334:	400b      	ands	r3, r1
 8006336:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	041b      	lsls	r3, r3, #16
 800633e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6899      	ldr	r1, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68d9      	ldr	r1, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	4b3e      	ldr	r3, [pc, #248]	; (800645c <HAL_LTDC_Init+0x19c>)
 8006362:	400b      	ands	r3, r1
 8006364:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	041b      	lsls	r3, r3, #16
 800636c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68d9      	ldr	r1, [r3, #12]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6919      	ldr	r1, [r3, #16]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4b33      	ldr	r3, [pc, #204]	; (800645c <HAL_LTDC_Init+0x19c>)
 8006390:	400b      	ands	r3, r1
 8006392:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	041b      	lsls	r3, r3, #16
 800639a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6919      	ldr	r1, [r3, #16]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6959      	ldr	r1, [r3, #20]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	4b27      	ldr	r3, [pc, #156]	; (800645c <HAL_LTDC_Init+0x19c>)
 80063be:	400b      	ands	r3, r1
 80063c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	041b      	lsls	r3, r3, #16
 80063c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6959      	ldr	r1, [r3, #20]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80063f0:	041b      	lsls	r3, r3, #16
 80063f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0206 	orr.w	r2, r2, #6
 800642e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	f000f800 	.word	0xf000f800

08006460 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006476:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	d023      	beq.n	80064ca <HAL_LTDC_IRQHandler+0x6a>
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01e      	beq.n	80064ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0204 	bic.w	r2, r2, #4
 800649a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2204      	movs	r2, #4
 80064a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064aa:	f043 0201 	orr.w	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2204      	movs	r2, #4
 80064b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f86f 	bl	80065a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d023      	beq.n	800651c <HAL_LTDC_IRQHandler+0xbc>
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01e      	beq.n	800651c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0202 	bic.w	r2, r2, #2
 80064ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2202      	movs	r2, #2
 80064f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064fc:	f043 0202 	orr.w	r2, r3, #2
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2204      	movs	r2, #4
 800650a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f846 	bl	80065a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01b      	beq.n	800655e <HAL_LTDC_IRQHandler+0xfe>
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d016      	beq.n	800655e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0201 	bic.w	r2, r2, #1
 800653e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2201      	movs	r2, #1
 8006546:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f82f 	bl	80065bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01b      	beq.n	80065a0 <HAL_LTDC_IRQHandler+0x140>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d016      	beq.n	80065a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0208 	bic.w	r2, r2, #8
 8006580:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2208      	movs	r2, #8
 8006588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f818 	bl	80065d0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80065e4:	b5b0      	push	{r4, r5, r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_LTDC_ConfigLayer+0x1a>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e02c      	b.n	8006658 <HAL_LTDC_ConfigLayer+0x74>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2134      	movs	r1, #52	; 0x34
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	4413      	add	r3, r2
 800661a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	4614      	mov	r4, r2
 8006622:	461d      	mov	r5, r3
 8006624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800662a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800662c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800662e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 f83b 	bl	80066b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2201      	movs	r2, #1
 8006644:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bdb0      	pop	{r4, r5, r7, pc}

08006660 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_LTDC_EnableDither+0x16>
 8006672:	2302      	movs	r3, #2
 8006674:	e016      	b.n	80066a4 <HAL_LTDC_EnableDither+0x44>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2202      	movs	r2, #2
 8006682:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006686:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <HAL_LTDC_EnableDither+0x50>)
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <HAL_LTDC_EnableDither+0x50>)
 800668c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006690:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	40016800 	.word	0x40016800

080066b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b089      	sub	sp, #36	; 0x24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	0c1b      	lsrs	r3, r3, #16
 80066cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d0:	4413      	add	r3, r2
 80066d2:	041b      	lsls	r3, r3, #16
 80066d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	01db      	lsls	r3, r3, #7
 80066e0:	4413      	add	r3, r2
 80066e2:	3384      	adds	r3, #132	; 0x84
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	6812      	ldr	r2, [r2, #0]
 80066ea:	4611      	mov	r1, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	01d2      	lsls	r2, r2, #7
 80066f0:	440a      	add	r2, r1
 80066f2:	3284      	adds	r2, #132	; 0x84
 80066f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80066f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	0c1b      	lsrs	r3, r3, #16
 8006706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670a:	4413      	add	r3, r2
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4619      	mov	r1, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	01db      	lsls	r3, r3, #7
 8006718:	440b      	add	r3, r1
 800671a:	3384      	adds	r3, #132	; 0x84
 800671c:	4619      	mov	r1, r3
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	4313      	orrs	r3, r2
 8006722:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006732:	4413      	add	r3, r2
 8006734:	041b      	lsls	r3, r3, #16
 8006736:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	01db      	lsls	r3, r3, #7
 8006742:	4413      	add	r3, r2
 8006744:	3384      	adds	r3, #132	; 0x84
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	6812      	ldr	r2, [r2, #0]
 800674c:	4611      	mov	r1, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	01d2      	lsls	r2, r2, #7
 8006752:	440a      	add	r2, r1
 8006754:	3284      	adds	r2, #132	; 0x84
 8006756:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800675a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800676a:	4413      	add	r3, r2
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4619      	mov	r1, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	01db      	lsls	r3, r3, #7
 8006778:	440b      	add	r3, r1
 800677a:	3384      	adds	r3, #132	; 0x84
 800677c:	4619      	mov	r1, r3
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	4313      	orrs	r3, r2
 8006782:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	01db      	lsls	r3, r3, #7
 800678e:	4413      	add	r3, r2
 8006790:	3384      	adds	r3, #132	; 0x84
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	4611      	mov	r1, r2
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	01d2      	lsls	r2, r2, #7
 800679e:	440a      	add	r2, r1
 80067a0:	3284      	adds	r2, #132	; 0x84
 80067a2:	f023 0307 	bic.w	r3, r3, #7
 80067a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	01db      	lsls	r3, r3, #7
 80067b2:	4413      	add	r3, r2
 80067b4:	3384      	adds	r3, #132	; 0x84
 80067b6:	461a      	mov	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	061b      	lsls	r3, r3, #24
 80067d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	01db      	lsls	r3, r3, #7
 80067e4:	4413      	add	r3, r2
 80067e6:	3384      	adds	r3, #132	; 0x84
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	01db      	lsls	r3, r3, #7
 80067f4:	4413      	add	r3, r2
 80067f6:	3384      	adds	r3, #132	; 0x84
 80067f8:	461a      	mov	r2, r3
 80067fa:	2300      	movs	r3, #0
 80067fc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006804:	461a      	mov	r2, r3
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	431a      	orrs	r2, r3
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	431a      	orrs	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4619      	mov	r1, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	01db      	lsls	r3, r3, #7
 8006818:	440b      	add	r3, r1
 800681a:	3384      	adds	r3, #132	; 0x84
 800681c:	4619      	mov	r1, r3
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	01db      	lsls	r3, r3, #7
 800682e:	4413      	add	r3, r2
 8006830:	3384      	adds	r3, #132	; 0x84
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	6812      	ldr	r2, [r2, #0]
 8006838:	4611      	mov	r1, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	01d2      	lsls	r2, r2, #7
 800683e:	440a      	add	r2, r1
 8006840:	3284      	adds	r2, #132	; 0x84
 8006842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006846:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	01db      	lsls	r3, r3, #7
 8006852:	4413      	add	r3, r2
 8006854:	3384      	adds	r3, #132	; 0x84
 8006856:	461a      	mov	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	01db      	lsls	r3, r3, #7
 8006868:	4413      	add	r3, r2
 800686a:	3384      	adds	r3, #132	; 0x84
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	4611      	mov	r1, r2
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	01d2      	lsls	r2, r2, #7
 8006878:	440a      	add	r2, r1
 800687a:	3284      	adds	r2, #132	; 0x84
 800687c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006880:	f023 0307 	bic.w	r3, r3, #7
 8006884:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	69da      	ldr	r2, [r3, #28]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	6809      	ldr	r1, [r1, #0]
 8006892:	4608      	mov	r0, r1
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	01c9      	lsls	r1, r1, #7
 8006898:	4401      	add	r1, r0
 800689a:	3184      	adds	r1, #132	; 0x84
 800689c:	4313      	orrs	r3, r2
 800689e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	01db      	lsls	r3, r3, #7
 80068aa:	4413      	add	r3, r2
 80068ac:	3384      	adds	r3, #132	; 0x84
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	01db      	lsls	r3, r3, #7
 80068ba:	4413      	add	r3, r2
 80068bc:	3384      	adds	r3, #132	; 0x84
 80068be:	461a      	mov	r2, r3
 80068c0:	2300      	movs	r3, #0
 80068c2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	01db      	lsls	r3, r3, #7
 80068ce:	4413      	add	r3, r2
 80068d0:	3384      	adds	r3, #132	; 0x84
 80068d2:	461a      	mov	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d102      	bne.n	80068e8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80068e2:	2304      	movs	r3, #4
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	e01b      	b.n	8006920 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d102      	bne.n	80068f6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80068f0:	2303      	movs	r3, #3
 80068f2:	61fb      	str	r3, [r7, #28]
 80068f4:	e014      	b.n	8006920 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d00b      	beq.n	8006916 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006902:	2b02      	cmp	r3, #2
 8006904:	d007      	beq.n	8006916 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800690a:	2b03      	cmp	r3, #3
 800690c:	d003      	beq.n	8006916 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006912:	2b07      	cmp	r3, #7
 8006914:	d102      	bne.n	800691c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006916:	2302      	movs	r3, #2
 8006918:	61fb      	str	r3, [r7, #28]
 800691a:	e001      	b.n	8006920 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800691c:	2301      	movs	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	01db      	lsls	r3, r3, #7
 800692a:	4413      	add	r3, r2
 800692c:	3384      	adds	r3, #132	; 0x84
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	4611      	mov	r1, r2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	01d2      	lsls	r2, r2, #7
 800693a:	440a      	add	r2, r1
 800693c:	3284      	adds	r2, #132	; 0x84
 800693e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006942:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	041a      	lsls	r2, r3, #16
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6859      	ldr	r1, [r3, #4]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	1acb      	subs	r3, r1, r3
 800695a:	69f9      	ldr	r1, [r7, #28]
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	3303      	adds	r3, #3
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	6809      	ldr	r1, [r1, #0]
 8006966:	4608      	mov	r0, r1
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	01c9      	lsls	r1, r1, #7
 800696c:	4401      	add	r1, r0
 800696e:	3184      	adds	r1, #132	; 0x84
 8006970:	4313      	orrs	r3, r2
 8006972:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	01db      	lsls	r3, r3, #7
 800697e:	4413      	add	r3, r2
 8006980:	3384      	adds	r3, #132	; 0x84
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	6812      	ldr	r2, [r2, #0]
 8006988:	4611      	mov	r1, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	01d2      	lsls	r2, r2, #7
 800698e:	440a      	add	r2, r1
 8006990:	3284      	adds	r2, #132	; 0x84
 8006992:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006996:	f023 0307 	bic.w	r3, r3, #7
 800699a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	01db      	lsls	r3, r3, #7
 80069a6:	4413      	add	r3, r2
 80069a8:	3384      	adds	r3, #132	; 0x84
 80069aa:	461a      	mov	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	01db      	lsls	r3, r3, #7
 80069bc:	4413      	add	r3, r2
 80069be:	3384      	adds	r3, #132	; 0x84
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	4611      	mov	r1, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	01d2      	lsls	r2, r2, #7
 80069cc:	440a      	add	r2, r1
 80069ce:	3284      	adds	r2, #132	; 0x84
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	6013      	str	r3, [r2, #0]
}
 80069d6:	bf00      	nop
 80069d8:	3724      	adds	r7, #36	; 0x24
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
	...

080069e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80069ee:	2300      	movs	r3, #0
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <HAL_PWREx_EnableOverDrive+0x90>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	4a1f      	ldr	r2, [pc, #124]	; (8006a74 <HAL_PWREx_EnableOverDrive+0x90>)
 80069f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fc:	6413      	str	r3, [r2, #64]	; 0x40
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a0a:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <HAL_PWREx_EnableOverDrive+0x94>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a10:	f7fd f98e 	bl	8003d30 <HAL_GetTick>
 8006a14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a16:	e009      	b.n	8006a2c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a18:	f7fd f98a 	bl	8003d30 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a26:	d901      	bls.n	8006a2c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e01f      	b.n	8006a6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a2c:	4b13      	ldr	r3, [pc, #76]	; (8006a7c <HAL_PWREx_EnableOverDrive+0x98>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a38:	d1ee      	bne.n	8006a18 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a3a:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a40:	f7fd f976 	bl	8003d30 <HAL_GetTick>
 8006a44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a46:	e009      	b.n	8006a5c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a48:	f7fd f972 	bl	8003d30 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a56:	d901      	bls.n	8006a5c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e007      	b.n	8006a6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a5c:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <HAL_PWREx_EnableOverDrive+0x98>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a68:	d1ee      	bne.n	8006a48 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40023800 	.word	0x40023800
 8006a78:	420e0040 	.word	0x420e0040
 8006a7c:	40007000 	.word	0x40007000
 8006a80:	420e0044 	.word	0x420e0044

08006a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e25b      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d075      	beq.n	8006b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aa2:	4ba3      	ldr	r3, [pc, #652]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 030c 	and.w	r3, r3, #12
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d00c      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aae:	4ba0      	ldr	r3, [pc, #640]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d112      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aba:	4b9d      	ldr	r3, [pc, #628]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac6:	d10b      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac8:	4b99      	ldr	r3, [pc, #612]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d05b      	beq.n	8006b8c <HAL_RCC_OscConfig+0x108>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d157      	bne.n	8006b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e236      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae8:	d106      	bne.n	8006af8 <HAL_RCC_OscConfig+0x74>
 8006aea:	4b91      	ldr	r3, [pc, #580]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a90      	ldr	r2, [pc, #576]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e01d      	b.n	8006b34 <HAL_RCC_OscConfig+0xb0>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b00:	d10c      	bne.n	8006b1c <HAL_RCC_OscConfig+0x98>
 8006b02:	4b8b      	ldr	r3, [pc, #556]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a8a      	ldr	r2, [pc, #552]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	4b88      	ldr	r3, [pc, #544]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a87      	ldr	r2, [pc, #540]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e00b      	b.n	8006b34 <HAL_RCC_OscConfig+0xb0>
 8006b1c:	4b84      	ldr	r3, [pc, #528]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a83      	ldr	r2, [pc, #524]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	4b81      	ldr	r3, [pc, #516]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a80      	ldr	r2, [pc, #512]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d013      	beq.n	8006b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3c:	f7fd f8f8 	bl	8003d30 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b44:	f7fd f8f4 	bl	8003d30 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b64      	cmp	r3, #100	; 0x64
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e1fb      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	4b76      	ldr	r3, [pc, #472]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0xc0>
 8006b62:	e014      	b.n	8006b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b64:	f7fd f8e4 	bl	8003d30 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b6c:	f7fd f8e0 	bl	8003d30 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b64      	cmp	r3, #100	; 0x64
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e1e7      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7e:	4b6c      	ldr	r3, [pc, #432]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f0      	bne.n	8006b6c <HAL_RCC_OscConfig+0xe8>
 8006b8a:	e000      	b.n	8006b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d063      	beq.n	8006c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b9a:	4b65      	ldr	r3, [pc, #404]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 030c 	and.w	r3, r3, #12
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ba6:	4b62      	ldr	r3, [pc, #392]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d11c      	bne.n	8006bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bb2:	4b5f      	ldr	r3, [pc, #380]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d116      	bne.n	8006bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bbe:	4b5c      	ldr	r3, [pc, #368]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x152>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d001      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e1bb      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd6:	4b56      	ldr	r3, [pc, #344]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4952      	ldr	r1, [pc, #328]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bea:	e03a      	b.n	8006c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d020      	beq.n	8006c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bf4:	4b4f      	ldr	r3, [pc, #316]	; (8006d34 <HAL_RCC_OscConfig+0x2b0>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfa:	f7fd f899 	bl	8003d30 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c02:	f7fd f895 	bl	8003d30 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e19c      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c14:	4b46      	ldr	r3, [pc, #280]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c20:	4b43      	ldr	r3, [pc, #268]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	4940      	ldr	r1, [pc, #256]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]
 8006c34:	e015      	b.n	8006c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c36:	4b3f      	ldr	r3, [pc, #252]	; (8006d34 <HAL_RCC_OscConfig+0x2b0>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fd f878 	bl	8003d30 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c44:	f7fd f874 	bl	8003d30 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e17b      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c56:	4b36      	ldr	r3, [pc, #216]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d030      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c76:	4b30      	ldr	r3, [pc, #192]	; (8006d38 <HAL_RCC_OscConfig+0x2b4>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7c:	f7fd f858 	bl	8003d30 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c84:	f7fd f854 	bl	8003d30 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e15b      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c96:	4b26      	ldr	r3, [pc, #152]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCC_OscConfig+0x200>
 8006ca2:	e015      	b.n	8006cd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ca4:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <HAL_RCC_OscConfig+0x2b4>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006caa:	f7fd f841 	bl	8003d30 <HAL_GetTick>
 8006cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cb0:	e008      	b.n	8006cc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cb2:	f7fd f83d 	bl	8003d30 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d901      	bls.n	8006cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e144      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f0      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 80a0 	beq.w	8006e1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10f      	bne.n	8006d0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	4a0e      	ldr	r2, [pc, #56]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <HAL_RCC_OscConfig+0x2ac>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d06:	60bb      	str	r3, [r7, #8]
 8006d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0e:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <HAL_RCC_OscConfig+0x2b8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d121      	bne.n	8006d5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d1a:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <HAL_RCC_OscConfig+0x2b8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a07      	ldr	r2, [pc, #28]	; (8006d3c <HAL_RCC_OscConfig+0x2b8>)
 8006d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d26:	f7fd f803 	bl	8003d30 <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d2c:	e011      	b.n	8006d52 <HAL_RCC_OscConfig+0x2ce>
 8006d2e:	bf00      	nop
 8006d30:	40023800 	.word	0x40023800
 8006d34:	42470000 	.word	0x42470000
 8006d38:	42470e80 	.word	0x42470e80
 8006d3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d40:	f7fc fff6 	bl	8003d30 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e0fd      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d52:	4b81      	ldr	r3, [pc, #516]	; (8006f58 <HAL_RCC_OscConfig+0x4d4>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0f0      	beq.n	8006d40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d106      	bne.n	8006d74 <HAL_RCC_OscConfig+0x2f0>
 8006d66:	4b7d      	ldr	r3, [pc, #500]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6a:	4a7c      	ldr	r2, [pc, #496]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	6713      	str	r3, [r2, #112]	; 0x70
 8006d72:	e01c      	b.n	8006dae <HAL_RCC_OscConfig+0x32a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b05      	cmp	r3, #5
 8006d7a:	d10c      	bne.n	8006d96 <HAL_RCC_OscConfig+0x312>
 8006d7c:	4b77      	ldr	r3, [pc, #476]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	4a76      	ldr	r2, [pc, #472]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006d82:	f043 0304 	orr.w	r3, r3, #4
 8006d86:	6713      	str	r3, [r2, #112]	; 0x70
 8006d88:	4b74      	ldr	r3, [pc, #464]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8c:	4a73      	ldr	r2, [pc, #460]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006d8e:	f043 0301 	orr.w	r3, r3, #1
 8006d92:	6713      	str	r3, [r2, #112]	; 0x70
 8006d94:	e00b      	b.n	8006dae <HAL_RCC_OscConfig+0x32a>
 8006d96:	4b71      	ldr	r3, [pc, #452]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	4a70      	ldr	r2, [pc, #448]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006d9c:	f023 0301 	bic.w	r3, r3, #1
 8006da0:	6713      	str	r3, [r2, #112]	; 0x70
 8006da2:	4b6e      	ldr	r3, [pc, #440]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da6:	4a6d      	ldr	r2, [pc, #436]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006da8:	f023 0304 	bic.w	r3, r3, #4
 8006dac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d015      	beq.n	8006de2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db6:	f7fc ffbb 	bl	8003d30 <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dbc:	e00a      	b.n	8006dd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dbe:	f7fc ffb7 	bl	8003d30 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e0bc      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd4:	4b61      	ldr	r3, [pc, #388]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0ee      	beq.n	8006dbe <HAL_RCC_OscConfig+0x33a>
 8006de0:	e014      	b.n	8006e0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006de2:	f7fc ffa5 	bl	8003d30 <HAL_GetTick>
 8006de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006de8:	e00a      	b.n	8006e00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dea:	f7fc ffa1 	bl	8003d30 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e0a6      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e00:	4b56      	ldr	r3, [pc, #344]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1ee      	bne.n	8006dea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d105      	bne.n	8006e1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e12:	4b52      	ldr	r3, [pc, #328]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	4a51      	ldr	r2, [pc, #324]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 8092 	beq.w	8006f4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e28:	4b4c      	ldr	r3, [pc, #304]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 030c 	and.w	r3, r3, #12
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d05c      	beq.n	8006eee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d141      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e3c:	4b48      	ldr	r3, [pc, #288]	; (8006f60 <HAL_RCC_OscConfig+0x4dc>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e42:	f7fc ff75 	bl	8003d30 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e4a:	f7fc ff71 	bl	8003d30 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e078      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e5c:	4b3f      	ldr	r3, [pc, #252]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1f0      	bne.n	8006e4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	019b      	lsls	r3, r3, #6
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	3b01      	subs	r3, #1
 8006e82:	041b      	lsls	r3, r3, #16
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	061b      	lsls	r3, r3, #24
 8006e8c:	4933      	ldr	r1, [pc, #204]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e92:	4b33      	ldr	r3, [pc, #204]	; (8006f60 <HAL_RCC_OscConfig+0x4dc>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e98:	f7fc ff4a 	bl	8003d30 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ea0:	f7fc ff46 	bl	8003d30 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e04d      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb2:	4b2a      	ldr	r3, [pc, #168]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x41c>
 8006ebe:	e045      	b.n	8006f4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec0:	4b27      	ldr	r3, [pc, #156]	; (8006f60 <HAL_RCC_OscConfig+0x4dc>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec6:	f7fc ff33 	bl	8003d30 <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ece:	f7fc ff2f 	bl	8003d30 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e036      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee0:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f0      	bne.n	8006ece <HAL_RCC_OscConfig+0x44a>
 8006eec:	e02e      	b.n	8006f4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e029      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006efa:	4b18      	ldr	r3, [pc, #96]	; (8006f5c <HAL_RCC_OscConfig+0x4d8>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d11c      	bne.n	8006f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d115      	bne.n	8006f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f22:	4013      	ands	r3, r2
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d10d      	bne.n	8006f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d106      	bne.n	8006f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d001      	beq.n	8006f4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40007000 	.word	0x40007000
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	42470060 	.word	0x42470060

08006f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e0cc      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f78:	4b68      	ldr	r3, [pc, #416]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 030f 	and.w	r3, r3, #15
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d90c      	bls.n	8006fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f86:	4b65      	ldr	r3, [pc, #404]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8e:	4b63      	ldr	r3, [pc, #396]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d001      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e0b8      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d020      	beq.n	8006fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fb8:	4b59      	ldr	r3, [pc, #356]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	4a58      	ldr	r2, [pc, #352]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fd0:	4b53      	ldr	r3, [pc, #332]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	4a52      	ldr	r2, [pc, #328]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fdc:	4b50      	ldr	r3, [pc, #320]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	494d      	ldr	r1, [pc, #308]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d044      	beq.n	8007084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d107      	bne.n	8007012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007002:	4b47      	ldr	r3, [pc, #284]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d119      	bne.n	8007042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e07f      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d003      	beq.n	8007022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800701e:	2b03      	cmp	r3, #3
 8007020:	d107      	bne.n	8007032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007022:	4b3f      	ldr	r3, [pc, #252]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e06f      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007032:	4b3b      	ldr	r3, [pc, #236]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e067      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007042:	4b37      	ldr	r3, [pc, #220]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f023 0203 	bic.w	r2, r3, #3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	4934      	ldr	r1, [pc, #208]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	4313      	orrs	r3, r2
 8007052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007054:	f7fc fe6c 	bl	8003d30 <HAL_GetTick>
 8007058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800705a:	e00a      	b.n	8007072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800705c:	f7fc fe68 	bl	8003d30 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	f241 3288 	movw	r2, #5000	; 0x1388
 800706a:	4293      	cmp	r3, r2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e04f      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007072:	4b2b      	ldr	r3, [pc, #172]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 020c 	and.w	r2, r3, #12
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	429a      	cmp	r2, r3
 8007082:	d1eb      	bne.n	800705c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007084:	4b25      	ldr	r3, [pc, #148]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d20c      	bcs.n	80070ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007092:	4b22      	ldr	r3, [pc, #136]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800709a:	4b20      	ldr	r3, [pc, #128]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d001      	beq.n	80070ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e032      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070b8:	4b19      	ldr	r3, [pc, #100]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	4916      	ldr	r1, [pc, #88]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070d6:	4b12      	ldr	r3, [pc, #72]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	490e      	ldr	r1, [pc, #56]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ea:	f000 f821 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 80070ee:	4602      	mov	r2, r0
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	091b      	lsrs	r3, r3, #4
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	490a      	ldr	r1, [pc, #40]	; (8007124 <HAL_RCC_ClockConfig+0x1c0>)
 80070fc:	5ccb      	ldrb	r3, [r1, r3]
 80070fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007102:	4a09      	ldr	r2, [pc, #36]	; (8007128 <HAL_RCC_ClockConfig+0x1c4>)
 8007104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <HAL_RCC_ClockConfig+0x1c8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f7fa fe3c 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40023c00 	.word	0x40023c00
 8007120:	40023800 	.word	0x40023800
 8007124:	0801137c 	.word	0x0801137c
 8007128:	20000000 	.word	0x20000000
 800712c:	2000005c 	.word	0x2000005c

08007130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007130:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	607b      	str	r3, [r7, #4]
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	2300      	movs	r3, #0
 8007142:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007148:	4b67      	ldr	r3, [pc, #412]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f003 030c 	and.w	r3, r3, #12
 8007150:	2b08      	cmp	r3, #8
 8007152:	d00d      	beq.n	8007170 <HAL_RCC_GetSysClockFreq+0x40>
 8007154:	2b08      	cmp	r3, #8
 8007156:	f200 80bd 	bhi.w	80072d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_RCC_GetSysClockFreq+0x34>
 800715e:	2b04      	cmp	r3, #4
 8007160:	d003      	beq.n	800716a <HAL_RCC_GetSysClockFreq+0x3a>
 8007162:	e0b7      	b.n	80072d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007164:	4b61      	ldr	r3, [pc, #388]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007166:	60bb      	str	r3, [r7, #8]
       break;
 8007168:	e0b7      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800716a:	4b61      	ldr	r3, [pc, #388]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800716c:	60bb      	str	r3, [r7, #8]
      break;
 800716e:	e0b4      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007170:	4b5d      	ldr	r3, [pc, #372]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007178:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800717a:	4b5b      	ldr	r3, [pc, #364]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d04d      	beq.n	8007222 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007186:	4b58      	ldr	r3, [pc, #352]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	099b      	lsrs	r3, r3, #6
 800718c:	461a      	mov	r2, r3
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	ea02 0800 	and.w	r8, r2, r0
 800719e:	ea03 0901 	and.w	r9, r3, r1
 80071a2:	4640      	mov	r0, r8
 80071a4:	4649      	mov	r1, r9
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	014b      	lsls	r3, r1, #5
 80071b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071b4:	0142      	lsls	r2, r0, #5
 80071b6:	4610      	mov	r0, r2
 80071b8:	4619      	mov	r1, r3
 80071ba:	ebb0 0008 	subs.w	r0, r0, r8
 80071be:	eb61 0109 	sbc.w	r1, r1, r9
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	018b      	lsls	r3, r1, #6
 80071cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071d0:	0182      	lsls	r2, r0, #6
 80071d2:	1a12      	subs	r2, r2, r0
 80071d4:	eb63 0301 	sbc.w	r3, r3, r1
 80071d8:	f04f 0000 	mov.w	r0, #0
 80071dc:	f04f 0100 	mov.w	r1, #0
 80071e0:	00d9      	lsls	r1, r3, #3
 80071e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071e6:	00d0      	lsls	r0, r2, #3
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	eb12 0208 	adds.w	r2, r2, r8
 80071f0:	eb43 0309 	adc.w	r3, r3, r9
 80071f4:	f04f 0000 	mov.w	r0, #0
 80071f8:	f04f 0100 	mov.w	r1, #0
 80071fc:	0259      	lsls	r1, r3, #9
 80071fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007202:	0250      	lsls	r0, r2, #9
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4610      	mov	r0, r2
 800720a:	4619      	mov	r1, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	461a      	mov	r2, r3
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	f7f9 fcd8 	bl	8000bc8 <__aeabi_uldivmod>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4613      	mov	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e04a      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007222:	4b31      	ldr	r3, [pc, #196]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	099b      	lsrs	r3, r3, #6
 8007228:	461a      	mov	r2, r3
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007232:	f04f 0100 	mov.w	r1, #0
 8007236:	ea02 0400 	and.w	r4, r2, r0
 800723a:	ea03 0501 	and.w	r5, r3, r1
 800723e:	4620      	mov	r0, r4
 8007240:	4629      	mov	r1, r5
 8007242:	f04f 0200 	mov.w	r2, #0
 8007246:	f04f 0300 	mov.w	r3, #0
 800724a:	014b      	lsls	r3, r1, #5
 800724c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007250:	0142      	lsls	r2, r0, #5
 8007252:	4610      	mov	r0, r2
 8007254:	4619      	mov	r1, r3
 8007256:	1b00      	subs	r0, r0, r4
 8007258:	eb61 0105 	sbc.w	r1, r1, r5
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	018b      	lsls	r3, r1, #6
 8007266:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800726a:	0182      	lsls	r2, r0, #6
 800726c:	1a12      	subs	r2, r2, r0
 800726e:	eb63 0301 	sbc.w	r3, r3, r1
 8007272:	f04f 0000 	mov.w	r0, #0
 8007276:	f04f 0100 	mov.w	r1, #0
 800727a:	00d9      	lsls	r1, r3, #3
 800727c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007280:	00d0      	lsls	r0, r2, #3
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	1912      	adds	r2, r2, r4
 8007288:	eb45 0303 	adc.w	r3, r5, r3
 800728c:	f04f 0000 	mov.w	r0, #0
 8007290:	f04f 0100 	mov.w	r1, #0
 8007294:	0299      	lsls	r1, r3, #10
 8007296:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800729a:	0290      	lsls	r0, r2, #10
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4610      	mov	r0, r2
 80072a2:	4619      	mov	r1, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	f7f9 fc8c 	bl	8000bc8 <__aeabi_uldivmod>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4613      	mov	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072b8:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	0c1b      	lsrs	r3, r3, #16
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	3301      	adds	r3, #1
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d0:	60bb      	str	r3, [r7, #8]
      break;
 80072d2:	e002      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80072d6:	60bb      	str	r3, [r7, #8]
      break;
 80072d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072da:	68bb      	ldr	r3, [r7, #8]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80072e6:	bf00      	nop
 80072e8:	40023800 	.word	0x40023800
 80072ec:	00f42400 	.word	0x00f42400
 80072f0:	007a1200 	.word	0x007a1200

080072f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072f8:	4b03      	ldr	r3, [pc, #12]	; (8007308 <HAL_RCC_GetHCLKFreq+0x14>)
 80072fa:	681b      	ldr	r3, [r3, #0]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000000 	.word	0x20000000

0800730c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007310:	f7ff fff0 	bl	80072f4 <HAL_RCC_GetHCLKFreq>
 8007314:	4602      	mov	r2, r0
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	0a9b      	lsrs	r3, r3, #10
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	4903      	ldr	r1, [pc, #12]	; (8007330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007322:	5ccb      	ldrb	r3, [r1, r3]
 8007324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007328:	4618      	mov	r0, r3
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40023800 	.word	0x40023800
 8007330:	0801138c 	.word	0x0801138c

08007334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007338:	f7ff ffdc 	bl	80072f4 <HAL_RCC_GetHCLKFreq>
 800733c:	4602      	mov	r2, r0
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	0b5b      	lsrs	r3, r3, #13
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	4903      	ldr	r1, [pc, #12]	; (8007358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800734a:	5ccb      	ldrb	r3, [r1, r3]
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40023800 	.word	0x40023800
 8007358:	0801138c 	.word	0x0801138c

0800735c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	220f      	movs	r2, #15
 800736a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800736c:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <HAL_RCC_GetClockConfig+0x5c>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 0203 	and.w	r2, r3, #3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007378:	4b0f      	ldr	r3, [pc, #60]	; (80073b8 <HAL_RCC_GetClockConfig+0x5c>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007384:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <HAL_RCC_GetClockConfig+0x5c>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007390:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <HAL_RCC_GetClockConfig+0x5c>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	08db      	lsrs	r3, r3, #3
 8007396:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800739e:	4b07      	ldr	r3, [pc, #28]	; (80073bc <HAL_RCC_GetClockConfig+0x60>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 020f 	and.w	r2, r3, #15
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	601a      	str	r2, [r3, #0]
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40023800 	.word	0x40023800
 80073bc:	40023c00 	.word	0x40023c00

080073c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10b      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d105      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d075      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073f4:	4bad      	ldr	r3, [pc, #692]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073fa:	f7fc fc99 	bl	8003d30 <HAL_GetTick>
 80073fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007400:	e008      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007402:	f7fc fc95 	bl	8003d30 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d901      	bls.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e18b      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007414:	4ba6      	ldr	r3, [pc, #664]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1f0      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	019a      	lsls	r2, r3, #6
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	071b      	lsls	r3, r3, #28
 8007438:	499d      	ldr	r1, [pc, #628]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800743a:	4313      	orrs	r3, r2
 800743c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01f      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800744c:	4b98      	ldr	r3, [pc, #608]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800744e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007452:	0f1b      	lsrs	r3, r3, #28
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	019a      	lsls	r2, r3, #6
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	061b      	lsls	r3, r3, #24
 8007466:	431a      	orrs	r2, r3
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	071b      	lsls	r3, r3, #28
 800746c:	4990      	ldr	r1, [pc, #576]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007474:	4b8e      	ldr	r3, [pc, #568]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800747a:	f023 021f 	bic.w	r2, r3, #31
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	3b01      	subs	r3, #1
 8007484:	498a      	ldr	r1, [pc, #552]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007486:	4313      	orrs	r3, r2
 8007488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00d      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	019a      	lsls	r2, r3, #6
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	061b      	lsls	r3, r3, #24
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	071b      	lsls	r3, r3, #28
 80074ac:	4980      	ldr	r1, [pc, #512]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074b4:	4b7d      	ldr	r3, [pc, #500]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074ba:	f7fc fc39 	bl	8003d30 <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074c0:	e008      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074c2:	f7fc fc35 	bl	8003d30 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e12b      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074d4:	4b76      	ldr	r3, [pc, #472]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d079      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074f8:	4b6e      	ldr	r3, [pc, #440]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074fe:	f7fc fc17 	bl	8003d30 <HAL_GetTick>
 8007502:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007504:	e008      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007506:	f7fc fc13 	bl	8003d30 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b02      	cmp	r3, #2
 8007512:	d901      	bls.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e109      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007518:	4b65      	ldr	r3, [pc, #404]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007524:	d0ef      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d020      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007532:	4b5f      	ldr	r3, [pc, #380]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007538:	0f1b      	lsrs	r3, r3, #28
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	019a      	lsls	r2, r3, #6
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	061b      	lsls	r3, r3, #24
 800754c:	431a      	orrs	r2, r3
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	071b      	lsls	r3, r3, #28
 8007552:	4957      	ldr	r1, [pc, #348]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007554:	4313      	orrs	r3, r2
 8007556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800755a:	4b55      	ldr	r3, [pc, #340]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800755c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007560:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	3b01      	subs	r3, #1
 800756a:	021b      	lsls	r3, r3, #8
 800756c:	4950      	ldr	r1, [pc, #320]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800756e:	4313      	orrs	r3, r2
 8007570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0308 	and.w	r3, r3, #8
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01e      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007580:	4b4b      	ldr	r3, [pc, #300]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007586:	0e1b      	lsrs	r3, r3, #24
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	019a      	lsls	r2, r3, #6
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	061b      	lsls	r3, r3, #24
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	071b      	lsls	r3, r3, #28
 80075a0:	4943      	ldr	r1, [pc, #268]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80075a8:	4b41      	ldr	r3, [pc, #260]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	493e      	ldr	r1, [pc, #248]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075be:	4b3d      	ldr	r3, [pc, #244]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075c4:	f7fc fbb4 	bl	8003d30 <HAL_GetTick>
 80075c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075ca:	e008      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80075cc:	f7fc fbb0 	bl	8003d30 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d901      	bls.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e0a6      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075de:	4b34      	ldr	r3, [pc, #208]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ea:	d1ef      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 808d 	beq.w	8007714 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	4b2c      	ldr	r3, [pc, #176]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	4a2b      	ldr	r2, [pc, #172]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007608:	6413      	str	r3, [r2, #64]	; 0x40
 800760a:	4b29      	ldr	r3, [pc, #164]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007616:	4b28      	ldr	r3, [pc, #160]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a27      	ldr	r2, [pc, #156]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800761c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007620:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007622:	f7fc fb85 	bl	8003d30 <HAL_GetTick>
 8007626:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007628:	e008      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800762a:	f7fc fb81 	bl	8003d30 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e077      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800763c:	4b1e      	ldr	r3, [pc, #120]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0f0      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007648:	4b19      	ldr	r3, [pc, #100]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800764a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007650:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d039      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	429a      	cmp	r2, r3
 8007664:	d032      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007666:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800766e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007670:	4b12      	ldr	r3, [pc, #72]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007672:	2201      	movs	r2, #1
 8007674:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007676:	4b11      	ldr	r3, [pc, #68]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800767c:	4a0c      	ldr	r2, [pc, #48]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007682:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b01      	cmp	r3, #1
 800768c:	d11e      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800768e:	f7fc fb4f 	bl	8003d30 <HAL_GetTick>
 8007692:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007694:	e014      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007696:	f7fc fb4b 	bl	8003d30 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d90b      	bls.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e03f      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80076ac:	42470068 	.word	0x42470068
 80076b0:	40023800 	.word	0x40023800
 80076b4:	42470070 	.word	0x42470070
 80076b8:	40007000 	.word	0x40007000
 80076bc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c0:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0e4      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076d8:	d10d      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80076da:	4b16      	ldr	r3, [pc, #88]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ee:	4911      	ldr	r1, [pc, #68]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	608b      	str	r3, [r1, #8]
 80076f4:	e005      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80076f6:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	4a0e      	ldr	r2, [pc, #56]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007700:	6093      	str	r3, [r2, #8]
 8007702:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007704:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800770e:	4909      	ldr	r1, [pc, #36]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007710:	4313      	orrs	r3, r2
 8007712:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007726:	4b04      	ldr	r3, [pc, #16]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007728:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40023800 	.word	0x40023800
 8007738:	424711e0 	.word	0x424711e0

0800773c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e025      	b.n	800779c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d106      	bne.n	800776a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7f9 fce7 	bl	8001138 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2202      	movs	r2, #2
 800776e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3304      	adds	r3, #4
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f002 f901 	bl	8009984 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	461a      	mov	r2, r3
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	f002 f96c 	bl	8009a6a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d101      	bne.n	80077c0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80077bc:	2302      	movs	r3, #2
 80077be:	e018      	b.n	80077f2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f002 f9c9 	bl	8009b68 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d104      	bne.n	80077e8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2205      	movs	r2, #5
 80077e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80077e6:	e003      	b.n	80077f0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d101      	bne.n	8007814 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007810:	2302      	movs	r3, #2
 8007812:	e00e      	b.n	8007832 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f002 f9dc 	bl	8009be0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e056      	b.n	80078fa <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fa f9fc 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	ea42 0103 	orr.w	r1, r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	0c1b      	lsrs	r3, r3, #16
 80078ca:	f003 0104 	and.w	r1, r3, #4
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69da      	ldr	r2, [r3, #28]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e01a      	b.n	800794a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800792a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7fa f9e1 	bl	8001cf4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b088      	sub	sp, #32
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	603b      	str	r3, [r7, #0]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_SPI_Transmit+0x22>
 8007970:	2302      	movs	r3, #2
 8007972:	e11e      	b.n	8007bb2 <HAL_SPI_Transmit+0x260>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800797c:	f7fc f9d8 	bl	8003d30 <HAL_GetTick>
 8007980:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b01      	cmp	r3, #1
 8007990:	d002      	beq.n	8007998 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007992:	2302      	movs	r3, #2
 8007994:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007996:	e103      	b.n	8007ba0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_SPI_Transmit+0x52>
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079a8:	e0fa      	b.n	8007ba0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2203      	movs	r2, #3
 80079ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	88fa      	ldrh	r2, [r7, #6]
 80079c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	88fa      	ldrh	r2, [r7, #6]
 80079c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f0:	d107      	bne.n	8007a02 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0c:	2b40      	cmp	r3, #64	; 0x40
 8007a0e:	d007      	beq.n	8007a20 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a28:	d14b      	bne.n	8007ac2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_SPI_Transmit+0xe6>
 8007a32:	8afb      	ldrh	r3, [r7, #22]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d13e      	bne.n	8007ab6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3c:	881a      	ldrh	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	1c9a      	adds	r2, r3, #2
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a5c:	e02b      	b.n	8007ab6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d112      	bne.n	8007a92 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	881a      	ldrh	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	1c9a      	adds	r2, r3, #2
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a90:	e011      	b.n	8007ab6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a92:	f7fc f94d 	bl	8003d30 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d803      	bhi.n	8007aaa <HAL_SPI_Transmit+0x158>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa8:	d102      	bne.n	8007ab0 <HAL_SPI_Transmit+0x15e>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d102      	bne.n	8007ab6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ab4:	e074      	b.n	8007ba0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1ce      	bne.n	8007a5e <HAL_SPI_Transmit+0x10c>
 8007ac0:	e04c      	b.n	8007b5c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_SPI_Transmit+0x17e>
 8007aca:	8afb      	ldrh	r3, [r7, #22]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d140      	bne.n	8007b52 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	7812      	ldrb	r2, [r2, #0]
 8007adc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	3b01      	subs	r3, #1
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007af6:	e02c      	b.n	8007b52 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d113      	bne.n	8007b2e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	7812      	ldrb	r2, [r2, #0]
 8007b12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b2c:	e011      	b.n	8007b52 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b2e:	f7fc f8ff 	bl	8003d30 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d803      	bhi.n	8007b46 <HAL_SPI_Transmit+0x1f4>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b44:	d102      	bne.n	8007b4c <HAL_SPI_Transmit+0x1fa>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b50:	e026      	b.n	8007ba0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1cd      	bne.n	8007af8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fbb3 	bl	80082cc <SPI_EndRxTxTransaction>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	613b      	str	r3, [r7, #16]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	613b      	str	r3, [r7, #16]
 8007b8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	77fb      	strb	r3, [r7, #31]
 8007b9c:	e000      	b.n	8007ba0 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007b9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b088      	sub	sp, #32
 8007bbe:	af02      	add	r7, sp, #8
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	603b      	str	r3, [r7, #0]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bd6:	d112      	bne.n	8007bfe <HAL_SPI_Receive+0x44>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10e      	bne.n	8007bfe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2204      	movs	r2, #4
 8007be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007be8:	88fa      	ldrh	r2, [r7, #6]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f8e9 	bl	8007dcc <HAL_SPI_TransmitReceive>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	e0e2      	b.n	8007dc4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <HAL_SPI_Receive+0x52>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e0db      	b.n	8007dc4 <HAL_SPI_Receive+0x20a>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c14:	f7fc f88c 	bl	8003d30 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d002      	beq.n	8007c2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007c26:	2302      	movs	r3, #2
 8007c28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c2a:	e0c2      	b.n	8007db2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <HAL_SPI_Receive+0x7e>
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c3c:	e0b9      	b.n	8007db2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2204      	movs	r2, #4
 8007c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c84:	d107      	bne.n	8007c96 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca0:	2b40      	cmp	r3, #64	; 0x40
 8007ca2:	d007      	beq.n	8007cb4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d162      	bne.n	8007d82 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007cbc:	e02e      	b.n	8007d1c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d115      	bne.n	8007cf8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f103 020c 	add.w	r2, r3, #12
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	7812      	ldrb	r2, [r2, #0]
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cf6:	e011      	b.n	8007d1c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cf8:	f7fc f81a 	bl	8003d30 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d803      	bhi.n	8007d10 <HAL_SPI_Receive+0x156>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	d102      	bne.n	8007d16 <HAL_SPI_Receive+0x15c>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d1a:	e04a      	b.n	8007db2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1cb      	bne.n	8007cbe <HAL_SPI_Receive+0x104>
 8007d26:	e031      	b.n	8007d8c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d113      	bne.n	8007d5e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	b292      	uxth	r2, r2
 8007d42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	1c9a      	adds	r2, r3, #2
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d5c:	e011      	b.n	8007d82 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d5e:	f7fb ffe7 	bl	8003d30 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d803      	bhi.n	8007d76 <HAL_SPI_Receive+0x1bc>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d102      	bne.n	8007d7c <HAL_SPI_Receive+0x1c2>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d80:	e017      	b.n	8007db2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1cd      	bne.n	8007d28 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 fa35 	bl	8008200 <SPI_EndRxTransaction>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
 8007dae:	e000      	b.n	8007db2 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007db0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08c      	sub	sp, #48	; 0x30
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_SPI_TransmitReceive+0x26>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e18a      	b.n	8008108 <HAL_SPI_TransmitReceive+0x33c>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dfa:	f7fb ff99 	bl	8003d30 <HAL_GetTick>
 8007dfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007e10:	887b      	ldrh	r3, [r7, #2]
 8007e12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d00f      	beq.n	8007e3c <HAL_SPI_TransmitReceive+0x70>
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e22:	d107      	bne.n	8007e34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d103      	bne.n	8007e34 <HAL_SPI_TransmitReceive+0x68>
 8007e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d003      	beq.n	8007e3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e34:	2302      	movs	r3, #2
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e3a:	e15b      	b.n	80080f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <HAL_SPI_TransmitReceive+0x82>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <HAL_SPI_TransmitReceive+0x82>
 8007e48:	887b      	ldrh	r3, [r7, #2]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d103      	bne.n	8007e56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e54:	e14e      	b.n	80080f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d003      	beq.n	8007e6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2205      	movs	r2, #5
 8007e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	887a      	ldrh	r2, [r7, #2]
 8007e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	887a      	ldrh	r2, [r7, #2]
 8007e80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	887a      	ldrh	r2, [r7, #2]
 8007e8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	887a      	ldrh	r2, [r7, #2]
 8007e92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eaa:	2b40      	cmp	r3, #64	; 0x40
 8007eac:	d007      	beq.n	8007ebe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ebc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec6:	d178      	bne.n	8007fba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <HAL_SPI_TransmitReceive+0x10a>
 8007ed0:	8b7b      	ldrh	r3, [r7, #26]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d166      	bne.n	8007fa4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	881a      	ldrh	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	1c9a      	adds	r2, r3, #2
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007efa:	e053      	b.n	8007fa4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d11b      	bne.n	8007f42 <HAL_SPI_TransmitReceive+0x176>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d016      	beq.n	8007f42 <HAL_SPI_TransmitReceive+0x176>
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d113      	bne.n	8007f42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	881a      	ldrh	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2a:	1c9a      	adds	r2, r3, #2
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d119      	bne.n	8007f84 <HAL_SPI_TransmitReceive+0x1b8>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d014      	beq.n	8007f84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	b292      	uxth	r2, r2
 8007f66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	1c9a      	adds	r2, r3, #2
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f80:	2301      	movs	r3, #1
 8007f82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f84:	f7fb fed4 	bl	8003d30 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d807      	bhi.n	8007fa4 <HAL_SPI_TransmitReceive+0x1d8>
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9a:	d003      	beq.n	8007fa4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fa2:	e0a7      	b.n	80080f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1a6      	bne.n	8007efc <HAL_SPI_TransmitReceive+0x130>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1a1      	bne.n	8007efc <HAL_SPI_TransmitReceive+0x130>
 8007fb8:	e07c      	b.n	80080b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <HAL_SPI_TransmitReceive+0x1fc>
 8007fc2:	8b7b      	ldrh	r3, [r7, #26]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d16b      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	330c      	adds	r3, #12
 8007fd2:	7812      	ldrb	r2, [r2, #0]
 8007fd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fee:	e057      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d11c      	bne.n	8008038 <HAL_SPI_TransmitReceive+0x26c>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008002:	b29b      	uxth	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d017      	beq.n	8008038 <HAL_SPI_TransmitReceive+0x26c>
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	2b01      	cmp	r3, #1
 800800c:	d114      	bne.n	8008038 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	330c      	adds	r3, #12
 8008018:	7812      	ldrb	r2, [r2, #0]
 800801a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800802a:	b29b      	uxth	r3, r3
 800802c:	3b01      	subs	r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b01      	cmp	r3, #1
 8008044:	d119      	bne.n	800807a <HAL_SPI_TransmitReceive+0x2ae>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d014      	beq.n	800807a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800806c:	b29b      	uxth	r3, r3
 800806e:	3b01      	subs	r3, #1
 8008070:	b29a      	uxth	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008076:	2301      	movs	r3, #1
 8008078:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800807a:	f7fb fe59 	bl	8003d30 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008086:	429a      	cmp	r2, r3
 8008088:	d803      	bhi.n	8008092 <HAL_SPI_TransmitReceive+0x2c6>
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d102      	bne.n	8008098 <HAL_SPI_TransmitReceive+0x2cc>
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	2b00      	cmp	r3, #0
 8008096:	d103      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800809e:	e029      	b.n	80080f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1a2      	bne.n	8007ff0 <HAL_SPI_TransmitReceive+0x224>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d19d      	bne.n	8007ff0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 f907 	bl	80082cc <SPI_EndRxTxTransaction>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2220      	movs	r2, #32
 80080ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80080d0:	e010      	b.n	80080f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	e000      	b.n	80080f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80080f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008104:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008108:	4618      	mov	r0, r3
 800810a:	3730      	adds	r7, #48	; 0x30
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800811e:	b2db      	uxtb	r3, r3
}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4613      	mov	r3, r2
 800813a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800813c:	e04c      	b.n	80081d8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008144:	d048      	beq.n	80081d8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008146:	f7fb fdf3 	bl	8003d30 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d902      	bls.n	800815c <SPI_WaitFlagStateUntilTimeout+0x30>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d13d      	bne.n	80081d8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800816a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008174:	d111      	bne.n	800819a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800817e:	d004      	beq.n	800818a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008188:	d107      	bne.n	800819a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008198:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081a2:	d10f      	bne.n	80081c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e00f      	b.n	80081f8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689a      	ldr	r2, [r3, #8]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4013      	ands	r3, r2
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	bf0c      	ite	eq
 80081e8:	2301      	moveq	r3, #1
 80081ea:	2300      	movne	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	461a      	mov	r2, r3
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d1a3      	bne.n	800813e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af02      	add	r7, sp, #8
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008214:	d111      	bne.n	800823a <SPI_EndRxTransaction+0x3a>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800821e:	d004      	beq.n	800822a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008228:	d107      	bne.n	800823a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008238:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008242:	d12a      	bne.n	800829a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800824c:	d012      	beq.n	8008274 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2200      	movs	r2, #0
 8008256:	2180      	movs	r1, #128	; 0x80
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7ff ff67 	bl	800812c <SPI_WaitFlagStateUntilTimeout>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d02d      	beq.n	80082c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008268:	f043 0220 	orr.w	r2, r3, #32
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e026      	b.n	80082c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2200      	movs	r2, #0
 800827c:	2101      	movs	r1, #1
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7ff ff54 	bl	800812c <SPI_WaitFlagStateUntilTimeout>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01a      	beq.n	80082c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828e:	f043 0220 	orr.w	r2, r3, #32
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e013      	b.n	80082c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2200      	movs	r2, #0
 80082a2:	2101      	movs	r1, #1
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff ff41 	bl	800812c <SPI_WaitFlagStateUntilTimeout>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d007      	beq.n	80082c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b4:	f043 0220 	orr.w	r2, r3, #32
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e000      	b.n	80082c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082d8:	4b1b      	ldr	r3, [pc, #108]	; (8008348 <SPI_EndRxTxTransaction+0x7c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a1b      	ldr	r2, [pc, #108]	; (800834c <SPI_EndRxTxTransaction+0x80>)
 80082de:	fba2 2303 	umull	r2, r3, r2, r3
 80082e2:	0d5b      	lsrs	r3, r3, #21
 80082e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082e8:	fb02 f303 	mul.w	r3, r2, r3
 80082ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082f6:	d112      	bne.n	800831e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2200      	movs	r2, #0
 8008300:	2180      	movs	r1, #128	; 0x80
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7ff ff12 	bl	800812c <SPI_WaitFlagStateUntilTimeout>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d016      	beq.n	800833c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008312:	f043 0220 	orr.w	r2, r3, #32
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e00f      	b.n	800833e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00a      	beq.n	800833a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	3b01      	subs	r3, #1
 8008328:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008334:	2b80      	cmp	r3, #128	; 0x80
 8008336:	d0f2      	beq.n	800831e <SPI_EndRxTxTransaction+0x52>
 8008338:	e000      	b.n	800833c <SPI_EndRxTxTransaction+0x70>
        break;
 800833a:	bf00      	nop
  }

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000000 	.word	0x20000000
 800834c:	165e9f81 	.word	0x165e9f81

08008350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e01d      	b.n	800839e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7fa fa00 	bl	800277c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3304      	adds	r3, #4
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f000 fa22 	bl	80087d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b085      	sub	sp, #20
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0201 	orr.w	r2, r2, #1
 80083bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 0307 	and.w	r3, r3, #7
 80083c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b06      	cmp	r3, #6
 80083ce:	d007      	beq.n	80083e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0201 	orr.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b02      	cmp	r3, #2
 8008402:	d122      	bne.n	800844a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b02      	cmp	r3, #2
 8008410:	d11b      	bne.n	800844a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f06f 0202 	mvn.w	r2, #2
 800841a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	f003 0303 	and.w	r3, r3, #3
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f9b2 	bl	800879a <HAL_TIM_IC_CaptureCallback>
 8008436:	e005      	b.n	8008444 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f9a4 	bl	8008786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f9b5 	bl	80087ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	2b04      	cmp	r3, #4
 8008456:	d122      	bne.n	800849e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b04      	cmp	r3, #4
 8008464:	d11b      	bne.n	800849e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f06f 0204 	mvn.w	r2, #4
 800846e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f988 	bl	800879a <HAL_TIM_IC_CaptureCallback>
 800848a:	e005      	b.n	8008498 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f97a 	bl	8008786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f98b 	bl	80087ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d122      	bne.n	80084f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f003 0308 	and.w	r3, r3, #8
 80084b6:	2b08      	cmp	r3, #8
 80084b8:	d11b      	bne.n	80084f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f06f 0208 	mvn.w	r2, #8
 80084c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2204      	movs	r2, #4
 80084c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	f003 0303 	and.w	r3, r3, #3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f95e 	bl	800879a <HAL_TIM_IC_CaptureCallback>
 80084de:	e005      	b.n	80084ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f950 	bl	8008786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f961 	bl	80087ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	f003 0310 	and.w	r3, r3, #16
 80084fc:	2b10      	cmp	r3, #16
 80084fe:	d122      	bne.n	8008546 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b10      	cmp	r3, #16
 800850c:	d11b      	bne.n	8008546 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f06f 0210 	mvn.w	r2, #16
 8008516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2208      	movs	r2, #8
 800851c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f934 	bl	800879a <HAL_TIM_IC_CaptureCallback>
 8008532:	e005      	b.n	8008540 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f926 	bl	8008786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f937 	bl	80087ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b01      	cmp	r3, #1
 8008552:	d10e      	bne.n	8008572 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b01      	cmp	r3, #1
 8008560:	d107      	bne.n	8008572 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f06f 0201 	mvn.w	r2, #1
 800856a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7f9 fb29 	bl	8001bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857c:	2b80      	cmp	r3, #128	; 0x80
 800857e:	d10e      	bne.n	800859e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800858a:	2b80      	cmp	r3, #128	; 0x80
 800858c:	d107      	bne.n	800859e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fadd 	bl	8008b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a8:	2b40      	cmp	r3, #64	; 0x40
 80085aa:	d10e      	bne.n	80085ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b6:	2b40      	cmp	r3, #64	; 0x40
 80085b8:	d107      	bne.n	80085ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f8fc 	bl	80087c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	f003 0320 	and.w	r3, r3, #32
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d10e      	bne.n	80085f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d107      	bne.n	80085f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f06f 0220 	mvn.w	r2, #32
 80085ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 faa7 	bl	8008b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085f6:	bf00      	nop
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_TIM_ConfigClockSource+0x18>
 8008612:	2302      	movs	r3, #2
 8008614:	e0b3      	b.n	800877e <HAL_TIM_ConfigClockSource+0x180>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2202      	movs	r2, #2
 8008622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008634:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800863c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800864e:	d03e      	beq.n	80086ce <HAL_TIM_ConfigClockSource+0xd0>
 8008650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008654:	f200 8087 	bhi.w	8008766 <HAL_TIM_ConfigClockSource+0x168>
 8008658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800865c:	f000 8085 	beq.w	800876a <HAL_TIM_ConfigClockSource+0x16c>
 8008660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008664:	d87f      	bhi.n	8008766 <HAL_TIM_ConfigClockSource+0x168>
 8008666:	2b70      	cmp	r3, #112	; 0x70
 8008668:	d01a      	beq.n	80086a0 <HAL_TIM_ConfigClockSource+0xa2>
 800866a:	2b70      	cmp	r3, #112	; 0x70
 800866c:	d87b      	bhi.n	8008766 <HAL_TIM_ConfigClockSource+0x168>
 800866e:	2b60      	cmp	r3, #96	; 0x60
 8008670:	d050      	beq.n	8008714 <HAL_TIM_ConfigClockSource+0x116>
 8008672:	2b60      	cmp	r3, #96	; 0x60
 8008674:	d877      	bhi.n	8008766 <HAL_TIM_ConfigClockSource+0x168>
 8008676:	2b50      	cmp	r3, #80	; 0x50
 8008678:	d03c      	beq.n	80086f4 <HAL_TIM_ConfigClockSource+0xf6>
 800867a:	2b50      	cmp	r3, #80	; 0x50
 800867c:	d873      	bhi.n	8008766 <HAL_TIM_ConfigClockSource+0x168>
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	d058      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x136>
 8008682:	2b40      	cmp	r3, #64	; 0x40
 8008684:	d86f      	bhi.n	8008766 <HAL_TIM_ConfigClockSource+0x168>
 8008686:	2b30      	cmp	r3, #48	; 0x30
 8008688:	d064      	beq.n	8008754 <HAL_TIM_ConfigClockSource+0x156>
 800868a:	2b30      	cmp	r3, #48	; 0x30
 800868c:	d86b      	bhi.n	8008766 <HAL_TIM_ConfigClockSource+0x168>
 800868e:	2b20      	cmp	r3, #32
 8008690:	d060      	beq.n	8008754 <HAL_TIM_ConfigClockSource+0x156>
 8008692:	2b20      	cmp	r3, #32
 8008694:	d867      	bhi.n	8008766 <HAL_TIM_ConfigClockSource+0x168>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d05c      	beq.n	8008754 <HAL_TIM_ConfigClockSource+0x156>
 800869a:	2b10      	cmp	r3, #16
 800869c:	d05a      	beq.n	8008754 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800869e:	e062      	b.n	8008766 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	6899      	ldr	r1, [r3, #8]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f000 f9ac 	bl	8008a0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	609a      	str	r2, [r3, #8]
      break;
 80086cc:	e04e      	b.n	800876c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	6899      	ldr	r1, [r3, #8]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f000 f995 	bl	8008a0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086f0:	609a      	str	r2, [r3, #8]
      break;
 80086f2:	e03b      	b.n	800876c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	6859      	ldr	r1, [r3, #4]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	461a      	mov	r2, r3
 8008702:	f000 f909 	bl	8008918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2150      	movs	r1, #80	; 0x50
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f962 	bl	80089d6 <TIM_ITRx_SetConfig>
      break;
 8008712:	e02b      	b.n	800876c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	6859      	ldr	r1, [r3, #4]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	461a      	mov	r2, r3
 8008722:	f000 f928 	bl	8008976 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2160      	movs	r1, #96	; 0x60
 800872c:	4618      	mov	r0, r3
 800872e:	f000 f952 	bl	80089d6 <TIM_ITRx_SetConfig>
      break;
 8008732:	e01b      	b.n	800876c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	6859      	ldr	r1, [r3, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	461a      	mov	r2, r3
 8008742:	f000 f8e9 	bl	8008918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2140      	movs	r1, #64	; 0x40
 800874c:	4618      	mov	r0, r3
 800874e:	f000 f942 	bl	80089d6 <TIM_ITRx_SetConfig>
      break;
 8008752:	e00b      	b.n	800876c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4619      	mov	r1, r3
 800875e:	4610      	mov	r0, r2
 8008760:	f000 f939 	bl	80089d6 <TIM_ITRx_SetConfig>
      break;
 8008764:	e002      	b.n	800876c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008766:	bf00      	nop
 8008768:	e000      	b.n	800876c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800876a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087b6:	bf00      	nop
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
	...

080087d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a40      	ldr	r2, [pc, #256]	; (80088ec <TIM_Base_SetConfig+0x114>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d013      	beq.n	8008818 <TIM_Base_SetConfig+0x40>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f6:	d00f      	beq.n	8008818 <TIM_Base_SetConfig+0x40>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a3d      	ldr	r2, [pc, #244]	; (80088f0 <TIM_Base_SetConfig+0x118>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00b      	beq.n	8008818 <TIM_Base_SetConfig+0x40>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a3c      	ldr	r2, [pc, #240]	; (80088f4 <TIM_Base_SetConfig+0x11c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d007      	beq.n	8008818 <TIM_Base_SetConfig+0x40>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a3b      	ldr	r2, [pc, #236]	; (80088f8 <TIM_Base_SetConfig+0x120>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d003      	beq.n	8008818 <TIM_Base_SetConfig+0x40>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a3a      	ldr	r2, [pc, #232]	; (80088fc <TIM_Base_SetConfig+0x124>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d108      	bne.n	800882a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a2f      	ldr	r2, [pc, #188]	; (80088ec <TIM_Base_SetConfig+0x114>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d02b      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008838:	d027      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a2c      	ldr	r2, [pc, #176]	; (80088f0 <TIM_Base_SetConfig+0x118>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d023      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a2b      	ldr	r2, [pc, #172]	; (80088f4 <TIM_Base_SetConfig+0x11c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d01f      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a2a      	ldr	r2, [pc, #168]	; (80088f8 <TIM_Base_SetConfig+0x120>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d01b      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a29      	ldr	r2, [pc, #164]	; (80088fc <TIM_Base_SetConfig+0x124>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d017      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a28      	ldr	r2, [pc, #160]	; (8008900 <TIM_Base_SetConfig+0x128>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d013      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a27      	ldr	r2, [pc, #156]	; (8008904 <TIM_Base_SetConfig+0x12c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00f      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a26      	ldr	r2, [pc, #152]	; (8008908 <TIM_Base_SetConfig+0x130>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00b      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a25      	ldr	r2, [pc, #148]	; (800890c <TIM_Base_SetConfig+0x134>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d007      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a24      	ldr	r2, [pc, #144]	; (8008910 <TIM_Base_SetConfig+0x138>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d003      	beq.n	800888a <TIM_Base_SetConfig+0xb2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a23      	ldr	r2, [pc, #140]	; (8008914 <TIM_Base_SetConfig+0x13c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d108      	bne.n	800889c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4313      	orrs	r3, r2
 800889a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <TIM_Base_SetConfig+0x114>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d003      	beq.n	80088d0 <TIM_Base_SetConfig+0xf8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a0c      	ldr	r2, [pc, #48]	; (80088fc <TIM_Base_SetConfig+0x124>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d103      	bne.n	80088d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	691a      	ldr	r2, [r3, #16]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	615a      	str	r2, [r3, #20]
}
 80088de:	bf00      	nop
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	40010000 	.word	0x40010000
 80088f0:	40000400 	.word	0x40000400
 80088f4:	40000800 	.word	0x40000800
 80088f8:	40000c00 	.word	0x40000c00
 80088fc:	40010400 	.word	0x40010400
 8008900:	40014000 	.word	0x40014000
 8008904:	40014400 	.word	0x40014400
 8008908:	40014800 	.word	0x40014800
 800890c:	40001800 	.word	0x40001800
 8008910:	40001c00 	.word	0x40001c00
 8008914:	40002000 	.word	0x40002000

08008918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	f023 0201 	bic.w	r2, r3, #1
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	4313      	orrs	r3, r2
 800894c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f023 030a 	bic.w	r3, r3, #10
 8008954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4313      	orrs	r3, r2
 800895c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	621a      	str	r2, [r3, #32]
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008976:	b480      	push	{r7}
 8008978:	b087      	sub	sp, #28
 800897a:	af00      	add	r7, sp, #0
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	f023 0210 	bic.w	r2, r3, #16
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	031b      	lsls	r3, r3, #12
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	621a      	str	r2, [r3, #32]
}
 80089ca:	bf00      	nop
 80089cc:	371c      	adds	r7, #28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b085      	sub	sp, #20
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	f043 0307 	orr.w	r3, r3, #7
 80089f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	609a      	str	r2, [r3, #8]
}
 8008a00:	bf00      	nop
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	021a      	lsls	r2, r3, #8
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	609a      	str	r2, [r3, #8]
}
 8008a40:	bf00      	nop
 8008a42:	371c      	adds	r7, #28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d101      	bne.n	8008a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a60:	2302      	movs	r3, #2
 8008a62:	e05a      	b.n	8008b1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a21      	ldr	r2, [pc, #132]	; (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d022      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab0:	d01d      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a1d      	ldr	r2, [pc, #116]	; (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d018      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a1b      	ldr	r2, [pc, #108]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d013      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a1a      	ldr	r2, [pc, #104]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00e      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d009      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a17      	ldr	r2, [pc, #92]	; (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d10c      	bne.n	8008b08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40000400 	.word	0x40000400
 8008b30:	40000800 	.word	0x40000800
 8008b34:	40000c00 	.word	0x40000c00
 8008b38:	40010400 	.word	0x40010400
 8008b3c:	40014000 	.word	0x40014000
 8008b40:	40001800 	.word	0x40001800

08008b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e03f      	b.n	8008bfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d106      	bne.n	8008b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7f9 fe78 	bl	8002888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2224      	movs	r2, #36	; 0x24
 8008b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fb4b 	bl	800924c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	695a      	ldr	r2, [r3, #20]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68da      	ldr	r2, [r3, #12]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b088      	sub	sp, #32
 8008c0a:	af02      	add	r7, sp, #8
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	603b      	str	r3, [r7, #0]
 8008c12:	4613      	mov	r3, r2
 8008c14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b20      	cmp	r3, #32
 8008c24:	f040 8083 	bne.w	8008d2e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <HAL_UART_Transmit+0x2e>
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e07b      	b.n	8008d30 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Transmit+0x40>
 8008c42:	2302      	movs	r3, #2
 8008c44:	e074      	b.n	8008d30 <HAL_UART_Transmit+0x12a>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2221      	movs	r2, #33	; 0x21
 8008c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008c5c:	f7fb f868 	bl	8003d30 <HAL_GetTick>
 8008c60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	88fa      	ldrh	r2, [r7, #6]
 8008c66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	88fa      	ldrh	r2, [r7, #6]
 8008c6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008c76:	e042      	b.n	8008cfe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8e:	d122      	bne.n	8008cd6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	2200      	movs	r2, #0
 8008c98:	2180      	movs	r1, #128	; 0x80
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 f96a 	bl	8008f74 <UART_WaitOnFlagUntilTimeout>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e042      	b.n	8008d30 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d103      	bne.n	8008cce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	3302      	adds	r3, #2
 8008cca:	60bb      	str	r3, [r7, #8]
 8008ccc:	e017      	b.n	8008cfe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	60bb      	str	r3, [r7, #8]
 8008cd4:	e013      	b.n	8008cfe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2180      	movs	r1, #128	; 0x80
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 f947 	bl	8008f74 <UART_WaitOnFlagUntilTimeout>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e01f      	b.n	8008d30 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	60ba      	str	r2, [r7, #8]
 8008cf6:	781a      	ldrb	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1b7      	bne.n	8008c78 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2140      	movs	r1, #64	; 0x40
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 f92e 	bl	8008f74 <UART_WaitOnFlagUntilTimeout>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e006      	b.n	8008d30 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e000      	b.n	8008d30 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008d2e:	2302      	movs	r3, #2
  }
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10d      	bne.n	8008d8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	f003 0320 	and.w	r3, r3, #32
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d008      	beq.n	8008d8a <HAL_UART_IRQHandler+0x52>
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f9e0 	bl	8009148 <UART_Receive_IT>
      return;
 8008d88:	e0d0      	b.n	8008f2c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 80b0 	beq.w	8008ef2 <HAL_UART_IRQHandler+0x1ba>
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d105      	bne.n	8008da8 <HAL_UART_IRQHandler+0x70>
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 80a5 	beq.w	8008ef2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x90>
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc0:	f043 0201 	orr.w	r2, r3, #1
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <HAL_UART_IRQHandler+0xb0>
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de0:	f043 0202 	orr.w	r2, r3, #2
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <HAL_UART_IRQHandler+0xd0>
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d005      	beq.n	8008e08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e00:	f043 0204 	orr.w	r2, r3, #4
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	f003 0308 	and.w	r3, r3, #8
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00f      	beq.n	8008e32 <HAL_UART_IRQHandler+0xfa>
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d104      	bne.n	8008e26 <HAL_UART_IRQHandler+0xee>
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2a:	f043 0208 	orr.w	r2, r3, #8
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d077      	beq.n	8008f2a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	f003 0320 	and.w	r3, r3, #32
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d007      	beq.n	8008e54 <HAL_UART_IRQHandler+0x11c>
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f97a 	bl	8009148 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5e:	2b40      	cmp	r3, #64	; 0x40
 8008e60:	bf0c      	ite	eq
 8008e62:	2301      	moveq	r3, #1
 8008e64:	2300      	movne	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6e:	f003 0308 	and.w	r3, r3, #8
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d102      	bne.n	8008e7c <HAL_UART_IRQHandler+0x144>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d031      	beq.n	8008ee0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f8c3 	bl	8009008 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8c:	2b40      	cmp	r3, #64	; 0x40
 8008e8e:	d123      	bne.n	8008ed8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	695a      	ldr	r2, [r3, #20]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d013      	beq.n	8008ed0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eac:	4a21      	ldr	r2, [pc, #132]	; (8008f34 <HAL_UART_IRQHandler+0x1fc>)
 8008eae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fb f959 	bl	800416c <HAL_DMA_Abort_IT>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d016      	beq.n	8008eee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ece:	e00e      	b.n	8008eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f845 	bl	8008f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed6:	e00a      	b.n	8008eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f841 	bl	8008f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ede:	e006      	b.n	8008eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f83d 	bl	8008f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008eec:	e01d      	b.n	8008f2a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eee:	bf00      	nop
    return;
 8008ef0:	e01b      	b.n	8008f2a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d008      	beq.n	8008f0e <HAL_UART_IRQHandler+0x1d6>
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f8b0 	bl	800906c <UART_Transmit_IT>
    return;
 8008f0c:	e00e      	b.n	8008f2c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d009      	beq.n	8008f2c <HAL_UART_IRQHandler+0x1f4>
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d004      	beq.n	8008f2c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f8f8 	bl	8009118 <UART_EndTransmit_IT>
    return;
 8008f28:	e000      	b.n	8008f2c <HAL_UART_IRQHandler+0x1f4>
    return;
 8008f2a:	bf00      	nop
  }
}
 8008f2c:	3720      	adds	r7, #32
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	08009045 	.word	0x08009045

08008f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	4613      	mov	r3, r2
 8008f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f84:	e02c      	b.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8c:	d028      	beq.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d007      	beq.n	8008fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f94:	f7fa fecc 	bl	8003d30 <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d21d      	bcs.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008fb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 0201 	bic.w	r2, r2, #1
 8008fc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e00f      	b.n	8009000 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	bf0c      	ite	eq
 8008ff0:	2301      	moveq	r3, #1
 8008ff2:	2300      	movne	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	79fb      	ldrb	r3, [r7, #7]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d0c3      	beq.n	8008f86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800901e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	695a      	ldr	r2, [r3, #20]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0201 	bic.w	r2, r2, #1
 800902e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2220      	movs	r2, #32
 8009034:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff ff7e 	bl	8008f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009064:	bf00      	nop
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b21      	cmp	r3, #33	; 0x21
 800907e:	d144      	bne.n	800910a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009088:	d11a      	bne.n	80090c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	461a      	mov	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800909e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d105      	bne.n	80090b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	1c9a      	adds	r2, r3, #2
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	621a      	str	r2, [r3, #32]
 80090b2:	e00e      	b.n	80090d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	621a      	str	r2, [r3, #32]
 80090be:	e008      	b.n	80090d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a1b      	ldr	r3, [r3, #32]
 80090c4:	1c59      	adds	r1, r3, #1
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	6211      	str	r1, [r2, #32]
 80090ca:	781a      	ldrb	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29b      	uxth	r3, r3
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	4619      	mov	r1, r3
 80090e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10f      	bne.n	8009106 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009104:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	e000      	b.n	800910c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800910a:	2302      	movs	r3, #2
  }
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800912e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2220      	movs	r2, #32
 8009134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fefd 	bl	8008f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b22      	cmp	r3, #34	; 0x22
 800915a:	d171      	bne.n	8009240 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009164:	d123      	bne.n	80091ae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10e      	bne.n	8009192 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	b29b      	uxth	r3, r3
 800917c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009180:	b29a      	uxth	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918a:	1c9a      	adds	r2, r3, #2
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	629a      	str	r2, [r3, #40]	; 0x28
 8009190:	e029      	b.n	80091e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	b29b      	uxth	r3, r3
 800919a:	b2db      	uxtb	r3, r3
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	629a      	str	r2, [r3, #40]	; 0x28
 80091ac:	e01b      	b.n	80091e6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6858      	ldr	r0, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	1c59      	adds	r1, r3, #1
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	6291      	str	r1, [r2, #40]	; 0x28
 80091c6:	b2c2      	uxtb	r2, r0
 80091c8:	701a      	strb	r2, [r3, #0]
 80091ca:	e00c      	b.n	80091e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d8:	1c58      	adds	r0, r3, #1
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	6288      	str	r0, [r1, #40]	; 0x28
 80091de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80091e2:	b2d2      	uxtb	r2, r2
 80091e4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	4619      	mov	r1, r3
 80091f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d120      	bne.n	800923c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68da      	ldr	r2, [r3, #12]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0220 	bic.w	r2, r2, #32
 8009208:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68da      	ldr	r2, [r3, #12]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009218:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	695a      	ldr	r2, [r3, #20]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0201 	bic.w	r2, r2, #1
 8009228:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2220      	movs	r2, #32
 800922e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff fe8a 	bl	8008f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	e002      	b.n	8009242 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	e000      	b.n	8009242 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009240:	2302      	movs	r3, #2
  }
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009250:	b0bd      	sub	sp, #244	; 0xf4
 8009252:	af00      	add	r7, sp, #0
 8009254:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009268:	68d9      	ldr	r1, [r3, #12]
 800926a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	ea40 0301 	orr.w	r3, r0, r1
 8009274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	431a      	orrs	r2, r3
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	431a      	orrs	r2, r3
 800928c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	4313      	orrs	r3, r2
 8009294:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8009298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80092a4:	f021 010c 	bic.w	r1, r1, #12
 80092a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80092b2:	430b      	orrs	r3, r1
 80092b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80092c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c6:	6999      	ldr	r1, [r3, #24]
 80092c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	ea40 0301 	orr.w	r3, r0, r1
 80092d2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092de:	f040 81a5 	bne.w	800962c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	4bcd      	ldr	r3, [pc, #820]	; (8009620 <UART_SetConfig+0x3d4>)
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d006      	beq.n	80092fc <UART_SetConfig+0xb0>
 80092ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	4bcb      	ldr	r3, [pc, #812]	; (8009624 <UART_SetConfig+0x3d8>)
 80092f6:	429a      	cmp	r2, r3
 80092f8:	f040 80cb 	bne.w	8009492 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092fc:	f7fe f81a 	bl	8007334 <HAL_RCC_GetPCLK2Freq>
 8009300:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009304:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009308:	461c      	mov	r4, r3
 800930a:	f04f 0500 	mov.w	r5, #0
 800930e:	4622      	mov	r2, r4
 8009310:	462b      	mov	r3, r5
 8009312:	1891      	adds	r1, r2, r2
 8009314:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009318:	415b      	adcs	r3, r3
 800931a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800931e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009322:	1912      	adds	r2, r2, r4
 8009324:	eb45 0303 	adc.w	r3, r5, r3
 8009328:	f04f 0000 	mov.w	r0, #0
 800932c:	f04f 0100 	mov.w	r1, #0
 8009330:	00d9      	lsls	r1, r3, #3
 8009332:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009336:	00d0      	lsls	r0, r2, #3
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	1911      	adds	r1, r2, r4
 800933e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8009342:	416b      	adcs	r3, r5
 8009344:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	461a      	mov	r2, r3
 8009350:	f04f 0300 	mov.w	r3, #0
 8009354:	1891      	adds	r1, r2, r2
 8009356:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800935a:	415b      	adcs	r3, r3
 800935c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009360:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009364:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009368:	f7f7 fc2e 	bl	8000bc8 <__aeabi_uldivmod>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4bad      	ldr	r3, [pc, #692]	; (8009628 <UART_SetConfig+0x3dc>)
 8009372:	fba3 2302 	umull	r2, r3, r3, r2
 8009376:	095b      	lsrs	r3, r3, #5
 8009378:	011e      	lsls	r6, r3, #4
 800937a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800937e:	461c      	mov	r4, r3
 8009380:	f04f 0500 	mov.w	r5, #0
 8009384:	4622      	mov	r2, r4
 8009386:	462b      	mov	r3, r5
 8009388:	1891      	adds	r1, r2, r2
 800938a:	67b9      	str	r1, [r7, #120]	; 0x78
 800938c:	415b      	adcs	r3, r3
 800938e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009390:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009394:	1912      	adds	r2, r2, r4
 8009396:	eb45 0303 	adc.w	r3, r5, r3
 800939a:	f04f 0000 	mov.w	r0, #0
 800939e:	f04f 0100 	mov.w	r1, #0
 80093a2:	00d9      	lsls	r1, r3, #3
 80093a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093a8:	00d0      	lsls	r0, r2, #3
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	1911      	adds	r1, r2, r4
 80093b0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80093b4:	416b      	adcs	r3, r5
 80093b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80093ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	461a      	mov	r2, r3
 80093c2:	f04f 0300 	mov.w	r3, #0
 80093c6:	1891      	adds	r1, r2, r2
 80093c8:	6739      	str	r1, [r7, #112]	; 0x70
 80093ca:	415b      	adcs	r3, r3
 80093cc:	677b      	str	r3, [r7, #116]	; 0x74
 80093ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80093d2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80093d6:	f7f7 fbf7 	bl	8000bc8 <__aeabi_uldivmod>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4b92      	ldr	r3, [pc, #584]	; (8009628 <UART_SetConfig+0x3dc>)
 80093e0:	fba3 1302 	umull	r1, r3, r3, r2
 80093e4:	095b      	lsrs	r3, r3, #5
 80093e6:	2164      	movs	r1, #100	; 0x64
 80093e8:	fb01 f303 	mul.w	r3, r1, r3
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	3332      	adds	r3, #50	; 0x32
 80093f2:	4a8d      	ldr	r2, [pc, #564]	; (8009628 <UART_SetConfig+0x3dc>)
 80093f4:	fba2 2303 	umull	r2, r3, r2, r3
 80093f8:	095b      	lsrs	r3, r3, #5
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009400:	441e      	add	r6, r3
 8009402:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009406:	4618      	mov	r0, r3
 8009408:	f04f 0100 	mov.w	r1, #0
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	1894      	adds	r4, r2, r2
 8009412:	66bc      	str	r4, [r7, #104]	; 0x68
 8009414:	415b      	adcs	r3, r3
 8009416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009418:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800941c:	1812      	adds	r2, r2, r0
 800941e:	eb41 0303 	adc.w	r3, r1, r3
 8009422:	f04f 0400 	mov.w	r4, #0
 8009426:	f04f 0500 	mov.w	r5, #0
 800942a:	00dd      	lsls	r5, r3, #3
 800942c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009430:	00d4      	lsls	r4, r2, #3
 8009432:	4622      	mov	r2, r4
 8009434:	462b      	mov	r3, r5
 8009436:	1814      	adds	r4, r2, r0
 8009438:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800943c:	414b      	adcs	r3, r1
 800943e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	461a      	mov	r2, r3
 800944a:	f04f 0300 	mov.w	r3, #0
 800944e:	1891      	adds	r1, r2, r2
 8009450:	6639      	str	r1, [r7, #96]	; 0x60
 8009452:	415b      	adcs	r3, r3
 8009454:	667b      	str	r3, [r7, #100]	; 0x64
 8009456:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800945a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800945e:	f7f7 fbb3 	bl	8000bc8 <__aeabi_uldivmod>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4b70      	ldr	r3, [pc, #448]	; (8009628 <UART_SetConfig+0x3dc>)
 8009468:	fba3 1302 	umull	r1, r3, r3, r2
 800946c:	095b      	lsrs	r3, r3, #5
 800946e:	2164      	movs	r1, #100	; 0x64
 8009470:	fb01 f303 	mul.w	r3, r1, r3
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	3332      	adds	r3, #50	; 0x32
 800947a:	4a6b      	ldr	r2, [pc, #428]	; (8009628 <UART_SetConfig+0x3dc>)
 800947c:	fba2 2303 	umull	r2, r3, r2, r3
 8009480:	095b      	lsrs	r3, r3, #5
 8009482:	f003 0207 	and.w	r2, r3, #7
 8009486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4432      	add	r2, r6
 800948e:	609a      	str	r2, [r3, #8]
 8009490:	e26d      	b.n	800996e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009492:	f7fd ff3b 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 8009496:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800949a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800949e:	461c      	mov	r4, r3
 80094a0:	f04f 0500 	mov.w	r5, #0
 80094a4:	4622      	mov	r2, r4
 80094a6:	462b      	mov	r3, r5
 80094a8:	1891      	adds	r1, r2, r2
 80094aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80094ac:	415b      	adcs	r3, r3
 80094ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80094b4:	1912      	adds	r2, r2, r4
 80094b6:	eb45 0303 	adc.w	r3, r5, r3
 80094ba:	f04f 0000 	mov.w	r0, #0
 80094be:	f04f 0100 	mov.w	r1, #0
 80094c2:	00d9      	lsls	r1, r3, #3
 80094c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094c8:	00d0      	lsls	r0, r2, #3
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	1911      	adds	r1, r2, r4
 80094d0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80094d4:	416b      	adcs	r3, r5
 80094d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	461a      	mov	r2, r3
 80094e2:	f04f 0300 	mov.w	r3, #0
 80094e6:	1891      	adds	r1, r2, r2
 80094e8:	6539      	str	r1, [r7, #80]	; 0x50
 80094ea:	415b      	adcs	r3, r3
 80094ec:	657b      	str	r3, [r7, #84]	; 0x54
 80094ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80094f2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80094f6:	f7f7 fb67 	bl	8000bc8 <__aeabi_uldivmod>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4b4a      	ldr	r3, [pc, #296]	; (8009628 <UART_SetConfig+0x3dc>)
 8009500:	fba3 2302 	umull	r2, r3, r3, r2
 8009504:	095b      	lsrs	r3, r3, #5
 8009506:	011e      	lsls	r6, r3, #4
 8009508:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800950c:	461c      	mov	r4, r3
 800950e:	f04f 0500 	mov.w	r5, #0
 8009512:	4622      	mov	r2, r4
 8009514:	462b      	mov	r3, r5
 8009516:	1891      	adds	r1, r2, r2
 8009518:	64b9      	str	r1, [r7, #72]	; 0x48
 800951a:	415b      	adcs	r3, r3
 800951c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800951e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009522:	1912      	adds	r2, r2, r4
 8009524:	eb45 0303 	adc.w	r3, r5, r3
 8009528:	f04f 0000 	mov.w	r0, #0
 800952c:	f04f 0100 	mov.w	r1, #0
 8009530:	00d9      	lsls	r1, r3, #3
 8009532:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009536:	00d0      	lsls	r0, r2, #3
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	1911      	adds	r1, r2, r4
 800953e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009542:	416b      	adcs	r3, r5
 8009544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	461a      	mov	r2, r3
 8009550:	f04f 0300 	mov.w	r3, #0
 8009554:	1891      	adds	r1, r2, r2
 8009556:	6439      	str	r1, [r7, #64]	; 0x40
 8009558:	415b      	adcs	r3, r3
 800955a:	647b      	str	r3, [r7, #68]	; 0x44
 800955c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009560:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009564:	f7f7 fb30 	bl	8000bc8 <__aeabi_uldivmod>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4b2e      	ldr	r3, [pc, #184]	; (8009628 <UART_SetConfig+0x3dc>)
 800956e:	fba3 1302 	umull	r1, r3, r3, r2
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	2164      	movs	r1, #100	; 0x64
 8009576:	fb01 f303 	mul.w	r3, r1, r3
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	3332      	adds	r3, #50	; 0x32
 8009580:	4a29      	ldr	r2, [pc, #164]	; (8009628 <UART_SetConfig+0x3dc>)
 8009582:	fba2 2303 	umull	r2, r3, r2, r3
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800958e:	441e      	add	r6, r3
 8009590:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009594:	4618      	mov	r0, r3
 8009596:	f04f 0100 	mov.w	r1, #0
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	1894      	adds	r4, r2, r2
 80095a0:	63bc      	str	r4, [r7, #56]	; 0x38
 80095a2:	415b      	adcs	r3, r3
 80095a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80095aa:	1812      	adds	r2, r2, r0
 80095ac:	eb41 0303 	adc.w	r3, r1, r3
 80095b0:	f04f 0400 	mov.w	r4, #0
 80095b4:	f04f 0500 	mov.w	r5, #0
 80095b8:	00dd      	lsls	r5, r3, #3
 80095ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095be:	00d4      	lsls	r4, r2, #3
 80095c0:	4622      	mov	r2, r4
 80095c2:	462b      	mov	r3, r5
 80095c4:	1814      	adds	r4, r2, r0
 80095c6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80095ca:	414b      	adcs	r3, r1
 80095cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f04f 0300 	mov.w	r3, #0
 80095dc:	1891      	adds	r1, r2, r2
 80095de:	6339      	str	r1, [r7, #48]	; 0x30
 80095e0:	415b      	adcs	r3, r3
 80095e2:	637b      	str	r3, [r7, #52]	; 0x34
 80095e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80095e8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80095ec:	f7f7 faec 	bl	8000bc8 <__aeabi_uldivmod>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4b0c      	ldr	r3, [pc, #48]	; (8009628 <UART_SetConfig+0x3dc>)
 80095f6:	fba3 1302 	umull	r1, r3, r3, r2
 80095fa:	095b      	lsrs	r3, r3, #5
 80095fc:	2164      	movs	r1, #100	; 0x64
 80095fe:	fb01 f303 	mul.w	r3, r1, r3
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	3332      	adds	r3, #50	; 0x32
 8009608:	4a07      	ldr	r2, [pc, #28]	; (8009628 <UART_SetConfig+0x3dc>)
 800960a:	fba2 2303 	umull	r2, r3, r2, r3
 800960e:	095b      	lsrs	r3, r3, #5
 8009610:	f003 0207 	and.w	r2, r3, #7
 8009614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4432      	add	r2, r6
 800961c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800961e:	e1a6      	b.n	800996e <UART_SetConfig+0x722>
 8009620:	40011000 	.word	0x40011000
 8009624:	40011400 	.word	0x40011400
 8009628:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800962c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	4bd1      	ldr	r3, [pc, #836]	; (8009978 <UART_SetConfig+0x72c>)
 8009634:	429a      	cmp	r2, r3
 8009636:	d006      	beq.n	8009646 <UART_SetConfig+0x3fa>
 8009638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	4bcf      	ldr	r3, [pc, #828]	; (800997c <UART_SetConfig+0x730>)
 8009640:	429a      	cmp	r2, r3
 8009642:	f040 80ca 	bne.w	80097da <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009646:	f7fd fe75 	bl	8007334 <HAL_RCC_GetPCLK2Freq>
 800964a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800964e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009652:	461c      	mov	r4, r3
 8009654:	f04f 0500 	mov.w	r5, #0
 8009658:	4622      	mov	r2, r4
 800965a:	462b      	mov	r3, r5
 800965c:	1891      	adds	r1, r2, r2
 800965e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009660:	415b      	adcs	r3, r3
 8009662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009668:	1912      	adds	r2, r2, r4
 800966a:	eb45 0303 	adc.w	r3, r5, r3
 800966e:	f04f 0000 	mov.w	r0, #0
 8009672:	f04f 0100 	mov.w	r1, #0
 8009676:	00d9      	lsls	r1, r3, #3
 8009678:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800967c:	00d0      	lsls	r0, r2, #3
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	eb12 0a04 	adds.w	sl, r2, r4
 8009686:	eb43 0b05 	adc.w	fp, r3, r5
 800968a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	4618      	mov	r0, r3
 8009692:	f04f 0100 	mov.w	r1, #0
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	f04f 0300 	mov.w	r3, #0
 800969e:	008b      	lsls	r3, r1, #2
 80096a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096a4:	0082      	lsls	r2, r0, #2
 80096a6:	4650      	mov	r0, sl
 80096a8:	4659      	mov	r1, fp
 80096aa:	f7f7 fa8d 	bl	8000bc8 <__aeabi_uldivmod>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4bb3      	ldr	r3, [pc, #716]	; (8009980 <UART_SetConfig+0x734>)
 80096b4:	fba3 2302 	umull	r2, r3, r3, r2
 80096b8:	095b      	lsrs	r3, r3, #5
 80096ba:	011e      	lsls	r6, r3, #4
 80096bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096c0:	4618      	mov	r0, r3
 80096c2:	f04f 0100 	mov.w	r1, #0
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	1894      	adds	r4, r2, r2
 80096cc:	623c      	str	r4, [r7, #32]
 80096ce:	415b      	adcs	r3, r3
 80096d0:	627b      	str	r3, [r7, #36]	; 0x24
 80096d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096d6:	1812      	adds	r2, r2, r0
 80096d8:	eb41 0303 	adc.w	r3, r1, r3
 80096dc:	f04f 0400 	mov.w	r4, #0
 80096e0:	f04f 0500 	mov.w	r5, #0
 80096e4:	00dd      	lsls	r5, r3, #3
 80096e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096ea:	00d4      	lsls	r4, r2, #3
 80096ec:	4622      	mov	r2, r4
 80096ee:	462b      	mov	r3, r5
 80096f0:	1814      	adds	r4, r2, r0
 80096f2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80096f6:	414b      	adcs	r3, r1
 80096f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	4618      	mov	r0, r3
 8009704:	f04f 0100 	mov.w	r1, #0
 8009708:	f04f 0200 	mov.w	r2, #0
 800970c:	f04f 0300 	mov.w	r3, #0
 8009710:	008b      	lsls	r3, r1, #2
 8009712:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009716:	0082      	lsls	r2, r0, #2
 8009718:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800971c:	f7f7 fa54 	bl	8000bc8 <__aeabi_uldivmod>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4b96      	ldr	r3, [pc, #600]	; (8009980 <UART_SetConfig+0x734>)
 8009726:	fba3 1302 	umull	r1, r3, r3, r2
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	2164      	movs	r1, #100	; 0x64
 800972e:	fb01 f303 	mul.w	r3, r1, r3
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	011b      	lsls	r3, r3, #4
 8009736:	3332      	adds	r3, #50	; 0x32
 8009738:	4a91      	ldr	r2, [pc, #580]	; (8009980 <UART_SetConfig+0x734>)
 800973a:	fba2 2303 	umull	r2, r3, r2, r3
 800973e:	095b      	lsrs	r3, r3, #5
 8009740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009744:	441e      	add	r6, r3
 8009746:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800974a:	4618      	mov	r0, r3
 800974c:	f04f 0100 	mov.w	r1, #0
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	1894      	adds	r4, r2, r2
 8009756:	61bc      	str	r4, [r7, #24]
 8009758:	415b      	adcs	r3, r3
 800975a:	61fb      	str	r3, [r7, #28]
 800975c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009760:	1812      	adds	r2, r2, r0
 8009762:	eb41 0303 	adc.w	r3, r1, r3
 8009766:	f04f 0400 	mov.w	r4, #0
 800976a:	f04f 0500 	mov.w	r5, #0
 800976e:	00dd      	lsls	r5, r3, #3
 8009770:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009774:	00d4      	lsls	r4, r2, #3
 8009776:	4622      	mov	r2, r4
 8009778:	462b      	mov	r3, r5
 800977a:	1814      	adds	r4, r2, r0
 800977c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009780:	414b      	adcs	r3, r1
 8009782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	4618      	mov	r0, r3
 800978e:	f04f 0100 	mov.w	r1, #0
 8009792:	f04f 0200 	mov.w	r2, #0
 8009796:	f04f 0300 	mov.w	r3, #0
 800979a:	008b      	lsls	r3, r1, #2
 800979c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80097a0:	0082      	lsls	r2, r0, #2
 80097a2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80097a6:	f7f7 fa0f 	bl	8000bc8 <__aeabi_uldivmod>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4b74      	ldr	r3, [pc, #464]	; (8009980 <UART_SetConfig+0x734>)
 80097b0:	fba3 1302 	umull	r1, r3, r3, r2
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	2164      	movs	r1, #100	; 0x64
 80097b8:	fb01 f303 	mul.w	r3, r1, r3
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	3332      	adds	r3, #50	; 0x32
 80097c2:	4a6f      	ldr	r2, [pc, #444]	; (8009980 <UART_SetConfig+0x734>)
 80097c4:	fba2 2303 	umull	r2, r3, r2, r3
 80097c8:	095b      	lsrs	r3, r3, #5
 80097ca:	f003 020f 	and.w	r2, r3, #15
 80097ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4432      	add	r2, r6
 80097d6:	609a      	str	r2, [r3, #8]
 80097d8:	e0c9      	b.n	800996e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80097da:	f7fd fd97 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 80097de:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097e6:	461c      	mov	r4, r3
 80097e8:	f04f 0500 	mov.w	r5, #0
 80097ec:	4622      	mov	r2, r4
 80097ee:	462b      	mov	r3, r5
 80097f0:	1891      	adds	r1, r2, r2
 80097f2:	6139      	str	r1, [r7, #16]
 80097f4:	415b      	adcs	r3, r3
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80097fc:	1912      	adds	r2, r2, r4
 80097fe:	eb45 0303 	adc.w	r3, r5, r3
 8009802:	f04f 0000 	mov.w	r0, #0
 8009806:	f04f 0100 	mov.w	r1, #0
 800980a:	00d9      	lsls	r1, r3, #3
 800980c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009810:	00d0      	lsls	r0, r2, #3
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	eb12 0804 	adds.w	r8, r2, r4
 800981a:	eb43 0905 	adc.w	r9, r3, r5
 800981e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	4618      	mov	r0, r3
 8009826:	f04f 0100 	mov.w	r1, #0
 800982a:	f04f 0200 	mov.w	r2, #0
 800982e:	f04f 0300 	mov.w	r3, #0
 8009832:	008b      	lsls	r3, r1, #2
 8009834:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009838:	0082      	lsls	r2, r0, #2
 800983a:	4640      	mov	r0, r8
 800983c:	4649      	mov	r1, r9
 800983e:	f7f7 f9c3 	bl	8000bc8 <__aeabi_uldivmod>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4b4e      	ldr	r3, [pc, #312]	; (8009980 <UART_SetConfig+0x734>)
 8009848:	fba3 2302 	umull	r2, r3, r3, r2
 800984c:	095b      	lsrs	r3, r3, #5
 800984e:	011e      	lsls	r6, r3, #4
 8009850:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009854:	4618      	mov	r0, r3
 8009856:	f04f 0100 	mov.w	r1, #0
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	1894      	adds	r4, r2, r2
 8009860:	60bc      	str	r4, [r7, #8]
 8009862:	415b      	adcs	r3, r3
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800986a:	1812      	adds	r2, r2, r0
 800986c:	eb41 0303 	adc.w	r3, r1, r3
 8009870:	f04f 0400 	mov.w	r4, #0
 8009874:	f04f 0500 	mov.w	r5, #0
 8009878:	00dd      	lsls	r5, r3, #3
 800987a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800987e:	00d4      	lsls	r4, r2, #3
 8009880:	4622      	mov	r2, r4
 8009882:	462b      	mov	r3, r5
 8009884:	1814      	adds	r4, r2, r0
 8009886:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800988a:	414b      	adcs	r3, r1
 800988c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	4618      	mov	r0, r3
 8009898:	f04f 0100 	mov.w	r1, #0
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	008b      	lsls	r3, r1, #2
 80098a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80098aa:	0082      	lsls	r2, r0, #2
 80098ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80098b0:	f7f7 f98a 	bl	8000bc8 <__aeabi_uldivmod>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	4b31      	ldr	r3, [pc, #196]	; (8009980 <UART_SetConfig+0x734>)
 80098ba:	fba3 1302 	umull	r1, r3, r3, r2
 80098be:	095b      	lsrs	r3, r3, #5
 80098c0:	2164      	movs	r1, #100	; 0x64
 80098c2:	fb01 f303 	mul.w	r3, r1, r3
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	011b      	lsls	r3, r3, #4
 80098ca:	3332      	adds	r3, #50	; 0x32
 80098cc:	4a2c      	ldr	r2, [pc, #176]	; (8009980 <UART_SetConfig+0x734>)
 80098ce:	fba2 2303 	umull	r2, r3, r2, r3
 80098d2:	095b      	lsrs	r3, r3, #5
 80098d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098d8:	441e      	add	r6, r3
 80098da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098de:	4618      	mov	r0, r3
 80098e0:	f04f 0100 	mov.w	r1, #0
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	1894      	adds	r4, r2, r2
 80098ea:	603c      	str	r4, [r7, #0]
 80098ec:	415b      	adcs	r3, r3
 80098ee:	607b      	str	r3, [r7, #4]
 80098f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098f4:	1812      	adds	r2, r2, r0
 80098f6:	eb41 0303 	adc.w	r3, r1, r3
 80098fa:	f04f 0400 	mov.w	r4, #0
 80098fe:	f04f 0500 	mov.w	r5, #0
 8009902:	00dd      	lsls	r5, r3, #3
 8009904:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009908:	00d4      	lsls	r4, r2, #3
 800990a:	4622      	mov	r2, r4
 800990c:	462b      	mov	r3, r5
 800990e:	1814      	adds	r4, r2, r0
 8009910:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009914:	414b      	adcs	r3, r1
 8009916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800991a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	4618      	mov	r0, r3
 8009922:	f04f 0100 	mov.w	r1, #0
 8009926:	f04f 0200 	mov.w	r2, #0
 800992a:	f04f 0300 	mov.w	r3, #0
 800992e:	008b      	lsls	r3, r1, #2
 8009930:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009934:	0082      	lsls	r2, r0, #2
 8009936:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800993a:	f7f7 f945 	bl	8000bc8 <__aeabi_uldivmod>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4b0f      	ldr	r3, [pc, #60]	; (8009980 <UART_SetConfig+0x734>)
 8009944:	fba3 1302 	umull	r1, r3, r3, r2
 8009948:	095b      	lsrs	r3, r3, #5
 800994a:	2164      	movs	r1, #100	; 0x64
 800994c:	fb01 f303 	mul.w	r3, r1, r3
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	011b      	lsls	r3, r3, #4
 8009954:	3332      	adds	r3, #50	; 0x32
 8009956:	4a0a      	ldr	r2, [pc, #40]	; (8009980 <UART_SetConfig+0x734>)
 8009958:	fba2 2303 	umull	r2, r3, r2, r3
 800995c:	095b      	lsrs	r3, r3, #5
 800995e:	f003 020f 	and.w	r2, r3, #15
 8009962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4432      	add	r2, r6
 800996a:	609a      	str	r2, [r3, #8]
}
 800996c:	e7ff      	b.n	800996e <UART_SetConfig+0x722>
 800996e:	bf00      	nop
 8009970:	37f4      	adds	r7, #244	; 0xf4
 8009972:	46bd      	mov	sp, r7
 8009974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009978:	40011000 	.word	0x40011000
 800997c:	40011400 	.word	0x40011400
 8009980:	51eb851f 	.word	0x51eb851f

08009984 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8009992:	2300      	movs	r3, #0
 8009994:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d029      	beq.n	80099f2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80099aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80099ae:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80099b8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80099be:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80099c4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80099ca:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80099d0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80099d6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80099dc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80099e2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	e034      	b.n	8009a5c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099fe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009a08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009a0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a26:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a30:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009a36:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009a3c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8009a42:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009a48:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b087      	sub	sp, #28
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	60b9      	str	r1, [r7, #8]
 8009a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d02e      	beq.n	8009ae2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a90:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009aa0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009aaa:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009ab4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	3b01      	subs	r3, #1
 8009abc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009abe:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009ac8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	609a      	str	r2, [r3, #8]
 8009ae0:	e03b      	b.n	8009b5a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009aee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009af2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	3b01      	subs	r3, #1
 8009afa:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009b04:	4313      	orrs	r3, r2
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b18:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009b28:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009b32:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009b3c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009b46:	4313      	orrs	r3, r2
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	371c      	adds	r7, #28
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009b84:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009b8e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009b96:	4313      	orrs	r3, r2
 8009b98:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009ba0:	f7fa f8c6 	bl	8003d30 <HAL_GetTick>
 8009ba4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009ba6:	e010      	b.n	8009bca <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bae:	d00c      	beq.n	8009bca <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d007      	beq.n	8009bc6 <FMC_SDRAM_SendCommand+0x5e>
 8009bb6:	f7fa f8bb 	bl	8003d30 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d201      	bcs.n	8009bca <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e006      	b.n	8009bd8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	f003 0320 	and.w	r3, r3, #32
 8009bd2:	2b20      	cmp	r3, #32
 8009bd4:	d0e8      	beq.n	8009ba8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	695a      	ldr	r2, [r3, #20]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f103 0208 	add.w	r2, r3, #8
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f103 0208 	add.w	r2, r3, #8
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f103 0208 	add.w	r2, r3, #8
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	689a      	ldr	r2, [r3, #8]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	601a      	str	r2, [r3, #0]
}
 8009c9c:	bf00      	nop
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbe:	d103      	bne.n	8009cc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	e00c      	b.n	8009ce2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3308      	adds	r3, #8
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	e002      	b.n	8009cd6 <vListInsert+0x2e>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	60fb      	str	r3, [r7, #12]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d2f6      	bcs.n	8009cd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	1c5a      	adds	r2, r3, #1
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	601a      	str	r2, [r3, #0]
}
 8009d0e:	bf00      	nop
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b085      	sub	sp, #20
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	6892      	ldr	r2, [r2, #8]
 8009d30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	6852      	ldr	r2, [r2, #4]
 8009d3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d103      	bne.n	8009d4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	689a      	ldr	r2, [r3, #8]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	1e5a      	subs	r2, r3, #1
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
	...

08009d70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d9a:	f002 fbbb 	bl	800c514 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009daa:	fb01 f303 	mul.w	r3, r1, r3
 8009dae:	441a      	add	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	68f9      	ldr	r1, [r7, #12]
 8009dce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009dd0:	fb01 f303 	mul.w	r3, r1, r3
 8009dd4:	441a      	add	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	22ff      	movs	r2, #255	; 0xff
 8009dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	22ff      	movs	r2, #255	; 0xff
 8009de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d114      	bne.n	8009e1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d01a      	beq.n	8009e2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3310      	adds	r3, #16
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f001 fad9 	bl	800b3b4 <xTaskRemoveFromEventList>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d012      	beq.n	8009e2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e08:	4b0c      	ldr	r3, [pc, #48]	; (8009e3c <xQueueGenericReset+0xcc>)
 8009e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	e009      	b.n	8009e2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3310      	adds	r3, #16
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7ff fef1 	bl	8009c06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3324      	adds	r3, #36	; 0x24
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7ff feec 	bl	8009c06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e2e:	f002 fba1 	bl	800c574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e32:	2301      	movs	r3, #1
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	e000ed04 	.word	0xe000ed04

08009e40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08e      	sub	sp, #56	; 0x38
 8009e44:	af02      	add	r7, sp, #8
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10a      	bne.n	8009e6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e66:	bf00      	nop
 8009e68:	e7fe      	b.n	8009e68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <xQueueGenericCreateStatic+0x52>
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <xQueueGenericCreateStatic+0x56>
 8009e92:	2301      	movs	r3, #1
 8009e94:	e000      	b.n	8009e98 <xQueueGenericCreateStatic+0x58>
 8009e96:	2300      	movs	r3, #0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10a      	bne.n	8009eb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	623b      	str	r3, [r7, #32]
}
 8009eae:	bf00      	nop
 8009eb0:	e7fe      	b.n	8009eb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <xQueueGenericCreateStatic+0x7e>
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <xQueueGenericCreateStatic+0x82>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e000      	b.n	8009ec4 <xQueueGenericCreateStatic+0x84>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10a      	bne.n	8009ede <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	61fb      	str	r3, [r7, #28]
}
 8009eda:	bf00      	nop
 8009edc:	e7fe      	b.n	8009edc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ede:	2350      	movs	r3, #80	; 0x50
 8009ee0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	2b50      	cmp	r3, #80	; 0x50
 8009ee6:	d00a      	beq.n	8009efe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	61bb      	str	r3, [r7, #24]
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009efe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00d      	beq.n	8009f26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	68b9      	ldr	r1, [r7, #8]
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 f845 	bl	8009fb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3730      	adds	r7, #48	; 0x30
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08a      	sub	sp, #40	; 0x28
 8009f34:	af02      	add	r7, sp, #8
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	613b      	str	r3, [r7, #16]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d102      	bne.n	8009f66 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	e004      	b.n	8009f70 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	fb02 f303 	mul.w	r3, r2, r3
 8009f6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	3350      	adds	r3, #80	; 0x50
 8009f74:	4618      	mov	r0, r3
 8009f76:	f002 fbef 	bl	800c758 <pvPortMalloc>
 8009f7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d011      	beq.n	8009fa6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	3350      	adds	r3, #80	; 0x50
 8009f8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f94:	79fa      	ldrb	r2, [r7, #7]
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	68b9      	ldr	r1, [r7, #8]
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 f805 	bl	8009fb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fa6:	69bb      	ldr	r3, [r7, #24]
	}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3720      	adds	r7, #32
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d103      	bne.n	8009fcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	69ba      	ldr	r2, [r7, #24]
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	e002      	b.n	8009fd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009fde:	2101      	movs	r1, #1
 8009fe0:	69b8      	ldr	r0, [r7, #24]
 8009fe2:	f7ff fec5 	bl	8009d70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	78fa      	ldrb	r2, [r7, #3]
 8009fea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009fee:	bf00      	nop
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08e      	sub	sp, #56	; 0x38
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
 800a004:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a006:	2300      	movs	r3, #0
 800a008:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <xQueueGenericSend+0x32>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d103      	bne.n	800a038 <xQueueGenericSend+0x40>
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <xQueueGenericSend+0x44>
 800a038:	2301      	movs	r3, #1
 800a03a:	e000      	b.n	800a03e <xQueueGenericSend+0x46>
 800a03c:	2300      	movs	r3, #0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <xQueueGenericSend+0x60>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d103      	bne.n	800a066 <xQueueGenericSend+0x6e>
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <xQueueGenericSend+0x72>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <xQueueGenericSend+0x74>
 800a06a:	2300      	movs	r3, #0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xQueueGenericSend+0x8e>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	623b      	str	r3, [r7, #32]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a086:	f001 fb51 	bl	800b72c <xTaskGetSchedulerState>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d102      	bne.n	800a096 <xQueueGenericSend+0x9e>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <xQueueGenericSend+0xa2>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <xQueueGenericSend+0xa4>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	61fb      	str	r3, [r7, #28]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0b6:	f002 fa2d 	bl	800c514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d302      	bcc.n	800a0cc <xQueueGenericSend+0xd4>
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d129      	bne.n	800a120 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0d2:	f000 fb2b 	bl	800a72c <prvCopyDataToQueue>
 800a0d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d010      	beq.n	800a102 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e2:	3324      	adds	r3, #36	; 0x24
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f001 f965 	bl	800b3b4 <xTaskRemoveFromEventList>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d013      	beq.n	800a118 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0f0:	4b3f      	ldr	r3, [pc, #252]	; (800a1f0 <xQueueGenericSend+0x1f8>)
 800a0f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	e00a      	b.n	800a118 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	2b00      	cmp	r3, #0
 800a106:	d007      	beq.n	800a118 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a108:	4b39      	ldr	r3, [pc, #228]	; (800a1f0 <xQueueGenericSend+0x1f8>)
 800a10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a118:	f002 fa2c 	bl	800c574 <vPortExitCritical>
				return pdPASS;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e063      	b.n	800a1e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d103      	bne.n	800a12e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a126:	f002 fa25 	bl	800c574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	e05c      	b.n	800a1e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a134:	f107 0314 	add.w	r3, r7, #20
 800a138:	4618      	mov	r0, r3
 800a13a:	f001 f99d 	bl	800b478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a13e:	2301      	movs	r3, #1
 800a140:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a142:	f002 fa17 	bl	800c574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a146:	f000 fefd 	bl	800af44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a14a:	f002 f9e3 	bl	800c514 <vPortEnterCritical>
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a154:	b25b      	sxtb	r3, r3
 800a156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15a:	d103      	bne.n	800a164 <xQueueGenericSend+0x16c>
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a16a:	b25b      	sxtb	r3, r3
 800a16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a170:	d103      	bne.n	800a17a <xQueueGenericSend+0x182>
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a17a:	f002 f9fb 	bl	800c574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a17e:	1d3a      	adds	r2, r7, #4
 800a180:	f107 0314 	add.w	r3, r7, #20
 800a184:	4611      	mov	r1, r2
 800a186:	4618      	mov	r0, r3
 800a188:	f001 f98c 	bl	800b4a4 <xTaskCheckForTimeOut>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d124      	bne.n	800a1dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a194:	f000 fbc2 	bl	800a91c <prvIsQueueFull>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d018      	beq.n	800a1d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	3310      	adds	r3, #16
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f001 f8b4 	bl	800b314 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ae:	f000 fb4d 	bl	800a84c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1b2:	f000 fed5 	bl	800af60 <xTaskResumeAll>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f47f af7c 	bne.w	800a0b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a1be:	4b0c      	ldr	r3, [pc, #48]	; (800a1f0 <xQueueGenericSend+0x1f8>)
 800a1c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	e772      	b.n	800a0b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a1d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1d2:	f000 fb3b 	bl	800a84c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1d6:	f000 fec3 	bl	800af60 <xTaskResumeAll>
 800a1da:	e76c      	b.n	800a0b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1de:	f000 fb35 	bl	800a84c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1e2:	f000 febd 	bl	800af60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3738      	adds	r7, #56	; 0x38
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	e000ed04 	.word	0xe000ed04

0800a1f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08e      	sub	sp, #56	; 0x38
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d103      	bne.n	800a230 <xQueueGenericSendFromISR+0x3c>
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <xQueueGenericSendFromISR+0x40>
 800a230:	2301      	movs	r3, #1
 800a232:	e000      	b.n	800a236 <xQueueGenericSendFromISR+0x42>
 800a234:	2300      	movs	r3, #0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10a      	bne.n	800a250 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	623b      	str	r3, [r7, #32]
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d103      	bne.n	800a25e <xQueueGenericSendFromISR+0x6a>
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d101      	bne.n	800a262 <xQueueGenericSendFromISR+0x6e>
 800a25e:	2301      	movs	r3, #1
 800a260:	e000      	b.n	800a264 <xQueueGenericSendFromISR+0x70>
 800a262:	2300      	movs	r3, #0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	61fb      	str	r3, [r7, #28]
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a27e:	f002 fa2b 	bl	800c6d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a282:	f3ef 8211 	mrs	r2, BASEPRI
 800a286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	61ba      	str	r2, [r7, #24]
 800a298:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a29a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a29c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d302      	bcc.n	800a2b0 <xQueueGenericSendFromISR+0xbc>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d12c      	bne.n	800a30a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	68b9      	ldr	r1, [r7, #8]
 800a2be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2c0:	f000 fa34 	bl	800a72c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2cc:	d112      	bne.n	800a2f4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d016      	beq.n	800a304 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	3324      	adds	r3, #36	; 0x24
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f001 f86a 	bl	800b3b4 <xTaskRemoveFromEventList>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00e      	beq.n	800a304 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00b      	beq.n	800a304 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	e007      	b.n	800a304 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	b25a      	sxtb	r2, r3
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a304:	2301      	movs	r3, #1
 800a306:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a308:	e001      	b.n	800a30e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	637b      	str	r3, [r7, #52]	; 0x34
 800a30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a310:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a318:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3738      	adds	r7, #56	; 0x38
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08c      	sub	sp, #48	; 0x30
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a330:	2300      	movs	r3, #0
 800a332:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10a      	bne.n	800a354 <xQueueReceive+0x30>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	623b      	str	r3, [r7, #32]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <xQueueReceive+0x3e>
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <xQueueReceive+0x42>
 800a362:	2301      	movs	r3, #1
 800a364:	e000      	b.n	800a368 <xQueueReceive+0x44>
 800a366:	2300      	movs	r3, #0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <xQueueReceive+0x5e>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	61fb      	str	r3, [r7, #28]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a382:	f001 f9d3 	bl	800b72c <xTaskGetSchedulerState>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d102      	bne.n	800a392 <xQueueReceive+0x6e>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <xQueueReceive+0x72>
 800a392:	2301      	movs	r3, #1
 800a394:	e000      	b.n	800a398 <xQueueReceive+0x74>
 800a396:	2300      	movs	r3, #0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10a      	bne.n	800a3b2 <xQueueReceive+0x8e>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	61bb      	str	r3, [r7, #24]
}
 800a3ae:	bf00      	nop
 800a3b0:	e7fe      	b.n	800a3b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3b2:	f002 f8af 	bl	800c514 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01f      	beq.n	800a402 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3c2:	68b9      	ldr	r1, [r7, #8]
 800a3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3c6:	f000 fa1b 	bl	800a800 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	1e5a      	subs	r2, r3, #1
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00f      	beq.n	800a3fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	3310      	adds	r3, #16
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 ffe8 	bl	800b3b4 <xTaskRemoveFromEventList>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d007      	beq.n	800a3fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3ea:	4b3d      	ldr	r3, [pc, #244]	; (800a4e0 <xQueueReceive+0x1bc>)
 800a3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3fa:	f002 f8bb 	bl	800c574 <vPortExitCritical>
				return pdPASS;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e069      	b.n	800a4d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d103      	bne.n	800a410 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a408:	f002 f8b4 	bl	800c574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a40c:	2300      	movs	r3, #0
 800a40e:	e062      	b.n	800a4d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a416:	f107 0310 	add.w	r3, r7, #16
 800a41a:	4618      	mov	r0, r3
 800a41c:	f001 f82c 	bl	800b478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a420:	2301      	movs	r3, #1
 800a422:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a424:	f002 f8a6 	bl	800c574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a428:	f000 fd8c 	bl	800af44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a42c:	f002 f872 	bl	800c514 <vPortEnterCritical>
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a436:	b25b      	sxtb	r3, r3
 800a438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43c:	d103      	bne.n	800a446 <xQueueReceive+0x122>
 800a43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a44c:	b25b      	sxtb	r3, r3
 800a44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a452:	d103      	bne.n	800a45c <xQueueReceive+0x138>
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a45c:	f002 f88a 	bl	800c574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a460:	1d3a      	adds	r2, r7, #4
 800a462:	f107 0310 	add.w	r3, r7, #16
 800a466:	4611      	mov	r1, r2
 800a468:	4618      	mov	r0, r3
 800a46a:	f001 f81b 	bl	800b4a4 <xTaskCheckForTimeOut>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d123      	bne.n	800a4bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a476:	f000 fa3b 	bl	800a8f0 <prvIsQueueEmpty>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d017      	beq.n	800a4b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	3324      	adds	r3, #36	; 0x24
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	4611      	mov	r1, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 ff43 	bl	800b314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a48e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a490:	f000 f9dc 	bl	800a84c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a494:	f000 fd64 	bl	800af60 <xTaskResumeAll>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d189      	bne.n	800a3b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a49e:	4b10      	ldr	r3, [pc, #64]	; (800a4e0 <xQueueReceive+0x1bc>)
 800a4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	e780      	b.n	800a3b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b2:	f000 f9cb 	bl	800a84c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4b6:	f000 fd53 	bl	800af60 <xTaskResumeAll>
 800a4ba:	e77a      	b.n	800a3b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4be:	f000 f9c5 	bl	800a84c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4c2:	f000 fd4d 	bl	800af60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c8:	f000 fa12 	bl	800a8f0 <prvIsQueueEmpty>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f43f af6f 	beq.w	800a3b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3730      	adds	r7, #48	; 0x30
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	e000ed04 	.word	0xe000ed04

0800a4e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08e      	sub	sp, #56	; 0x38
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10a      	bne.n	800a516 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	623b      	str	r3, [r7, #32]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00a      	beq.n	800a534 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	61fb      	str	r3, [r7, #28]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a534:	f001 f8fa 	bl	800b72c <xTaskGetSchedulerState>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d102      	bne.n	800a544 <xQueueSemaphoreTake+0x60>
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <xQueueSemaphoreTake+0x64>
 800a544:	2301      	movs	r3, #1
 800a546:	e000      	b.n	800a54a <xQueueSemaphoreTake+0x66>
 800a548:	2300      	movs	r3, #0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10a      	bne.n	800a564 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	61bb      	str	r3, [r7, #24]
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a564:	f001 ffd6 	bl	800c514 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	2b00      	cmp	r3, #0
 800a572:	d024      	beq.n	800a5be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	1e5a      	subs	r2, r3, #1
 800a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d104      	bne.n	800a58e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a584:	f001 fa90 	bl	800baa8 <pvTaskIncrementMutexHeldCount>
 800a588:	4602      	mov	r2, r0
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00f      	beq.n	800a5b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a598:	3310      	adds	r3, #16
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 ff0a 	bl	800b3b4 <xTaskRemoveFromEventList>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d007      	beq.n	800a5b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5a6:	4b54      	ldr	r3, [pc, #336]	; (800a6f8 <xQueueSemaphoreTake+0x214>)
 800a5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5b6:	f001 ffdd 	bl	800c574 <vPortExitCritical>
				return pdPASS;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e097      	b.n	800a6ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d111      	bne.n	800a5e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	617b      	str	r3, [r7, #20]
}
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a5e0:	f001 ffc8 	bl	800c574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	e082      	b.n	800a6ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5ee:	f107 030c 	add.w	r3, r7, #12
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 ff40 	bl	800b478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5fc:	f001 ffba 	bl	800c574 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a600:	f000 fca0 	bl	800af44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a604:	f001 ff86 	bl	800c514 <vPortEnterCritical>
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a60e:	b25b      	sxtb	r3, r3
 800a610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a614:	d103      	bne.n	800a61e <xQueueSemaphoreTake+0x13a>
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a624:	b25b      	sxtb	r3, r3
 800a626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62a:	d103      	bne.n	800a634 <xQueueSemaphoreTake+0x150>
 800a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a634:	f001 ff9e 	bl	800c574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a638:	463a      	mov	r2, r7
 800a63a:	f107 030c 	add.w	r3, r7, #12
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f000 ff2f 	bl	800b4a4 <xTaskCheckForTimeOut>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d132      	bne.n	800a6b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a64c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a64e:	f000 f94f 	bl	800a8f0 <prvIsQueueEmpty>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d026      	beq.n	800a6a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d109      	bne.n	800a674 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a660:	f001 ff58 	bl	800c514 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 f87d 	bl	800b768 <xTaskPriorityInherit>
 800a66e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a670:	f001 ff80 	bl	800c574 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a676:	3324      	adds	r3, #36	; 0x24
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	4611      	mov	r1, r2
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 fe49 	bl	800b314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a684:	f000 f8e2 	bl	800a84c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a688:	f000 fc6a 	bl	800af60 <xTaskResumeAll>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f47f af68 	bne.w	800a564 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a694:	4b18      	ldr	r3, [pc, #96]	; (800a6f8 <xQueueSemaphoreTake+0x214>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	e75e      	b.n	800a564 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a6a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6a8:	f000 f8d0 	bl	800a84c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6ac:	f000 fc58 	bl	800af60 <xTaskResumeAll>
 800a6b0:	e758      	b.n	800a564 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a6b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6b4:	f000 f8ca 	bl	800a84c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6b8:	f000 fc52 	bl	800af60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6be:	f000 f917 	bl	800a8f0 <prvIsQueueEmpty>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f43f af4d 	beq.w	800a564 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00d      	beq.n	800a6ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a6d0:	f001 ff20 	bl	800c514 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a6d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6d6:	f000 f811 	bl	800a6fc <prvGetDisinheritPriorityAfterTimeout>
 800a6da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 f946 	bl	800b974 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6e8:	f001 ff44 	bl	800c574 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3738      	adds	r7, #56	; 0x38
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d006      	beq.n	800a71a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f1c3 0307 	rsb	r3, r3, #7
 800a716:	60fb      	str	r3, [r7, #12]
 800a718:	e001      	b.n	800a71e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a71e:	68fb      	ldr	r3, [r7, #12]
	}
 800a720:	4618      	mov	r0, r3
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a740:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10d      	bne.n	800a766 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d14d      	bne.n	800a7ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	4618      	mov	r0, r3
 800a758:	f001 f886 	bl	800b868 <xTaskPriorityDisinherit>
 800a75c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	609a      	str	r2, [r3, #8]
 800a764:	e043      	b.n	800a7ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d119      	bne.n	800a7a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6858      	ldr	r0, [r3, #4]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a774:	461a      	mov	r2, r3
 800a776:	68b9      	ldr	r1, [r7, #8]
 800a778:	f002 fc8e 	bl	800d098 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a784:	441a      	add	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	429a      	cmp	r2, r3
 800a794:	d32b      	bcc.n	800a7ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	605a      	str	r2, [r3, #4]
 800a79e:	e026      	b.n	800a7ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	68d8      	ldr	r0, [r3, #12]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	68b9      	ldr	r1, [r7, #8]
 800a7ac:	f002 fc74 	bl	800d098 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b8:	425b      	negs	r3, r3
 800a7ba:	441a      	add	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d207      	bcs.n	800a7dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	689a      	ldr	r2, [r3, #8]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d4:	425b      	negs	r3, r3
 800a7d6:	441a      	add	r2, r3
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d105      	bne.n	800a7ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d002      	beq.n	800a7ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a7f6:	697b      	ldr	r3, [r7, #20]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3718      	adds	r7, #24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d018      	beq.n	800a844 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81a:	441a      	add	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68da      	ldr	r2, [r3, #12]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d303      	bcc.n	800a834 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68d9      	ldr	r1, [r3, #12]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83c:	461a      	mov	r2, r3
 800a83e:	6838      	ldr	r0, [r7, #0]
 800a840:	f002 fc2a 	bl	800d098 <memcpy>
	}
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a854:	f001 fe5e 	bl	800c514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a85e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a860:	e011      	b.n	800a886 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	2b00      	cmp	r3, #0
 800a868:	d012      	beq.n	800a890 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3324      	adds	r3, #36	; 0x24
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fda0 	bl	800b3b4 <xTaskRemoveFromEventList>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a87a:	f000 fe75 	bl	800b568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
 800a880:	3b01      	subs	r3, #1
 800a882:	b2db      	uxtb	r3, r3
 800a884:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	dce9      	bgt.n	800a862 <prvUnlockQueue+0x16>
 800a88e:	e000      	b.n	800a892 <prvUnlockQueue+0x46>
					break;
 800a890:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	22ff      	movs	r2, #255	; 0xff
 800a896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a89a:	f001 fe6b 	bl	800c574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a89e:	f001 fe39 	bl	800c514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8aa:	e011      	b.n	800a8d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d012      	beq.n	800a8da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3310      	adds	r3, #16
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fd7b 	bl	800b3b4 <xTaskRemoveFromEventList>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8c4:	f000 fe50 	bl	800b568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dce9      	bgt.n	800a8ac <prvUnlockQueue+0x60>
 800a8d8:	e000      	b.n	800a8dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	22ff      	movs	r2, #255	; 0xff
 800a8e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a8e4:	f001 fe46 	bl	800c574 <vPortExitCritical>
}
 800a8e8:	bf00      	nop
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8f8:	f001 fe0c 	bl	800c514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	2b00      	cmp	r3, #0
 800a902:	d102      	bne.n	800a90a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a904:	2301      	movs	r3, #1
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	e001      	b.n	800a90e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a90e:	f001 fe31 	bl	800c574 <vPortExitCritical>

	return xReturn;
 800a912:	68fb      	ldr	r3, [r7, #12]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a924:	f001 fdf6 	bl	800c514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a930:	429a      	cmp	r2, r3
 800a932:	d102      	bne.n	800a93a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a934:	2301      	movs	r3, #1
 800a936:	60fb      	str	r3, [r7, #12]
 800a938:	e001      	b.n	800a93e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a93e:	f001 fe19 	bl	800c574 <vPortExitCritical>

	return xReturn;
 800a942:	68fb      	ldr	r3, [r7, #12]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a956:	2300      	movs	r3, #0
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	e014      	b.n	800a986 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a95c:	4a0f      	ldr	r2, [pc, #60]	; (800a99c <vQueueAddToRegistry+0x50>)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10b      	bne.n	800a980 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a968:	490c      	ldr	r1, [pc, #48]	; (800a99c <vQueueAddToRegistry+0x50>)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a972:	4a0a      	ldr	r2, [pc, #40]	; (800a99c <vQueueAddToRegistry+0x50>)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	4413      	add	r3, r2
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a97e:	e006      	b.n	800a98e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3301      	adds	r3, #1
 800a984:	60fb      	str	r3, [r7, #12]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2b0b      	cmp	r3, #11
 800a98a:	d9e7      	bls.n	800a95c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a98c:	bf00      	nop
 800a98e:	bf00      	nop
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	200220bc 	.word	0x200220bc

0800a9a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9b0:	f001 fdb0 	bl	800c514 <vPortEnterCritical>
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ba:	b25b      	sxtb	r3, r3
 800a9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c0:	d103      	bne.n	800a9ca <vQueueWaitForMessageRestricted+0x2a>
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9d0:	b25b      	sxtb	r3, r3
 800a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d6:	d103      	bne.n	800a9e0 <vQueueWaitForMessageRestricted+0x40>
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9e0:	f001 fdc8 	bl	800c574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d106      	bne.n	800a9fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	3324      	adds	r3, #36	; 0x24
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 fcb1 	bl	800b35c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9fa:	6978      	ldr	r0, [r7, #20]
 800a9fc:	f7ff ff26 	bl	800a84c <prvUnlockQueue>
	}
 800aa00:	bf00      	nop
 800aa02:	3718      	adds	r7, #24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b08e      	sub	sp, #56	; 0x38
 800aa0c:	af04      	add	r7, sp, #16
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10a      	bne.n	800aa32 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	623b      	str	r3, [r7, #32]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10a      	bne.n	800aa4e <xTaskCreateStatic+0x46>
	__asm volatile
 800aa38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	61fb      	str	r3, [r7, #28]
}
 800aa4a:	bf00      	nop
 800aa4c:	e7fe      	b.n	800aa4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa4e:	2364      	movs	r3, #100	; 0x64
 800aa50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	2b64      	cmp	r3, #100	; 0x64
 800aa56:	d00a      	beq.n	800aa6e <xTaskCreateStatic+0x66>
	__asm volatile
 800aa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	61bb      	str	r3, [r7, #24]
}
 800aa6a:	bf00      	nop
 800aa6c:	e7fe      	b.n	800aa6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d01e      	beq.n	800aab4 <xTaskCreateStatic+0xac>
 800aa76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01b      	beq.n	800aab4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa88:	2202      	movs	r2, #2
 800aa8a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa8e:	2300      	movs	r3, #0
 800aa90:	9303      	str	r3, [sp, #12]
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	9302      	str	r3, [sp, #8]
 800aa96:	f107 0314 	add.w	r3, r7, #20
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	68b9      	ldr	r1, [r7, #8]
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f000 f850 	bl	800ab4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaae:	f000 f8e3 	bl	800ac78 <prvAddNewTaskToReadyList>
 800aab2:	e001      	b.n	800aab8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aab4:	2300      	movs	r3, #0
 800aab6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aab8:	697b      	ldr	r3, [r7, #20]
	}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3728      	adds	r7, #40	; 0x28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b08c      	sub	sp, #48	; 0x30
 800aac6:	af04      	add	r7, sp, #16
 800aac8:	60f8      	str	r0, [r7, #12]
 800aaca:	60b9      	str	r1, [r7, #8]
 800aacc:	603b      	str	r3, [r7, #0]
 800aace:	4613      	mov	r3, r2
 800aad0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aad2:	88fb      	ldrh	r3, [r7, #6]
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f001 fe3e 	bl	800c758 <pvPortMalloc>
 800aadc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00e      	beq.n	800ab02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aae4:	2064      	movs	r0, #100	; 0x64
 800aae6:	f001 fe37 	bl	800c758 <pvPortMalloc>
 800aaea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d003      	beq.n	800aafa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	631a      	str	r2, [r3, #48]	; 0x30
 800aaf8:	e005      	b.n	800ab06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aafa:	6978      	ldr	r0, [r7, #20]
 800aafc:	f001 fef0 	bl	800c8e0 <vPortFree>
 800ab00:	e001      	b.n	800ab06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab02:	2300      	movs	r3, #0
 800ab04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d017      	beq.n	800ab3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab14:	88fa      	ldrh	r2, [r7, #6]
 800ab16:	2300      	movs	r3, #0
 800ab18:	9303      	str	r3, [sp, #12]
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	9302      	str	r3, [sp, #8]
 800ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab20:	9301      	str	r3, [sp, #4]
 800ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	68b9      	ldr	r1, [r7, #8]
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 f80e 	bl	800ab4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab30:	69f8      	ldr	r0, [r7, #28]
 800ab32:	f000 f8a1 	bl	800ac78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab36:	2301      	movs	r3, #1
 800ab38:	61bb      	str	r3, [r7, #24]
 800ab3a:	e002      	b.n	800ab42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab42:	69bb      	ldr	r3, [r7, #24]
	}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3720      	adds	r7, #32
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b088      	sub	sp, #32
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	461a      	mov	r2, r3
 800ab64:	21a5      	movs	r1, #165	; 0xa5
 800ab66:	f002 faa5 	bl	800d0b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab74:	3b01      	subs	r3, #1
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	f023 0307 	bic.w	r3, r3, #7
 800ab82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00a      	beq.n	800aba4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	617b      	str	r3, [r7, #20]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800aba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d01f      	beq.n	800abf0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abb0:	2300      	movs	r3, #0
 800abb2:	61fb      	str	r3, [r7, #28]
 800abb4:	e012      	b.n	800abdc <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	4413      	add	r3, r2
 800abbc:	7819      	ldrb	r1, [r3, #0]
 800abbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	4413      	add	r3, r2
 800abc4:	3334      	adds	r3, #52	; 0x34
 800abc6:	460a      	mov	r2, r1
 800abc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	4413      	add	r3, r2
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d006      	beq.n	800abe4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	3301      	adds	r3, #1
 800abda:	61fb      	str	r3, [r7, #28]
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	2b0f      	cmp	r3, #15
 800abe0:	d9e9      	bls.n	800abb6 <prvInitialiseNewTask+0x6a>
 800abe2:	e000      	b.n	800abe6 <prvInitialiseNewTask+0x9a>
			{
				break;
 800abe4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abee:	e003      	b.n	800abf8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfa:	2b06      	cmp	r3, #6
 800abfc:	d901      	bls.n	800ac02 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abfe:	2306      	movs	r3, #6
 800ac00:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac0c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	2200      	movs	r2, #0
 800ac12:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	3304      	adds	r3, #4
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff f814 	bl	8009c46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac20:	3318      	adds	r3, #24
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7ff f80f 	bl	8009c46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	f1c3 0207 	rsb	r2, r3, #7
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	2200      	movs	r2, #0
 800ac42:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	2200      	movs	r2, #0
 800ac48:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	68f9      	ldr	r1, [r7, #12]
 800ac56:	69b8      	ldr	r0, [r7, #24]
 800ac58:	f001 fb2e 	bl	800c2b8 <pxPortInitialiseStack>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac6e:	bf00      	nop
 800ac70:	3720      	adds	r7, #32
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
	...

0800ac78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac80:	f001 fc48 	bl	800c514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac84:	4b2c      	ldr	r3, [pc, #176]	; (800ad38 <prvAddNewTaskToReadyList+0xc0>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	4a2b      	ldr	r2, [pc, #172]	; (800ad38 <prvAddNewTaskToReadyList+0xc0>)
 800ac8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac8e:	4b2b      	ldr	r3, [pc, #172]	; (800ad3c <prvAddNewTaskToReadyList+0xc4>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d109      	bne.n	800acaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac96:	4a29      	ldr	r2, [pc, #164]	; (800ad3c <prvAddNewTaskToReadyList+0xc4>)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac9c:	4b26      	ldr	r3, [pc, #152]	; (800ad38 <prvAddNewTaskToReadyList+0xc0>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d110      	bne.n	800acc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aca4:	f000 fc84 	bl	800b5b0 <prvInitialiseTaskLists>
 800aca8:	e00d      	b.n	800acc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acaa:	4b25      	ldr	r3, [pc, #148]	; (800ad40 <prvAddNewTaskToReadyList+0xc8>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d109      	bne.n	800acc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acb2:	4b22      	ldr	r3, [pc, #136]	; (800ad3c <prvAddNewTaskToReadyList+0xc4>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d802      	bhi.n	800acc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acc0:	4a1e      	ldr	r2, [pc, #120]	; (800ad3c <prvAddNewTaskToReadyList+0xc4>)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acc6:	4b1f      	ldr	r3, [pc, #124]	; (800ad44 <prvAddNewTaskToReadyList+0xcc>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3301      	adds	r3, #1
 800accc:	4a1d      	ldr	r2, [pc, #116]	; (800ad44 <prvAddNewTaskToReadyList+0xcc>)
 800acce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800acd0:	4b1c      	ldr	r3, [pc, #112]	; (800ad44 <prvAddNewTaskToReadyList+0xcc>)
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	2201      	movs	r2, #1
 800acde:	409a      	lsls	r2, r3
 800ace0:	4b19      	ldr	r3, [pc, #100]	; (800ad48 <prvAddNewTaskToReadyList+0xd0>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	4a18      	ldr	r2, [pc, #96]	; (800ad48 <prvAddNewTaskToReadyList+0xd0>)
 800ace8:	6013      	str	r3, [r2, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acee:	4613      	mov	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4a15      	ldr	r2, [pc, #84]	; (800ad4c <prvAddNewTaskToReadyList+0xd4>)
 800acf8:	441a      	add	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	3304      	adds	r3, #4
 800acfe:	4619      	mov	r1, r3
 800ad00:	4610      	mov	r0, r2
 800ad02:	f7fe ffad 	bl	8009c60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad06:	f001 fc35 	bl	800c574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad0a:	4b0d      	ldr	r3, [pc, #52]	; (800ad40 <prvAddNewTaskToReadyList+0xc8>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00e      	beq.n	800ad30 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad12:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <prvAddNewTaskToReadyList+0xc4>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d207      	bcs.n	800ad30 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad20:	4b0b      	ldr	r3, [pc, #44]	; (800ad50 <prvAddNewTaskToReadyList+0xd8>)
 800ad22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad30:	bf00      	nop
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	2000270c 	.word	0x2000270c
 800ad3c:	2000260c 	.word	0x2000260c
 800ad40:	20002718 	.word	0x20002718
 800ad44:	20002728 	.word	0x20002728
 800ad48:	20002714 	.word	0x20002714
 800ad4c:	20002610 	.word	0x20002610
 800ad50:	e000ed04 	.word	0xe000ed04

0800ad54 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ad5c:	f001 fbda 	bl	800c514 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d102      	bne.n	800ad6c <vTaskDelete+0x18>
 800ad66:	4b39      	ldr	r3, [pc, #228]	; (800ae4c <vTaskDelete+0xf8>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	e000      	b.n	800ad6e <vTaskDelete+0x1a>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	3304      	adds	r3, #4
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fe ffd0 	bl	8009d1a <uxListRemove>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d115      	bne.n	800adac <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad84:	4932      	ldr	r1, [pc, #200]	; (800ae50 <vTaskDelete+0xfc>)
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	440b      	add	r3, r1
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <vTaskDelete+0x58>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	fa02 f303 	lsl.w	r3, r2, r3
 800ada0:	43da      	mvns	r2, r3
 800ada2:	4b2c      	ldr	r3, [pc, #176]	; (800ae54 <vTaskDelete+0x100>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4013      	ands	r3, r2
 800ada8:	4a2a      	ldr	r2, [pc, #168]	; (800ae54 <vTaskDelete+0x100>)
 800adaa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d004      	beq.n	800adbe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	3318      	adds	r3, #24
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fe ffae 	bl	8009d1a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800adbe:	4b26      	ldr	r3, [pc, #152]	; (800ae58 <vTaskDelete+0x104>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3301      	adds	r3, #1
 800adc4:	4a24      	ldr	r2, [pc, #144]	; (800ae58 <vTaskDelete+0x104>)
 800adc6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800adc8:	4b20      	ldr	r3, [pc, #128]	; (800ae4c <vTaskDelete+0xf8>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	429a      	cmp	r2, r3
 800add0:	d10b      	bne.n	800adea <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3304      	adds	r3, #4
 800add6:	4619      	mov	r1, r3
 800add8:	4820      	ldr	r0, [pc, #128]	; (800ae5c <vTaskDelete+0x108>)
 800adda:	f7fe ff41 	bl	8009c60 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800adde:	4b20      	ldr	r3, [pc, #128]	; (800ae60 <vTaskDelete+0x10c>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3301      	adds	r3, #1
 800ade4:	4a1e      	ldr	r2, [pc, #120]	; (800ae60 <vTaskDelete+0x10c>)
 800ade6:	6013      	str	r3, [r2, #0]
 800ade8:	e009      	b.n	800adfe <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800adea:	4b1e      	ldr	r3, [pc, #120]	; (800ae64 <vTaskDelete+0x110>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3b01      	subs	r3, #1
 800adf0:	4a1c      	ldr	r2, [pc, #112]	; (800ae64 <vTaskDelete+0x110>)
 800adf2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 fc49 	bl	800b68c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800adfa:	f000 fc77 	bl	800b6ec <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800adfe:	f001 fbb9 	bl	800c574 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ae02:	4b19      	ldr	r3, [pc, #100]	; (800ae68 <vTaskDelete+0x114>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d01b      	beq.n	800ae42 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800ae0a:	4b10      	ldr	r3, [pc, #64]	; (800ae4c <vTaskDelete+0xf8>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d116      	bne.n	800ae42 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ae14:	4b15      	ldr	r3, [pc, #84]	; (800ae6c <vTaskDelete+0x118>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00a      	beq.n	800ae32 <vTaskDelete+0xde>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	60bb      	str	r3, [r7, #8]
}
 800ae2e:	bf00      	nop
 800ae30:	e7fe      	b.n	800ae30 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800ae32:	4b0f      	ldr	r3, [pc, #60]	; (800ae70 <vTaskDelete+0x11c>)
 800ae34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae38:	601a      	str	r2, [r3, #0]
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae42:	bf00      	nop
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	2000260c 	.word	0x2000260c
 800ae50:	20002610 	.word	0x20002610
 800ae54:	20002714 	.word	0x20002714
 800ae58:	20002728 	.word	0x20002728
 800ae5c:	200026e0 	.word	0x200026e0
 800ae60:	200026f4 	.word	0x200026f4
 800ae64:	2000270c 	.word	0x2000270c
 800ae68:	20002718 	.word	0x20002718
 800ae6c:	20002734 	.word	0x20002734
 800ae70:	e000ed04 	.word	0xe000ed04

0800ae74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b08a      	sub	sp, #40	; 0x28
 800ae78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae82:	463a      	mov	r2, r7
 800ae84:	1d39      	adds	r1, r7, #4
 800ae86:	f107 0308 	add.w	r3, r7, #8
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7f6 f978 	bl	8001180 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	9202      	str	r2, [sp, #8]
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	460a      	mov	r2, r1
 800aea2:	4922      	ldr	r1, [pc, #136]	; (800af2c <vTaskStartScheduler+0xb8>)
 800aea4:	4822      	ldr	r0, [pc, #136]	; (800af30 <vTaskStartScheduler+0xbc>)
 800aea6:	f7ff fdaf 	bl	800aa08 <xTaskCreateStatic>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	4a21      	ldr	r2, [pc, #132]	; (800af34 <vTaskStartScheduler+0xc0>)
 800aeae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aeb0:	4b20      	ldr	r3, [pc, #128]	; (800af34 <vTaskStartScheduler+0xc0>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	617b      	str	r3, [r7, #20]
 800aebc:	e001      	b.n	800aec2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d102      	bne.n	800aece <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aec8:	f000 fe68 	bl	800bb9c <xTimerCreateTimerTask>
 800aecc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d118      	bne.n	800af06 <vTaskStartScheduler+0x92>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	613b      	str	r3, [r7, #16]
}
 800aee6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aee8:	4b13      	ldr	r3, [pc, #76]	; (800af38 <vTaskStartScheduler+0xc4>)
 800aeea:	f04f 32ff 	mov.w	r2, #4294967295
 800aeee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aef0:	4b12      	ldr	r3, [pc, #72]	; (800af3c <vTaskStartScheduler+0xc8>)
 800aef2:	2201      	movs	r2, #1
 800aef4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aef6:	4b12      	ldr	r3, [pc, #72]	; (800af40 <vTaskStartScheduler+0xcc>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800aefc:	f7f6 fcc8 	bl	8001890 <RTOS_AppConfigureTimerForRuntimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af00:	f001 fa66 	bl	800c3d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af04:	e00e      	b.n	800af24 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0c:	d10a      	bne.n	800af24 <vTaskStartScheduler+0xb0>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	60fb      	str	r3, [r7, #12]
}
 800af20:	bf00      	nop
 800af22:	e7fe      	b.n	800af22 <vTaskStartScheduler+0xae>
}
 800af24:	bf00      	nop
 800af26:	3718      	adds	r7, #24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	0801132c 	.word	0x0801132c
 800af30:	0800b581 	.word	0x0800b581
 800af34:	20002730 	.word	0x20002730
 800af38:	2000272c 	.word	0x2000272c
 800af3c:	20002718 	.word	0x20002718
 800af40:	20002710 	.word	0x20002710

0800af44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800af48:	4b04      	ldr	r3, [pc, #16]	; (800af5c <vTaskSuspendAll+0x18>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	4a03      	ldr	r2, [pc, #12]	; (800af5c <vTaskSuspendAll+0x18>)
 800af50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800af52:	bf00      	nop
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20002734 	.word	0x20002734

0800af60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af6a:	2300      	movs	r3, #0
 800af6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af6e:	4b41      	ldr	r3, [pc, #260]	; (800b074 <xTaskResumeAll+0x114>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10a      	bne.n	800af8c <xTaskResumeAll+0x2c>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	603b      	str	r3, [r7, #0]
}
 800af88:	bf00      	nop
 800af8a:	e7fe      	b.n	800af8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af8c:	f001 fac2 	bl	800c514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af90:	4b38      	ldr	r3, [pc, #224]	; (800b074 <xTaskResumeAll+0x114>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	3b01      	subs	r3, #1
 800af96:	4a37      	ldr	r2, [pc, #220]	; (800b074 <xTaskResumeAll+0x114>)
 800af98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af9a:	4b36      	ldr	r3, [pc, #216]	; (800b074 <xTaskResumeAll+0x114>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d161      	bne.n	800b066 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afa2:	4b35      	ldr	r3, [pc, #212]	; (800b078 <xTaskResumeAll+0x118>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d05d      	beq.n	800b066 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afaa:	e02e      	b.n	800b00a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afac:	4b33      	ldr	r3, [pc, #204]	; (800b07c <xTaskResumeAll+0x11c>)
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	3318      	adds	r3, #24
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fe feae 	bl	8009d1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3304      	adds	r3, #4
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fe fea9 	bl	8009d1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	2201      	movs	r2, #1
 800afce:	409a      	lsls	r2, r3
 800afd0:	4b2b      	ldr	r3, [pc, #172]	; (800b080 <xTaskResumeAll+0x120>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	4a2a      	ldr	r2, [pc, #168]	; (800b080 <xTaskResumeAll+0x120>)
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afde:	4613      	mov	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4a27      	ldr	r2, [pc, #156]	; (800b084 <xTaskResumeAll+0x124>)
 800afe8:	441a      	add	r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	3304      	adds	r3, #4
 800afee:	4619      	mov	r1, r3
 800aff0:	4610      	mov	r0, r2
 800aff2:	f7fe fe35 	bl	8009c60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affa:	4b23      	ldr	r3, [pc, #140]	; (800b088 <xTaskResumeAll+0x128>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b000:	429a      	cmp	r2, r3
 800b002:	d302      	bcc.n	800b00a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b004:	4b21      	ldr	r3, [pc, #132]	; (800b08c <xTaskResumeAll+0x12c>)
 800b006:	2201      	movs	r2, #1
 800b008:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b00a:	4b1c      	ldr	r3, [pc, #112]	; (800b07c <xTaskResumeAll+0x11c>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1cc      	bne.n	800afac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b018:	f000 fb68 	bl	800b6ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b01c:	4b1c      	ldr	r3, [pc, #112]	; (800b090 <xTaskResumeAll+0x130>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d010      	beq.n	800b04a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b028:	f000 f846 	bl	800b0b8 <xTaskIncrementTick>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d002      	beq.n	800b038 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b032:	4b16      	ldr	r3, [pc, #88]	; (800b08c <xTaskResumeAll+0x12c>)
 800b034:	2201      	movs	r2, #1
 800b036:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	3b01      	subs	r3, #1
 800b03c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1f1      	bne.n	800b028 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b044:	4b12      	ldr	r3, [pc, #72]	; (800b090 <xTaskResumeAll+0x130>)
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b04a:	4b10      	ldr	r3, [pc, #64]	; (800b08c <xTaskResumeAll+0x12c>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d009      	beq.n	800b066 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b052:	2301      	movs	r3, #1
 800b054:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b056:	4b0f      	ldr	r3, [pc, #60]	; (800b094 <xTaskResumeAll+0x134>)
 800b058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b066:	f001 fa85 	bl	800c574 <vPortExitCritical>

	return xAlreadyYielded;
 800b06a:	68bb      	ldr	r3, [r7, #8]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	20002734 	.word	0x20002734
 800b078:	2000270c 	.word	0x2000270c
 800b07c:	200026cc 	.word	0x200026cc
 800b080:	20002714 	.word	0x20002714
 800b084:	20002610 	.word	0x20002610
 800b088:	2000260c 	.word	0x2000260c
 800b08c:	20002720 	.word	0x20002720
 800b090:	2000271c 	.word	0x2000271c
 800b094:	e000ed04 	.word	0xe000ed04

0800b098 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b09e:	4b05      	ldr	r3, [pc, #20]	; (800b0b4 <xTaskGetTickCount+0x1c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0a4:	687b      	ldr	r3, [r7, #4]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	20002710 	.word	0x20002710

0800b0b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0c2:	4b4e      	ldr	r3, [pc, #312]	; (800b1fc <xTaskIncrementTick+0x144>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f040 8088 	bne.w	800b1dc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0cc:	4b4c      	ldr	r3, [pc, #304]	; (800b200 <xTaskIncrementTick+0x148>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0d4:	4a4a      	ldr	r2, [pc, #296]	; (800b200 <xTaskIncrementTick+0x148>)
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d120      	bne.n	800b122 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0e0:	4b48      	ldr	r3, [pc, #288]	; (800b204 <xTaskIncrementTick+0x14c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <xTaskIncrementTick+0x48>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	603b      	str	r3, [r7, #0]
}
 800b0fc:	bf00      	nop
 800b0fe:	e7fe      	b.n	800b0fe <xTaskIncrementTick+0x46>
 800b100:	4b40      	ldr	r3, [pc, #256]	; (800b204 <xTaskIncrementTick+0x14c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	60fb      	str	r3, [r7, #12]
 800b106:	4b40      	ldr	r3, [pc, #256]	; (800b208 <xTaskIncrementTick+0x150>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a3e      	ldr	r2, [pc, #248]	; (800b204 <xTaskIncrementTick+0x14c>)
 800b10c:	6013      	str	r3, [r2, #0]
 800b10e:	4a3e      	ldr	r2, [pc, #248]	; (800b208 <xTaskIncrementTick+0x150>)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6013      	str	r3, [r2, #0]
 800b114:	4b3d      	ldr	r3, [pc, #244]	; (800b20c <xTaskIncrementTick+0x154>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3301      	adds	r3, #1
 800b11a:	4a3c      	ldr	r2, [pc, #240]	; (800b20c <xTaskIncrementTick+0x154>)
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	f000 fae5 	bl	800b6ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b122:	4b3b      	ldr	r3, [pc, #236]	; (800b210 <xTaskIncrementTick+0x158>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d348      	bcc.n	800b1be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b12c:	4b35      	ldr	r3, [pc, #212]	; (800b204 <xTaskIncrementTick+0x14c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d104      	bne.n	800b140 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b136:	4b36      	ldr	r3, [pc, #216]	; (800b210 <xTaskIncrementTick+0x158>)
 800b138:	f04f 32ff 	mov.w	r2, #4294967295
 800b13c:	601a      	str	r2, [r3, #0]
					break;
 800b13e:	e03e      	b.n	800b1be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b140:	4b30      	ldr	r3, [pc, #192]	; (800b204 <xTaskIncrementTick+0x14c>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d203      	bcs.n	800b160 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b158:	4a2d      	ldr	r2, [pc, #180]	; (800b210 <xTaskIncrementTick+0x158>)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b15e:	e02e      	b.n	800b1be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	3304      	adds	r3, #4
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe fdd8 	bl	8009d1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d004      	beq.n	800b17c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	3318      	adds	r3, #24
 800b176:	4618      	mov	r0, r3
 800b178:	f7fe fdcf 	bl	8009d1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b180:	2201      	movs	r2, #1
 800b182:	409a      	lsls	r2, r3
 800b184:	4b23      	ldr	r3, [pc, #140]	; (800b214 <xTaskIncrementTick+0x15c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4313      	orrs	r3, r2
 800b18a:	4a22      	ldr	r2, [pc, #136]	; (800b214 <xTaskIncrementTick+0x15c>)
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b192:	4613      	mov	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4a1f      	ldr	r2, [pc, #124]	; (800b218 <xTaskIncrementTick+0x160>)
 800b19c:	441a      	add	r2, r3
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	f7fe fd5b 	bl	8009c60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ae:	4b1b      	ldr	r3, [pc, #108]	; (800b21c <xTaskIncrementTick+0x164>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d3b9      	bcc.n	800b12c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1bc:	e7b6      	b.n	800b12c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1be:	4b17      	ldr	r3, [pc, #92]	; (800b21c <xTaskIncrementTick+0x164>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c4:	4914      	ldr	r1, [pc, #80]	; (800b218 <xTaskIncrementTick+0x160>)
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	440b      	add	r3, r1
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d907      	bls.n	800b1e6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	617b      	str	r3, [r7, #20]
 800b1da:	e004      	b.n	800b1e6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b1dc:	4b10      	ldr	r3, [pc, #64]	; (800b220 <xTaskIncrementTick+0x168>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	4a0f      	ldr	r2, [pc, #60]	; (800b220 <xTaskIncrementTick+0x168>)
 800b1e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <xTaskIncrementTick+0x16c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b1f2:	697b      	ldr	r3, [r7, #20]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20002734 	.word	0x20002734
 800b200:	20002710 	.word	0x20002710
 800b204:	200026c4 	.word	0x200026c4
 800b208:	200026c8 	.word	0x200026c8
 800b20c:	20002724 	.word	0x20002724
 800b210:	2000272c 	.word	0x2000272c
 800b214:	20002714 	.word	0x20002714
 800b218:	20002610 	.word	0x20002610
 800b21c:	2000260c 	.word	0x2000260c
 800b220:	2000271c 	.word	0x2000271c
 800b224:	20002720 	.word	0x20002720

0800b228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b22e:	4b32      	ldr	r3, [pc, #200]	; (800b2f8 <vTaskSwitchContext+0xd0>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b236:	4b31      	ldr	r3, [pc, #196]	; (800b2fc <vTaskSwitchContext+0xd4>)
 800b238:	2201      	movs	r2, #1
 800b23a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b23c:	e058      	b.n	800b2f0 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800b23e:	4b2f      	ldr	r3, [pc, #188]	; (800b2fc <vTaskSwitchContext+0xd4>)
 800b240:	2200      	movs	r2, #0
 800b242:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b244:	f7f6 fb32 	bl	80018ac <RTOS_AppGetRuntimeCounterValueFromISR>
 800b248:	4603      	mov	r3, r0
 800b24a:	4a2d      	ldr	r2, [pc, #180]	; (800b300 <vTaskSwitchContext+0xd8>)
 800b24c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b24e:	4b2c      	ldr	r3, [pc, #176]	; (800b300 <vTaskSwitchContext+0xd8>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	4b2c      	ldr	r3, [pc, #176]	; (800b304 <vTaskSwitchContext+0xdc>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	429a      	cmp	r2, r3
 800b258:	d909      	bls.n	800b26e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b25a:	4b2b      	ldr	r3, [pc, #172]	; (800b308 <vTaskSwitchContext+0xe0>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800b260:	4a27      	ldr	r2, [pc, #156]	; (800b300 <vTaskSwitchContext+0xd8>)
 800b262:	6810      	ldr	r0, [r2, #0]
 800b264:	4a27      	ldr	r2, [pc, #156]	; (800b304 <vTaskSwitchContext+0xdc>)
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	1a82      	subs	r2, r0, r2
 800b26a:	440a      	add	r2, r1
 800b26c:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b26e:	4b24      	ldr	r3, [pc, #144]	; (800b300 <vTaskSwitchContext+0xd8>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a24      	ldr	r2, [pc, #144]	; (800b304 <vTaskSwitchContext+0xdc>)
 800b274:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b276:	4b25      	ldr	r3, [pc, #148]	; (800b30c <vTaskSwitchContext+0xe4>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	fab3 f383 	clz	r3, r3
 800b282:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b284:	7afb      	ldrb	r3, [r7, #11]
 800b286:	f1c3 031f 	rsb	r3, r3, #31
 800b28a:	617b      	str	r3, [r7, #20]
 800b28c:	4920      	ldr	r1, [pc, #128]	; (800b310 <vTaskSwitchContext+0xe8>)
 800b28e:	697a      	ldr	r2, [r7, #20]
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	440b      	add	r3, r1
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10a      	bne.n	800b2b6 <vTaskSwitchContext+0x8e>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	607b      	str	r3, [r7, #4]
}
 800b2b2:	bf00      	nop
 800b2b4:	e7fe      	b.n	800b2b4 <vTaskSwitchContext+0x8c>
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4a13      	ldr	r2, [pc, #76]	; (800b310 <vTaskSwitchContext+0xe8>)
 800b2c2:	4413      	add	r3, r2
 800b2c4:	613b      	str	r3, [r7, #16]
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	605a      	str	r2, [r3, #4]
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	685a      	ldr	r2, [r3, #4]
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	3308      	adds	r3, #8
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d104      	bne.n	800b2e6 <vTaskSwitchContext+0xbe>
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	605a      	str	r2, [r3, #4]
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	4a06      	ldr	r2, [pc, #24]	; (800b308 <vTaskSwitchContext+0xe0>)
 800b2ee:	6013      	str	r3, [r2, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20002734 	.word	0x20002734
 800b2fc:	20002720 	.word	0x20002720
 800b300:	2000273c 	.word	0x2000273c
 800b304:	20002738 	.word	0x20002738
 800b308:	2000260c 	.word	0x2000260c
 800b30c:	20002714 	.word	0x20002714
 800b310:	20002610 	.word	0x20002610

0800b314 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10a      	bne.n	800b33a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	60fb      	str	r3, [r7, #12]
}
 800b336:	bf00      	nop
 800b338:	e7fe      	b.n	800b338 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b33a:	4b07      	ldr	r3, [pc, #28]	; (800b358 <vTaskPlaceOnEventList+0x44>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3318      	adds	r3, #24
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7fe fcb0 	bl	8009ca8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b348:	2101      	movs	r1, #1
 800b34a:	6838      	ldr	r0, [r7, #0]
 800b34c:	f000 fbc0 	bl	800bad0 <prvAddCurrentTaskToDelayedList>
}
 800b350:	bf00      	nop
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	2000260c 	.word	0x2000260c

0800b35c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10a      	bne.n	800b384 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	617b      	str	r3, [r7, #20]
}
 800b380:	bf00      	nop
 800b382:	e7fe      	b.n	800b382 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b384:	4b0a      	ldr	r3, [pc, #40]	; (800b3b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3318      	adds	r3, #24
 800b38a:	4619      	mov	r1, r3
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f7fe fc67 	bl	8009c60 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b398:	f04f 33ff 	mov.w	r3, #4294967295
 800b39c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b39e:	6879      	ldr	r1, [r7, #4]
 800b3a0:	68b8      	ldr	r0, [r7, #8]
 800b3a2:	f000 fb95 	bl	800bad0 <prvAddCurrentTaskToDelayedList>
	}
 800b3a6:	bf00      	nop
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	2000260c 	.word	0x2000260c

0800b3b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b086      	sub	sp, #24
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10a      	bne.n	800b3e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	60fb      	str	r3, [r7, #12]
}
 800b3dc:	bf00      	nop
 800b3de:	e7fe      	b.n	800b3de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	3318      	adds	r3, #24
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fe fc98 	bl	8009d1a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ea:	4b1d      	ldr	r3, [pc, #116]	; (800b460 <xTaskRemoveFromEventList+0xac>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d11c      	bne.n	800b42c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe fc8f 	bl	8009d1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	2201      	movs	r2, #1
 800b402:	409a      	lsls	r2, r3
 800b404:	4b17      	ldr	r3, [pc, #92]	; (800b464 <xTaskRemoveFromEventList+0xb0>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4313      	orrs	r3, r2
 800b40a:	4a16      	ldr	r2, [pc, #88]	; (800b464 <xTaskRemoveFromEventList+0xb0>)
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b412:	4613      	mov	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4a13      	ldr	r2, [pc, #76]	; (800b468 <xTaskRemoveFromEventList+0xb4>)
 800b41c:	441a      	add	r2, r3
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	3304      	adds	r3, #4
 800b422:	4619      	mov	r1, r3
 800b424:	4610      	mov	r0, r2
 800b426:	f7fe fc1b 	bl	8009c60 <vListInsertEnd>
 800b42a:	e005      	b.n	800b438 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	3318      	adds	r3, #24
 800b430:	4619      	mov	r1, r3
 800b432:	480e      	ldr	r0, [pc, #56]	; (800b46c <xTaskRemoveFromEventList+0xb8>)
 800b434:	f7fe fc14 	bl	8009c60 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b43c:	4b0c      	ldr	r3, [pc, #48]	; (800b470 <xTaskRemoveFromEventList+0xbc>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	429a      	cmp	r2, r3
 800b444:	d905      	bls.n	800b452 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b446:	2301      	movs	r3, #1
 800b448:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b44a:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <xTaskRemoveFromEventList+0xc0>)
 800b44c:	2201      	movs	r2, #1
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	e001      	b.n	800b456 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b452:	2300      	movs	r3, #0
 800b454:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b456:	697b      	ldr	r3, [r7, #20]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20002734 	.word	0x20002734
 800b464:	20002714 	.word	0x20002714
 800b468:	20002610 	.word	0x20002610
 800b46c:	200026cc 	.word	0x200026cc
 800b470:	2000260c 	.word	0x2000260c
 800b474:	20002720 	.word	0x20002720

0800b478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b480:	4b06      	ldr	r3, [pc, #24]	; (800b49c <vTaskInternalSetTimeOutState+0x24>)
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b488:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <vTaskInternalSetTimeOutState+0x28>)
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	605a      	str	r2, [r3, #4]
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	20002724 	.word	0x20002724
 800b4a0:	20002710 	.word	0x20002710

0800b4a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10a      	bne.n	800b4ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	613b      	str	r3, [r7, #16]
}
 800b4c6:	bf00      	nop
 800b4c8:	e7fe      	b.n	800b4c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10a      	bne.n	800b4e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	60fb      	str	r3, [r7, #12]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b4e6:	f001 f815 	bl	800c514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4ea:	4b1d      	ldr	r3, [pc, #116]	; (800b560 <xTaskCheckForTimeOut+0xbc>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	69ba      	ldr	r2, [r7, #24]
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b502:	d102      	bne.n	800b50a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b504:	2300      	movs	r3, #0
 800b506:	61fb      	str	r3, [r7, #28]
 800b508:	e023      	b.n	800b552 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	4b15      	ldr	r3, [pc, #84]	; (800b564 <xTaskCheckForTimeOut+0xc0>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	429a      	cmp	r2, r3
 800b514:	d007      	beq.n	800b526 <xTaskCheckForTimeOut+0x82>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	69ba      	ldr	r2, [r7, #24]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d302      	bcc.n	800b526 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b520:	2301      	movs	r3, #1
 800b522:	61fb      	str	r3, [r7, #28]
 800b524:	e015      	b.n	800b552 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d20b      	bcs.n	800b548 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	1ad2      	subs	r2, r2, r3
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff ff9b 	bl	800b478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b542:	2300      	movs	r3, #0
 800b544:	61fb      	str	r3, [r7, #28]
 800b546:	e004      	b.n	800b552 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2200      	movs	r2, #0
 800b54c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b54e:	2301      	movs	r3, #1
 800b550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b552:	f001 f80f 	bl	800c574 <vPortExitCritical>

	return xReturn;
 800b556:	69fb      	ldr	r3, [r7, #28]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3720      	adds	r7, #32
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	20002710 	.word	0x20002710
 800b564:	20002724 	.word	0x20002724

0800b568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b568:	b480      	push	{r7}
 800b56a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b56c:	4b03      	ldr	r3, [pc, #12]	; (800b57c <vTaskMissedYield+0x14>)
 800b56e:	2201      	movs	r2, #1
 800b570:	601a      	str	r2, [r3, #0]
}
 800b572:	bf00      	nop
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20002720 	.word	0x20002720

0800b580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b588:	f000 f852 	bl	800b630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b58c:	4b06      	ldr	r3, [pc, #24]	; (800b5a8 <prvIdleTask+0x28>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d9f9      	bls.n	800b588 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b594:	4b05      	ldr	r3, [pc, #20]	; (800b5ac <prvIdleTask+0x2c>)
 800b596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5a4:	e7f0      	b.n	800b588 <prvIdleTask+0x8>
 800b5a6:	bf00      	nop
 800b5a8:	20002610 	.word	0x20002610
 800b5ac:	e000ed04 	.word	0xe000ed04

0800b5b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	607b      	str	r3, [r7, #4]
 800b5ba:	e00c      	b.n	800b5d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4413      	add	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4a12      	ldr	r2, [pc, #72]	; (800b610 <prvInitialiseTaskLists+0x60>)
 800b5c8:	4413      	add	r3, r2
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe fb1b 	bl	8009c06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	607b      	str	r3, [r7, #4]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b06      	cmp	r3, #6
 800b5da:	d9ef      	bls.n	800b5bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5dc:	480d      	ldr	r0, [pc, #52]	; (800b614 <prvInitialiseTaskLists+0x64>)
 800b5de:	f7fe fb12 	bl	8009c06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5e2:	480d      	ldr	r0, [pc, #52]	; (800b618 <prvInitialiseTaskLists+0x68>)
 800b5e4:	f7fe fb0f 	bl	8009c06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5e8:	480c      	ldr	r0, [pc, #48]	; (800b61c <prvInitialiseTaskLists+0x6c>)
 800b5ea:	f7fe fb0c 	bl	8009c06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5ee:	480c      	ldr	r0, [pc, #48]	; (800b620 <prvInitialiseTaskLists+0x70>)
 800b5f0:	f7fe fb09 	bl	8009c06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5f4:	480b      	ldr	r0, [pc, #44]	; (800b624 <prvInitialiseTaskLists+0x74>)
 800b5f6:	f7fe fb06 	bl	8009c06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5fa:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <prvInitialiseTaskLists+0x78>)
 800b5fc:	4a05      	ldr	r2, [pc, #20]	; (800b614 <prvInitialiseTaskLists+0x64>)
 800b5fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b600:	4b0a      	ldr	r3, [pc, #40]	; (800b62c <prvInitialiseTaskLists+0x7c>)
 800b602:	4a05      	ldr	r2, [pc, #20]	; (800b618 <prvInitialiseTaskLists+0x68>)
 800b604:	601a      	str	r2, [r3, #0]
}
 800b606:	bf00      	nop
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20002610 	.word	0x20002610
 800b614:	2000269c 	.word	0x2000269c
 800b618:	200026b0 	.word	0x200026b0
 800b61c:	200026cc 	.word	0x200026cc
 800b620:	200026e0 	.word	0x200026e0
 800b624:	200026f8 	.word	0x200026f8
 800b628:	200026c4 	.word	0x200026c4
 800b62c:	200026c8 	.word	0x200026c8

0800b630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b636:	e019      	b.n	800b66c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b638:	f000 ff6c 	bl	800c514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b63c:	4b10      	ldr	r3, [pc, #64]	; (800b680 <prvCheckTasksWaitingTermination+0x50>)
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3304      	adds	r3, #4
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe fb66 	bl	8009d1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b64e:	4b0d      	ldr	r3, [pc, #52]	; (800b684 <prvCheckTasksWaitingTermination+0x54>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3b01      	subs	r3, #1
 800b654:	4a0b      	ldr	r2, [pc, #44]	; (800b684 <prvCheckTasksWaitingTermination+0x54>)
 800b656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b658:	4b0b      	ldr	r3, [pc, #44]	; (800b688 <prvCheckTasksWaitingTermination+0x58>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	4a0a      	ldr	r2, [pc, #40]	; (800b688 <prvCheckTasksWaitingTermination+0x58>)
 800b660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b662:	f000 ff87 	bl	800c574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f810 	bl	800b68c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <prvCheckTasksWaitingTermination+0x58>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1e1      	bne.n	800b638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b674:	bf00      	nop
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	200026e0 	.word	0x200026e0
 800b684:	2000270c 	.word	0x2000270c
 800b688:	200026f4 	.word	0x200026f4

0800b68c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d108      	bne.n	800b6b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f001 f91c 	bl	800c8e0 <vPortFree>
				vPortFree( pxTCB );
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 f919 	bl	800c8e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6ae:	e018      	b.n	800b6e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d103      	bne.n	800b6c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f001 f910 	bl	800c8e0 <vPortFree>
	}
 800b6c0:	e00f      	b.n	800b6e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d00a      	beq.n	800b6e2 <prvDeleteTCB+0x56>
	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	60fb      	str	r3, [r7, #12]
}
 800b6de:	bf00      	nop
 800b6e0:	e7fe      	b.n	800b6e0 <prvDeleteTCB+0x54>
	}
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
	...

0800b6ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6f2:	4b0c      	ldr	r3, [pc, #48]	; (800b724 <prvResetNextTaskUnblockTime+0x38>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d104      	bne.n	800b706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	; (800b728 <prvResetNextTaskUnblockTime+0x3c>)
 800b6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b704:	e008      	b.n	800b718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b706:	4b07      	ldr	r3, [pc, #28]	; (800b724 <prvResetNextTaskUnblockTime+0x38>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	4a04      	ldr	r2, [pc, #16]	; (800b728 <prvResetNextTaskUnblockTime+0x3c>)
 800b716:	6013      	str	r3, [r2, #0]
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	200026c4 	.word	0x200026c4
 800b728:	2000272c 	.word	0x2000272c

0800b72c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b732:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <xTaskGetSchedulerState+0x34>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d102      	bne.n	800b740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b73a:	2301      	movs	r3, #1
 800b73c:	607b      	str	r3, [r7, #4]
 800b73e:	e008      	b.n	800b752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b740:	4b08      	ldr	r3, [pc, #32]	; (800b764 <xTaskGetSchedulerState+0x38>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d102      	bne.n	800b74e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b748:	2302      	movs	r3, #2
 800b74a:	607b      	str	r3, [r7, #4]
 800b74c:	e001      	b.n	800b752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b74e:	2300      	movs	r3, #0
 800b750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b752:	687b      	ldr	r3, [r7, #4]
	}
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	20002718 	.word	0x20002718
 800b764:	20002734 	.word	0x20002734

0800b768 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b774:	2300      	movs	r3, #0
 800b776:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d069      	beq.n	800b852 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b782:	4b36      	ldr	r3, [pc, #216]	; (800b85c <xTaskPriorityInherit+0xf4>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b788:	429a      	cmp	r2, r3
 800b78a:	d259      	bcs.n	800b840 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	2b00      	cmp	r3, #0
 800b792:	db06      	blt.n	800b7a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b794:	4b31      	ldr	r3, [pc, #196]	; (800b85c <xTaskPriorityInherit+0xf4>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79a:	f1c3 0207 	rsb	r2, r3, #7
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	6959      	ldr	r1, [r3, #20]
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4a2b      	ldr	r2, [pc, #172]	; (800b860 <xTaskPriorityInherit+0xf8>)
 800b7b4:	4413      	add	r3, r2
 800b7b6:	4299      	cmp	r1, r3
 800b7b8:	d13a      	bne.n	800b830 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	3304      	adds	r3, #4
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fe faab 	bl	8009d1a <uxListRemove>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d115      	bne.n	800b7f6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ce:	4924      	ldr	r1, [pc, #144]	; (800b860 <xTaskPriorityInherit+0xf8>)
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	440b      	add	r3, r1
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10a      	bne.n	800b7f6 <xTaskPriorityInherit+0x8e>
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ea:	43da      	mvns	r2, r3
 800b7ec:	4b1d      	ldr	r3, [pc, #116]	; (800b864 <xTaskPriorityInherit+0xfc>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	4a1c      	ldr	r2, [pc, #112]	; (800b864 <xTaskPriorityInherit+0xfc>)
 800b7f4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7f6:	4b19      	ldr	r3, [pc, #100]	; (800b85c <xTaskPriorityInherit+0xf4>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b804:	2201      	movs	r2, #1
 800b806:	409a      	lsls	r2, r3
 800b808:	4b16      	ldr	r3, [pc, #88]	; (800b864 <xTaskPriorityInherit+0xfc>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	4a15      	ldr	r2, [pc, #84]	; (800b864 <xTaskPriorityInherit+0xfc>)
 800b810:	6013      	str	r3, [r2, #0]
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b816:	4613      	mov	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4a10      	ldr	r2, [pc, #64]	; (800b860 <xTaskPriorityInherit+0xf8>)
 800b820:	441a      	add	r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	3304      	adds	r3, #4
 800b826:	4619      	mov	r1, r3
 800b828:	4610      	mov	r0, r2
 800b82a:	f7fe fa19 	bl	8009c60 <vListInsertEnd>
 800b82e:	e004      	b.n	800b83a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b830:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <xTaskPriorityInherit+0xf4>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b83a:	2301      	movs	r3, #1
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	e008      	b.n	800b852 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <xTaskPriorityInherit+0xf4>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d201      	bcs.n	800b852 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b84e:	2301      	movs	r3, #1
 800b850:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b852:	68fb      	ldr	r3, [r7, #12]
	}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	2000260c 	.word	0x2000260c
 800b860:	20002610 	.word	0x20002610
 800b864:	20002714 	.word	0x20002714

0800b868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b874:	2300      	movs	r3, #0
 800b876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d06e      	beq.n	800b95c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b87e:	4b3a      	ldr	r3, [pc, #232]	; (800b968 <xTaskPriorityDisinherit+0x100>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	429a      	cmp	r2, r3
 800b886:	d00a      	beq.n	800b89e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	60fb      	str	r3, [r7, #12]
}
 800b89a:	bf00      	nop
 800b89c:	e7fe      	b.n	800b89c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10a      	bne.n	800b8bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	60bb      	str	r3, [r7, #8]
}
 800b8b8:	bf00      	nop
 800b8ba:	e7fe      	b.n	800b8ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8c0:	1e5a      	subs	r2, r3, #1
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d044      	beq.n	800b95c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d140      	bne.n	800b95c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	3304      	adds	r3, #4
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fe fa1b 	bl	8009d1a <uxListRemove>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d115      	bne.n	800b916 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ee:	491f      	ldr	r1, [pc, #124]	; (800b96c <xTaskPriorityDisinherit+0x104>)
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	440b      	add	r3, r1
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10a      	bne.n	800b916 <xTaskPriorityDisinherit+0xae>
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b904:	2201      	movs	r2, #1
 800b906:	fa02 f303 	lsl.w	r3, r2, r3
 800b90a:	43da      	mvns	r2, r3
 800b90c:	4b18      	ldr	r3, [pc, #96]	; (800b970 <xTaskPriorityDisinherit+0x108>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4013      	ands	r3, r2
 800b912:	4a17      	ldr	r2, [pc, #92]	; (800b970 <xTaskPriorityDisinherit+0x108>)
 800b914:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b922:	f1c3 0207 	rsb	r2, r3, #7
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92e:	2201      	movs	r2, #1
 800b930:	409a      	lsls	r2, r3
 800b932:	4b0f      	ldr	r3, [pc, #60]	; (800b970 <xTaskPriorityDisinherit+0x108>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4313      	orrs	r3, r2
 800b938:	4a0d      	ldr	r2, [pc, #52]	; (800b970 <xTaskPriorityDisinherit+0x108>)
 800b93a:	6013      	str	r3, [r2, #0]
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b940:	4613      	mov	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4413      	add	r3, r2
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	4a08      	ldr	r2, [pc, #32]	; (800b96c <xTaskPriorityDisinherit+0x104>)
 800b94a:	441a      	add	r2, r3
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	3304      	adds	r3, #4
 800b950:	4619      	mov	r1, r3
 800b952:	4610      	mov	r0, r2
 800b954:	f7fe f984 	bl	8009c60 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b958:	2301      	movs	r3, #1
 800b95a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b95c:	697b      	ldr	r3, [r7, #20]
	}
 800b95e:	4618      	mov	r0, r3
 800b960:	3718      	adds	r7, #24
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	2000260c 	.word	0x2000260c
 800b96c:	20002610 	.word	0x20002610
 800b970:	20002714 	.word	0x20002714

0800b974 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b974:	b580      	push	{r7, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b982:	2301      	movs	r3, #1
 800b984:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 8083 	beq.w	800ba94 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10a      	bne.n	800b9ac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	60fb      	str	r3, [r7, #12]
}
 800b9a8:	bf00      	nop
 800b9aa:	e7fe      	b.n	800b9aa <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d902      	bls.n	800b9bc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	61fb      	str	r3, [r7, #28]
 800b9ba:	e002      	b.n	800b9c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c6:	69fa      	ldr	r2, [r7, #28]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d063      	beq.n	800ba94 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d15e      	bne.n	800ba94 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b9d6:	4b31      	ldr	r3, [pc, #196]	; (800ba9c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	69ba      	ldr	r2, [r7, #24]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d10a      	bne.n	800b9f6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	60bb      	str	r3, [r7, #8]
}
 800b9f2:	bf00      	nop
 800b9f4:	e7fe      	b.n	800b9f4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	69fa      	ldr	r2, [r7, #28]
 800ba00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	db04      	blt.n	800ba14 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	f1c3 0207 	rsb	r2, r3, #7
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	6959      	ldr	r1, [r3, #20]
 800ba18:	693a      	ldr	r2, [r7, #16]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	4413      	add	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4a1f      	ldr	r2, [pc, #124]	; (800baa0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ba24:	4413      	add	r3, r2
 800ba26:	4299      	cmp	r1, r3
 800ba28:	d134      	bne.n	800ba94 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe f973 	bl	8009d1a <uxListRemove>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d115      	bne.n	800ba66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3e:	4918      	ldr	r1, [pc, #96]	; (800baa0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ba40:	4613      	mov	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	440b      	add	r3, r1
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10a      	bne.n	800ba66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba54:	2201      	movs	r2, #1
 800ba56:	fa02 f303 	lsl.w	r3, r2, r3
 800ba5a:	43da      	mvns	r2, r3
 800ba5c:	4b11      	ldr	r3, [pc, #68]	; (800baa4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4013      	ands	r3, r2
 800ba62:	4a10      	ldr	r2, [pc, #64]	; (800baa4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ba64:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	409a      	lsls	r2, r3
 800ba6e:	4b0d      	ldr	r3, [pc, #52]	; (800baa4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	4a0b      	ldr	r2, [pc, #44]	; (800baa4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ba76:	6013      	str	r3, [r2, #0]
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4a06      	ldr	r2, [pc, #24]	; (800baa0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ba86:	441a      	add	r2, r3
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	4610      	mov	r0, r2
 800ba90:	f7fe f8e6 	bl	8009c60 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba94:	bf00      	nop
 800ba96:	3720      	adds	r7, #32
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	2000260c 	.word	0x2000260c
 800baa0:	20002610 	.word	0x20002610
 800baa4:	20002714 	.word	0x20002714

0800baa8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800baa8:	b480      	push	{r7}
 800baaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800baac:	4b07      	ldr	r3, [pc, #28]	; (800bacc <pvTaskIncrementMutexHeldCount+0x24>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d004      	beq.n	800babe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bab4:	4b05      	ldr	r3, [pc, #20]	; (800bacc <pvTaskIncrementMutexHeldCount+0x24>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800baba:	3201      	adds	r2, #1
 800babc:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800babe:	4b03      	ldr	r3, [pc, #12]	; (800bacc <pvTaskIncrementMutexHeldCount+0x24>)
 800bac0:	681b      	ldr	r3, [r3, #0]
	}
 800bac2:	4618      	mov	r0, r3
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	2000260c 	.word	0x2000260c

0800bad0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bada:	4b29      	ldr	r3, [pc, #164]	; (800bb80 <prvAddCurrentTaskToDelayedList+0xb0>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bae0:	4b28      	ldr	r3, [pc, #160]	; (800bb84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	3304      	adds	r3, #4
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe f917 	bl	8009d1a <uxListRemove>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10b      	bne.n	800bb0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800baf2:	4b24      	ldr	r3, [pc, #144]	; (800bb84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf8:	2201      	movs	r2, #1
 800bafa:	fa02 f303 	lsl.w	r3, r2, r3
 800bafe:	43da      	mvns	r2, r3
 800bb00:	4b21      	ldr	r3, [pc, #132]	; (800bb88 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4013      	ands	r3, r2
 800bb06:	4a20      	ldr	r2, [pc, #128]	; (800bb88 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb10:	d10a      	bne.n	800bb28 <prvAddCurrentTaskToDelayedList+0x58>
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d007      	beq.n	800bb28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb18:	4b1a      	ldr	r3, [pc, #104]	; (800bb84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	4619      	mov	r1, r3
 800bb20:	481a      	ldr	r0, [pc, #104]	; (800bb8c <prvAddCurrentTaskToDelayedList+0xbc>)
 800bb22:	f7fe f89d 	bl	8009c60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb26:	e026      	b.n	800bb76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb30:	4b14      	ldr	r3, [pc, #80]	; (800bb84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d209      	bcs.n	800bb54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb40:	4b13      	ldr	r3, [pc, #76]	; (800bb90 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	4b0f      	ldr	r3, [pc, #60]	; (800bb84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	f7fe f8ab 	bl	8009ca8 <vListInsert>
}
 800bb52:	e010      	b.n	800bb76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb54:	4b0f      	ldr	r3, [pc, #60]	; (800bb94 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	4b0a      	ldr	r3, [pc, #40]	; (800bb84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	4619      	mov	r1, r3
 800bb60:	4610      	mov	r0, r2
 800bb62:	f7fe f8a1 	bl	8009ca8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb66:	4b0c      	ldr	r3, [pc, #48]	; (800bb98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d202      	bcs.n	800bb76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bb70:	4a09      	ldr	r2, [pc, #36]	; (800bb98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	6013      	str	r3, [r2, #0]
}
 800bb76:	bf00      	nop
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20002710 	.word	0x20002710
 800bb84:	2000260c 	.word	0x2000260c
 800bb88:	20002714 	.word	0x20002714
 800bb8c:	200026f8 	.word	0x200026f8
 800bb90:	200026c8 	.word	0x200026c8
 800bb94:	200026c4 	.word	0x200026c4
 800bb98:	2000272c 	.word	0x2000272c

0800bb9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b08a      	sub	sp, #40	; 0x28
 800bba0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bba6:	f000 fb47 	bl	800c238 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bbaa:	4b1c      	ldr	r3, [pc, #112]	; (800bc1c <xTimerCreateTimerTask+0x80>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d021      	beq.n	800bbf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bbba:	1d3a      	adds	r2, r7, #4
 800bbbc:	f107 0108 	add.w	r1, r7, #8
 800bbc0:	f107 030c 	add.w	r3, r7, #12
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7f5 fac1 	bl	800114c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bbca:	6879      	ldr	r1, [r7, #4]
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	9202      	str	r2, [sp, #8]
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	2307      	movs	r3, #7
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	460a      	mov	r2, r1
 800bbdc:	4910      	ldr	r1, [pc, #64]	; (800bc20 <xTimerCreateTimerTask+0x84>)
 800bbde:	4811      	ldr	r0, [pc, #68]	; (800bc24 <xTimerCreateTimerTask+0x88>)
 800bbe0:	f7fe ff12 	bl	800aa08 <xTaskCreateStatic>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	4a10      	ldr	r2, [pc, #64]	; (800bc28 <xTimerCreateTimerTask+0x8c>)
 800bbe8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bbea:	4b0f      	ldr	r3, [pc, #60]	; (800bc28 <xTimerCreateTimerTask+0x8c>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10a      	bne.n	800bc12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	613b      	str	r3, [r7, #16]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc12:	697b      	ldr	r3, [r7, #20]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	20002770 	.word	0x20002770
 800bc20:	0801136c 	.word	0x0801136c
 800bc24:	0800be19 	.word	0x0800be19
 800bc28:	20002774 	.word	0x20002774

0800bc2c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b088      	sub	sp, #32
 800bc30:	af02      	add	r7, sp, #8
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
 800bc38:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bc3a:	202c      	movs	r0, #44	; 0x2c
 800bc3c:	f000 fd8c 	bl	800c758 <pvPortMalloc>
 800bc40:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00d      	beq.n	800bc64 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	9301      	str	r3, [sp, #4]
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	68b9      	ldr	r1, [r7, #8]
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f000 f805 	bl	800bc6e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800bc64:	697b      	ldr	r3, [r7, #20]
	}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b086      	sub	sp, #24
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	60f8      	str	r0, [r7, #12]
 800bc76:	60b9      	str	r1, [r7, #8]
 800bc78:	607a      	str	r2, [r7, #4]
 800bc7a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10a      	bne.n	800bc98 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	617b      	str	r3, [r7, #20]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800bc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d01e      	beq.n	800bcdc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800bc9e:	f000 facb 	bl	800c238 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800bca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb6:	6a3a      	ldr	r2, [r7, #32]
 800bcb8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fd ffc1 	bl	8009c46 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d008      	beq.n	800bcdc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcd0:	f043 0304 	orr.w	r3, r3, #4
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800bcdc:	bf00      	nop
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08a      	sub	sp, #40	; 0x28
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10a      	bne.n	800bd12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	623b      	str	r3, [r7, #32]
}
 800bd0e:	bf00      	nop
 800bd10:	e7fe      	b.n	800bd10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd12:	4b1a      	ldr	r3, [pc, #104]	; (800bd7c <xTimerGenericCommand+0x98>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d02a      	beq.n	800bd70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b05      	cmp	r3, #5
 800bd2a:	dc18      	bgt.n	800bd5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd2c:	f7ff fcfe 	bl	800b72c <xTaskGetSchedulerState>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d109      	bne.n	800bd4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd36:	4b11      	ldr	r3, [pc, #68]	; (800bd7c <xTimerGenericCommand+0x98>)
 800bd38:	6818      	ldr	r0, [r3, #0]
 800bd3a:	f107 0114 	add.w	r1, r7, #20
 800bd3e:	2300      	movs	r3, #0
 800bd40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd42:	f7fe f959 	bl	8009ff8 <xQueueGenericSend>
 800bd46:	6278      	str	r0, [r7, #36]	; 0x24
 800bd48:	e012      	b.n	800bd70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd4a:	4b0c      	ldr	r3, [pc, #48]	; (800bd7c <xTimerGenericCommand+0x98>)
 800bd4c:	6818      	ldr	r0, [r3, #0]
 800bd4e:	f107 0114 	add.w	r1, r7, #20
 800bd52:	2300      	movs	r3, #0
 800bd54:	2200      	movs	r2, #0
 800bd56:	f7fe f94f 	bl	8009ff8 <xQueueGenericSend>
 800bd5a:	6278      	str	r0, [r7, #36]	; 0x24
 800bd5c:	e008      	b.n	800bd70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd5e:	4b07      	ldr	r3, [pc, #28]	; (800bd7c <xTimerGenericCommand+0x98>)
 800bd60:	6818      	ldr	r0, [r3, #0]
 800bd62:	f107 0114 	add.w	r1, r7, #20
 800bd66:	2300      	movs	r3, #0
 800bd68:	683a      	ldr	r2, [r7, #0]
 800bd6a:	f7fe fa43 	bl	800a1f4 <xQueueGenericSendFromISR>
 800bd6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3728      	adds	r7, #40	; 0x28
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20002770 	.word	0x20002770

0800bd80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af02      	add	r7, sp, #8
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd8a:	4b22      	ldr	r3, [pc, #136]	; (800be14 <prvProcessExpiredTimer+0x94>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	3304      	adds	r3, #4
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fd ffbe 	bl	8009d1a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bda4:	f003 0304 	and.w	r3, r3, #4
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d022      	beq.n	800bdf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	699a      	ldr	r2, [r3, #24]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	18d1      	adds	r1, r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	6978      	ldr	r0, [r7, #20]
 800bdba:	f000 f8d1 	bl	800bf60 <prvInsertTimerInActiveList>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d01f      	beq.n	800be04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	2100      	movs	r1, #0
 800bdce:	6978      	ldr	r0, [r7, #20]
 800bdd0:	f7ff ff88 	bl	800bce4 <xTimerGenericCommand>
 800bdd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d113      	bne.n	800be04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	60fb      	str	r3, [r7, #12]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdf8:	f023 0301 	bic.w	r3, r3, #1
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	6a1b      	ldr	r3, [r3, #32]
 800be08:	6978      	ldr	r0, [r7, #20]
 800be0a:	4798      	blx	r3
}
 800be0c:	bf00      	nop
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	20002768 	.word	0x20002768

0800be18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be20:	f107 0308 	add.w	r3, r7, #8
 800be24:	4618      	mov	r0, r3
 800be26:	f000 f857 	bl	800bed8 <prvGetNextExpireTime>
 800be2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	4619      	mov	r1, r3
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f000 f803 	bl	800be3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be36:	f000 f8d5 	bl	800bfe4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be3a:	e7f1      	b.n	800be20 <prvTimerTask+0x8>

0800be3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be46:	f7ff f87d 	bl	800af44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be4a:	f107 0308 	add.w	r3, r7, #8
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 f866 	bl	800bf20 <prvSampleTimeNow>
 800be54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d130      	bne.n	800bebe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d10a      	bne.n	800be78 <prvProcessTimerOrBlockTask+0x3c>
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	429a      	cmp	r2, r3
 800be68:	d806      	bhi.n	800be78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be6a:	f7ff f879 	bl	800af60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be6e:	68f9      	ldr	r1, [r7, #12]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7ff ff85 	bl	800bd80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be76:	e024      	b.n	800bec2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d008      	beq.n	800be90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be7e:	4b13      	ldr	r3, [pc, #76]	; (800becc <prvProcessTimerOrBlockTask+0x90>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <prvProcessTimerOrBlockTask+0x50>
 800be88:	2301      	movs	r3, #1
 800be8a:	e000      	b.n	800be8e <prvProcessTimerOrBlockTask+0x52>
 800be8c:	2300      	movs	r3, #0
 800be8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be90:	4b0f      	ldr	r3, [pc, #60]	; (800bed0 <prvProcessTimerOrBlockTask+0x94>)
 800be92:	6818      	ldr	r0, [r3, #0]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	4619      	mov	r1, r3
 800be9e:	f7fe fd7f 	bl	800a9a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bea2:	f7ff f85d 	bl	800af60 <xTaskResumeAll>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10a      	bne.n	800bec2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800beac:	4b09      	ldr	r3, [pc, #36]	; (800bed4 <prvProcessTimerOrBlockTask+0x98>)
 800beae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	f3bf 8f6f 	isb	sy
}
 800bebc:	e001      	b.n	800bec2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bebe:	f7ff f84f 	bl	800af60 <xTaskResumeAll>
}
 800bec2:	bf00      	nop
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	2000276c 	.word	0x2000276c
 800bed0:	20002770 	.word	0x20002770
 800bed4:	e000ed04 	.word	0xe000ed04

0800bed8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bee0:	4b0e      	ldr	r3, [pc, #56]	; (800bf1c <prvGetNextExpireTime+0x44>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <prvGetNextExpireTime+0x16>
 800beea:	2201      	movs	r2, #1
 800beec:	e000      	b.n	800bef0 <prvGetNextExpireTime+0x18>
 800beee:	2200      	movs	r2, #0
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d105      	bne.n	800bf08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800befc:	4b07      	ldr	r3, [pc, #28]	; (800bf1c <prvGetNextExpireTime+0x44>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	60fb      	str	r3, [r7, #12]
 800bf06:	e001      	b.n	800bf0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3714      	adds	r7, #20
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	20002768 	.word	0x20002768

0800bf20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf28:	f7ff f8b6 	bl	800b098 <xTaskGetTickCount>
 800bf2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf2e:	4b0b      	ldr	r3, [pc, #44]	; (800bf5c <prvSampleTimeNow+0x3c>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d205      	bcs.n	800bf44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf38:	f000 f91a 	bl	800c170 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	e002      	b.n	800bf4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf4a:	4a04      	ldr	r2, [pc, #16]	; (800bf5c <prvSampleTimeNow+0x3c>)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf50:	68fb      	ldr	r3, [r7, #12]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	20002778 	.word	0x20002778

0800bf60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d812      	bhi.n	800bfac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	1ad2      	subs	r2, r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d302      	bcc.n	800bf9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf94:	2301      	movs	r3, #1
 800bf96:	617b      	str	r3, [r7, #20]
 800bf98:	e01b      	b.n	800bfd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf9a:	4b10      	ldr	r3, [pc, #64]	; (800bfdc <prvInsertTimerInActiveList+0x7c>)
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	f7fd fe7f 	bl	8009ca8 <vListInsert>
 800bfaa:	e012      	b.n	800bfd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d206      	bcs.n	800bfc2 <prvInsertTimerInActiveList+0x62>
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d302      	bcc.n	800bfc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	617b      	str	r3, [r7, #20]
 800bfc0:	e007      	b.n	800bfd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfc2:	4b07      	ldr	r3, [pc, #28]	; (800bfe0 <prvInsertTimerInActiveList+0x80>)
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4610      	mov	r0, r2
 800bfce:	f7fd fe6b 	bl	8009ca8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfd2:	697b      	ldr	r3, [r7, #20]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	2000276c 	.word	0x2000276c
 800bfe0:	20002768 	.word	0x20002768

0800bfe4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08c      	sub	sp, #48	; 0x30
 800bfe8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfea:	e0ae      	b.n	800c14a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f2c0 80aa 	blt.w	800c148 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	695b      	ldr	r3, [r3, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d004      	beq.n	800c00a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	3304      	adds	r3, #4
 800c004:	4618      	mov	r0, r3
 800c006:	f7fd fe88 	bl	8009d1a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c00a:	1d3b      	adds	r3, r7, #4
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7ff ff87 	bl	800bf20 <prvSampleTimeNow>
 800c012:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	2b09      	cmp	r3, #9
 800c018:	f200 8097 	bhi.w	800c14a <prvProcessReceivedCommands+0x166>
 800c01c:	a201      	add	r2, pc, #4	; (adr r2, 800c024 <prvProcessReceivedCommands+0x40>)
 800c01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c022:	bf00      	nop
 800c024:	0800c04d 	.word	0x0800c04d
 800c028:	0800c04d 	.word	0x0800c04d
 800c02c:	0800c04d 	.word	0x0800c04d
 800c030:	0800c0c1 	.word	0x0800c0c1
 800c034:	0800c0d5 	.word	0x0800c0d5
 800c038:	0800c11f 	.word	0x0800c11f
 800c03c:	0800c04d 	.word	0x0800c04d
 800c040:	0800c04d 	.word	0x0800c04d
 800c044:	0800c0c1 	.word	0x0800c0c1
 800c048:	0800c0d5 	.word	0x0800c0d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c052:	f043 0301 	orr.w	r3, r3, #1
 800c056:	b2da      	uxtb	r2, r3
 800c058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	699b      	ldr	r3, [r3, #24]
 800c064:	18d1      	adds	r1, r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6a3a      	ldr	r2, [r7, #32]
 800c06a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c06c:	f7ff ff78 	bl	800bf60 <prvInsertTimerInActiveList>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d069      	beq.n	800c14a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c07c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c084:	f003 0304 	and.w	r3, r3, #4
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d05e      	beq.n	800c14a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c090:	699b      	ldr	r3, [r3, #24]
 800c092:	441a      	add	r2, r3
 800c094:	2300      	movs	r3, #0
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	2300      	movs	r3, #0
 800c09a:	2100      	movs	r1, #0
 800c09c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c09e:	f7ff fe21 	bl	800bce4 <xTimerGenericCommand>
 800c0a2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d14f      	bne.n	800c14a <prvProcessReceivedCommands+0x166>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	61bb      	str	r3, [r7, #24]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c6:	f023 0301 	bic.w	r3, r3, #1
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c0d2:	e03a      	b.n	800c14a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0da:	f043 0301 	orr.w	r3, r3, #1
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10a      	bne.n	800c10a <prvProcessReceivedCommands+0x126>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	617b      	str	r3, [r7, #20]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	699a      	ldr	r2, [r3, #24]
 800c10e:	6a3b      	ldr	r3, [r7, #32]
 800c110:	18d1      	adds	r1, r2, r3
 800c112:	6a3b      	ldr	r3, [r7, #32]
 800c114:	6a3a      	ldr	r2, [r7, #32]
 800c116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c118:	f7ff ff22 	bl	800bf60 <prvInsertTimerInActiveList>
					break;
 800c11c:	e015      	b.n	800c14a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d103      	bne.n	800c134 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800c12c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c12e:	f000 fbd7 	bl	800c8e0 <vPortFree>
 800c132:	e00a      	b.n	800c14a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c13a:	f023 0301 	bic.w	r3, r3, #1
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c146:	e000      	b.n	800c14a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c148:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c14a:	4b08      	ldr	r3, [pc, #32]	; (800c16c <prvProcessReceivedCommands+0x188>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f107 0108 	add.w	r1, r7, #8
 800c152:	2200      	movs	r2, #0
 800c154:	4618      	mov	r0, r3
 800c156:	f7fe f8e5 	bl	800a324 <xQueueReceive>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f47f af45 	bne.w	800bfec <prvProcessReceivedCommands+0x8>
	}
}
 800c162:	bf00      	nop
 800c164:	bf00      	nop
 800c166:	3728      	adds	r7, #40	; 0x28
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	20002770 	.word	0x20002770

0800c170 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b088      	sub	sp, #32
 800c174:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c176:	e048      	b.n	800c20a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c178:	4b2d      	ldr	r3, [pc, #180]	; (800c230 <prvSwitchTimerLists+0xc0>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c182:	4b2b      	ldr	r3, [pc, #172]	; (800c230 <prvSwitchTimerLists+0xc0>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	3304      	adds	r3, #4
 800c190:	4618      	mov	r0, r3
 800c192:	f7fd fdc2 	bl	8009d1a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1a4:	f003 0304 	and.w	r3, r3, #4
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d02e      	beq.n	800c20a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d90e      	bls.n	800c1dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1ca:	4b19      	ldr	r3, [pc, #100]	; (800c230 <prvSwitchTimerLists+0xc0>)
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	f7fd fd67 	bl	8009ca8 <vListInsert>
 800c1da:	e016      	b.n	800c20a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1dc:	2300      	movs	r3, #0
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f7ff fd7c 	bl	800bce4 <xTimerGenericCommand>
 800c1ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d10a      	bne.n	800c20a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	603b      	str	r3, [r7, #0]
}
 800c206:	bf00      	nop
 800c208:	e7fe      	b.n	800c208 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c20a:	4b09      	ldr	r3, [pc, #36]	; (800c230 <prvSwitchTimerLists+0xc0>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1b1      	bne.n	800c178 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c214:	4b06      	ldr	r3, [pc, #24]	; (800c230 <prvSwitchTimerLists+0xc0>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c21a:	4b06      	ldr	r3, [pc, #24]	; (800c234 <prvSwitchTimerLists+0xc4>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a04      	ldr	r2, [pc, #16]	; (800c230 <prvSwitchTimerLists+0xc0>)
 800c220:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c222:	4a04      	ldr	r2, [pc, #16]	; (800c234 <prvSwitchTimerLists+0xc4>)
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	6013      	str	r3, [r2, #0]
}
 800c228:	bf00      	nop
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	20002768 	.word	0x20002768
 800c234:	2000276c 	.word	0x2000276c

0800c238 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c23e:	f000 f969 	bl	800c514 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c242:	4b15      	ldr	r3, [pc, #84]	; (800c298 <prvCheckForValidListAndQueue+0x60>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d120      	bne.n	800c28c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c24a:	4814      	ldr	r0, [pc, #80]	; (800c29c <prvCheckForValidListAndQueue+0x64>)
 800c24c:	f7fd fcdb 	bl	8009c06 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c250:	4813      	ldr	r0, [pc, #76]	; (800c2a0 <prvCheckForValidListAndQueue+0x68>)
 800c252:	f7fd fcd8 	bl	8009c06 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c256:	4b13      	ldr	r3, [pc, #76]	; (800c2a4 <prvCheckForValidListAndQueue+0x6c>)
 800c258:	4a10      	ldr	r2, [pc, #64]	; (800c29c <prvCheckForValidListAndQueue+0x64>)
 800c25a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c25c:	4b12      	ldr	r3, [pc, #72]	; (800c2a8 <prvCheckForValidListAndQueue+0x70>)
 800c25e:	4a10      	ldr	r2, [pc, #64]	; (800c2a0 <prvCheckForValidListAndQueue+0x68>)
 800c260:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c262:	2300      	movs	r3, #0
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <prvCheckForValidListAndQueue+0x74>)
 800c268:	4a11      	ldr	r2, [pc, #68]	; (800c2b0 <prvCheckForValidListAndQueue+0x78>)
 800c26a:	210c      	movs	r1, #12
 800c26c:	200a      	movs	r0, #10
 800c26e:	f7fd fde7 	bl	8009e40 <xQueueGenericCreateStatic>
 800c272:	4603      	mov	r3, r0
 800c274:	4a08      	ldr	r2, [pc, #32]	; (800c298 <prvCheckForValidListAndQueue+0x60>)
 800c276:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c278:	4b07      	ldr	r3, [pc, #28]	; (800c298 <prvCheckForValidListAndQueue+0x60>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d005      	beq.n	800c28c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c280:	4b05      	ldr	r3, [pc, #20]	; (800c298 <prvCheckForValidListAndQueue+0x60>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	490b      	ldr	r1, [pc, #44]	; (800c2b4 <prvCheckForValidListAndQueue+0x7c>)
 800c286:	4618      	mov	r0, r3
 800c288:	f7fe fb60 	bl	800a94c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c28c:	f000 f972 	bl	800c574 <vPortExitCritical>
}
 800c290:	bf00      	nop
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20002770 	.word	0x20002770
 800c29c:	20002740 	.word	0x20002740
 800c2a0:	20002754 	.word	0x20002754
 800c2a4:	20002768 	.word	0x20002768
 800c2a8:	2000276c 	.word	0x2000276c
 800c2ac:	200027f4 	.word	0x200027f4
 800c2b0:	2000277c 	.word	0x2000277c
 800c2b4:	08011374 	.word	0x08011374

0800c2b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3b04      	subs	r3, #4
 800c2c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c2d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	3b04      	subs	r3, #4
 800c2d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	f023 0201 	bic.w	r2, r3, #1
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	3b04      	subs	r3, #4
 800c2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c2e8:	4a0c      	ldr	r2, [pc, #48]	; (800c31c <pxPortInitialiseStack+0x64>)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3b14      	subs	r3, #20
 800c2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3b04      	subs	r3, #4
 800c2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f06f 0202 	mvn.w	r2, #2
 800c306:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3b20      	subs	r3, #32
 800c30c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c30e:	68fb      	ldr	r3, [r7, #12]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	0800c321 	.word	0x0800c321

0800c320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c326:	2300      	movs	r3, #0
 800c328:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c32a:	4b12      	ldr	r3, [pc, #72]	; (800c374 <prvTaskExitError+0x54>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c332:	d00a      	beq.n	800c34a <prvTaskExitError+0x2a>
	__asm volatile
 800c334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c338:	f383 8811 	msr	BASEPRI, r3
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	f3bf 8f4f 	dsb	sy
 800c344:	60fb      	str	r3, [r7, #12]
}
 800c346:	bf00      	nop
 800c348:	e7fe      	b.n	800c348 <prvTaskExitError+0x28>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	60bb      	str	r3, [r7, #8]
}
 800c35c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c35e:	bf00      	nop
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0fc      	beq.n	800c360 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c366:	bf00      	nop
 800c368:	bf00      	nop
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	20000064 	.word	0x20000064
	...

0800c380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c380:	4b07      	ldr	r3, [pc, #28]	; (800c3a0 <pxCurrentTCBConst2>)
 800c382:	6819      	ldr	r1, [r3, #0]
 800c384:	6808      	ldr	r0, [r1, #0]
 800c386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38a:	f380 8809 	msr	PSP, r0
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f04f 0000 	mov.w	r0, #0
 800c396:	f380 8811 	msr	BASEPRI, r0
 800c39a:	4770      	bx	lr
 800c39c:	f3af 8000 	nop.w

0800c3a0 <pxCurrentTCBConst2>:
 800c3a0:	2000260c 	.word	0x2000260c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop

0800c3a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3a8:	4808      	ldr	r0, [pc, #32]	; (800c3cc <prvPortStartFirstTask+0x24>)
 800c3aa:	6800      	ldr	r0, [r0, #0]
 800c3ac:	6800      	ldr	r0, [r0, #0]
 800c3ae:	f380 8808 	msr	MSP, r0
 800c3b2:	f04f 0000 	mov.w	r0, #0
 800c3b6:	f380 8814 	msr	CONTROL, r0
 800c3ba:	b662      	cpsie	i
 800c3bc:	b661      	cpsie	f
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	df00      	svc	0
 800c3c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3ca:	bf00      	nop
 800c3cc:	e000ed08 	.word	0xe000ed08

0800c3d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c3d6:	4b46      	ldr	r3, [pc, #280]	; (800c4f0 <xPortStartScheduler+0x120>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a46      	ldr	r2, [pc, #280]	; (800c4f4 <xPortStartScheduler+0x124>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d10a      	bne.n	800c3f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	613b      	str	r3, [r7, #16]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c3f6:	4b3e      	ldr	r3, [pc, #248]	; (800c4f0 <xPortStartScheduler+0x120>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a3f      	ldr	r2, [pc, #252]	; (800c4f8 <xPortStartScheduler+0x128>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d10a      	bne.n	800c416 <xPortStartScheduler+0x46>
	__asm volatile
 800c400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	60fb      	str	r3, [r7, #12]
}
 800c412:	bf00      	nop
 800c414:	e7fe      	b.n	800c414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c416:	4b39      	ldr	r3, [pc, #228]	; (800c4fc <xPortStartScheduler+0x12c>)
 800c418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	22ff      	movs	r2, #255	; 0xff
 800c426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c430:	78fb      	ldrb	r3, [r7, #3]
 800c432:	b2db      	uxtb	r3, r3
 800c434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c438:	b2da      	uxtb	r2, r3
 800c43a:	4b31      	ldr	r3, [pc, #196]	; (800c500 <xPortStartScheduler+0x130>)
 800c43c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c43e:	4b31      	ldr	r3, [pc, #196]	; (800c504 <xPortStartScheduler+0x134>)
 800c440:	2207      	movs	r2, #7
 800c442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c444:	e009      	b.n	800c45a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c446:	4b2f      	ldr	r3, [pc, #188]	; (800c504 <xPortStartScheduler+0x134>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	4a2d      	ldr	r2, [pc, #180]	; (800c504 <xPortStartScheduler+0x134>)
 800c44e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	b2db      	uxtb	r3, r3
 800c458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c45a:	78fb      	ldrb	r3, [r7, #3]
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c462:	2b80      	cmp	r3, #128	; 0x80
 800c464:	d0ef      	beq.n	800c446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c466:	4b27      	ldr	r3, [pc, #156]	; (800c504 <xPortStartScheduler+0x134>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f1c3 0307 	rsb	r3, r3, #7
 800c46e:	2b04      	cmp	r3, #4
 800c470:	d00a      	beq.n	800c488 <xPortStartScheduler+0xb8>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	60bb      	str	r3, [r7, #8]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c488:	4b1e      	ldr	r3, [pc, #120]	; (800c504 <xPortStartScheduler+0x134>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	021b      	lsls	r3, r3, #8
 800c48e:	4a1d      	ldr	r2, [pc, #116]	; (800c504 <xPortStartScheduler+0x134>)
 800c490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c492:	4b1c      	ldr	r3, [pc, #112]	; (800c504 <xPortStartScheduler+0x134>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c49a:	4a1a      	ldr	r2, [pc, #104]	; (800c504 <xPortStartScheduler+0x134>)
 800c49c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4a6:	4b18      	ldr	r3, [pc, #96]	; (800c508 <xPortStartScheduler+0x138>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a17      	ldr	r2, [pc, #92]	; (800c508 <xPortStartScheduler+0x138>)
 800c4ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c4b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4b2:	4b15      	ldr	r3, [pc, #84]	; (800c508 <xPortStartScheduler+0x138>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a14      	ldr	r2, [pc, #80]	; (800c508 <xPortStartScheduler+0x138>)
 800c4b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c4bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4be:	f000 f8dd 	bl	800c67c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c4c2:	4b12      	ldr	r3, [pc, #72]	; (800c50c <xPortStartScheduler+0x13c>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c4c8:	f000 f8fc 	bl	800c6c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c4cc:	4b10      	ldr	r3, [pc, #64]	; (800c510 <xPortStartScheduler+0x140>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a0f      	ldr	r2, [pc, #60]	; (800c510 <xPortStartScheduler+0x140>)
 800c4d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c4d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c4d8:	f7ff ff66 	bl	800c3a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c4dc:	f7fe fea4 	bl	800b228 <vTaskSwitchContext>
	prvTaskExitError();
 800c4e0:	f7ff ff1e 	bl	800c320 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	e000ed00 	.word	0xe000ed00
 800c4f4:	410fc271 	.word	0x410fc271
 800c4f8:	410fc270 	.word	0x410fc270
 800c4fc:	e000e400 	.word	0xe000e400
 800c500:	20002844 	.word	0x20002844
 800c504:	20002848 	.word	0x20002848
 800c508:	e000ed20 	.word	0xe000ed20
 800c50c:	20000064 	.word	0x20000064
 800c510:	e000ef34 	.word	0xe000ef34

0800c514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
	__asm volatile
 800c51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	607b      	str	r3, [r7, #4]
}
 800c52c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c52e:	4b0f      	ldr	r3, [pc, #60]	; (800c56c <vPortEnterCritical+0x58>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3301      	adds	r3, #1
 800c534:	4a0d      	ldr	r2, [pc, #52]	; (800c56c <vPortEnterCritical+0x58>)
 800c536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c538:	4b0c      	ldr	r3, [pc, #48]	; (800c56c <vPortEnterCritical+0x58>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d10f      	bne.n	800c560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c540:	4b0b      	ldr	r3, [pc, #44]	; (800c570 <vPortEnterCritical+0x5c>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	b2db      	uxtb	r3, r3
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00a      	beq.n	800c560 <vPortEnterCritical+0x4c>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	603b      	str	r3, [r7, #0]
}
 800c55c:	bf00      	nop
 800c55e:	e7fe      	b.n	800c55e <vPortEnterCritical+0x4a>
	}
}
 800c560:	bf00      	nop
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	20000064 	.word	0x20000064
 800c570:	e000ed04 	.word	0xe000ed04

0800c574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c57a:	4b12      	ldr	r3, [pc, #72]	; (800c5c4 <vPortExitCritical+0x50>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10a      	bne.n	800c598 <vPortExitCritical+0x24>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	607b      	str	r3, [r7, #4]
}
 800c594:	bf00      	nop
 800c596:	e7fe      	b.n	800c596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c598:	4b0a      	ldr	r3, [pc, #40]	; (800c5c4 <vPortExitCritical+0x50>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3b01      	subs	r3, #1
 800c59e:	4a09      	ldr	r2, [pc, #36]	; (800c5c4 <vPortExitCritical+0x50>)
 800c5a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5a2:	4b08      	ldr	r3, [pc, #32]	; (800c5c4 <vPortExitCritical+0x50>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d105      	bne.n	800c5b6 <vPortExitCritical+0x42>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	f383 8811 	msr	BASEPRI, r3
}
 800c5b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5b6:	bf00      	nop
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	20000064 	.word	0x20000064
	...

0800c5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c5d0:	f3ef 8009 	mrs	r0, PSP
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	4b15      	ldr	r3, [pc, #84]	; (800c630 <pxCurrentTCBConst>)
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	f01e 0f10 	tst.w	lr, #16
 800c5e0:	bf08      	it	eq
 800c5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ea:	6010      	str	r0, [r2, #0]
 800c5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c5f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c5f4:	f380 8811 	msr	BASEPRI, r0
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f7fe fe12 	bl	800b228 <vTaskSwitchContext>
 800c604:	f04f 0000 	mov.w	r0, #0
 800c608:	f380 8811 	msr	BASEPRI, r0
 800c60c:	bc09      	pop	{r0, r3}
 800c60e:	6819      	ldr	r1, [r3, #0]
 800c610:	6808      	ldr	r0, [r1, #0]
 800c612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c616:	f01e 0f10 	tst.w	lr, #16
 800c61a:	bf08      	it	eq
 800c61c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c620:	f380 8809 	msr	PSP, r0
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	f3af 8000 	nop.w

0800c630 <pxCurrentTCBConst>:
 800c630:	2000260c 	.word	0x2000260c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c634:	bf00      	nop
 800c636:	bf00      	nop

0800c638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	607b      	str	r3, [r7, #4]
}
 800c650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c652:	f7fe fd31 	bl	800b0b8 <xTaskIncrementTick>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d003      	beq.n	800c664 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c65c:	4b06      	ldr	r3, [pc, #24]	; (800c678 <SysTick_Handler+0x40>)
 800c65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	2300      	movs	r3, #0
 800c666:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	f383 8811 	msr	BASEPRI, r3
}
 800c66e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	e000ed04 	.word	0xe000ed04

0800c67c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c67c:	b480      	push	{r7}
 800c67e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c680:	4b0b      	ldr	r3, [pc, #44]	; (800c6b0 <vPortSetupTimerInterrupt+0x34>)
 800c682:	2200      	movs	r2, #0
 800c684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c686:	4b0b      	ldr	r3, [pc, #44]	; (800c6b4 <vPortSetupTimerInterrupt+0x38>)
 800c688:	2200      	movs	r2, #0
 800c68a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c68c:	4b0a      	ldr	r3, [pc, #40]	; (800c6b8 <vPortSetupTimerInterrupt+0x3c>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a0a      	ldr	r2, [pc, #40]	; (800c6bc <vPortSetupTimerInterrupt+0x40>)
 800c692:	fba2 2303 	umull	r2, r3, r2, r3
 800c696:	099b      	lsrs	r3, r3, #6
 800c698:	4a09      	ldr	r2, [pc, #36]	; (800c6c0 <vPortSetupTimerInterrupt+0x44>)
 800c69a:	3b01      	subs	r3, #1
 800c69c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c69e:	4b04      	ldr	r3, [pc, #16]	; (800c6b0 <vPortSetupTimerInterrupt+0x34>)
 800c6a0:	2207      	movs	r2, #7
 800c6a2:	601a      	str	r2, [r3, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	e000e010 	.word	0xe000e010
 800c6b4:	e000e018 	.word	0xe000e018
 800c6b8:	20000000 	.word	0x20000000
 800c6bc:	10624dd3 	.word	0x10624dd3
 800c6c0:	e000e014 	.word	0xe000e014

0800c6c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c6d4 <vPortEnableVFP+0x10>
 800c6c8:	6801      	ldr	r1, [r0, #0]
 800c6ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6ce:	6001      	str	r1, [r0, #0]
 800c6d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c6d2:	bf00      	nop
 800c6d4:	e000ed88 	.word	0xe000ed88

0800c6d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c6de:	f3ef 8305 	mrs	r3, IPSR
 800c6e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b0f      	cmp	r3, #15
 800c6e8:	d914      	bls.n	800c714 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c6ea:	4a17      	ldr	r2, [pc, #92]	; (800c748 <vPortValidateInterruptPriority+0x70>)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c6f4:	4b15      	ldr	r3, [pc, #84]	; (800c74c <vPortValidateInterruptPriority+0x74>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	7afa      	ldrb	r2, [r7, #11]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d20a      	bcs.n	800c714 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	607b      	str	r3, [r7, #4]
}
 800c710:	bf00      	nop
 800c712:	e7fe      	b.n	800c712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c714:	4b0e      	ldr	r3, [pc, #56]	; (800c750 <vPortValidateInterruptPriority+0x78>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c71c:	4b0d      	ldr	r3, [pc, #52]	; (800c754 <vPortValidateInterruptPriority+0x7c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	429a      	cmp	r2, r3
 800c722:	d90a      	bls.n	800c73a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	603b      	str	r3, [r7, #0]
}
 800c736:	bf00      	nop
 800c738:	e7fe      	b.n	800c738 <vPortValidateInterruptPriority+0x60>
	}
 800c73a:	bf00      	nop
 800c73c:	3714      	adds	r7, #20
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	e000e3f0 	.word	0xe000e3f0
 800c74c:	20002844 	.word	0x20002844
 800c750:	e000ed0c 	.word	0xe000ed0c
 800c754:	20002848 	.word	0x20002848

0800c758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08a      	sub	sp, #40	; 0x28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c760:	2300      	movs	r3, #0
 800c762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c764:	f7fe fbee 	bl	800af44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c768:	4b58      	ldr	r3, [pc, #352]	; (800c8cc <pvPortMalloc+0x174>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c770:	f000 f910 	bl	800c994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c774:	4b56      	ldr	r3, [pc, #344]	; (800c8d0 <pvPortMalloc+0x178>)
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4013      	ands	r3, r2
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f040 808e 	bne.w	800c89e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d01d      	beq.n	800c7c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c788:	2208      	movs	r2, #8
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4413      	add	r3, r2
 800c78e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f003 0307 	and.w	r3, r3, #7
 800c796:	2b00      	cmp	r3, #0
 800c798:	d014      	beq.n	800c7c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f023 0307 	bic.w	r3, r3, #7
 800c7a0:	3308      	adds	r3, #8
 800c7a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00a      	beq.n	800c7c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	617b      	str	r3, [r7, #20]
}
 800c7c0:	bf00      	nop
 800c7c2:	e7fe      	b.n	800c7c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d069      	beq.n	800c89e <pvPortMalloc+0x146>
 800c7ca:	4b42      	ldr	r3, [pc, #264]	; (800c8d4 <pvPortMalloc+0x17c>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d864      	bhi.n	800c89e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7d4:	4b40      	ldr	r3, [pc, #256]	; (800c8d8 <pvPortMalloc+0x180>)
 800c7d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7d8:	4b3f      	ldr	r3, [pc, #252]	; (800c8d8 <pvPortMalloc+0x180>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7de:	e004      	b.n	800c7ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d903      	bls.n	800c7fc <pvPortMalloc+0xa4>
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1f1      	bne.n	800c7e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c7fc:	4b33      	ldr	r3, [pc, #204]	; (800c8cc <pvPortMalloc+0x174>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c802:	429a      	cmp	r2, r3
 800c804:	d04b      	beq.n	800c89e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2208      	movs	r2, #8
 800c80c:	4413      	add	r3, r2
 800c80e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	6a3b      	ldr	r3, [r7, #32]
 800c816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	1ad2      	subs	r2, r2, r3
 800c820:	2308      	movs	r3, #8
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	429a      	cmp	r2, r3
 800c826:	d91f      	bls.n	800c868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4413      	add	r3, r2
 800c82e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	f003 0307 	and.w	r3, r3, #7
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00a      	beq.n	800c850 <pvPortMalloc+0xf8>
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	613b      	str	r3, [r7, #16]
}
 800c84c:	bf00      	nop
 800c84e:	e7fe      	b.n	800c84e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	1ad2      	subs	r2, r2, r3
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c862:	69b8      	ldr	r0, [r7, #24]
 800c864:	f000 f8f8 	bl	800ca58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c868:	4b1a      	ldr	r3, [pc, #104]	; (800c8d4 <pvPortMalloc+0x17c>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	4a18      	ldr	r2, [pc, #96]	; (800c8d4 <pvPortMalloc+0x17c>)
 800c874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c876:	4b17      	ldr	r3, [pc, #92]	; (800c8d4 <pvPortMalloc+0x17c>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	4b18      	ldr	r3, [pc, #96]	; (800c8dc <pvPortMalloc+0x184>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d203      	bcs.n	800c88a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c882:	4b14      	ldr	r3, [pc, #80]	; (800c8d4 <pvPortMalloc+0x17c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a15      	ldr	r2, [pc, #84]	; (800c8dc <pvPortMalloc+0x184>)
 800c888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	685a      	ldr	r2, [r3, #4]
 800c88e:	4b10      	ldr	r3, [pc, #64]	; (800c8d0 <pvPortMalloc+0x178>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	431a      	orrs	r2, r3
 800c894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c89e:	f7fe fb5f 	bl	800af60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	f003 0307 	and.w	r3, r3, #7
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00a      	beq.n	800c8c2 <pvPortMalloc+0x16a>
	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	60fb      	str	r3, [r7, #12]
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <pvPortMalloc+0x168>
	return pvReturn;
 800c8c2:	69fb      	ldr	r3, [r7, #28]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3728      	adds	r7, #40	; 0x28
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	20021c54 	.word	0x20021c54
 800c8d0:	20021c60 	.word	0x20021c60
 800c8d4:	20021c58 	.word	0x20021c58
 800c8d8:	20021c4c 	.word	0x20021c4c
 800c8dc:	20021c5c 	.word	0x20021c5c

0800c8e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d048      	beq.n	800c984 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c8f2:	2308      	movs	r3, #8
 800c8f4:	425b      	negs	r3, r3
 800c8f6:	697a      	ldr	r2, [r7, #20]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	685a      	ldr	r2, [r3, #4]
 800c904:	4b21      	ldr	r3, [pc, #132]	; (800c98c <vPortFree+0xac>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4013      	ands	r3, r2
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10a      	bne.n	800c924 <vPortFree+0x44>
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	60fb      	str	r3, [r7, #12]
}
 800c920:	bf00      	nop
 800c922:	e7fe      	b.n	800c922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00a      	beq.n	800c942 <vPortFree+0x62>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	60bb      	str	r3, [r7, #8]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	685a      	ldr	r2, [r3, #4]
 800c946:	4b11      	ldr	r3, [pc, #68]	; (800c98c <vPortFree+0xac>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4013      	ands	r3, r2
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d019      	beq.n	800c984 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d115      	bne.n	800c984 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	4b0b      	ldr	r3, [pc, #44]	; (800c98c <vPortFree+0xac>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	43db      	mvns	r3, r3
 800c962:	401a      	ands	r2, r3
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c968:	f7fe faec 	bl	800af44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	685a      	ldr	r2, [r3, #4]
 800c970:	4b07      	ldr	r3, [pc, #28]	; (800c990 <vPortFree+0xb0>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4413      	add	r3, r2
 800c976:	4a06      	ldr	r2, [pc, #24]	; (800c990 <vPortFree+0xb0>)
 800c978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c97a:	6938      	ldr	r0, [r7, #16]
 800c97c:	f000 f86c 	bl	800ca58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c980:	f7fe faee 	bl	800af60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c984:	bf00      	nop
 800c986:	3718      	adds	r7, #24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	20021c60 	.word	0x20021c60
 800c990:	20021c58 	.word	0x20021c58

0800c994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c99a:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800c99e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9a0:	4b27      	ldr	r3, [pc, #156]	; (800ca40 <prvHeapInit+0xac>)
 800c9a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00c      	beq.n	800c9c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	3307      	adds	r3, #7
 800c9b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f023 0307 	bic.w	r3, r3, #7
 800c9ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	4a1f      	ldr	r2, [pc, #124]	; (800ca40 <prvHeapInit+0xac>)
 800c9c4:	4413      	add	r3, r2
 800c9c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9cc:	4a1d      	ldr	r2, [pc, #116]	; (800ca44 <prvHeapInit+0xb0>)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9d2:	4b1c      	ldr	r3, [pc, #112]	; (800ca44 <prvHeapInit+0xb0>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	4413      	add	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9e0:	2208      	movs	r2, #8
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	1a9b      	subs	r3, r3, r2
 800c9e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f023 0307 	bic.w	r3, r3, #7
 800c9ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	4a15      	ldr	r2, [pc, #84]	; (800ca48 <prvHeapInit+0xb4>)
 800c9f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9f6:	4b14      	ldr	r3, [pc, #80]	; (800ca48 <prvHeapInit+0xb4>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9fe:	4b12      	ldr	r3, [pc, #72]	; (800ca48 <prvHeapInit+0xb4>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	1ad2      	subs	r2, r2, r3
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca14:	4b0c      	ldr	r3, [pc, #48]	; (800ca48 <prvHeapInit+0xb4>)
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	4a0a      	ldr	r2, [pc, #40]	; (800ca4c <prvHeapInit+0xb8>)
 800ca22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	4a09      	ldr	r2, [pc, #36]	; (800ca50 <prvHeapInit+0xbc>)
 800ca2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca2c:	4b09      	ldr	r3, [pc, #36]	; (800ca54 <prvHeapInit+0xc0>)
 800ca2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca32:	601a      	str	r2, [r3, #0]
}
 800ca34:	bf00      	nop
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr
 800ca40:	2000284c 	.word	0x2000284c
 800ca44:	20021c4c 	.word	0x20021c4c
 800ca48:	20021c54 	.word	0x20021c54
 800ca4c:	20021c5c 	.word	0x20021c5c
 800ca50:	20021c58 	.word	0x20021c58
 800ca54:	20021c60 	.word	0x20021c60

0800ca58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca60:	4b28      	ldr	r3, [pc, #160]	; (800cb04 <prvInsertBlockIntoFreeList+0xac>)
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	e002      	b.n	800ca6c <prvInsertBlockIntoFreeList+0x14>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	60fb      	str	r3, [r7, #12]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d8f7      	bhi.n	800ca66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	4413      	add	r3, r2
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d108      	bne.n	800ca9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	441a      	add	r2, r3
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	441a      	add	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d118      	bne.n	800cae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	4b15      	ldr	r3, [pc, #84]	; (800cb08 <prvInsertBlockIntoFreeList+0xb0>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d00d      	beq.n	800cad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	685a      	ldr	r2, [r3, #4]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	441a      	add	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	e008      	b.n	800cae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cad6:	4b0c      	ldr	r3, [pc, #48]	; (800cb08 <prvInsertBlockIntoFreeList+0xb0>)
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	601a      	str	r2, [r3, #0]
 800cade:	e003      	b.n	800cae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	429a      	cmp	r2, r3
 800caee:	d002      	beq.n	800caf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caf6:	bf00      	nop
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	20021c4c 	.word	0x20021c4c
 800cb08:	20021c54 	.word	0x20021c54

0800cb0c <I2C_Scan>:
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
 800cb16:	2300      	movs	r3, #0
 800cb18:	81fb      	strh	r3, [r7, #14]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	737b      	strb	r3, [r7, #13]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	81fb      	strh	r3, [r7, #14]
 800cb22:	e014      	b.n	800cb4e <I2C_Scan+0x42>
 800cb24:	89f9      	ldrh	r1, [r7, #14]
 800cb26:	2314      	movs	r3, #20
 800cb28:	2201      	movs	r2, #1
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7f8 fec4 	bl	80058b8 <HAL_I2C_IsDeviceReady>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d108      	bne.n	800cb48 <I2C_Scan+0x3c>
 800cb36:	7b7b      	ldrb	r3, [r7, #13]
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	89fa      	ldrh	r2, [r7, #14]
 800cb3e:	b2d2      	uxtb	r2, r2
 800cb40:	701a      	strb	r2, [r3, #0]
 800cb42:	7b7b      	ldrb	r3, [r7, #13]
 800cb44:	3301      	adds	r3, #1
 800cb46:	737b      	strb	r3, [r7, #13]
 800cb48:	89fb      	ldrh	r3, [r7, #14]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	81fb      	strh	r3, [r7, #14]
 800cb4e:	89fb      	ldrh	r3, [r7, #14]
 800cb50:	2bff      	cmp	r3, #255	; 0xff
 800cb52:	d9e7      	bls.n	800cb24 <I2C_Scan+0x18>
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <Init>:
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b088      	sub	sp, #32
 800cb62:	af04      	add	r7, sp, #16
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	2380      	movs	r3, #128	; 0x80
 800cb68:	733b      	strb	r3, [r7, #12]
 800cb6a:	2332      	movs	r3, #50	; 0x32
 800cb6c:	9302      	str	r3, [sp, #8]
 800cb6e:	2301      	movs	r3, #1
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	f107 030c 	add.w	r3, r7, #12
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	2301      	movs	r3, #1
 800cb7a:	226b      	movs	r2, #107	; 0x6b
 800cb7c:	21d0      	movs	r1, #208	; 0xd0
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7f8 fb7a 	bl	8005278 <HAL_I2C_Mem_Write>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d001      	beq.n	800cb8e <Init+0x30>
 800cb8a:	f7f5 f82d 	bl	8001be8 <Error_Handler>
 800cb8e:	2064      	movs	r0, #100	; 0x64
 800cb90:	f7f7 f8da 	bl	8003d48 <HAL_Delay>
 800cb94:	2301      	movs	r3, #1
 800cb96:	733b      	strb	r3, [r7, #12]
 800cb98:	2332      	movs	r3, #50	; 0x32
 800cb9a:	9302      	str	r3, [sp, #8]
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	9301      	str	r3, [sp, #4]
 800cba0:	f107 030c 	add.w	r3, r7, #12
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	2301      	movs	r3, #1
 800cba8:	226b      	movs	r2, #107	; 0x6b
 800cbaa:	21d0      	movs	r1, #208	; 0xd0
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7f8 fb63 	bl	8005278 <HAL_I2C_Mem_Write>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <Init+0x5e>
 800cbb8:	f7f5 f816 	bl	8001be8 <Error_Handler>
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	733b      	strb	r3, [r7, #12]
 800cbc0:	2332      	movs	r3, #50	; 0x32
 800cbc2:	9302      	str	r3, [sp, #8]
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	9301      	str	r3, [sp, #4]
 800cbc8:	f107 030c 	add.w	r3, r7, #12
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	2301      	movs	r3, #1
 800cbd0:	2237      	movs	r2, #55	; 0x37
 800cbd2:	21d0      	movs	r1, #208	; 0xd0
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7f8 fb4f 	bl	8005278 <HAL_I2C_Mem_Write>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <Init+0x86>
 800cbe0:	f7f5 f802 	bl	8001be8 <Error_Handler>
 800cbe4:	2316      	movs	r3, #22
 800cbe6:	733b      	strb	r3, [r7, #12]
 800cbe8:	2332      	movs	r3, #50	; 0x32
 800cbea:	9302      	str	r3, [sp, #8]
 800cbec:	2301      	movs	r3, #1
 800cbee:	9301      	str	r3, [sp, #4]
 800cbf0:	f107 030c 	add.w	r3, r7, #12
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	220a      	movs	r2, #10
 800cbfa:	2118      	movs	r1, #24
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7f8 fb3b 	bl	8005278 <HAL_I2C_Mem_Write>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <Init+0xae>
 800cc08:	f7f4 ffee 	bl	8001be8 <Error_Handler>
 800cc0c:	bf00      	nop
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <Init_BMP280>:
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b088      	sub	sp, #32
 800cc18:	af04      	add	r7, sp, #16
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	23b6      	movs	r3, #182	; 0xb6
 800cc1e:	733b      	strb	r3, [r7, #12]
 800cc20:	2332      	movs	r3, #50	; 0x32
 800cc22:	9302      	str	r3, [sp, #8]
 800cc24:	2301      	movs	r3, #1
 800cc26:	9301      	str	r3, [sp, #4]
 800cc28:	f107 030c 	add.w	r3, r7, #12
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	2301      	movs	r3, #1
 800cc30:	22e0      	movs	r2, #224	; 0xe0
 800cc32:	21ee      	movs	r1, #238	; 0xee
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7f8 fb1f 	bl	8005278 <HAL_I2C_Mem_Write>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <Init_BMP280+0x30>
 800cc40:	f7f4 ffd2 	bl	8001be8 <Error_Handler>
 800cc44:	20fa      	movs	r0, #250	; 0xfa
 800cc46:	f7f7 f87f 	bl	8003d48 <HAL_Delay>
 800cc4a:	232f      	movs	r3, #47	; 0x2f
 800cc4c:	733b      	strb	r3, [r7, #12]
 800cc4e:	2332      	movs	r3, #50	; 0x32
 800cc50:	9302      	str	r3, [sp, #8]
 800cc52:	2301      	movs	r3, #1
 800cc54:	9301      	str	r3, [sp, #4]
 800cc56:	f107 030c 	add.w	r3, r7, #12
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	22f4      	movs	r2, #244	; 0xf4
 800cc60:	21ee      	movs	r1, #238	; 0xee
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7f8 fb08 	bl	8005278 <HAL_I2C_Mem_Write>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d001      	beq.n	800cc72 <Init_BMP280+0x5e>
 800cc6e:	f7f4 ffbb 	bl	8001be8 <Error_Handler>
 800cc72:	bf00      	nop
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	0000      	movs	r0, r0
 800cc7c:	0000      	movs	r0, r0
	...

0800cc80 <MeasureA>:
 800cc80:	b5b0      	push	{r4, r5, r7, lr}
 800cc82:	b08a      	sub	sp, #40	; 0x28
 800cc84:	af04      	add	r7, sp, #16
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	75fb      	strb	r3, [r7, #23]
 800cc8e:	2300      	movs	r3, #0
 800cc90:	82bb      	strh	r3, [r7, #20]
 800cc92:	2301      	movs	r3, #1
 800cc94:	75bb      	strb	r3, [r7, #22]
 800cc96:	2332      	movs	r3, #50	; 0x32
 800cc98:	9302      	str	r3, [sp, #8]
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	9301      	str	r3, [sp, #4]
 800cc9e:	f107 030c 	add.w	r3, r7, #12
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	2301      	movs	r3, #1
 800cca6:	221c      	movs	r2, #28
 800cca8:	21d0      	movs	r1, #208	; 0xd0
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7f8 fbde 	bl	800546c <HAL_I2C_Mem_Read>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d001      	beq.n	800ccba <MeasureA+0x3a>
 800ccb6:	f7f4 ff97 	bl	8001be8 <Error_Handler>
 800ccba:	7b3b      	ldrb	r3, [r7, #12]
 800ccbc:	10db      	asrs	r3, r3, #3
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	f003 0303 	and.w	r3, r3, #3
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	82bb      	strh	r3, [r7, #20]
 800cccc:	2300      	movs	r3, #0
 800ccce:	75fb      	strb	r3, [r7, #23]
 800ccd0:	e005      	b.n	800ccde <MeasureA+0x5e>
 800ccd2:	7dbb      	ldrb	r3, [r7, #22]
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	75bb      	strb	r3, [r7, #22]
 800ccd8:	7dfb      	ldrb	r3, [r7, #23]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	75fb      	strb	r3, [r7, #23]
 800ccde:	7dfa      	ldrb	r2, [r7, #23]
 800cce0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	dbf4      	blt.n	800ccd2 <MeasureA+0x52>
 800cce8:	2332      	movs	r3, #50	; 0x32
 800ccea:	9302      	str	r3, [sp, #8]
 800ccec:	2306      	movs	r3, #6
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	f107 030c 	add.w	r3, r7, #12
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	223b      	movs	r2, #59	; 0x3b
 800ccfa:	21d0      	movs	r1, #208	; 0xd0
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7f8 fbb5 	bl	800546c <HAL_I2C_Mem_Read>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <MeasureA+0x8c>
 800cd08:	f7f4 ff6e 	bl	8001be8 <Error_Handler>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	75fb      	strb	r3, [r7, #23]
 800cd10:	e03a      	b.n	800cd88 <MeasureA+0x108>
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	f107 0218 	add.w	r2, r7, #24
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	021b      	lsls	r3, r3, #8
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	005b      	lsls	r3, r3, #1
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	f107 0118 	add.w	r1, r7, #24
 800cd30:	440b      	add	r3, r1
 800cd32:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	4413      	add	r3, r2
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	82bb      	strh	r3, [r7, #20]
 800cd3e:	7dbb      	ldrb	r3, [r7, #22]
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7f3 fbff 	bl	8000544 <__aeabi_i2d>
 800cd46:	4604      	mov	r4, r0
 800cd48:	460d      	mov	r5, r1
 800cd4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f3 fbf8 	bl	8000544 <__aeabi_i2d>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	4620      	mov	r0, r4
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	f7f3 fc5c 	bl	8000618 <__aeabi_dmul>
 800cd60:	4602      	mov	r2, r0
 800cd62:	460b      	mov	r3, r1
 800cd64:	4610      	mov	r0, r2
 800cd66:	4619      	mov	r1, r3
 800cd68:	7dfb      	ldrb	r3, [r7, #23]
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	18d4      	adds	r4, r2, r3
 800cd70:	a309      	add	r3, pc, #36	; (adr r3, 800cd98 <MeasureA+0x118>)
 800cd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd76:	f7f3 fd79 	bl	800086c <__aeabi_ddiv>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	e9c4 2300 	strd	r2, r3, [r4]
 800cd82:	7dfb      	ldrb	r3, [r7, #23]
 800cd84:	3301      	adds	r3, #1
 800cd86:	75fb      	strb	r3, [r7, #23]
 800cd88:	7dfb      	ldrb	r3, [r7, #23]
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d9c1      	bls.n	800cd12 <MeasureA+0x92>
 800cd8e:	bf00      	nop
 800cd90:	bf00      	nop
 800cd92:	3718      	adds	r7, #24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bdb0      	pop	{r4, r5, r7, pc}
 800cd98:	00000000 	.word	0x00000000
 800cd9c:	40dfffc0 	.word	0x40dfffc0

0800cda0 <MeasureG>:
 800cda0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800cda4:	b08b      	sub	sp, #44	; 0x2c
 800cda6:	af04      	add	r7, sp, #16
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	6039      	str	r1, [r7, #0]
 800cdac:	2300      	movs	r3, #0
 800cdae:	75fb      	strb	r3, [r7, #23]
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	82bb      	strh	r3, [r7, #20]
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	75bb      	strb	r3, [r7, #22]
 800cdb8:	2332      	movs	r3, #50	; 0x32
 800cdba:	9302      	str	r3, [sp, #8]
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	9301      	str	r3, [sp, #4]
 800cdc0:	f107 030c 	add.w	r3, r7, #12
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	221b      	movs	r2, #27
 800cdca:	21d0      	movs	r1, #208	; 0xd0
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7f8 fb4d 	bl	800546c <HAL_I2C_Mem_Read>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d001      	beq.n	800cddc <MeasureG+0x3c>
 800cdd8:	f7f4 ff06 	bl	8001be8 <Error_Handler>
 800cddc:	7b3b      	ldrb	r3, [r7, #12]
 800cdde:	10db      	asrs	r3, r3, #3
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	f003 0303 	and.w	r3, r3, #3
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	3301      	adds	r3, #1
 800cdea:	82bb      	strh	r3, [r7, #20]
 800cdec:	2300      	movs	r3, #0
 800cdee:	75fb      	strb	r3, [r7, #23]
 800cdf0:	e008      	b.n	800ce04 <MeasureG+0x64>
 800cdf2:	7dbb      	ldrb	r3, [r7, #22]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	75bb      	strb	r3, [r7, #22]
 800cdfe:	7dfb      	ldrb	r3, [r7, #23]
 800ce00:	3301      	adds	r3, #1
 800ce02:	75fb      	strb	r3, [r7, #23]
 800ce04:	7dfb      	ldrb	r3, [r7, #23]
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	8aba      	ldrh	r2, [r7, #20]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d8f1      	bhi.n	800cdf2 <MeasureG+0x52>
 800ce0e:	2332      	movs	r3, #50	; 0x32
 800ce10:	9302      	str	r3, [sp, #8]
 800ce12:	2306      	movs	r3, #6
 800ce14:	9301      	str	r3, [sp, #4]
 800ce16:	f107 030c 	add.w	r3, r7, #12
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	2243      	movs	r2, #67	; 0x43
 800ce20:	21d0      	movs	r1, #208	; 0xd0
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7f8 fb22 	bl	800546c <HAL_I2C_Mem_Read>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d001      	beq.n	800ce32 <MeasureG+0x92>
 800ce2e:	f7f4 fedb 	bl	8001be8 <Error_Handler>
 800ce32:	2300      	movs	r3, #0
 800ce34:	75fb      	strb	r3, [r7, #23]
 800ce36:	e05d      	b.n	800cef4 <MeasureG+0x154>
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	f107 0218 	add.w	r2, r7, #24
 800ce40:	4413      	add	r3, r2
 800ce42:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	021b      	lsls	r3, r3, #8
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	7dfb      	ldrb	r3, [r7, #23]
 800ce4e:	005b      	lsls	r3, r3, #1
 800ce50:	3301      	adds	r3, #1
 800ce52:	f107 0118 	add.w	r1, r7, #24
 800ce56:	440b      	add	r3, r1
 800ce58:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	4413      	add	r3, r2
 800ce60:	82bb      	strh	r3, [r7, #20]
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	683a      	ldr	r2, [r7, #0]
 800ce68:	18d4      	adds	r4, r2, r3
 800ce6a:	8abb      	ldrh	r3, [r7, #20]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7f3 fb59 	bl	8000524 <__aeabi_ui2d>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	e9c4 2300 	strd	r2, r3, [r4]
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
 800ce7c:	005b      	lsls	r3, r3, #1
 800ce7e:	f107 0218 	add.w	r2, r7, #24
 800ce82:	4413      	add	r3, r2
 800ce84:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800ce88:	09db      	lsrs	r3, r3, #7
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d10f      	bne.n	800ceb0 <MeasureG+0x110>
 800ce90:	8abb      	ldrh	r3, [r7, #20]
 800ce92:	425b      	negs	r3, r3
 800ce94:	82bb      	strh	r3, [r7, #20]
 800ce96:	8abb      	ldrh	r3, [r7, #20]
 800ce98:	4259      	negs	r1, r3
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	18d4      	adds	r4, r2, r3
 800cea2:	4608      	mov	r0, r1
 800cea4:	f7f3 fb4e 	bl	8000544 <__aeabi_i2d>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	e9c4 2300 	strd	r2, r3, [r4]
 800ceb0:	7dbb      	ldrb	r3, [r7, #22]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7f3 fb36 	bl	8000524 <__aeabi_ui2d>
 800ceb8:	a313      	add	r3, pc, #76	; (adr r3, 800cf08 <MeasureG+0x168>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 fcd5 	bl	800086c <__aeabi_ddiv>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	4690      	mov	r8, r2
 800cec8:	4699      	mov	r9, r3
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
 800cecc:	00db      	lsls	r3, r3, #3
 800cece:	683a      	ldr	r2, [r7, #0]
 800ced0:	4413      	add	r3, r2
 800ced2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced6:	7df9      	ldrb	r1, [r7, #23]
 800ced8:	00c9      	lsls	r1, r1, #3
 800ceda:	6838      	ldr	r0, [r7, #0]
 800cedc:	1844      	adds	r4, r0, r1
 800cede:	4640      	mov	r0, r8
 800cee0:	4649      	mov	r1, r9
 800cee2:	f7f3 fb99 	bl	8000618 <__aeabi_dmul>
 800cee6:	4602      	mov	r2, r0
 800cee8:	460b      	mov	r3, r1
 800ceea:	e9c4 2300 	strd	r2, r3, [r4]
 800ceee:	7dfb      	ldrb	r3, [r7, #23]
 800cef0:	3301      	adds	r3, #1
 800cef2:	75fb      	strb	r3, [r7, #23]
 800cef4:	7dfb      	ldrb	r3, [r7, #23]
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	d99e      	bls.n	800ce38 <MeasureG+0x98>
 800cefa:	bf00      	nop
 800cefc:	bf00      	nop
 800cefe:	371c      	adds	r7, #28
 800cf00:	46bd      	mov	sp, r7
 800cf02:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800cf06:	bf00      	nop
 800cf08:	00000000 	.word	0x00000000
 800cf0c:	40dfffc0 	.word	0x40dfffc0

0800cf10 <Roll>:
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	3308      	adds	r3, #8
 800cf20:	ed93 7b00 	vldr	d7, [r3]
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	3310      	adds	r3, #16
 800cf28:	ed93 6b00 	vldr	d6, [r3]
 800cf2c:	eeb0 1a46 	vmov.f32	s2, s12
 800cf30:	eef0 1a66 	vmov.f32	s3, s13
 800cf34:	eeb0 0a47 	vmov.f32	s0, s14
 800cf38:	eef0 0a67 	vmov.f32	s1, s15
 800cf3c:	f003 f864 	bl	8010008 <atan2>
 800cf40:	eeb0 7a40 	vmov.f32	s14, s0
 800cf44:	eef0 7a60 	vmov.f32	s15, s1
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	ed83 7b00 	vstr	d7, [r3]
 800cf4e:	bf00      	nop
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <Pitch>:
 800cf56:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	607a      	str	r2, [r7, #4]
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	3308      	adds	r3, #8
 800cf68:	ed93 7b00 	vldr	d7, [r3]
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	3310      	adds	r3, #16
 800cf70:	ed93 6b00 	vldr	d6, [r3]
 800cf74:	eeb0 1a46 	vmov.f32	s2, s12
 800cf78:	eef0 1a66 	vmov.f32	s3, s13
 800cf7c:	eeb0 0a47 	vmov.f32	s0, s14
 800cf80:	eef0 0a67 	vmov.f32	s1, s15
 800cf84:	f003 f840 	bl	8010008 <atan2>
 800cf88:	ed87 0b04 	vstr	d0, [r7, #16]
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf92:	4614      	mov	r4, r2
 800cf94:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	3308      	adds	r3, #8
 800cf9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfa0:	ed97 0b04 	vldr	d0, [r7, #16]
 800cfa4:	f002 ffdc 	bl	800ff60 <sin>
 800cfa8:	ec53 2b10 	vmov	r2, r3, d0
 800cfac:	4640      	mov	r0, r8
 800cfae:	4649      	mov	r1, r9
 800cfb0:	f7f3 fb32 	bl	8000618 <__aeabi_dmul>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	4692      	mov	sl, r2
 800cfba:	469b      	mov	fp, r3
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	3310      	adds	r3, #16
 800cfc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfc4:	ed97 0b04 	vldr	d0, [r7, #16]
 800cfc8:	f002 ff6e 	bl	800fea8 <cos>
 800cfcc:	ec53 2b10 	vmov	r2, r3, d0
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	f7f3 fb20 	bl	8000618 <__aeabi_dmul>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	460b      	mov	r3, r1
 800cfdc:	4650      	mov	r0, sl
 800cfde:	4659      	mov	r1, fp
 800cfe0:	f7f3 f964 	bl	80002ac <__adddf3>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	4620      	mov	r0, r4
 800cfea:	4629      	mov	r1, r5
 800cfec:	f7f3 fc3e 	bl	800086c <__aeabi_ddiv>
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	ec43 2b17 	vmov	d7, r2, r3
 800cff8:	eeb0 0a47 	vmov.f32	s0, s14
 800cffc:	eef0 0a67 	vmov.f32	s1, s15
 800d000:	f002 fdb2 	bl	800fb68 <atan>
 800d004:	eeb0 7a40 	vmov.f32	s14, s0
 800d008:	eef0 7a60 	vmov.f32	s15, s1
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	ed83 7b00 	vstr	d7, [r3]
 800d012:	bf00      	nop
 800d014:	3718      	adds	r7, #24
 800d016:	46bd      	mov	sp, r7
 800d018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d01c <__errno>:
 800d01c:	4b01      	ldr	r3, [pc, #4]	; (800d024 <__errno+0x8>)
 800d01e:	6818      	ldr	r0, [r3, #0]
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	20000068 	.word	0x20000068

0800d028 <exit>:
 800d028:	b508      	push	{r3, lr}
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <exit+0x20>)
 800d02c:	4604      	mov	r4, r0
 800d02e:	b113      	cbz	r3, 800d036 <exit+0xe>
 800d030:	2100      	movs	r1, #0
 800d032:	f3af 8000 	nop.w
 800d036:	4b05      	ldr	r3, [pc, #20]	; (800d04c <exit+0x24>)
 800d038:	6818      	ldr	r0, [r3, #0]
 800d03a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d03c:	b103      	cbz	r3, 800d040 <exit+0x18>
 800d03e:	4798      	blx	r3
 800d040:	4620      	mov	r0, r4
 800d042:	f7f4 ff6f 	bl	8001f24 <_exit>
 800d046:	bf00      	nop
 800d048:	00000000 	.word	0x00000000
 800d04c:	08013ea8 	.word	0x08013ea8

0800d050 <__libc_init_array>:
 800d050:	b570      	push	{r4, r5, r6, lr}
 800d052:	4d0d      	ldr	r5, [pc, #52]	; (800d088 <__libc_init_array+0x38>)
 800d054:	4c0d      	ldr	r4, [pc, #52]	; (800d08c <__libc_init_array+0x3c>)
 800d056:	1b64      	subs	r4, r4, r5
 800d058:	10a4      	asrs	r4, r4, #2
 800d05a:	2600      	movs	r6, #0
 800d05c:	42a6      	cmp	r6, r4
 800d05e:	d109      	bne.n	800d074 <__libc_init_array+0x24>
 800d060:	4d0b      	ldr	r5, [pc, #44]	; (800d090 <__libc_init_array+0x40>)
 800d062:	4c0c      	ldr	r4, [pc, #48]	; (800d094 <__libc_init_array+0x44>)
 800d064:	f004 f87a 	bl	801115c <_init>
 800d068:	1b64      	subs	r4, r4, r5
 800d06a:	10a4      	asrs	r4, r4, #2
 800d06c:	2600      	movs	r6, #0
 800d06e:	42a6      	cmp	r6, r4
 800d070:	d105      	bne.n	800d07e <__libc_init_array+0x2e>
 800d072:	bd70      	pop	{r4, r5, r6, pc}
 800d074:	f855 3b04 	ldr.w	r3, [r5], #4
 800d078:	4798      	blx	r3
 800d07a:	3601      	adds	r6, #1
 800d07c:	e7ee      	b.n	800d05c <__libc_init_array+0xc>
 800d07e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d082:	4798      	blx	r3
 800d084:	3601      	adds	r6, #1
 800d086:	e7f2      	b.n	800d06e <__libc_init_array+0x1e>
 800d088:	080144e0 	.word	0x080144e0
 800d08c:	080144e0 	.word	0x080144e0
 800d090:	080144e0 	.word	0x080144e0
 800d094:	080144e4 	.word	0x080144e4

0800d098 <memcpy>:
 800d098:	440a      	add	r2, r1
 800d09a:	4291      	cmp	r1, r2
 800d09c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0a0:	d100      	bne.n	800d0a4 <memcpy+0xc>
 800d0a2:	4770      	bx	lr
 800d0a4:	b510      	push	{r4, lr}
 800d0a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0ae:	4291      	cmp	r1, r2
 800d0b0:	d1f9      	bne.n	800d0a6 <memcpy+0xe>
 800d0b2:	bd10      	pop	{r4, pc}

0800d0b4 <memset>:
 800d0b4:	4402      	add	r2, r0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d100      	bne.n	800d0be <memset+0xa>
 800d0bc:	4770      	bx	lr
 800d0be:	f803 1b01 	strb.w	r1, [r3], #1
 800d0c2:	e7f9      	b.n	800d0b8 <memset+0x4>

0800d0c4 <__cvt>:
 800d0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c8:	ec55 4b10 	vmov	r4, r5, d0
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	460e      	mov	r6, r1
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	462b      	mov	r3, r5
 800d0d4:	bfbb      	ittet	lt
 800d0d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d0da:	461d      	movlt	r5, r3
 800d0dc:	2300      	movge	r3, #0
 800d0de:	232d      	movlt	r3, #45	; 0x2d
 800d0e0:	700b      	strb	r3, [r1, #0]
 800d0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d0e8:	4691      	mov	r9, r2
 800d0ea:	f023 0820 	bic.w	r8, r3, #32
 800d0ee:	bfbc      	itt	lt
 800d0f0:	4622      	movlt	r2, r4
 800d0f2:	4614      	movlt	r4, r2
 800d0f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d0f8:	d005      	beq.n	800d106 <__cvt+0x42>
 800d0fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d0fe:	d100      	bne.n	800d102 <__cvt+0x3e>
 800d100:	3601      	adds	r6, #1
 800d102:	2102      	movs	r1, #2
 800d104:	e000      	b.n	800d108 <__cvt+0x44>
 800d106:	2103      	movs	r1, #3
 800d108:	ab03      	add	r3, sp, #12
 800d10a:	9301      	str	r3, [sp, #4]
 800d10c:	ab02      	add	r3, sp, #8
 800d10e:	9300      	str	r3, [sp, #0]
 800d110:	ec45 4b10 	vmov	d0, r4, r5
 800d114:	4653      	mov	r3, sl
 800d116:	4632      	mov	r2, r6
 800d118:	f000 fe1a 	bl	800dd50 <_dtoa_r>
 800d11c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d120:	4607      	mov	r7, r0
 800d122:	d102      	bne.n	800d12a <__cvt+0x66>
 800d124:	f019 0f01 	tst.w	r9, #1
 800d128:	d022      	beq.n	800d170 <__cvt+0xac>
 800d12a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d12e:	eb07 0906 	add.w	r9, r7, r6
 800d132:	d110      	bne.n	800d156 <__cvt+0x92>
 800d134:	783b      	ldrb	r3, [r7, #0]
 800d136:	2b30      	cmp	r3, #48	; 0x30
 800d138:	d10a      	bne.n	800d150 <__cvt+0x8c>
 800d13a:	2200      	movs	r2, #0
 800d13c:	2300      	movs	r3, #0
 800d13e:	4620      	mov	r0, r4
 800d140:	4629      	mov	r1, r5
 800d142:	f7f3 fcd1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d146:	b918      	cbnz	r0, 800d150 <__cvt+0x8c>
 800d148:	f1c6 0601 	rsb	r6, r6, #1
 800d14c:	f8ca 6000 	str.w	r6, [sl]
 800d150:	f8da 3000 	ldr.w	r3, [sl]
 800d154:	4499      	add	r9, r3
 800d156:	2200      	movs	r2, #0
 800d158:	2300      	movs	r3, #0
 800d15a:	4620      	mov	r0, r4
 800d15c:	4629      	mov	r1, r5
 800d15e:	f7f3 fcc3 	bl	8000ae8 <__aeabi_dcmpeq>
 800d162:	b108      	cbz	r0, 800d168 <__cvt+0xa4>
 800d164:	f8cd 900c 	str.w	r9, [sp, #12]
 800d168:	2230      	movs	r2, #48	; 0x30
 800d16a:	9b03      	ldr	r3, [sp, #12]
 800d16c:	454b      	cmp	r3, r9
 800d16e:	d307      	bcc.n	800d180 <__cvt+0xbc>
 800d170:	9b03      	ldr	r3, [sp, #12]
 800d172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d174:	1bdb      	subs	r3, r3, r7
 800d176:	4638      	mov	r0, r7
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	b004      	add	sp, #16
 800d17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d180:	1c59      	adds	r1, r3, #1
 800d182:	9103      	str	r1, [sp, #12]
 800d184:	701a      	strb	r2, [r3, #0]
 800d186:	e7f0      	b.n	800d16a <__cvt+0xa6>

0800d188 <__exponent>:
 800d188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d18a:	4603      	mov	r3, r0
 800d18c:	2900      	cmp	r1, #0
 800d18e:	bfb8      	it	lt
 800d190:	4249      	neglt	r1, r1
 800d192:	f803 2b02 	strb.w	r2, [r3], #2
 800d196:	bfb4      	ite	lt
 800d198:	222d      	movlt	r2, #45	; 0x2d
 800d19a:	222b      	movge	r2, #43	; 0x2b
 800d19c:	2909      	cmp	r1, #9
 800d19e:	7042      	strb	r2, [r0, #1]
 800d1a0:	dd2a      	ble.n	800d1f8 <__exponent+0x70>
 800d1a2:	f10d 0407 	add.w	r4, sp, #7
 800d1a6:	46a4      	mov	ip, r4
 800d1a8:	270a      	movs	r7, #10
 800d1aa:	46a6      	mov	lr, r4
 800d1ac:	460a      	mov	r2, r1
 800d1ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800d1b2:	fb07 1516 	mls	r5, r7, r6, r1
 800d1b6:	3530      	adds	r5, #48	; 0x30
 800d1b8:	2a63      	cmp	r2, #99	; 0x63
 800d1ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800d1be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	dcf1      	bgt.n	800d1aa <__exponent+0x22>
 800d1c6:	3130      	adds	r1, #48	; 0x30
 800d1c8:	f1ae 0502 	sub.w	r5, lr, #2
 800d1cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d1d0:	1c44      	adds	r4, r0, #1
 800d1d2:	4629      	mov	r1, r5
 800d1d4:	4561      	cmp	r1, ip
 800d1d6:	d30a      	bcc.n	800d1ee <__exponent+0x66>
 800d1d8:	f10d 0209 	add.w	r2, sp, #9
 800d1dc:	eba2 020e 	sub.w	r2, r2, lr
 800d1e0:	4565      	cmp	r5, ip
 800d1e2:	bf88      	it	hi
 800d1e4:	2200      	movhi	r2, #0
 800d1e6:	4413      	add	r3, r2
 800d1e8:	1a18      	subs	r0, r3, r0
 800d1ea:	b003      	add	sp, #12
 800d1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d1f6:	e7ed      	b.n	800d1d4 <__exponent+0x4c>
 800d1f8:	2330      	movs	r3, #48	; 0x30
 800d1fa:	3130      	adds	r1, #48	; 0x30
 800d1fc:	7083      	strb	r3, [r0, #2]
 800d1fe:	70c1      	strb	r1, [r0, #3]
 800d200:	1d03      	adds	r3, r0, #4
 800d202:	e7f1      	b.n	800d1e8 <__exponent+0x60>

0800d204 <_printf_float>:
 800d204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d208:	ed2d 8b02 	vpush	{d8}
 800d20c:	b08d      	sub	sp, #52	; 0x34
 800d20e:	460c      	mov	r4, r1
 800d210:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d214:	4616      	mov	r6, r2
 800d216:	461f      	mov	r7, r3
 800d218:	4605      	mov	r5, r0
 800d21a:	f001 fd3d 	bl	800ec98 <_localeconv_r>
 800d21e:	f8d0 a000 	ldr.w	sl, [r0]
 800d222:	4650      	mov	r0, sl
 800d224:	f7f2 ffe4 	bl	80001f0 <strlen>
 800d228:	2300      	movs	r3, #0
 800d22a:	930a      	str	r3, [sp, #40]	; 0x28
 800d22c:	6823      	ldr	r3, [r4, #0]
 800d22e:	9305      	str	r3, [sp, #20]
 800d230:	f8d8 3000 	ldr.w	r3, [r8]
 800d234:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d238:	3307      	adds	r3, #7
 800d23a:	f023 0307 	bic.w	r3, r3, #7
 800d23e:	f103 0208 	add.w	r2, r3, #8
 800d242:	f8c8 2000 	str.w	r2, [r8]
 800d246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d24e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d252:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d256:	9307      	str	r3, [sp, #28]
 800d258:	f8cd 8018 	str.w	r8, [sp, #24]
 800d25c:	ee08 0a10 	vmov	s16, r0
 800d260:	4b9f      	ldr	r3, [pc, #636]	; (800d4e0 <_printf_float+0x2dc>)
 800d262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d266:	f04f 32ff 	mov.w	r2, #4294967295
 800d26a:	f7f3 fc6f 	bl	8000b4c <__aeabi_dcmpun>
 800d26e:	bb88      	cbnz	r0, 800d2d4 <_printf_float+0xd0>
 800d270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d274:	4b9a      	ldr	r3, [pc, #616]	; (800d4e0 <_printf_float+0x2dc>)
 800d276:	f04f 32ff 	mov.w	r2, #4294967295
 800d27a:	f7f3 fc49 	bl	8000b10 <__aeabi_dcmple>
 800d27e:	bb48      	cbnz	r0, 800d2d4 <_printf_float+0xd0>
 800d280:	2200      	movs	r2, #0
 800d282:	2300      	movs	r3, #0
 800d284:	4640      	mov	r0, r8
 800d286:	4649      	mov	r1, r9
 800d288:	f7f3 fc38 	bl	8000afc <__aeabi_dcmplt>
 800d28c:	b110      	cbz	r0, 800d294 <_printf_float+0x90>
 800d28e:	232d      	movs	r3, #45	; 0x2d
 800d290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d294:	4b93      	ldr	r3, [pc, #588]	; (800d4e4 <_printf_float+0x2e0>)
 800d296:	4894      	ldr	r0, [pc, #592]	; (800d4e8 <_printf_float+0x2e4>)
 800d298:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d29c:	bf94      	ite	ls
 800d29e:	4698      	movls	r8, r3
 800d2a0:	4680      	movhi	r8, r0
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	6123      	str	r3, [r4, #16]
 800d2a6:	9b05      	ldr	r3, [sp, #20]
 800d2a8:	f023 0204 	bic.w	r2, r3, #4
 800d2ac:	6022      	str	r2, [r4, #0]
 800d2ae:	f04f 0900 	mov.w	r9, #0
 800d2b2:	9700      	str	r7, [sp, #0]
 800d2b4:	4633      	mov	r3, r6
 800d2b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800d2b8:	4621      	mov	r1, r4
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	f000 f9d8 	bl	800d670 <_printf_common>
 800d2c0:	3001      	adds	r0, #1
 800d2c2:	f040 8090 	bne.w	800d3e6 <_printf_float+0x1e2>
 800d2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ca:	b00d      	add	sp, #52	; 0x34
 800d2cc:	ecbd 8b02 	vpop	{d8}
 800d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d4:	4642      	mov	r2, r8
 800d2d6:	464b      	mov	r3, r9
 800d2d8:	4640      	mov	r0, r8
 800d2da:	4649      	mov	r1, r9
 800d2dc:	f7f3 fc36 	bl	8000b4c <__aeabi_dcmpun>
 800d2e0:	b140      	cbz	r0, 800d2f4 <_printf_float+0xf0>
 800d2e2:	464b      	mov	r3, r9
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	bfbc      	itt	lt
 800d2e8:	232d      	movlt	r3, #45	; 0x2d
 800d2ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d2ee:	487f      	ldr	r0, [pc, #508]	; (800d4ec <_printf_float+0x2e8>)
 800d2f0:	4b7f      	ldr	r3, [pc, #508]	; (800d4f0 <_printf_float+0x2ec>)
 800d2f2:	e7d1      	b.n	800d298 <_printf_float+0x94>
 800d2f4:	6863      	ldr	r3, [r4, #4]
 800d2f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d2fa:	9206      	str	r2, [sp, #24]
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	d13f      	bne.n	800d380 <_printf_float+0x17c>
 800d300:	2306      	movs	r3, #6
 800d302:	6063      	str	r3, [r4, #4]
 800d304:	9b05      	ldr	r3, [sp, #20]
 800d306:	6861      	ldr	r1, [r4, #4]
 800d308:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d30c:	2300      	movs	r3, #0
 800d30e:	9303      	str	r3, [sp, #12]
 800d310:	ab0a      	add	r3, sp, #40	; 0x28
 800d312:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d316:	ab09      	add	r3, sp, #36	; 0x24
 800d318:	ec49 8b10 	vmov	d0, r8, r9
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	6022      	str	r2, [r4, #0]
 800d320:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d324:	4628      	mov	r0, r5
 800d326:	f7ff fecd 	bl	800d0c4 <__cvt>
 800d32a:	9b06      	ldr	r3, [sp, #24]
 800d32c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d32e:	2b47      	cmp	r3, #71	; 0x47
 800d330:	4680      	mov	r8, r0
 800d332:	d108      	bne.n	800d346 <_printf_float+0x142>
 800d334:	1cc8      	adds	r0, r1, #3
 800d336:	db02      	blt.n	800d33e <_printf_float+0x13a>
 800d338:	6863      	ldr	r3, [r4, #4]
 800d33a:	4299      	cmp	r1, r3
 800d33c:	dd41      	ble.n	800d3c2 <_printf_float+0x1be>
 800d33e:	f1ab 0b02 	sub.w	fp, fp, #2
 800d342:	fa5f fb8b 	uxtb.w	fp, fp
 800d346:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d34a:	d820      	bhi.n	800d38e <_printf_float+0x18a>
 800d34c:	3901      	subs	r1, #1
 800d34e:	465a      	mov	r2, fp
 800d350:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d354:	9109      	str	r1, [sp, #36]	; 0x24
 800d356:	f7ff ff17 	bl	800d188 <__exponent>
 800d35a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d35c:	1813      	adds	r3, r2, r0
 800d35e:	2a01      	cmp	r2, #1
 800d360:	4681      	mov	r9, r0
 800d362:	6123      	str	r3, [r4, #16]
 800d364:	dc02      	bgt.n	800d36c <_printf_float+0x168>
 800d366:	6822      	ldr	r2, [r4, #0]
 800d368:	07d2      	lsls	r2, r2, #31
 800d36a:	d501      	bpl.n	800d370 <_printf_float+0x16c>
 800d36c:	3301      	adds	r3, #1
 800d36e:	6123      	str	r3, [r4, #16]
 800d370:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d374:	2b00      	cmp	r3, #0
 800d376:	d09c      	beq.n	800d2b2 <_printf_float+0xae>
 800d378:	232d      	movs	r3, #45	; 0x2d
 800d37a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d37e:	e798      	b.n	800d2b2 <_printf_float+0xae>
 800d380:	9a06      	ldr	r2, [sp, #24]
 800d382:	2a47      	cmp	r2, #71	; 0x47
 800d384:	d1be      	bne.n	800d304 <_printf_float+0x100>
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1bc      	bne.n	800d304 <_printf_float+0x100>
 800d38a:	2301      	movs	r3, #1
 800d38c:	e7b9      	b.n	800d302 <_printf_float+0xfe>
 800d38e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d392:	d118      	bne.n	800d3c6 <_printf_float+0x1c2>
 800d394:	2900      	cmp	r1, #0
 800d396:	6863      	ldr	r3, [r4, #4]
 800d398:	dd0b      	ble.n	800d3b2 <_printf_float+0x1ae>
 800d39a:	6121      	str	r1, [r4, #16]
 800d39c:	b913      	cbnz	r3, 800d3a4 <_printf_float+0x1a0>
 800d39e:	6822      	ldr	r2, [r4, #0]
 800d3a0:	07d0      	lsls	r0, r2, #31
 800d3a2:	d502      	bpl.n	800d3aa <_printf_float+0x1a6>
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	440b      	add	r3, r1
 800d3a8:	6123      	str	r3, [r4, #16]
 800d3aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800d3ac:	f04f 0900 	mov.w	r9, #0
 800d3b0:	e7de      	b.n	800d370 <_printf_float+0x16c>
 800d3b2:	b913      	cbnz	r3, 800d3ba <_printf_float+0x1b6>
 800d3b4:	6822      	ldr	r2, [r4, #0]
 800d3b6:	07d2      	lsls	r2, r2, #31
 800d3b8:	d501      	bpl.n	800d3be <_printf_float+0x1ba>
 800d3ba:	3302      	adds	r3, #2
 800d3bc:	e7f4      	b.n	800d3a8 <_printf_float+0x1a4>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e7f2      	b.n	800d3a8 <_printf_float+0x1a4>
 800d3c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c8:	4299      	cmp	r1, r3
 800d3ca:	db05      	blt.n	800d3d8 <_printf_float+0x1d4>
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	6121      	str	r1, [r4, #16]
 800d3d0:	07d8      	lsls	r0, r3, #31
 800d3d2:	d5ea      	bpl.n	800d3aa <_printf_float+0x1a6>
 800d3d4:	1c4b      	adds	r3, r1, #1
 800d3d6:	e7e7      	b.n	800d3a8 <_printf_float+0x1a4>
 800d3d8:	2900      	cmp	r1, #0
 800d3da:	bfd4      	ite	le
 800d3dc:	f1c1 0202 	rsble	r2, r1, #2
 800d3e0:	2201      	movgt	r2, #1
 800d3e2:	4413      	add	r3, r2
 800d3e4:	e7e0      	b.n	800d3a8 <_printf_float+0x1a4>
 800d3e6:	6823      	ldr	r3, [r4, #0]
 800d3e8:	055a      	lsls	r2, r3, #21
 800d3ea:	d407      	bmi.n	800d3fc <_printf_float+0x1f8>
 800d3ec:	6923      	ldr	r3, [r4, #16]
 800d3ee:	4642      	mov	r2, r8
 800d3f0:	4631      	mov	r1, r6
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	47b8      	blx	r7
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	d12c      	bne.n	800d454 <_printf_float+0x250>
 800d3fa:	e764      	b.n	800d2c6 <_printf_float+0xc2>
 800d3fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d400:	f240 80e0 	bls.w	800d5c4 <_printf_float+0x3c0>
 800d404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d408:	2200      	movs	r2, #0
 800d40a:	2300      	movs	r3, #0
 800d40c:	f7f3 fb6c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d410:	2800      	cmp	r0, #0
 800d412:	d034      	beq.n	800d47e <_printf_float+0x27a>
 800d414:	4a37      	ldr	r2, [pc, #220]	; (800d4f4 <_printf_float+0x2f0>)
 800d416:	2301      	movs	r3, #1
 800d418:	4631      	mov	r1, r6
 800d41a:	4628      	mov	r0, r5
 800d41c:	47b8      	blx	r7
 800d41e:	3001      	adds	r0, #1
 800d420:	f43f af51 	beq.w	800d2c6 <_printf_float+0xc2>
 800d424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d428:	429a      	cmp	r2, r3
 800d42a:	db02      	blt.n	800d432 <_printf_float+0x22e>
 800d42c:	6823      	ldr	r3, [r4, #0]
 800d42e:	07d8      	lsls	r0, r3, #31
 800d430:	d510      	bpl.n	800d454 <_printf_float+0x250>
 800d432:	ee18 3a10 	vmov	r3, s16
 800d436:	4652      	mov	r2, sl
 800d438:	4631      	mov	r1, r6
 800d43a:	4628      	mov	r0, r5
 800d43c:	47b8      	blx	r7
 800d43e:	3001      	adds	r0, #1
 800d440:	f43f af41 	beq.w	800d2c6 <_printf_float+0xc2>
 800d444:	f04f 0800 	mov.w	r8, #0
 800d448:	f104 091a 	add.w	r9, r4, #26
 800d44c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d44e:	3b01      	subs	r3, #1
 800d450:	4543      	cmp	r3, r8
 800d452:	dc09      	bgt.n	800d468 <_printf_float+0x264>
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	079b      	lsls	r3, r3, #30
 800d458:	f100 8105 	bmi.w	800d666 <_printf_float+0x462>
 800d45c:	68e0      	ldr	r0, [r4, #12]
 800d45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d460:	4298      	cmp	r0, r3
 800d462:	bfb8      	it	lt
 800d464:	4618      	movlt	r0, r3
 800d466:	e730      	b.n	800d2ca <_printf_float+0xc6>
 800d468:	2301      	movs	r3, #1
 800d46a:	464a      	mov	r2, r9
 800d46c:	4631      	mov	r1, r6
 800d46e:	4628      	mov	r0, r5
 800d470:	47b8      	blx	r7
 800d472:	3001      	adds	r0, #1
 800d474:	f43f af27 	beq.w	800d2c6 <_printf_float+0xc2>
 800d478:	f108 0801 	add.w	r8, r8, #1
 800d47c:	e7e6      	b.n	800d44c <_printf_float+0x248>
 800d47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d480:	2b00      	cmp	r3, #0
 800d482:	dc39      	bgt.n	800d4f8 <_printf_float+0x2f4>
 800d484:	4a1b      	ldr	r2, [pc, #108]	; (800d4f4 <_printf_float+0x2f0>)
 800d486:	2301      	movs	r3, #1
 800d488:	4631      	mov	r1, r6
 800d48a:	4628      	mov	r0, r5
 800d48c:	47b8      	blx	r7
 800d48e:	3001      	adds	r0, #1
 800d490:	f43f af19 	beq.w	800d2c6 <_printf_float+0xc2>
 800d494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d498:	4313      	orrs	r3, r2
 800d49a:	d102      	bne.n	800d4a2 <_printf_float+0x29e>
 800d49c:	6823      	ldr	r3, [r4, #0]
 800d49e:	07d9      	lsls	r1, r3, #31
 800d4a0:	d5d8      	bpl.n	800d454 <_printf_float+0x250>
 800d4a2:	ee18 3a10 	vmov	r3, s16
 800d4a6:	4652      	mov	r2, sl
 800d4a8:	4631      	mov	r1, r6
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	47b8      	blx	r7
 800d4ae:	3001      	adds	r0, #1
 800d4b0:	f43f af09 	beq.w	800d2c6 <_printf_float+0xc2>
 800d4b4:	f04f 0900 	mov.w	r9, #0
 800d4b8:	f104 0a1a 	add.w	sl, r4, #26
 800d4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4be:	425b      	negs	r3, r3
 800d4c0:	454b      	cmp	r3, r9
 800d4c2:	dc01      	bgt.n	800d4c8 <_printf_float+0x2c4>
 800d4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4c6:	e792      	b.n	800d3ee <_printf_float+0x1ea>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	4652      	mov	r2, sl
 800d4cc:	4631      	mov	r1, r6
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	47b8      	blx	r7
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	f43f aef7 	beq.w	800d2c6 <_printf_float+0xc2>
 800d4d8:	f109 0901 	add.w	r9, r9, #1
 800d4dc:	e7ee      	b.n	800d4bc <_printf_float+0x2b8>
 800d4de:	bf00      	nop
 800d4e0:	7fefffff 	.word	0x7fefffff
 800d4e4:	08013eac 	.word	0x08013eac
 800d4e8:	08013eb0 	.word	0x08013eb0
 800d4ec:	08013eb8 	.word	0x08013eb8
 800d4f0:	08013eb4 	.word	0x08013eb4
 800d4f4:	08013ebc 	.word	0x08013ebc
 800d4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	bfa8      	it	ge
 800d500:	461a      	movge	r2, r3
 800d502:	2a00      	cmp	r2, #0
 800d504:	4691      	mov	r9, r2
 800d506:	dc37      	bgt.n	800d578 <_printf_float+0x374>
 800d508:	f04f 0b00 	mov.w	fp, #0
 800d50c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d510:	f104 021a 	add.w	r2, r4, #26
 800d514:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d516:	9305      	str	r3, [sp, #20]
 800d518:	eba3 0309 	sub.w	r3, r3, r9
 800d51c:	455b      	cmp	r3, fp
 800d51e:	dc33      	bgt.n	800d588 <_printf_float+0x384>
 800d520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d524:	429a      	cmp	r2, r3
 800d526:	db3b      	blt.n	800d5a0 <_printf_float+0x39c>
 800d528:	6823      	ldr	r3, [r4, #0]
 800d52a:	07da      	lsls	r2, r3, #31
 800d52c:	d438      	bmi.n	800d5a0 <_printf_float+0x39c>
 800d52e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d530:	9b05      	ldr	r3, [sp, #20]
 800d532:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	eba2 0901 	sub.w	r9, r2, r1
 800d53a:	4599      	cmp	r9, r3
 800d53c:	bfa8      	it	ge
 800d53e:	4699      	movge	r9, r3
 800d540:	f1b9 0f00 	cmp.w	r9, #0
 800d544:	dc35      	bgt.n	800d5b2 <_printf_float+0x3ae>
 800d546:	f04f 0800 	mov.w	r8, #0
 800d54a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d54e:	f104 0a1a 	add.w	sl, r4, #26
 800d552:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d556:	1a9b      	subs	r3, r3, r2
 800d558:	eba3 0309 	sub.w	r3, r3, r9
 800d55c:	4543      	cmp	r3, r8
 800d55e:	f77f af79 	ble.w	800d454 <_printf_float+0x250>
 800d562:	2301      	movs	r3, #1
 800d564:	4652      	mov	r2, sl
 800d566:	4631      	mov	r1, r6
 800d568:	4628      	mov	r0, r5
 800d56a:	47b8      	blx	r7
 800d56c:	3001      	adds	r0, #1
 800d56e:	f43f aeaa 	beq.w	800d2c6 <_printf_float+0xc2>
 800d572:	f108 0801 	add.w	r8, r8, #1
 800d576:	e7ec      	b.n	800d552 <_printf_float+0x34e>
 800d578:	4613      	mov	r3, r2
 800d57a:	4631      	mov	r1, r6
 800d57c:	4642      	mov	r2, r8
 800d57e:	4628      	mov	r0, r5
 800d580:	47b8      	blx	r7
 800d582:	3001      	adds	r0, #1
 800d584:	d1c0      	bne.n	800d508 <_printf_float+0x304>
 800d586:	e69e      	b.n	800d2c6 <_printf_float+0xc2>
 800d588:	2301      	movs	r3, #1
 800d58a:	4631      	mov	r1, r6
 800d58c:	4628      	mov	r0, r5
 800d58e:	9205      	str	r2, [sp, #20]
 800d590:	47b8      	blx	r7
 800d592:	3001      	adds	r0, #1
 800d594:	f43f ae97 	beq.w	800d2c6 <_printf_float+0xc2>
 800d598:	9a05      	ldr	r2, [sp, #20]
 800d59a:	f10b 0b01 	add.w	fp, fp, #1
 800d59e:	e7b9      	b.n	800d514 <_printf_float+0x310>
 800d5a0:	ee18 3a10 	vmov	r3, s16
 800d5a4:	4652      	mov	r2, sl
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	47b8      	blx	r7
 800d5ac:	3001      	adds	r0, #1
 800d5ae:	d1be      	bne.n	800d52e <_printf_float+0x32a>
 800d5b0:	e689      	b.n	800d2c6 <_printf_float+0xc2>
 800d5b2:	9a05      	ldr	r2, [sp, #20]
 800d5b4:	464b      	mov	r3, r9
 800d5b6:	4442      	add	r2, r8
 800d5b8:	4631      	mov	r1, r6
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	47b8      	blx	r7
 800d5be:	3001      	adds	r0, #1
 800d5c0:	d1c1      	bne.n	800d546 <_printf_float+0x342>
 800d5c2:	e680      	b.n	800d2c6 <_printf_float+0xc2>
 800d5c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5c6:	2a01      	cmp	r2, #1
 800d5c8:	dc01      	bgt.n	800d5ce <_printf_float+0x3ca>
 800d5ca:	07db      	lsls	r3, r3, #31
 800d5cc:	d538      	bpl.n	800d640 <_printf_float+0x43c>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	4642      	mov	r2, r8
 800d5d2:	4631      	mov	r1, r6
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	47b8      	blx	r7
 800d5d8:	3001      	adds	r0, #1
 800d5da:	f43f ae74 	beq.w	800d2c6 <_printf_float+0xc2>
 800d5de:	ee18 3a10 	vmov	r3, s16
 800d5e2:	4652      	mov	r2, sl
 800d5e4:	4631      	mov	r1, r6
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	47b8      	blx	r7
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	f43f ae6b 	beq.w	800d2c6 <_printf_float+0xc2>
 800d5f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	f7f3 fa76 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5fc:	b9d8      	cbnz	r0, 800d636 <_printf_float+0x432>
 800d5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d600:	f108 0201 	add.w	r2, r8, #1
 800d604:	3b01      	subs	r3, #1
 800d606:	4631      	mov	r1, r6
 800d608:	4628      	mov	r0, r5
 800d60a:	47b8      	blx	r7
 800d60c:	3001      	adds	r0, #1
 800d60e:	d10e      	bne.n	800d62e <_printf_float+0x42a>
 800d610:	e659      	b.n	800d2c6 <_printf_float+0xc2>
 800d612:	2301      	movs	r3, #1
 800d614:	4652      	mov	r2, sl
 800d616:	4631      	mov	r1, r6
 800d618:	4628      	mov	r0, r5
 800d61a:	47b8      	blx	r7
 800d61c:	3001      	adds	r0, #1
 800d61e:	f43f ae52 	beq.w	800d2c6 <_printf_float+0xc2>
 800d622:	f108 0801 	add.w	r8, r8, #1
 800d626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d628:	3b01      	subs	r3, #1
 800d62a:	4543      	cmp	r3, r8
 800d62c:	dcf1      	bgt.n	800d612 <_printf_float+0x40e>
 800d62e:	464b      	mov	r3, r9
 800d630:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d634:	e6dc      	b.n	800d3f0 <_printf_float+0x1ec>
 800d636:	f04f 0800 	mov.w	r8, #0
 800d63a:	f104 0a1a 	add.w	sl, r4, #26
 800d63e:	e7f2      	b.n	800d626 <_printf_float+0x422>
 800d640:	2301      	movs	r3, #1
 800d642:	4642      	mov	r2, r8
 800d644:	e7df      	b.n	800d606 <_printf_float+0x402>
 800d646:	2301      	movs	r3, #1
 800d648:	464a      	mov	r2, r9
 800d64a:	4631      	mov	r1, r6
 800d64c:	4628      	mov	r0, r5
 800d64e:	47b8      	blx	r7
 800d650:	3001      	adds	r0, #1
 800d652:	f43f ae38 	beq.w	800d2c6 <_printf_float+0xc2>
 800d656:	f108 0801 	add.w	r8, r8, #1
 800d65a:	68e3      	ldr	r3, [r4, #12]
 800d65c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d65e:	1a5b      	subs	r3, r3, r1
 800d660:	4543      	cmp	r3, r8
 800d662:	dcf0      	bgt.n	800d646 <_printf_float+0x442>
 800d664:	e6fa      	b.n	800d45c <_printf_float+0x258>
 800d666:	f04f 0800 	mov.w	r8, #0
 800d66a:	f104 0919 	add.w	r9, r4, #25
 800d66e:	e7f4      	b.n	800d65a <_printf_float+0x456>

0800d670 <_printf_common>:
 800d670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d674:	4616      	mov	r6, r2
 800d676:	4699      	mov	r9, r3
 800d678:	688a      	ldr	r2, [r1, #8]
 800d67a:	690b      	ldr	r3, [r1, #16]
 800d67c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d680:	4293      	cmp	r3, r2
 800d682:	bfb8      	it	lt
 800d684:	4613      	movlt	r3, r2
 800d686:	6033      	str	r3, [r6, #0]
 800d688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d68c:	4607      	mov	r7, r0
 800d68e:	460c      	mov	r4, r1
 800d690:	b10a      	cbz	r2, 800d696 <_printf_common+0x26>
 800d692:	3301      	adds	r3, #1
 800d694:	6033      	str	r3, [r6, #0]
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	0699      	lsls	r1, r3, #26
 800d69a:	bf42      	ittt	mi
 800d69c:	6833      	ldrmi	r3, [r6, #0]
 800d69e:	3302      	addmi	r3, #2
 800d6a0:	6033      	strmi	r3, [r6, #0]
 800d6a2:	6825      	ldr	r5, [r4, #0]
 800d6a4:	f015 0506 	ands.w	r5, r5, #6
 800d6a8:	d106      	bne.n	800d6b8 <_printf_common+0x48>
 800d6aa:	f104 0a19 	add.w	sl, r4, #25
 800d6ae:	68e3      	ldr	r3, [r4, #12]
 800d6b0:	6832      	ldr	r2, [r6, #0]
 800d6b2:	1a9b      	subs	r3, r3, r2
 800d6b4:	42ab      	cmp	r3, r5
 800d6b6:	dc26      	bgt.n	800d706 <_printf_common+0x96>
 800d6b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6bc:	1e13      	subs	r3, r2, #0
 800d6be:	6822      	ldr	r2, [r4, #0]
 800d6c0:	bf18      	it	ne
 800d6c2:	2301      	movne	r3, #1
 800d6c4:	0692      	lsls	r2, r2, #26
 800d6c6:	d42b      	bmi.n	800d720 <_printf_common+0xb0>
 800d6c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6cc:	4649      	mov	r1, r9
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	47c0      	blx	r8
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	d01e      	beq.n	800d714 <_printf_common+0xa4>
 800d6d6:	6823      	ldr	r3, [r4, #0]
 800d6d8:	68e5      	ldr	r5, [r4, #12]
 800d6da:	6832      	ldr	r2, [r6, #0]
 800d6dc:	f003 0306 	and.w	r3, r3, #6
 800d6e0:	2b04      	cmp	r3, #4
 800d6e2:	bf08      	it	eq
 800d6e4:	1aad      	subeq	r5, r5, r2
 800d6e6:	68a3      	ldr	r3, [r4, #8]
 800d6e8:	6922      	ldr	r2, [r4, #16]
 800d6ea:	bf0c      	ite	eq
 800d6ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6f0:	2500      	movne	r5, #0
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	bfc4      	itt	gt
 800d6f6:	1a9b      	subgt	r3, r3, r2
 800d6f8:	18ed      	addgt	r5, r5, r3
 800d6fa:	2600      	movs	r6, #0
 800d6fc:	341a      	adds	r4, #26
 800d6fe:	42b5      	cmp	r5, r6
 800d700:	d11a      	bne.n	800d738 <_printf_common+0xc8>
 800d702:	2000      	movs	r0, #0
 800d704:	e008      	b.n	800d718 <_printf_common+0xa8>
 800d706:	2301      	movs	r3, #1
 800d708:	4652      	mov	r2, sl
 800d70a:	4649      	mov	r1, r9
 800d70c:	4638      	mov	r0, r7
 800d70e:	47c0      	blx	r8
 800d710:	3001      	adds	r0, #1
 800d712:	d103      	bne.n	800d71c <_printf_common+0xac>
 800d714:	f04f 30ff 	mov.w	r0, #4294967295
 800d718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71c:	3501      	adds	r5, #1
 800d71e:	e7c6      	b.n	800d6ae <_printf_common+0x3e>
 800d720:	18e1      	adds	r1, r4, r3
 800d722:	1c5a      	adds	r2, r3, #1
 800d724:	2030      	movs	r0, #48	; 0x30
 800d726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d72a:	4422      	add	r2, r4
 800d72c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d734:	3302      	adds	r3, #2
 800d736:	e7c7      	b.n	800d6c8 <_printf_common+0x58>
 800d738:	2301      	movs	r3, #1
 800d73a:	4622      	mov	r2, r4
 800d73c:	4649      	mov	r1, r9
 800d73e:	4638      	mov	r0, r7
 800d740:	47c0      	blx	r8
 800d742:	3001      	adds	r0, #1
 800d744:	d0e6      	beq.n	800d714 <_printf_common+0xa4>
 800d746:	3601      	adds	r6, #1
 800d748:	e7d9      	b.n	800d6fe <_printf_common+0x8e>
	...

0800d74c <_printf_i>:
 800d74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d750:	460c      	mov	r4, r1
 800d752:	4691      	mov	r9, r2
 800d754:	7e27      	ldrb	r7, [r4, #24]
 800d756:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d758:	2f78      	cmp	r7, #120	; 0x78
 800d75a:	4680      	mov	r8, r0
 800d75c:	469a      	mov	sl, r3
 800d75e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d762:	d807      	bhi.n	800d774 <_printf_i+0x28>
 800d764:	2f62      	cmp	r7, #98	; 0x62
 800d766:	d80a      	bhi.n	800d77e <_printf_i+0x32>
 800d768:	2f00      	cmp	r7, #0
 800d76a:	f000 80d8 	beq.w	800d91e <_printf_i+0x1d2>
 800d76e:	2f58      	cmp	r7, #88	; 0x58
 800d770:	f000 80a3 	beq.w	800d8ba <_printf_i+0x16e>
 800d774:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d77c:	e03a      	b.n	800d7f4 <_printf_i+0xa8>
 800d77e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d782:	2b15      	cmp	r3, #21
 800d784:	d8f6      	bhi.n	800d774 <_printf_i+0x28>
 800d786:	a001      	add	r0, pc, #4	; (adr r0, 800d78c <_printf_i+0x40>)
 800d788:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d78c:	0800d7e5 	.word	0x0800d7e5
 800d790:	0800d7f9 	.word	0x0800d7f9
 800d794:	0800d775 	.word	0x0800d775
 800d798:	0800d775 	.word	0x0800d775
 800d79c:	0800d775 	.word	0x0800d775
 800d7a0:	0800d775 	.word	0x0800d775
 800d7a4:	0800d7f9 	.word	0x0800d7f9
 800d7a8:	0800d775 	.word	0x0800d775
 800d7ac:	0800d775 	.word	0x0800d775
 800d7b0:	0800d775 	.word	0x0800d775
 800d7b4:	0800d775 	.word	0x0800d775
 800d7b8:	0800d905 	.word	0x0800d905
 800d7bc:	0800d829 	.word	0x0800d829
 800d7c0:	0800d8e7 	.word	0x0800d8e7
 800d7c4:	0800d775 	.word	0x0800d775
 800d7c8:	0800d775 	.word	0x0800d775
 800d7cc:	0800d927 	.word	0x0800d927
 800d7d0:	0800d775 	.word	0x0800d775
 800d7d4:	0800d829 	.word	0x0800d829
 800d7d8:	0800d775 	.word	0x0800d775
 800d7dc:	0800d775 	.word	0x0800d775
 800d7e0:	0800d8ef 	.word	0x0800d8ef
 800d7e4:	680b      	ldr	r3, [r1, #0]
 800d7e6:	1d1a      	adds	r2, r3, #4
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	600a      	str	r2, [r1, #0]
 800d7ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d7f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e0a3      	b.n	800d940 <_printf_i+0x1f4>
 800d7f8:	6825      	ldr	r5, [r4, #0]
 800d7fa:	6808      	ldr	r0, [r1, #0]
 800d7fc:	062e      	lsls	r6, r5, #24
 800d7fe:	f100 0304 	add.w	r3, r0, #4
 800d802:	d50a      	bpl.n	800d81a <_printf_i+0xce>
 800d804:	6805      	ldr	r5, [r0, #0]
 800d806:	600b      	str	r3, [r1, #0]
 800d808:	2d00      	cmp	r5, #0
 800d80a:	da03      	bge.n	800d814 <_printf_i+0xc8>
 800d80c:	232d      	movs	r3, #45	; 0x2d
 800d80e:	426d      	negs	r5, r5
 800d810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d814:	485e      	ldr	r0, [pc, #376]	; (800d990 <_printf_i+0x244>)
 800d816:	230a      	movs	r3, #10
 800d818:	e019      	b.n	800d84e <_printf_i+0x102>
 800d81a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d81e:	6805      	ldr	r5, [r0, #0]
 800d820:	600b      	str	r3, [r1, #0]
 800d822:	bf18      	it	ne
 800d824:	b22d      	sxthne	r5, r5
 800d826:	e7ef      	b.n	800d808 <_printf_i+0xbc>
 800d828:	680b      	ldr	r3, [r1, #0]
 800d82a:	6825      	ldr	r5, [r4, #0]
 800d82c:	1d18      	adds	r0, r3, #4
 800d82e:	6008      	str	r0, [r1, #0]
 800d830:	0628      	lsls	r0, r5, #24
 800d832:	d501      	bpl.n	800d838 <_printf_i+0xec>
 800d834:	681d      	ldr	r5, [r3, #0]
 800d836:	e002      	b.n	800d83e <_printf_i+0xf2>
 800d838:	0669      	lsls	r1, r5, #25
 800d83a:	d5fb      	bpl.n	800d834 <_printf_i+0xe8>
 800d83c:	881d      	ldrh	r5, [r3, #0]
 800d83e:	4854      	ldr	r0, [pc, #336]	; (800d990 <_printf_i+0x244>)
 800d840:	2f6f      	cmp	r7, #111	; 0x6f
 800d842:	bf0c      	ite	eq
 800d844:	2308      	moveq	r3, #8
 800d846:	230a      	movne	r3, #10
 800d848:	2100      	movs	r1, #0
 800d84a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d84e:	6866      	ldr	r6, [r4, #4]
 800d850:	60a6      	str	r6, [r4, #8]
 800d852:	2e00      	cmp	r6, #0
 800d854:	bfa2      	ittt	ge
 800d856:	6821      	ldrge	r1, [r4, #0]
 800d858:	f021 0104 	bicge.w	r1, r1, #4
 800d85c:	6021      	strge	r1, [r4, #0]
 800d85e:	b90d      	cbnz	r5, 800d864 <_printf_i+0x118>
 800d860:	2e00      	cmp	r6, #0
 800d862:	d04d      	beq.n	800d900 <_printf_i+0x1b4>
 800d864:	4616      	mov	r6, r2
 800d866:	fbb5 f1f3 	udiv	r1, r5, r3
 800d86a:	fb03 5711 	mls	r7, r3, r1, r5
 800d86e:	5dc7      	ldrb	r7, [r0, r7]
 800d870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d874:	462f      	mov	r7, r5
 800d876:	42bb      	cmp	r3, r7
 800d878:	460d      	mov	r5, r1
 800d87a:	d9f4      	bls.n	800d866 <_printf_i+0x11a>
 800d87c:	2b08      	cmp	r3, #8
 800d87e:	d10b      	bne.n	800d898 <_printf_i+0x14c>
 800d880:	6823      	ldr	r3, [r4, #0]
 800d882:	07df      	lsls	r7, r3, #31
 800d884:	d508      	bpl.n	800d898 <_printf_i+0x14c>
 800d886:	6923      	ldr	r3, [r4, #16]
 800d888:	6861      	ldr	r1, [r4, #4]
 800d88a:	4299      	cmp	r1, r3
 800d88c:	bfde      	ittt	le
 800d88e:	2330      	movle	r3, #48	; 0x30
 800d890:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d894:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d898:	1b92      	subs	r2, r2, r6
 800d89a:	6122      	str	r2, [r4, #16]
 800d89c:	f8cd a000 	str.w	sl, [sp]
 800d8a0:	464b      	mov	r3, r9
 800d8a2:	aa03      	add	r2, sp, #12
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	f7ff fee2 	bl	800d670 <_printf_common>
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d14c      	bne.n	800d94a <_printf_i+0x1fe>
 800d8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b4:	b004      	add	sp, #16
 800d8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ba:	4835      	ldr	r0, [pc, #212]	; (800d990 <_printf_i+0x244>)
 800d8bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d8c0:	6823      	ldr	r3, [r4, #0]
 800d8c2:	680e      	ldr	r6, [r1, #0]
 800d8c4:	061f      	lsls	r7, r3, #24
 800d8c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800d8ca:	600e      	str	r6, [r1, #0]
 800d8cc:	d514      	bpl.n	800d8f8 <_printf_i+0x1ac>
 800d8ce:	07d9      	lsls	r1, r3, #31
 800d8d0:	bf44      	itt	mi
 800d8d2:	f043 0320 	orrmi.w	r3, r3, #32
 800d8d6:	6023      	strmi	r3, [r4, #0]
 800d8d8:	b91d      	cbnz	r5, 800d8e2 <_printf_i+0x196>
 800d8da:	6823      	ldr	r3, [r4, #0]
 800d8dc:	f023 0320 	bic.w	r3, r3, #32
 800d8e0:	6023      	str	r3, [r4, #0]
 800d8e2:	2310      	movs	r3, #16
 800d8e4:	e7b0      	b.n	800d848 <_printf_i+0xfc>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	f043 0320 	orr.w	r3, r3, #32
 800d8ec:	6023      	str	r3, [r4, #0]
 800d8ee:	2378      	movs	r3, #120	; 0x78
 800d8f0:	4828      	ldr	r0, [pc, #160]	; (800d994 <_printf_i+0x248>)
 800d8f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8f6:	e7e3      	b.n	800d8c0 <_printf_i+0x174>
 800d8f8:	065e      	lsls	r6, r3, #25
 800d8fa:	bf48      	it	mi
 800d8fc:	b2ad      	uxthmi	r5, r5
 800d8fe:	e7e6      	b.n	800d8ce <_printf_i+0x182>
 800d900:	4616      	mov	r6, r2
 800d902:	e7bb      	b.n	800d87c <_printf_i+0x130>
 800d904:	680b      	ldr	r3, [r1, #0]
 800d906:	6826      	ldr	r6, [r4, #0]
 800d908:	6960      	ldr	r0, [r4, #20]
 800d90a:	1d1d      	adds	r5, r3, #4
 800d90c:	600d      	str	r5, [r1, #0]
 800d90e:	0635      	lsls	r5, r6, #24
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	d501      	bpl.n	800d918 <_printf_i+0x1cc>
 800d914:	6018      	str	r0, [r3, #0]
 800d916:	e002      	b.n	800d91e <_printf_i+0x1d2>
 800d918:	0671      	lsls	r1, r6, #25
 800d91a:	d5fb      	bpl.n	800d914 <_printf_i+0x1c8>
 800d91c:	8018      	strh	r0, [r3, #0]
 800d91e:	2300      	movs	r3, #0
 800d920:	6123      	str	r3, [r4, #16]
 800d922:	4616      	mov	r6, r2
 800d924:	e7ba      	b.n	800d89c <_printf_i+0x150>
 800d926:	680b      	ldr	r3, [r1, #0]
 800d928:	1d1a      	adds	r2, r3, #4
 800d92a:	600a      	str	r2, [r1, #0]
 800d92c:	681e      	ldr	r6, [r3, #0]
 800d92e:	6862      	ldr	r2, [r4, #4]
 800d930:	2100      	movs	r1, #0
 800d932:	4630      	mov	r0, r6
 800d934:	f7f2 fc64 	bl	8000200 <memchr>
 800d938:	b108      	cbz	r0, 800d93e <_printf_i+0x1f2>
 800d93a:	1b80      	subs	r0, r0, r6
 800d93c:	6060      	str	r0, [r4, #4]
 800d93e:	6863      	ldr	r3, [r4, #4]
 800d940:	6123      	str	r3, [r4, #16]
 800d942:	2300      	movs	r3, #0
 800d944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d948:	e7a8      	b.n	800d89c <_printf_i+0x150>
 800d94a:	6923      	ldr	r3, [r4, #16]
 800d94c:	4632      	mov	r2, r6
 800d94e:	4649      	mov	r1, r9
 800d950:	4640      	mov	r0, r8
 800d952:	47d0      	blx	sl
 800d954:	3001      	adds	r0, #1
 800d956:	d0ab      	beq.n	800d8b0 <_printf_i+0x164>
 800d958:	6823      	ldr	r3, [r4, #0]
 800d95a:	079b      	lsls	r3, r3, #30
 800d95c:	d413      	bmi.n	800d986 <_printf_i+0x23a>
 800d95e:	68e0      	ldr	r0, [r4, #12]
 800d960:	9b03      	ldr	r3, [sp, #12]
 800d962:	4298      	cmp	r0, r3
 800d964:	bfb8      	it	lt
 800d966:	4618      	movlt	r0, r3
 800d968:	e7a4      	b.n	800d8b4 <_printf_i+0x168>
 800d96a:	2301      	movs	r3, #1
 800d96c:	4632      	mov	r2, r6
 800d96e:	4649      	mov	r1, r9
 800d970:	4640      	mov	r0, r8
 800d972:	47d0      	blx	sl
 800d974:	3001      	adds	r0, #1
 800d976:	d09b      	beq.n	800d8b0 <_printf_i+0x164>
 800d978:	3501      	adds	r5, #1
 800d97a:	68e3      	ldr	r3, [r4, #12]
 800d97c:	9903      	ldr	r1, [sp, #12]
 800d97e:	1a5b      	subs	r3, r3, r1
 800d980:	42ab      	cmp	r3, r5
 800d982:	dcf2      	bgt.n	800d96a <_printf_i+0x21e>
 800d984:	e7eb      	b.n	800d95e <_printf_i+0x212>
 800d986:	2500      	movs	r5, #0
 800d988:	f104 0619 	add.w	r6, r4, #25
 800d98c:	e7f5      	b.n	800d97a <_printf_i+0x22e>
 800d98e:	bf00      	nop
 800d990:	08013ebe 	.word	0x08013ebe
 800d994:	08013ecf 	.word	0x08013ecf

0800d998 <iprintf>:
 800d998:	b40f      	push	{r0, r1, r2, r3}
 800d99a:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <iprintf+0x2c>)
 800d99c:	b513      	push	{r0, r1, r4, lr}
 800d99e:	681c      	ldr	r4, [r3, #0]
 800d9a0:	b124      	cbz	r4, 800d9ac <iprintf+0x14>
 800d9a2:	69a3      	ldr	r3, [r4, #24]
 800d9a4:	b913      	cbnz	r3, 800d9ac <iprintf+0x14>
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	f001 f8d8 	bl	800eb5c <__sinit>
 800d9ac:	ab05      	add	r3, sp, #20
 800d9ae:	9a04      	ldr	r2, [sp, #16]
 800d9b0:	68a1      	ldr	r1, [r4, #8]
 800d9b2:	9301      	str	r3, [sp, #4]
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f001 fe45 	bl	800f644 <_vfiprintf_r>
 800d9ba:	b002      	add	sp, #8
 800d9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9c0:	b004      	add	sp, #16
 800d9c2:	4770      	bx	lr
 800d9c4:	20000068 	.word	0x20000068

0800d9c8 <_puts_r>:
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	460e      	mov	r6, r1
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	b118      	cbz	r0, 800d9d8 <_puts_r+0x10>
 800d9d0:	6983      	ldr	r3, [r0, #24]
 800d9d2:	b90b      	cbnz	r3, 800d9d8 <_puts_r+0x10>
 800d9d4:	f001 f8c2 	bl	800eb5c <__sinit>
 800d9d8:	69ab      	ldr	r3, [r5, #24]
 800d9da:	68ac      	ldr	r4, [r5, #8]
 800d9dc:	b913      	cbnz	r3, 800d9e4 <_puts_r+0x1c>
 800d9de:	4628      	mov	r0, r5
 800d9e0:	f001 f8bc 	bl	800eb5c <__sinit>
 800d9e4:	4b2c      	ldr	r3, [pc, #176]	; (800da98 <_puts_r+0xd0>)
 800d9e6:	429c      	cmp	r4, r3
 800d9e8:	d120      	bne.n	800da2c <_puts_r+0x64>
 800d9ea:	686c      	ldr	r4, [r5, #4]
 800d9ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9ee:	07db      	lsls	r3, r3, #31
 800d9f0:	d405      	bmi.n	800d9fe <_puts_r+0x36>
 800d9f2:	89a3      	ldrh	r3, [r4, #12]
 800d9f4:	0598      	lsls	r0, r3, #22
 800d9f6:	d402      	bmi.n	800d9fe <_puts_r+0x36>
 800d9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9fa:	f001 f952 	bl	800eca2 <__retarget_lock_acquire_recursive>
 800d9fe:	89a3      	ldrh	r3, [r4, #12]
 800da00:	0719      	lsls	r1, r3, #28
 800da02:	d51d      	bpl.n	800da40 <_puts_r+0x78>
 800da04:	6923      	ldr	r3, [r4, #16]
 800da06:	b1db      	cbz	r3, 800da40 <_puts_r+0x78>
 800da08:	3e01      	subs	r6, #1
 800da0a:	68a3      	ldr	r3, [r4, #8]
 800da0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800da10:	3b01      	subs	r3, #1
 800da12:	60a3      	str	r3, [r4, #8]
 800da14:	bb39      	cbnz	r1, 800da66 <_puts_r+0x9e>
 800da16:	2b00      	cmp	r3, #0
 800da18:	da38      	bge.n	800da8c <_puts_r+0xc4>
 800da1a:	4622      	mov	r2, r4
 800da1c:	210a      	movs	r1, #10
 800da1e:	4628      	mov	r0, r5
 800da20:	f000 f848 	bl	800dab4 <__swbuf_r>
 800da24:	3001      	adds	r0, #1
 800da26:	d011      	beq.n	800da4c <_puts_r+0x84>
 800da28:	250a      	movs	r5, #10
 800da2a:	e011      	b.n	800da50 <_puts_r+0x88>
 800da2c:	4b1b      	ldr	r3, [pc, #108]	; (800da9c <_puts_r+0xd4>)
 800da2e:	429c      	cmp	r4, r3
 800da30:	d101      	bne.n	800da36 <_puts_r+0x6e>
 800da32:	68ac      	ldr	r4, [r5, #8]
 800da34:	e7da      	b.n	800d9ec <_puts_r+0x24>
 800da36:	4b1a      	ldr	r3, [pc, #104]	; (800daa0 <_puts_r+0xd8>)
 800da38:	429c      	cmp	r4, r3
 800da3a:	bf08      	it	eq
 800da3c:	68ec      	ldreq	r4, [r5, #12]
 800da3e:	e7d5      	b.n	800d9ec <_puts_r+0x24>
 800da40:	4621      	mov	r1, r4
 800da42:	4628      	mov	r0, r5
 800da44:	f000 f888 	bl	800db58 <__swsetup_r>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d0dd      	beq.n	800da08 <_puts_r+0x40>
 800da4c:	f04f 35ff 	mov.w	r5, #4294967295
 800da50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da52:	07da      	lsls	r2, r3, #31
 800da54:	d405      	bmi.n	800da62 <_puts_r+0x9a>
 800da56:	89a3      	ldrh	r3, [r4, #12]
 800da58:	059b      	lsls	r3, r3, #22
 800da5a:	d402      	bmi.n	800da62 <_puts_r+0x9a>
 800da5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da5e:	f001 f921 	bl	800eca4 <__retarget_lock_release_recursive>
 800da62:	4628      	mov	r0, r5
 800da64:	bd70      	pop	{r4, r5, r6, pc}
 800da66:	2b00      	cmp	r3, #0
 800da68:	da04      	bge.n	800da74 <_puts_r+0xac>
 800da6a:	69a2      	ldr	r2, [r4, #24]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	dc06      	bgt.n	800da7e <_puts_r+0xb6>
 800da70:	290a      	cmp	r1, #10
 800da72:	d004      	beq.n	800da7e <_puts_r+0xb6>
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	1c5a      	adds	r2, r3, #1
 800da78:	6022      	str	r2, [r4, #0]
 800da7a:	7019      	strb	r1, [r3, #0]
 800da7c:	e7c5      	b.n	800da0a <_puts_r+0x42>
 800da7e:	4622      	mov	r2, r4
 800da80:	4628      	mov	r0, r5
 800da82:	f000 f817 	bl	800dab4 <__swbuf_r>
 800da86:	3001      	adds	r0, #1
 800da88:	d1bf      	bne.n	800da0a <_puts_r+0x42>
 800da8a:	e7df      	b.n	800da4c <_puts_r+0x84>
 800da8c:	6823      	ldr	r3, [r4, #0]
 800da8e:	250a      	movs	r5, #10
 800da90:	1c5a      	adds	r2, r3, #1
 800da92:	6022      	str	r2, [r4, #0]
 800da94:	701d      	strb	r5, [r3, #0]
 800da96:	e7db      	b.n	800da50 <_puts_r+0x88>
 800da98:	08013f94 	.word	0x08013f94
 800da9c:	08013fb4 	.word	0x08013fb4
 800daa0:	08013f74 	.word	0x08013f74

0800daa4 <puts>:
 800daa4:	4b02      	ldr	r3, [pc, #8]	; (800dab0 <puts+0xc>)
 800daa6:	4601      	mov	r1, r0
 800daa8:	6818      	ldr	r0, [r3, #0]
 800daaa:	f7ff bf8d 	b.w	800d9c8 <_puts_r>
 800daae:	bf00      	nop
 800dab0:	20000068 	.word	0x20000068

0800dab4 <__swbuf_r>:
 800dab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab6:	460e      	mov	r6, r1
 800dab8:	4614      	mov	r4, r2
 800daba:	4605      	mov	r5, r0
 800dabc:	b118      	cbz	r0, 800dac6 <__swbuf_r+0x12>
 800dabe:	6983      	ldr	r3, [r0, #24]
 800dac0:	b90b      	cbnz	r3, 800dac6 <__swbuf_r+0x12>
 800dac2:	f001 f84b 	bl	800eb5c <__sinit>
 800dac6:	4b21      	ldr	r3, [pc, #132]	; (800db4c <__swbuf_r+0x98>)
 800dac8:	429c      	cmp	r4, r3
 800daca:	d12b      	bne.n	800db24 <__swbuf_r+0x70>
 800dacc:	686c      	ldr	r4, [r5, #4]
 800dace:	69a3      	ldr	r3, [r4, #24]
 800dad0:	60a3      	str	r3, [r4, #8]
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	071a      	lsls	r2, r3, #28
 800dad6:	d52f      	bpl.n	800db38 <__swbuf_r+0x84>
 800dad8:	6923      	ldr	r3, [r4, #16]
 800dada:	b36b      	cbz	r3, 800db38 <__swbuf_r+0x84>
 800dadc:	6923      	ldr	r3, [r4, #16]
 800dade:	6820      	ldr	r0, [r4, #0]
 800dae0:	1ac0      	subs	r0, r0, r3
 800dae2:	6963      	ldr	r3, [r4, #20]
 800dae4:	b2f6      	uxtb	r6, r6
 800dae6:	4283      	cmp	r3, r0
 800dae8:	4637      	mov	r7, r6
 800daea:	dc04      	bgt.n	800daf6 <__swbuf_r+0x42>
 800daec:	4621      	mov	r1, r4
 800daee:	4628      	mov	r0, r5
 800daf0:	f000 ffa0 	bl	800ea34 <_fflush_r>
 800daf4:	bb30      	cbnz	r0, 800db44 <__swbuf_r+0x90>
 800daf6:	68a3      	ldr	r3, [r4, #8]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	60a3      	str	r3, [r4, #8]
 800dafc:	6823      	ldr	r3, [r4, #0]
 800dafe:	1c5a      	adds	r2, r3, #1
 800db00:	6022      	str	r2, [r4, #0]
 800db02:	701e      	strb	r6, [r3, #0]
 800db04:	6963      	ldr	r3, [r4, #20]
 800db06:	3001      	adds	r0, #1
 800db08:	4283      	cmp	r3, r0
 800db0a:	d004      	beq.n	800db16 <__swbuf_r+0x62>
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	07db      	lsls	r3, r3, #31
 800db10:	d506      	bpl.n	800db20 <__swbuf_r+0x6c>
 800db12:	2e0a      	cmp	r6, #10
 800db14:	d104      	bne.n	800db20 <__swbuf_r+0x6c>
 800db16:	4621      	mov	r1, r4
 800db18:	4628      	mov	r0, r5
 800db1a:	f000 ff8b 	bl	800ea34 <_fflush_r>
 800db1e:	b988      	cbnz	r0, 800db44 <__swbuf_r+0x90>
 800db20:	4638      	mov	r0, r7
 800db22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db24:	4b0a      	ldr	r3, [pc, #40]	; (800db50 <__swbuf_r+0x9c>)
 800db26:	429c      	cmp	r4, r3
 800db28:	d101      	bne.n	800db2e <__swbuf_r+0x7a>
 800db2a:	68ac      	ldr	r4, [r5, #8]
 800db2c:	e7cf      	b.n	800dace <__swbuf_r+0x1a>
 800db2e:	4b09      	ldr	r3, [pc, #36]	; (800db54 <__swbuf_r+0xa0>)
 800db30:	429c      	cmp	r4, r3
 800db32:	bf08      	it	eq
 800db34:	68ec      	ldreq	r4, [r5, #12]
 800db36:	e7ca      	b.n	800dace <__swbuf_r+0x1a>
 800db38:	4621      	mov	r1, r4
 800db3a:	4628      	mov	r0, r5
 800db3c:	f000 f80c 	bl	800db58 <__swsetup_r>
 800db40:	2800      	cmp	r0, #0
 800db42:	d0cb      	beq.n	800dadc <__swbuf_r+0x28>
 800db44:	f04f 37ff 	mov.w	r7, #4294967295
 800db48:	e7ea      	b.n	800db20 <__swbuf_r+0x6c>
 800db4a:	bf00      	nop
 800db4c:	08013f94 	.word	0x08013f94
 800db50:	08013fb4 	.word	0x08013fb4
 800db54:	08013f74 	.word	0x08013f74

0800db58 <__swsetup_r>:
 800db58:	4b32      	ldr	r3, [pc, #200]	; (800dc24 <__swsetup_r+0xcc>)
 800db5a:	b570      	push	{r4, r5, r6, lr}
 800db5c:	681d      	ldr	r5, [r3, #0]
 800db5e:	4606      	mov	r6, r0
 800db60:	460c      	mov	r4, r1
 800db62:	b125      	cbz	r5, 800db6e <__swsetup_r+0x16>
 800db64:	69ab      	ldr	r3, [r5, #24]
 800db66:	b913      	cbnz	r3, 800db6e <__swsetup_r+0x16>
 800db68:	4628      	mov	r0, r5
 800db6a:	f000 fff7 	bl	800eb5c <__sinit>
 800db6e:	4b2e      	ldr	r3, [pc, #184]	; (800dc28 <__swsetup_r+0xd0>)
 800db70:	429c      	cmp	r4, r3
 800db72:	d10f      	bne.n	800db94 <__swsetup_r+0x3c>
 800db74:	686c      	ldr	r4, [r5, #4]
 800db76:	89a3      	ldrh	r3, [r4, #12]
 800db78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db7c:	0719      	lsls	r1, r3, #28
 800db7e:	d42c      	bmi.n	800dbda <__swsetup_r+0x82>
 800db80:	06dd      	lsls	r5, r3, #27
 800db82:	d411      	bmi.n	800dba8 <__swsetup_r+0x50>
 800db84:	2309      	movs	r3, #9
 800db86:	6033      	str	r3, [r6, #0]
 800db88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db8c:	81a3      	strh	r3, [r4, #12]
 800db8e:	f04f 30ff 	mov.w	r0, #4294967295
 800db92:	e03e      	b.n	800dc12 <__swsetup_r+0xba>
 800db94:	4b25      	ldr	r3, [pc, #148]	; (800dc2c <__swsetup_r+0xd4>)
 800db96:	429c      	cmp	r4, r3
 800db98:	d101      	bne.n	800db9e <__swsetup_r+0x46>
 800db9a:	68ac      	ldr	r4, [r5, #8]
 800db9c:	e7eb      	b.n	800db76 <__swsetup_r+0x1e>
 800db9e:	4b24      	ldr	r3, [pc, #144]	; (800dc30 <__swsetup_r+0xd8>)
 800dba0:	429c      	cmp	r4, r3
 800dba2:	bf08      	it	eq
 800dba4:	68ec      	ldreq	r4, [r5, #12]
 800dba6:	e7e6      	b.n	800db76 <__swsetup_r+0x1e>
 800dba8:	0758      	lsls	r0, r3, #29
 800dbaa:	d512      	bpl.n	800dbd2 <__swsetup_r+0x7a>
 800dbac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbae:	b141      	cbz	r1, 800dbc2 <__swsetup_r+0x6a>
 800dbb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbb4:	4299      	cmp	r1, r3
 800dbb6:	d002      	beq.n	800dbbe <__swsetup_r+0x66>
 800dbb8:	4630      	mov	r0, r6
 800dbba:	f001 fc6f 	bl	800f49c <_free_r>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	6363      	str	r3, [r4, #52]	; 0x34
 800dbc2:	89a3      	ldrh	r3, [r4, #12]
 800dbc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbc8:	81a3      	strh	r3, [r4, #12]
 800dbca:	2300      	movs	r3, #0
 800dbcc:	6063      	str	r3, [r4, #4]
 800dbce:	6923      	ldr	r3, [r4, #16]
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	89a3      	ldrh	r3, [r4, #12]
 800dbd4:	f043 0308 	orr.w	r3, r3, #8
 800dbd8:	81a3      	strh	r3, [r4, #12]
 800dbda:	6923      	ldr	r3, [r4, #16]
 800dbdc:	b94b      	cbnz	r3, 800dbf2 <__swsetup_r+0x9a>
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbe8:	d003      	beq.n	800dbf2 <__swsetup_r+0x9a>
 800dbea:	4621      	mov	r1, r4
 800dbec:	4630      	mov	r0, r6
 800dbee:	f001 f87f 	bl	800ecf0 <__smakebuf_r>
 800dbf2:	89a0      	ldrh	r0, [r4, #12]
 800dbf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbf8:	f010 0301 	ands.w	r3, r0, #1
 800dbfc:	d00a      	beq.n	800dc14 <__swsetup_r+0xbc>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	60a3      	str	r3, [r4, #8]
 800dc02:	6963      	ldr	r3, [r4, #20]
 800dc04:	425b      	negs	r3, r3
 800dc06:	61a3      	str	r3, [r4, #24]
 800dc08:	6923      	ldr	r3, [r4, #16]
 800dc0a:	b943      	cbnz	r3, 800dc1e <__swsetup_r+0xc6>
 800dc0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc10:	d1ba      	bne.n	800db88 <__swsetup_r+0x30>
 800dc12:	bd70      	pop	{r4, r5, r6, pc}
 800dc14:	0781      	lsls	r1, r0, #30
 800dc16:	bf58      	it	pl
 800dc18:	6963      	ldrpl	r3, [r4, #20]
 800dc1a:	60a3      	str	r3, [r4, #8]
 800dc1c:	e7f4      	b.n	800dc08 <__swsetup_r+0xb0>
 800dc1e:	2000      	movs	r0, #0
 800dc20:	e7f7      	b.n	800dc12 <__swsetup_r+0xba>
 800dc22:	bf00      	nop
 800dc24:	20000068 	.word	0x20000068
 800dc28:	08013f94 	.word	0x08013f94
 800dc2c:	08013fb4 	.word	0x08013fb4
 800dc30:	08013f74 	.word	0x08013f74

0800dc34 <quorem>:
 800dc34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc38:	6903      	ldr	r3, [r0, #16]
 800dc3a:	690c      	ldr	r4, [r1, #16]
 800dc3c:	42a3      	cmp	r3, r4
 800dc3e:	4607      	mov	r7, r0
 800dc40:	f2c0 8081 	blt.w	800dd46 <quorem+0x112>
 800dc44:	3c01      	subs	r4, #1
 800dc46:	f101 0814 	add.w	r8, r1, #20
 800dc4a:	f100 0514 	add.w	r5, r0, #20
 800dc4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc68:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc6c:	d331      	bcc.n	800dcd2 <quorem+0x9e>
 800dc6e:	f04f 0e00 	mov.w	lr, #0
 800dc72:	4640      	mov	r0, r8
 800dc74:	46ac      	mov	ip, r5
 800dc76:	46f2      	mov	sl, lr
 800dc78:	f850 2b04 	ldr.w	r2, [r0], #4
 800dc7c:	b293      	uxth	r3, r2
 800dc7e:	fb06 e303 	mla	r3, r6, r3, lr
 800dc82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	ebaa 0303 	sub.w	r3, sl, r3
 800dc8c:	0c12      	lsrs	r2, r2, #16
 800dc8e:	f8dc a000 	ldr.w	sl, [ip]
 800dc92:	fb06 e202 	mla	r2, r6, r2, lr
 800dc96:	fa13 f38a 	uxtah	r3, r3, sl
 800dc9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc9e:	fa1f fa82 	uxth.w	sl, r2
 800dca2:	f8dc 2000 	ldr.w	r2, [ip]
 800dca6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800dcaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcb4:	4581      	cmp	r9, r0
 800dcb6:	f84c 3b04 	str.w	r3, [ip], #4
 800dcba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dcbe:	d2db      	bcs.n	800dc78 <quorem+0x44>
 800dcc0:	f855 300b 	ldr.w	r3, [r5, fp]
 800dcc4:	b92b      	cbnz	r3, 800dcd2 <quorem+0x9e>
 800dcc6:	9b01      	ldr	r3, [sp, #4]
 800dcc8:	3b04      	subs	r3, #4
 800dcca:	429d      	cmp	r5, r3
 800dccc:	461a      	mov	r2, r3
 800dcce:	d32e      	bcc.n	800dd2e <quorem+0xfa>
 800dcd0:	613c      	str	r4, [r7, #16]
 800dcd2:	4638      	mov	r0, r7
 800dcd4:	f001 fad2 	bl	800f27c <__mcmp>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	db24      	blt.n	800dd26 <quorem+0xf2>
 800dcdc:	3601      	adds	r6, #1
 800dcde:	4628      	mov	r0, r5
 800dce0:	f04f 0c00 	mov.w	ip, #0
 800dce4:	f858 2b04 	ldr.w	r2, [r8], #4
 800dce8:	f8d0 e000 	ldr.w	lr, [r0]
 800dcec:	b293      	uxth	r3, r2
 800dcee:	ebac 0303 	sub.w	r3, ip, r3
 800dcf2:	0c12      	lsrs	r2, r2, #16
 800dcf4:	fa13 f38e 	uxtah	r3, r3, lr
 800dcf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dcfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd06:	45c1      	cmp	r9, r8
 800dd08:	f840 3b04 	str.w	r3, [r0], #4
 800dd0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd10:	d2e8      	bcs.n	800dce4 <quorem+0xb0>
 800dd12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd1a:	b922      	cbnz	r2, 800dd26 <quorem+0xf2>
 800dd1c:	3b04      	subs	r3, #4
 800dd1e:	429d      	cmp	r5, r3
 800dd20:	461a      	mov	r2, r3
 800dd22:	d30a      	bcc.n	800dd3a <quorem+0x106>
 800dd24:	613c      	str	r4, [r7, #16]
 800dd26:	4630      	mov	r0, r6
 800dd28:	b003      	add	sp, #12
 800dd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd2e:	6812      	ldr	r2, [r2, #0]
 800dd30:	3b04      	subs	r3, #4
 800dd32:	2a00      	cmp	r2, #0
 800dd34:	d1cc      	bne.n	800dcd0 <quorem+0x9c>
 800dd36:	3c01      	subs	r4, #1
 800dd38:	e7c7      	b.n	800dcca <quorem+0x96>
 800dd3a:	6812      	ldr	r2, [r2, #0]
 800dd3c:	3b04      	subs	r3, #4
 800dd3e:	2a00      	cmp	r2, #0
 800dd40:	d1f0      	bne.n	800dd24 <quorem+0xf0>
 800dd42:	3c01      	subs	r4, #1
 800dd44:	e7eb      	b.n	800dd1e <quorem+0xea>
 800dd46:	2000      	movs	r0, #0
 800dd48:	e7ee      	b.n	800dd28 <quorem+0xf4>
 800dd4a:	0000      	movs	r0, r0
 800dd4c:	0000      	movs	r0, r0
	...

0800dd50 <_dtoa_r>:
 800dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd54:	ed2d 8b02 	vpush	{d8}
 800dd58:	ec57 6b10 	vmov	r6, r7, d0
 800dd5c:	b095      	sub	sp, #84	; 0x54
 800dd5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dd64:	9105      	str	r1, [sp, #20]
 800dd66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	9209      	str	r2, [sp, #36]	; 0x24
 800dd6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd70:	b975      	cbnz	r5, 800dd90 <_dtoa_r+0x40>
 800dd72:	2010      	movs	r0, #16
 800dd74:	f000 fffc 	bl	800ed70 <malloc>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	6260      	str	r0, [r4, #36]	; 0x24
 800dd7c:	b920      	cbnz	r0, 800dd88 <_dtoa_r+0x38>
 800dd7e:	4bb2      	ldr	r3, [pc, #712]	; (800e048 <_dtoa_r+0x2f8>)
 800dd80:	21ea      	movs	r1, #234	; 0xea
 800dd82:	48b2      	ldr	r0, [pc, #712]	; (800e04c <_dtoa_r+0x2fc>)
 800dd84:	f001 fdf4 	bl	800f970 <__assert_func>
 800dd88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd8c:	6005      	str	r5, [r0, #0]
 800dd8e:	60c5      	str	r5, [r0, #12]
 800dd90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd92:	6819      	ldr	r1, [r3, #0]
 800dd94:	b151      	cbz	r1, 800ddac <_dtoa_r+0x5c>
 800dd96:	685a      	ldr	r2, [r3, #4]
 800dd98:	604a      	str	r2, [r1, #4]
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	4093      	lsls	r3, r2
 800dd9e:	608b      	str	r3, [r1, #8]
 800dda0:	4620      	mov	r0, r4
 800dda2:	f001 f82d 	bl	800ee00 <_Bfree>
 800dda6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dda8:	2200      	movs	r2, #0
 800ddaa:	601a      	str	r2, [r3, #0]
 800ddac:	1e3b      	subs	r3, r7, #0
 800ddae:	bfb9      	ittee	lt
 800ddb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ddb4:	9303      	strlt	r3, [sp, #12]
 800ddb6:	2300      	movge	r3, #0
 800ddb8:	f8c8 3000 	strge.w	r3, [r8]
 800ddbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ddc0:	4ba3      	ldr	r3, [pc, #652]	; (800e050 <_dtoa_r+0x300>)
 800ddc2:	bfbc      	itt	lt
 800ddc4:	2201      	movlt	r2, #1
 800ddc6:	f8c8 2000 	strlt.w	r2, [r8]
 800ddca:	ea33 0309 	bics.w	r3, r3, r9
 800ddce:	d11b      	bne.n	800de08 <_dtoa_r+0xb8>
 800ddd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ddd2:	f242 730f 	movw	r3, #9999	; 0x270f
 800ddd6:	6013      	str	r3, [r2, #0]
 800ddd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dddc:	4333      	orrs	r3, r6
 800ddde:	f000 857a 	beq.w	800e8d6 <_dtoa_r+0xb86>
 800dde2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dde4:	b963      	cbnz	r3, 800de00 <_dtoa_r+0xb0>
 800dde6:	4b9b      	ldr	r3, [pc, #620]	; (800e054 <_dtoa_r+0x304>)
 800dde8:	e024      	b.n	800de34 <_dtoa_r+0xe4>
 800ddea:	4b9b      	ldr	r3, [pc, #620]	; (800e058 <_dtoa_r+0x308>)
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	3308      	adds	r3, #8
 800ddf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ddf2:	6013      	str	r3, [r2, #0]
 800ddf4:	9800      	ldr	r0, [sp, #0]
 800ddf6:	b015      	add	sp, #84	; 0x54
 800ddf8:	ecbd 8b02 	vpop	{d8}
 800ddfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de00:	4b94      	ldr	r3, [pc, #592]	; (800e054 <_dtoa_r+0x304>)
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	3303      	adds	r3, #3
 800de06:	e7f3      	b.n	800ddf0 <_dtoa_r+0xa0>
 800de08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de0c:	2200      	movs	r2, #0
 800de0e:	ec51 0b17 	vmov	r0, r1, d7
 800de12:	2300      	movs	r3, #0
 800de14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800de18:	f7f2 fe66 	bl	8000ae8 <__aeabi_dcmpeq>
 800de1c:	4680      	mov	r8, r0
 800de1e:	b158      	cbz	r0, 800de38 <_dtoa_r+0xe8>
 800de20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de22:	2301      	movs	r3, #1
 800de24:	6013      	str	r3, [r2, #0]
 800de26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de28:	2b00      	cmp	r3, #0
 800de2a:	f000 8551 	beq.w	800e8d0 <_dtoa_r+0xb80>
 800de2e:	488b      	ldr	r0, [pc, #556]	; (800e05c <_dtoa_r+0x30c>)
 800de30:	6018      	str	r0, [r3, #0]
 800de32:	1e43      	subs	r3, r0, #1
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	e7dd      	b.n	800ddf4 <_dtoa_r+0xa4>
 800de38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800de3c:	aa12      	add	r2, sp, #72	; 0x48
 800de3e:	a913      	add	r1, sp, #76	; 0x4c
 800de40:	4620      	mov	r0, r4
 800de42:	f001 fabf 	bl	800f3c4 <__d2b>
 800de46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800de4a:	4683      	mov	fp, r0
 800de4c:	2d00      	cmp	r5, #0
 800de4e:	d07c      	beq.n	800df4a <_dtoa_r+0x1fa>
 800de50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800de56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800de5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800de62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800de66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800de6a:	4b7d      	ldr	r3, [pc, #500]	; (800e060 <_dtoa_r+0x310>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	4630      	mov	r0, r6
 800de70:	4639      	mov	r1, r7
 800de72:	f7f2 fa19 	bl	80002a8 <__aeabi_dsub>
 800de76:	a36e      	add	r3, pc, #440	; (adr r3, 800e030 <_dtoa_r+0x2e0>)
 800de78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7c:	f7f2 fbcc 	bl	8000618 <__aeabi_dmul>
 800de80:	a36d      	add	r3, pc, #436	; (adr r3, 800e038 <_dtoa_r+0x2e8>)
 800de82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de86:	f7f2 fa11 	bl	80002ac <__adddf3>
 800de8a:	4606      	mov	r6, r0
 800de8c:	4628      	mov	r0, r5
 800de8e:	460f      	mov	r7, r1
 800de90:	f7f2 fb58 	bl	8000544 <__aeabi_i2d>
 800de94:	a36a      	add	r3, pc, #424	; (adr r3, 800e040 <_dtoa_r+0x2f0>)
 800de96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9a:	f7f2 fbbd 	bl	8000618 <__aeabi_dmul>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	4630      	mov	r0, r6
 800dea4:	4639      	mov	r1, r7
 800dea6:	f7f2 fa01 	bl	80002ac <__adddf3>
 800deaa:	4606      	mov	r6, r0
 800deac:	460f      	mov	r7, r1
 800deae:	f7f2 fe63 	bl	8000b78 <__aeabi_d2iz>
 800deb2:	2200      	movs	r2, #0
 800deb4:	4682      	mov	sl, r0
 800deb6:	2300      	movs	r3, #0
 800deb8:	4630      	mov	r0, r6
 800deba:	4639      	mov	r1, r7
 800debc:	f7f2 fe1e 	bl	8000afc <__aeabi_dcmplt>
 800dec0:	b148      	cbz	r0, 800ded6 <_dtoa_r+0x186>
 800dec2:	4650      	mov	r0, sl
 800dec4:	f7f2 fb3e 	bl	8000544 <__aeabi_i2d>
 800dec8:	4632      	mov	r2, r6
 800deca:	463b      	mov	r3, r7
 800decc:	f7f2 fe0c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ded0:	b908      	cbnz	r0, 800ded6 <_dtoa_r+0x186>
 800ded2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ded6:	f1ba 0f16 	cmp.w	sl, #22
 800deda:	d854      	bhi.n	800df86 <_dtoa_r+0x236>
 800dedc:	4b61      	ldr	r3, [pc, #388]	; (800e064 <_dtoa_r+0x314>)
 800dede:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800deea:	f7f2 fe07 	bl	8000afc <__aeabi_dcmplt>
 800deee:	2800      	cmp	r0, #0
 800def0:	d04b      	beq.n	800df8a <_dtoa_r+0x23a>
 800def2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800def6:	2300      	movs	r3, #0
 800def8:	930e      	str	r3, [sp, #56]	; 0x38
 800defa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800defc:	1b5d      	subs	r5, r3, r5
 800defe:	1e6b      	subs	r3, r5, #1
 800df00:	9304      	str	r3, [sp, #16]
 800df02:	bf43      	ittte	mi
 800df04:	2300      	movmi	r3, #0
 800df06:	f1c5 0801 	rsbmi	r8, r5, #1
 800df0a:	9304      	strmi	r3, [sp, #16]
 800df0c:	f04f 0800 	movpl.w	r8, #0
 800df10:	f1ba 0f00 	cmp.w	sl, #0
 800df14:	db3b      	blt.n	800df8e <_dtoa_r+0x23e>
 800df16:	9b04      	ldr	r3, [sp, #16]
 800df18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800df1c:	4453      	add	r3, sl
 800df1e:	9304      	str	r3, [sp, #16]
 800df20:	2300      	movs	r3, #0
 800df22:	9306      	str	r3, [sp, #24]
 800df24:	9b05      	ldr	r3, [sp, #20]
 800df26:	2b09      	cmp	r3, #9
 800df28:	d869      	bhi.n	800dffe <_dtoa_r+0x2ae>
 800df2a:	2b05      	cmp	r3, #5
 800df2c:	bfc4      	itt	gt
 800df2e:	3b04      	subgt	r3, #4
 800df30:	9305      	strgt	r3, [sp, #20]
 800df32:	9b05      	ldr	r3, [sp, #20]
 800df34:	f1a3 0302 	sub.w	r3, r3, #2
 800df38:	bfcc      	ite	gt
 800df3a:	2500      	movgt	r5, #0
 800df3c:	2501      	movle	r5, #1
 800df3e:	2b03      	cmp	r3, #3
 800df40:	d869      	bhi.n	800e016 <_dtoa_r+0x2c6>
 800df42:	e8df f003 	tbb	[pc, r3]
 800df46:	4e2c      	.short	0x4e2c
 800df48:	5a4c      	.short	0x5a4c
 800df4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800df4e:	441d      	add	r5, r3
 800df50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800df54:	2b20      	cmp	r3, #32
 800df56:	bfc1      	itttt	gt
 800df58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800df5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800df60:	fa09 f303 	lslgt.w	r3, r9, r3
 800df64:	fa26 f000 	lsrgt.w	r0, r6, r0
 800df68:	bfda      	itte	le
 800df6a:	f1c3 0320 	rsble	r3, r3, #32
 800df6e:	fa06 f003 	lslle.w	r0, r6, r3
 800df72:	4318      	orrgt	r0, r3
 800df74:	f7f2 fad6 	bl	8000524 <__aeabi_ui2d>
 800df78:	2301      	movs	r3, #1
 800df7a:	4606      	mov	r6, r0
 800df7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800df80:	3d01      	subs	r5, #1
 800df82:	9310      	str	r3, [sp, #64]	; 0x40
 800df84:	e771      	b.n	800de6a <_dtoa_r+0x11a>
 800df86:	2301      	movs	r3, #1
 800df88:	e7b6      	b.n	800def8 <_dtoa_r+0x1a8>
 800df8a:	900e      	str	r0, [sp, #56]	; 0x38
 800df8c:	e7b5      	b.n	800defa <_dtoa_r+0x1aa>
 800df8e:	f1ca 0300 	rsb	r3, sl, #0
 800df92:	9306      	str	r3, [sp, #24]
 800df94:	2300      	movs	r3, #0
 800df96:	eba8 080a 	sub.w	r8, r8, sl
 800df9a:	930d      	str	r3, [sp, #52]	; 0x34
 800df9c:	e7c2      	b.n	800df24 <_dtoa_r+0x1d4>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	9308      	str	r3, [sp, #32]
 800dfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	dc39      	bgt.n	800e01c <_dtoa_r+0x2cc>
 800dfa8:	f04f 0901 	mov.w	r9, #1
 800dfac:	f8cd 9004 	str.w	r9, [sp, #4]
 800dfb0:	464b      	mov	r3, r9
 800dfb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dfb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dfb8:	2200      	movs	r2, #0
 800dfba:	6042      	str	r2, [r0, #4]
 800dfbc:	2204      	movs	r2, #4
 800dfbe:	f102 0614 	add.w	r6, r2, #20
 800dfc2:	429e      	cmp	r6, r3
 800dfc4:	6841      	ldr	r1, [r0, #4]
 800dfc6:	d92f      	bls.n	800e028 <_dtoa_r+0x2d8>
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f000 fed9 	bl	800ed80 <_Balloc>
 800dfce:	9000      	str	r0, [sp, #0]
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d14b      	bne.n	800e06c <_dtoa_r+0x31c>
 800dfd4:	4b24      	ldr	r3, [pc, #144]	; (800e068 <_dtoa_r+0x318>)
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dfdc:	e6d1      	b.n	800dd82 <_dtoa_r+0x32>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e7de      	b.n	800dfa0 <_dtoa_r+0x250>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	9308      	str	r3, [sp, #32]
 800dfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe8:	eb0a 0903 	add.w	r9, sl, r3
 800dfec:	f109 0301 	add.w	r3, r9, #1
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	9301      	str	r3, [sp, #4]
 800dff4:	bfb8      	it	lt
 800dff6:	2301      	movlt	r3, #1
 800dff8:	e7dd      	b.n	800dfb6 <_dtoa_r+0x266>
 800dffa:	2301      	movs	r3, #1
 800dffc:	e7f2      	b.n	800dfe4 <_dtoa_r+0x294>
 800dffe:	2501      	movs	r5, #1
 800e000:	2300      	movs	r3, #0
 800e002:	9305      	str	r3, [sp, #20]
 800e004:	9508      	str	r5, [sp, #32]
 800e006:	f04f 39ff 	mov.w	r9, #4294967295
 800e00a:	2200      	movs	r2, #0
 800e00c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e010:	2312      	movs	r3, #18
 800e012:	9209      	str	r2, [sp, #36]	; 0x24
 800e014:	e7cf      	b.n	800dfb6 <_dtoa_r+0x266>
 800e016:	2301      	movs	r3, #1
 800e018:	9308      	str	r3, [sp, #32]
 800e01a:	e7f4      	b.n	800e006 <_dtoa_r+0x2b6>
 800e01c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e020:	f8cd 9004 	str.w	r9, [sp, #4]
 800e024:	464b      	mov	r3, r9
 800e026:	e7c6      	b.n	800dfb6 <_dtoa_r+0x266>
 800e028:	3101      	adds	r1, #1
 800e02a:	6041      	str	r1, [r0, #4]
 800e02c:	0052      	lsls	r2, r2, #1
 800e02e:	e7c6      	b.n	800dfbe <_dtoa_r+0x26e>
 800e030:	636f4361 	.word	0x636f4361
 800e034:	3fd287a7 	.word	0x3fd287a7
 800e038:	8b60c8b3 	.word	0x8b60c8b3
 800e03c:	3fc68a28 	.word	0x3fc68a28
 800e040:	509f79fb 	.word	0x509f79fb
 800e044:	3fd34413 	.word	0x3fd34413
 800e048:	08013eed 	.word	0x08013eed
 800e04c:	08013f04 	.word	0x08013f04
 800e050:	7ff00000 	.word	0x7ff00000
 800e054:	08013ee9 	.word	0x08013ee9
 800e058:	08013ee0 	.word	0x08013ee0
 800e05c:	08013ebd 	.word	0x08013ebd
 800e060:	3ff80000 	.word	0x3ff80000
 800e064:	08014060 	.word	0x08014060
 800e068:	08013f63 	.word	0x08013f63
 800e06c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e06e:	9a00      	ldr	r2, [sp, #0]
 800e070:	601a      	str	r2, [r3, #0]
 800e072:	9b01      	ldr	r3, [sp, #4]
 800e074:	2b0e      	cmp	r3, #14
 800e076:	f200 80ad 	bhi.w	800e1d4 <_dtoa_r+0x484>
 800e07a:	2d00      	cmp	r5, #0
 800e07c:	f000 80aa 	beq.w	800e1d4 <_dtoa_r+0x484>
 800e080:	f1ba 0f00 	cmp.w	sl, #0
 800e084:	dd36      	ble.n	800e0f4 <_dtoa_r+0x3a4>
 800e086:	4ac3      	ldr	r2, [pc, #780]	; (800e394 <_dtoa_r+0x644>)
 800e088:	f00a 030f 	and.w	r3, sl, #15
 800e08c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e090:	ed93 7b00 	vldr	d7, [r3]
 800e094:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e098:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e09c:	eeb0 8a47 	vmov.f32	s16, s14
 800e0a0:	eef0 8a67 	vmov.f32	s17, s15
 800e0a4:	d016      	beq.n	800e0d4 <_dtoa_r+0x384>
 800e0a6:	4bbc      	ldr	r3, [pc, #752]	; (800e398 <_dtoa_r+0x648>)
 800e0a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e0ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0b0:	f7f2 fbdc 	bl	800086c <__aeabi_ddiv>
 800e0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0b8:	f007 070f 	and.w	r7, r7, #15
 800e0bc:	2503      	movs	r5, #3
 800e0be:	4eb6      	ldr	r6, [pc, #728]	; (800e398 <_dtoa_r+0x648>)
 800e0c0:	b957      	cbnz	r7, 800e0d8 <_dtoa_r+0x388>
 800e0c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0c6:	ec53 2b18 	vmov	r2, r3, d8
 800e0ca:	f7f2 fbcf 	bl	800086c <__aeabi_ddiv>
 800e0ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0d2:	e029      	b.n	800e128 <_dtoa_r+0x3d8>
 800e0d4:	2502      	movs	r5, #2
 800e0d6:	e7f2      	b.n	800e0be <_dtoa_r+0x36e>
 800e0d8:	07f9      	lsls	r1, r7, #31
 800e0da:	d508      	bpl.n	800e0ee <_dtoa_r+0x39e>
 800e0dc:	ec51 0b18 	vmov	r0, r1, d8
 800e0e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e0e4:	f7f2 fa98 	bl	8000618 <__aeabi_dmul>
 800e0e8:	ec41 0b18 	vmov	d8, r0, r1
 800e0ec:	3501      	adds	r5, #1
 800e0ee:	107f      	asrs	r7, r7, #1
 800e0f0:	3608      	adds	r6, #8
 800e0f2:	e7e5      	b.n	800e0c0 <_dtoa_r+0x370>
 800e0f4:	f000 80a6 	beq.w	800e244 <_dtoa_r+0x4f4>
 800e0f8:	f1ca 0600 	rsb	r6, sl, #0
 800e0fc:	4ba5      	ldr	r3, [pc, #660]	; (800e394 <_dtoa_r+0x644>)
 800e0fe:	4fa6      	ldr	r7, [pc, #664]	; (800e398 <_dtoa_r+0x648>)
 800e100:	f006 020f 	and.w	r2, r6, #15
 800e104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e110:	f7f2 fa82 	bl	8000618 <__aeabi_dmul>
 800e114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e118:	1136      	asrs	r6, r6, #4
 800e11a:	2300      	movs	r3, #0
 800e11c:	2502      	movs	r5, #2
 800e11e:	2e00      	cmp	r6, #0
 800e120:	f040 8085 	bne.w	800e22e <_dtoa_r+0x4de>
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1d2      	bne.n	800e0ce <_dtoa_r+0x37e>
 800e128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f000 808c 	beq.w	800e248 <_dtoa_r+0x4f8>
 800e130:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e134:	4b99      	ldr	r3, [pc, #612]	; (800e39c <_dtoa_r+0x64c>)
 800e136:	2200      	movs	r2, #0
 800e138:	4630      	mov	r0, r6
 800e13a:	4639      	mov	r1, r7
 800e13c:	f7f2 fcde 	bl	8000afc <__aeabi_dcmplt>
 800e140:	2800      	cmp	r0, #0
 800e142:	f000 8081 	beq.w	800e248 <_dtoa_r+0x4f8>
 800e146:	9b01      	ldr	r3, [sp, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d07d      	beq.n	800e248 <_dtoa_r+0x4f8>
 800e14c:	f1b9 0f00 	cmp.w	r9, #0
 800e150:	dd3c      	ble.n	800e1cc <_dtoa_r+0x47c>
 800e152:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e156:	9307      	str	r3, [sp, #28]
 800e158:	2200      	movs	r2, #0
 800e15a:	4b91      	ldr	r3, [pc, #580]	; (800e3a0 <_dtoa_r+0x650>)
 800e15c:	4630      	mov	r0, r6
 800e15e:	4639      	mov	r1, r7
 800e160:	f7f2 fa5a 	bl	8000618 <__aeabi_dmul>
 800e164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e168:	3501      	adds	r5, #1
 800e16a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e16e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e172:	4628      	mov	r0, r5
 800e174:	f7f2 f9e6 	bl	8000544 <__aeabi_i2d>
 800e178:	4632      	mov	r2, r6
 800e17a:	463b      	mov	r3, r7
 800e17c:	f7f2 fa4c 	bl	8000618 <__aeabi_dmul>
 800e180:	4b88      	ldr	r3, [pc, #544]	; (800e3a4 <_dtoa_r+0x654>)
 800e182:	2200      	movs	r2, #0
 800e184:	f7f2 f892 	bl	80002ac <__adddf3>
 800e188:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e18c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e190:	9303      	str	r3, [sp, #12]
 800e192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e194:	2b00      	cmp	r3, #0
 800e196:	d15c      	bne.n	800e252 <_dtoa_r+0x502>
 800e198:	4b83      	ldr	r3, [pc, #524]	; (800e3a8 <_dtoa_r+0x658>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	4630      	mov	r0, r6
 800e19e:	4639      	mov	r1, r7
 800e1a0:	f7f2 f882 	bl	80002a8 <__aeabi_dsub>
 800e1a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1a8:	4606      	mov	r6, r0
 800e1aa:	460f      	mov	r7, r1
 800e1ac:	f7f2 fcc4 	bl	8000b38 <__aeabi_dcmpgt>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	f040 8296 	bne.w	800e6e2 <_dtoa_r+0x992>
 800e1b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1c0:	4639      	mov	r1, r7
 800e1c2:	f7f2 fc9b 	bl	8000afc <__aeabi_dcmplt>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	f040 8288 	bne.w	800e6dc <_dtoa_r+0x98c>
 800e1cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e1d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e1d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	f2c0 8158 	blt.w	800e48c <_dtoa_r+0x73c>
 800e1dc:	f1ba 0f0e 	cmp.w	sl, #14
 800e1e0:	f300 8154 	bgt.w	800e48c <_dtoa_r+0x73c>
 800e1e4:	4b6b      	ldr	r3, [pc, #428]	; (800e394 <_dtoa_r+0x644>)
 800e1e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e1ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f280 80e3 	bge.w	800e3bc <_dtoa_r+0x66c>
 800e1f6:	9b01      	ldr	r3, [sp, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f300 80df 	bgt.w	800e3bc <_dtoa_r+0x66c>
 800e1fe:	f040 826d 	bne.w	800e6dc <_dtoa_r+0x98c>
 800e202:	4b69      	ldr	r3, [pc, #420]	; (800e3a8 <_dtoa_r+0x658>)
 800e204:	2200      	movs	r2, #0
 800e206:	4640      	mov	r0, r8
 800e208:	4649      	mov	r1, r9
 800e20a:	f7f2 fa05 	bl	8000618 <__aeabi_dmul>
 800e20e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e212:	f7f2 fc87 	bl	8000b24 <__aeabi_dcmpge>
 800e216:	9e01      	ldr	r6, [sp, #4]
 800e218:	4637      	mov	r7, r6
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f040 8243 	bne.w	800e6a6 <_dtoa_r+0x956>
 800e220:	9d00      	ldr	r5, [sp, #0]
 800e222:	2331      	movs	r3, #49	; 0x31
 800e224:	f805 3b01 	strb.w	r3, [r5], #1
 800e228:	f10a 0a01 	add.w	sl, sl, #1
 800e22c:	e23f      	b.n	800e6ae <_dtoa_r+0x95e>
 800e22e:	07f2      	lsls	r2, r6, #31
 800e230:	d505      	bpl.n	800e23e <_dtoa_r+0x4ee>
 800e232:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e236:	f7f2 f9ef 	bl	8000618 <__aeabi_dmul>
 800e23a:	3501      	adds	r5, #1
 800e23c:	2301      	movs	r3, #1
 800e23e:	1076      	asrs	r6, r6, #1
 800e240:	3708      	adds	r7, #8
 800e242:	e76c      	b.n	800e11e <_dtoa_r+0x3ce>
 800e244:	2502      	movs	r5, #2
 800e246:	e76f      	b.n	800e128 <_dtoa_r+0x3d8>
 800e248:	9b01      	ldr	r3, [sp, #4]
 800e24a:	f8cd a01c 	str.w	sl, [sp, #28]
 800e24e:	930c      	str	r3, [sp, #48]	; 0x30
 800e250:	e78d      	b.n	800e16e <_dtoa_r+0x41e>
 800e252:	9900      	ldr	r1, [sp, #0]
 800e254:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e258:	4b4e      	ldr	r3, [pc, #312]	; (800e394 <_dtoa_r+0x644>)
 800e25a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e25e:	4401      	add	r1, r0
 800e260:	9102      	str	r1, [sp, #8]
 800e262:	9908      	ldr	r1, [sp, #32]
 800e264:	eeb0 8a47 	vmov.f32	s16, s14
 800e268:	eef0 8a67 	vmov.f32	s17, s15
 800e26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e270:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e274:	2900      	cmp	r1, #0
 800e276:	d045      	beq.n	800e304 <_dtoa_r+0x5b4>
 800e278:	494c      	ldr	r1, [pc, #304]	; (800e3ac <_dtoa_r+0x65c>)
 800e27a:	2000      	movs	r0, #0
 800e27c:	f7f2 faf6 	bl	800086c <__aeabi_ddiv>
 800e280:	ec53 2b18 	vmov	r2, r3, d8
 800e284:	f7f2 f810 	bl	80002a8 <__aeabi_dsub>
 800e288:	9d00      	ldr	r5, [sp, #0]
 800e28a:	ec41 0b18 	vmov	d8, r0, r1
 800e28e:	4639      	mov	r1, r7
 800e290:	4630      	mov	r0, r6
 800e292:	f7f2 fc71 	bl	8000b78 <__aeabi_d2iz>
 800e296:	900c      	str	r0, [sp, #48]	; 0x30
 800e298:	f7f2 f954 	bl	8000544 <__aeabi_i2d>
 800e29c:	4602      	mov	r2, r0
 800e29e:	460b      	mov	r3, r1
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	f7f2 f800 	bl	80002a8 <__aeabi_dsub>
 800e2a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2aa:	3330      	adds	r3, #48	; 0x30
 800e2ac:	f805 3b01 	strb.w	r3, [r5], #1
 800e2b0:	ec53 2b18 	vmov	r2, r3, d8
 800e2b4:	4606      	mov	r6, r0
 800e2b6:	460f      	mov	r7, r1
 800e2b8:	f7f2 fc20 	bl	8000afc <__aeabi_dcmplt>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d165      	bne.n	800e38c <_dtoa_r+0x63c>
 800e2c0:	4632      	mov	r2, r6
 800e2c2:	463b      	mov	r3, r7
 800e2c4:	4935      	ldr	r1, [pc, #212]	; (800e39c <_dtoa_r+0x64c>)
 800e2c6:	2000      	movs	r0, #0
 800e2c8:	f7f1 ffee 	bl	80002a8 <__aeabi_dsub>
 800e2cc:	ec53 2b18 	vmov	r2, r3, d8
 800e2d0:	f7f2 fc14 	bl	8000afc <__aeabi_dcmplt>
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	f040 80b9 	bne.w	800e44c <_dtoa_r+0x6fc>
 800e2da:	9b02      	ldr	r3, [sp, #8]
 800e2dc:	429d      	cmp	r5, r3
 800e2de:	f43f af75 	beq.w	800e1cc <_dtoa_r+0x47c>
 800e2e2:	4b2f      	ldr	r3, [pc, #188]	; (800e3a0 <_dtoa_r+0x650>)
 800e2e4:	ec51 0b18 	vmov	r0, r1, d8
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f7f2 f995 	bl	8000618 <__aeabi_dmul>
 800e2ee:	4b2c      	ldr	r3, [pc, #176]	; (800e3a0 <_dtoa_r+0x650>)
 800e2f0:	ec41 0b18 	vmov	d8, r0, r1
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	4639      	mov	r1, r7
 800e2fa:	f7f2 f98d 	bl	8000618 <__aeabi_dmul>
 800e2fe:	4606      	mov	r6, r0
 800e300:	460f      	mov	r7, r1
 800e302:	e7c4      	b.n	800e28e <_dtoa_r+0x53e>
 800e304:	ec51 0b17 	vmov	r0, r1, d7
 800e308:	f7f2 f986 	bl	8000618 <__aeabi_dmul>
 800e30c:	9b02      	ldr	r3, [sp, #8]
 800e30e:	9d00      	ldr	r5, [sp, #0]
 800e310:	930c      	str	r3, [sp, #48]	; 0x30
 800e312:	ec41 0b18 	vmov	d8, r0, r1
 800e316:	4639      	mov	r1, r7
 800e318:	4630      	mov	r0, r6
 800e31a:	f7f2 fc2d 	bl	8000b78 <__aeabi_d2iz>
 800e31e:	9011      	str	r0, [sp, #68]	; 0x44
 800e320:	f7f2 f910 	bl	8000544 <__aeabi_i2d>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	4630      	mov	r0, r6
 800e32a:	4639      	mov	r1, r7
 800e32c:	f7f1 ffbc 	bl	80002a8 <__aeabi_dsub>
 800e330:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e332:	3330      	adds	r3, #48	; 0x30
 800e334:	f805 3b01 	strb.w	r3, [r5], #1
 800e338:	9b02      	ldr	r3, [sp, #8]
 800e33a:	429d      	cmp	r5, r3
 800e33c:	4606      	mov	r6, r0
 800e33e:	460f      	mov	r7, r1
 800e340:	f04f 0200 	mov.w	r2, #0
 800e344:	d134      	bne.n	800e3b0 <_dtoa_r+0x660>
 800e346:	4b19      	ldr	r3, [pc, #100]	; (800e3ac <_dtoa_r+0x65c>)
 800e348:	ec51 0b18 	vmov	r0, r1, d8
 800e34c:	f7f1 ffae 	bl	80002ac <__adddf3>
 800e350:	4602      	mov	r2, r0
 800e352:	460b      	mov	r3, r1
 800e354:	4630      	mov	r0, r6
 800e356:	4639      	mov	r1, r7
 800e358:	f7f2 fbee 	bl	8000b38 <__aeabi_dcmpgt>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d175      	bne.n	800e44c <_dtoa_r+0x6fc>
 800e360:	ec53 2b18 	vmov	r2, r3, d8
 800e364:	4911      	ldr	r1, [pc, #68]	; (800e3ac <_dtoa_r+0x65c>)
 800e366:	2000      	movs	r0, #0
 800e368:	f7f1 ff9e 	bl	80002a8 <__aeabi_dsub>
 800e36c:	4602      	mov	r2, r0
 800e36e:	460b      	mov	r3, r1
 800e370:	4630      	mov	r0, r6
 800e372:	4639      	mov	r1, r7
 800e374:	f7f2 fbc2 	bl	8000afc <__aeabi_dcmplt>
 800e378:	2800      	cmp	r0, #0
 800e37a:	f43f af27 	beq.w	800e1cc <_dtoa_r+0x47c>
 800e37e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e380:	1e6b      	subs	r3, r5, #1
 800e382:	930c      	str	r3, [sp, #48]	; 0x30
 800e384:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e388:	2b30      	cmp	r3, #48	; 0x30
 800e38a:	d0f8      	beq.n	800e37e <_dtoa_r+0x62e>
 800e38c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e390:	e04a      	b.n	800e428 <_dtoa_r+0x6d8>
 800e392:	bf00      	nop
 800e394:	08014060 	.word	0x08014060
 800e398:	08014038 	.word	0x08014038
 800e39c:	3ff00000 	.word	0x3ff00000
 800e3a0:	40240000 	.word	0x40240000
 800e3a4:	401c0000 	.word	0x401c0000
 800e3a8:	40140000 	.word	0x40140000
 800e3ac:	3fe00000 	.word	0x3fe00000
 800e3b0:	4baf      	ldr	r3, [pc, #700]	; (800e670 <_dtoa_r+0x920>)
 800e3b2:	f7f2 f931 	bl	8000618 <__aeabi_dmul>
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	460f      	mov	r7, r1
 800e3ba:	e7ac      	b.n	800e316 <_dtoa_r+0x5c6>
 800e3bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e3c0:	9d00      	ldr	r5, [sp, #0]
 800e3c2:	4642      	mov	r2, r8
 800e3c4:	464b      	mov	r3, r9
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	f7f2 fa4f 	bl	800086c <__aeabi_ddiv>
 800e3ce:	f7f2 fbd3 	bl	8000b78 <__aeabi_d2iz>
 800e3d2:	9002      	str	r0, [sp, #8]
 800e3d4:	f7f2 f8b6 	bl	8000544 <__aeabi_i2d>
 800e3d8:	4642      	mov	r2, r8
 800e3da:	464b      	mov	r3, r9
 800e3dc:	f7f2 f91c 	bl	8000618 <__aeabi_dmul>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	4639      	mov	r1, r7
 800e3e8:	f7f1 ff5e 	bl	80002a8 <__aeabi_dsub>
 800e3ec:	9e02      	ldr	r6, [sp, #8]
 800e3ee:	9f01      	ldr	r7, [sp, #4]
 800e3f0:	3630      	adds	r6, #48	; 0x30
 800e3f2:	f805 6b01 	strb.w	r6, [r5], #1
 800e3f6:	9e00      	ldr	r6, [sp, #0]
 800e3f8:	1bae      	subs	r6, r5, r6
 800e3fa:	42b7      	cmp	r7, r6
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	d137      	bne.n	800e472 <_dtoa_r+0x722>
 800e402:	f7f1 ff53 	bl	80002ac <__adddf3>
 800e406:	4642      	mov	r2, r8
 800e408:	464b      	mov	r3, r9
 800e40a:	4606      	mov	r6, r0
 800e40c:	460f      	mov	r7, r1
 800e40e:	f7f2 fb93 	bl	8000b38 <__aeabi_dcmpgt>
 800e412:	b9c8      	cbnz	r0, 800e448 <_dtoa_r+0x6f8>
 800e414:	4642      	mov	r2, r8
 800e416:	464b      	mov	r3, r9
 800e418:	4630      	mov	r0, r6
 800e41a:	4639      	mov	r1, r7
 800e41c:	f7f2 fb64 	bl	8000ae8 <__aeabi_dcmpeq>
 800e420:	b110      	cbz	r0, 800e428 <_dtoa_r+0x6d8>
 800e422:	9b02      	ldr	r3, [sp, #8]
 800e424:	07d9      	lsls	r1, r3, #31
 800e426:	d40f      	bmi.n	800e448 <_dtoa_r+0x6f8>
 800e428:	4620      	mov	r0, r4
 800e42a:	4659      	mov	r1, fp
 800e42c:	f000 fce8 	bl	800ee00 <_Bfree>
 800e430:	2300      	movs	r3, #0
 800e432:	702b      	strb	r3, [r5, #0]
 800e434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e436:	f10a 0001 	add.w	r0, sl, #1
 800e43a:	6018      	str	r0, [r3, #0]
 800e43c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f43f acd8 	beq.w	800ddf4 <_dtoa_r+0xa4>
 800e444:	601d      	str	r5, [r3, #0]
 800e446:	e4d5      	b.n	800ddf4 <_dtoa_r+0xa4>
 800e448:	f8cd a01c 	str.w	sl, [sp, #28]
 800e44c:	462b      	mov	r3, r5
 800e44e:	461d      	mov	r5, r3
 800e450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e454:	2a39      	cmp	r2, #57	; 0x39
 800e456:	d108      	bne.n	800e46a <_dtoa_r+0x71a>
 800e458:	9a00      	ldr	r2, [sp, #0]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d1f7      	bne.n	800e44e <_dtoa_r+0x6fe>
 800e45e:	9a07      	ldr	r2, [sp, #28]
 800e460:	9900      	ldr	r1, [sp, #0]
 800e462:	3201      	adds	r2, #1
 800e464:	9207      	str	r2, [sp, #28]
 800e466:	2230      	movs	r2, #48	; 0x30
 800e468:	700a      	strb	r2, [r1, #0]
 800e46a:	781a      	ldrb	r2, [r3, #0]
 800e46c:	3201      	adds	r2, #1
 800e46e:	701a      	strb	r2, [r3, #0]
 800e470:	e78c      	b.n	800e38c <_dtoa_r+0x63c>
 800e472:	4b7f      	ldr	r3, [pc, #508]	; (800e670 <_dtoa_r+0x920>)
 800e474:	2200      	movs	r2, #0
 800e476:	f7f2 f8cf 	bl	8000618 <__aeabi_dmul>
 800e47a:	2200      	movs	r2, #0
 800e47c:	2300      	movs	r3, #0
 800e47e:	4606      	mov	r6, r0
 800e480:	460f      	mov	r7, r1
 800e482:	f7f2 fb31 	bl	8000ae8 <__aeabi_dcmpeq>
 800e486:	2800      	cmp	r0, #0
 800e488:	d09b      	beq.n	800e3c2 <_dtoa_r+0x672>
 800e48a:	e7cd      	b.n	800e428 <_dtoa_r+0x6d8>
 800e48c:	9a08      	ldr	r2, [sp, #32]
 800e48e:	2a00      	cmp	r2, #0
 800e490:	f000 80c4 	beq.w	800e61c <_dtoa_r+0x8cc>
 800e494:	9a05      	ldr	r2, [sp, #20]
 800e496:	2a01      	cmp	r2, #1
 800e498:	f300 80a8 	bgt.w	800e5ec <_dtoa_r+0x89c>
 800e49c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e49e:	2a00      	cmp	r2, #0
 800e4a0:	f000 80a0 	beq.w	800e5e4 <_dtoa_r+0x894>
 800e4a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e4a8:	9e06      	ldr	r6, [sp, #24]
 800e4aa:	4645      	mov	r5, r8
 800e4ac:	9a04      	ldr	r2, [sp, #16]
 800e4ae:	2101      	movs	r1, #1
 800e4b0:	441a      	add	r2, r3
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	4498      	add	r8, r3
 800e4b6:	9204      	str	r2, [sp, #16]
 800e4b8:	f000 fd5e 	bl	800ef78 <__i2b>
 800e4bc:	4607      	mov	r7, r0
 800e4be:	2d00      	cmp	r5, #0
 800e4c0:	dd0b      	ble.n	800e4da <_dtoa_r+0x78a>
 800e4c2:	9b04      	ldr	r3, [sp, #16]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	dd08      	ble.n	800e4da <_dtoa_r+0x78a>
 800e4c8:	42ab      	cmp	r3, r5
 800e4ca:	9a04      	ldr	r2, [sp, #16]
 800e4cc:	bfa8      	it	ge
 800e4ce:	462b      	movge	r3, r5
 800e4d0:	eba8 0803 	sub.w	r8, r8, r3
 800e4d4:	1aed      	subs	r5, r5, r3
 800e4d6:	1ad3      	subs	r3, r2, r3
 800e4d8:	9304      	str	r3, [sp, #16]
 800e4da:	9b06      	ldr	r3, [sp, #24]
 800e4dc:	b1fb      	cbz	r3, 800e51e <_dtoa_r+0x7ce>
 800e4de:	9b08      	ldr	r3, [sp, #32]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f000 809f 	beq.w	800e624 <_dtoa_r+0x8d4>
 800e4e6:	2e00      	cmp	r6, #0
 800e4e8:	dd11      	ble.n	800e50e <_dtoa_r+0x7be>
 800e4ea:	4639      	mov	r1, r7
 800e4ec:	4632      	mov	r2, r6
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	f000 fdfe 	bl	800f0f0 <__pow5mult>
 800e4f4:	465a      	mov	r2, fp
 800e4f6:	4601      	mov	r1, r0
 800e4f8:	4607      	mov	r7, r0
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	f000 fd52 	bl	800efa4 <__multiply>
 800e500:	4659      	mov	r1, fp
 800e502:	9007      	str	r0, [sp, #28]
 800e504:	4620      	mov	r0, r4
 800e506:	f000 fc7b 	bl	800ee00 <_Bfree>
 800e50a:	9b07      	ldr	r3, [sp, #28]
 800e50c:	469b      	mov	fp, r3
 800e50e:	9b06      	ldr	r3, [sp, #24]
 800e510:	1b9a      	subs	r2, r3, r6
 800e512:	d004      	beq.n	800e51e <_dtoa_r+0x7ce>
 800e514:	4659      	mov	r1, fp
 800e516:	4620      	mov	r0, r4
 800e518:	f000 fdea 	bl	800f0f0 <__pow5mult>
 800e51c:	4683      	mov	fp, r0
 800e51e:	2101      	movs	r1, #1
 800e520:	4620      	mov	r0, r4
 800e522:	f000 fd29 	bl	800ef78 <__i2b>
 800e526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e528:	2b00      	cmp	r3, #0
 800e52a:	4606      	mov	r6, r0
 800e52c:	dd7c      	ble.n	800e628 <_dtoa_r+0x8d8>
 800e52e:	461a      	mov	r2, r3
 800e530:	4601      	mov	r1, r0
 800e532:	4620      	mov	r0, r4
 800e534:	f000 fddc 	bl	800f0f0 <__pow5mult>
 800e538:	9b05      	ldr	r3, [sp, #20]
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	4606      	mov	r6, r0
 800e53e:	dd76      	ble.n	800e62e <_dtoa_r+0x8de>
 800e540:	2300      	movs	r3, #0
 800e542:	9306      	str	r3, [sp, #24]
 800e544:	6933      	ldr	r3, [r6, #16]
 800e546:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e54a:	6918      	ldr	r0, [r3, #16]
 800e54c:	f000 fcc4 	bl	800eed8 <__hi0bits>
 800e550:	f1c0 0020 	rsb	r0, r0, #32
 800e554:	9b04      	ldr	r3, [sp, #16]
 800e556:	4418      	add	r0, r3
 800e558:	f010 001f 	ands.w	r0, r0, #31
 800e55c:	f000 8086 	beq.w	800e66c <_dtoa_r+0x91c>
 800e560:	f1c0 0320 	rsb	r3, r0, #32
 800e564:	2b04      	cmp	r3, #4
 800e566:	dd7f      	ble.n	800e668 <_dtoa_r+0x918>
 800e568:	f1c0 001c 	rsb	r0, r0, #28
 800e56c:	9b04      	ldr	r3, [sp, #16]
 800e56e:	4403      	add	r3, r0
 800e570:	4480      	add	r8, r0
 800e572:	4405      	add	r5, r0
 800e574:	9304      	str	r3, [sp, #16]
 800e576:	f1b8 0f00 	cmp.w	r8, #0
 800e57a:	dd05      	ble.n	800e588 <_dtoa_r+0x838>
 800e57c:	4659      	mov	r1, fp
 800e57e:	4642      	mov	r2, r8
 800e580:	4620      	mov	r0, r4
 800e582:	f000 fe0f 	bl	800f1a4 <__lshift>
 800e586:	4683      	mov	fp, r0
 800e588:	9b04      	ldr	r3, [sp, #16]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	dd05      	ble.n	800e59a <_dtoa_r+0x84a>
 800e58e:	4631      	mov	r1, r6
 800e590:	461a      	mov	r2, r3
 800e592:	4620      	mov	r0, r4
 800e594:	f000 fe06 	bl	800f1a4 <__lshift>
 800e598:	4606      	mov	r6, r0
 800e59a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d069      	beq.n	800e674 <_dtoa_r+0x924>
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4658      	mov	r0, fp
 800e5a4:	f000 fe6a 	bl	800f27c <__mcmp>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	da63      	bge.n	800e674 <_dtoa_r+0x924>
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	4659      	mov	r1, fp
 800e5b0:	220a      	movs	r2, #10
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f000 fc46 	bl	800ee44 <__multadd>
 800e5b8:	9b08      	ldr	r3, [sp, #32]
 800e5ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5be:	4683      	mov	fp, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	f000 818f 	beq.w	800e8e4 <_dtoa_r+0xb94>
 800e5c6:	4639      	mov	r1, r7
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	220a      	movs	r2, #10
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	f000 fc39 	bl	800ee44 <__multadd>
 800e5d2:	f1b9 0f00 	cmp.w	r9, #0
 800e5d6:	4607      	mov	r7, r0
 800e5d8:	f300 808e 	bgt.w	800e6f8 <_dtoa_r+0x9a8>
 800e5dc:	9b05      	ldr	r3, [sp, #20]
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	dc50      	bgt.n	800e684 <_dtoa_r+0x934>
 800e5e2:	e089      	b.n	800e6f8 <_dtoa_r+0x9a8>
 800e5e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e5e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e5ea:	e75d      	b.n	800e4a8 <_dtoa_r+0x758>
 800e5ec:	9b01      	ldr	r3, [sp, #4]
 800e5ee:	1e5e      	subs	r6, r3, #1
 800e5f0:	9b06      	ldr	r3, [sp, #24]
 800e5f2:	42b3      	cmp	r3, r6
 800e5f4:	bfbf      	itttt	lt
 800e5f6:	9b06      	ldrlt	r3, [sp, #24]
 800e5f8:	9606      	strlt	r6, [sp, #24]
 800e5fa:	1af2      	sublt	r2, r6, r3
 800e5fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e5fe:	bfb6      	itet	lt
 800e600:	189b      	addlt	r3, r3, r2
 800e602:	1b9e      	subge	r6, r3, r6
 800e604:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e606:	9b01      	ldr	r3, [sp, #4]
 800e608:	bfb8      	it	lt
 800e60a:	2600      	movlt	r6, #0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	bfb5      	itete	lt
 800e610:	eba8 0503 	sublt.w	r5, r8, r3
 800e614:	9b01      	ldrge	r3, [sp, #4]
 800e616:	2300      	movlt	r3, #0
 800e618:	4645      	movge	r5, r8
 800e61a:	e747      	b.n	800e4ac <_dtoa_r+0x75c>
 800e61c:	9e06      	ldr	r6, [sp, #24]
 800e61e:	9f08      	ldr	r7, [sp, #32]
 800e620:	4645      	mov	r5, r8
 800e622:	e74c      	b.n	800e4be <_dtoa_r+0x76e>
 800e624:	9a06      	ldr	r2, [sp, #24]
 800e626:	e775      	b.n	800e514 <_dtoa_r+0x7c4>
 800e628:	9b05      	ldr	r3, [sp, #20]
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	dc18      	bgt.n	800e660 <_dtoa_r+0x910>
 800e62e:	9b02      	ldr	r3, [sp, #8]
 800e630:	b9b3      	cbnz	r3, 800e660 <_dtoa_r+0x910>
 800e632:	9b03      	ldr	r3, [sp, #12]
 800e634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e638:	b9a3      	cbnz	r3, 800e664 <_dtoa_r+0x914>
 800e63a:	9b03      	ldr	r3, [sp, #12]
 800e63c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e640:	0d1b      	lsrs	r3, r3, #20
 800e642:	051b      	lsls	r3, r3, #20
 800e644:	b12b      	cbz	r3, 800e652 <_dtoa_r+0x902>
 800e646:	9b04      	ldr	r3, [sp, #16]
 800e648:	3301      	adds	r3, #1
 800e64a:	9304      	str	r3, [sp, #16]
 800e64c:	f108 0801 	add.w	r8, r8, #1
 800e650:	2301      	movs	r3, #1
 800e652:	9306      	str	r3, [sp, #24]
 800e654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e656:	2b00      	cmp	r3, #0
 800e658:	f47f af74 	bne.w	800e544 <_dtoa_r+0x7f4>
 800e65c:	2001      	movs	r0, #1
 800e65e:	e779      	b.n	800e554 <_dtoa_r+0x804>
 800e660:	2300      	movs	r3, #0
 800e662:	e7f6      	b.n	800e652 <_dtoa_r+0x902>
 800e664:	9b02      	ldr	r3, [sp, #8]
 800e666:	e7f4      	b.n	800e652 <_dtoa_r+0x902>
 800e668:	d085      	beq.n	800e576 <_dtoa_r+0x826>
 800e66a:	4618      	mov	r0, r3
 800e66c:	301c      	adds	r0, #28
 800e66e:	e77d      	b.n	800e56c <_dtoa_r+0x81c>
 800e670:	40240000 	.word	0x40240000
 800e674:	9b01      	ldr	r3, [sp, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	dc38      	bgt.n	800e6ec <_dtoa_r+0x99c>
 800e67a:	9b05      	ldr	r3, [sp, #20]
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	dd35      	ble.n	800e6ec <_dtoa_r+0x99c>
 800e680:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e684:	f1b9 0f00 	cmp.w	r9, #0
 800e688:	d10d      	bne.n	800e6a6 <_dtoa_r+0x956>
 800e68a:	4631      	mov	r1, r6
 800e68c:	464b      	mov	r3, r9
 800e68e:	2205      	movs	r2, #5
 800e690:	4620      	mov	r0, r4
 800e692:	f000 fbd7 	bl	800ee44 <__multadd>
 800e696:	4601      	mov	r1, r0
 800e698:	4606      	mov	r6, r0
 800e69a:	4658      	mov	r0, fp
 800e69c:	f000 fdee 	bl	800f27c <__mcmp>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	f73f adbd 	bgt.w	800e220 <_dtoa_r+0x4d0>
 800e6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a8:	9d00      	ldr	r5, [sp, #0]
 800e6aa:	ea6f 0a03 	mvn.w	sl, r3
 800e6ae:	f04f 0800 	mov.w	r8, #0
 800e6b2:	4631      	mov	r1, r6
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f000 fba3 	bl	800ee00 <_Bfree>
 800e6ba:	2f00      	cmp	r7, #0
 800e6bc:	f43f aeb4 	beq.w	800e428 <_dtoa_r+0x6d8>
 800e6c0:	f1b8 0f00 	cmp.w	r8, #0
 800e6c4:	d005      	beq.n	800e6d2 <_dtoa_r+0x982>
 800e6c6:	45b8      	cmp	r8, r7
 800e6c8:	d003      	beq.n	800e6d2 <_dtoa_r+0x982>
 800e6ca:	4641      	mov	r1, r8
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f000 fb97 	bl	800ee00 <_Bfree>
 800e6d2:	4639      	mov	r1, r7
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f000 fb93 	bl	800ee00 <_Bfree>
 800e6da:	e6a5      	b.n	800e428 <_dtoa_r+0x6d8>
 800e6dc:	2600      	movs	r6, #0
 800e6de:	4637      	mov	r7, r6
 800e6e0:	e7e1      	b.n	800e6a6 <_dtoa_r+0x956>
 800e6e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e6e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e6e8:	4637      	mov	r7, r6
 800e6ea:	e599      	b.n	800e220 <_dtoa_r+0x4d0>
 800e6ec:	9b08      	ldr	r3, [sp, #32]
 800e6ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f000 80fd 	beq.w	800e8f2 <_dtoa_r+0xba2>
 800e6f8:	2d00      	cmp	r5, #0
 800e6fa:	dd05      	ble.n	800e708 <_dtoa_r+0x9b8>
 800e6fc:	4639      	mov	r1, r7
 800e6fe:	462a      	mov	r2, r5
 800e700:	4620      	mov	r0, r4
 800e702:	f000 fd4f 	bl	800f1a4 <__lshift>
 800e706:	4607      	mov	r7, r0
 800e708:	9b06      	ldr	r3, [sp, #24]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d05c      	beq.n	800e7c8 <_dtoa_r+0xa78>
 800e70e:	6879      	ldr	r1, [r7, #4]
 800e710:	4620      	mov	r0, r4
 800e712:	f000 fb35 	bl	800ed80 <_Balloc>
 800e716:	4605      	mov	r5, r0
 800e718:	b928      	cbnz	r0, 800e726 <_dtoa_r+0x9d6>
 800e71a:	4b80      	ldr	r3, [pc, #512]	; (800e91c <_dtoa_r+0xbcc>)
 800e71c:	4602      	mov	r2, r0
 800e71e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e722:	f7ff bb2e 	b.w	800dd82 <_dtoa_r+0x32>
 800e726:	693a      	ldr	r2, [r7, #16]
 800e728:	3202      	adds	r2, #2
 800e72a:	0092      	lsls	r2, r2, #2
 800e72c:	f107 010c 	add.w	r1, r7, #12
 800e730:	300c      	adds	r0, #12
 800e732:	f7fe fcb1 	bl	800d098 <memcpy>
 800e736:	2201      	movs	r2, #1
 800e738:	4629      	mov	r1, r5
 800e73a:	4620      	mov	r0, r4
 800e73c:	f000 fd32 	bl	800f1a4 <__lshift>
 800e740:	9b00      	ldr	r3, [sp, #0]
 800e742:	3301      	adds	r3, #1
 800e744:	9301      	str	r3, [sp, #4]
 800e746:	9b00      	ldr	r3, [sp, #0]
 800e748:	444b      	add	r3, r9
 800e74a:	9307      	str	r3, [sp, #28]
 800e74c:	9b02      	ldr	r3, [sp, #8]
 800e74e:	f003 0301 	and.w	r3, r3, #1
 800e752:	46b8      	mov	r8, r7
 800e754:	9306      	str	r3, [sp, #24]
 800e756:	4607      	mov	r7, r0
 800e758:	9b01      	ldr	r3, [sp, #4]
 800e75a:	4631      	mov	r1, r6
 800e75c:	3b01      	subs	r3, #1
 800e75e:	4658      	mov	r0, fp
 800e760:	9302      	str	r3, [sp, #8]
 800e762:	f7ff fa67 	bl	800dc34 <quorem>
 800e766:	4603      	mov	r3, r0
 800e768:	3330      	adds	r3, #48	; 0x30
 800e76a:	9004      	str	r0, [sp, #16]
 800e76c:	4641      	mov	r1, r8
 800e76e:	4658      	mov	r0, fp
 800e770:	9308      	str	r3, [sp, #32]
 800e772:	f000 fd83 	bl	800f27c <__mcmp>
 800e776:	463a      	mov	r2, r7
 800e778:	4681      	mov	r9, r0
 800e77a:	4631      	mov	r1, r6
 800e77c:	4620      	mov	r0, r4
 800e77e:	f000 fd99 	bl	800f2b4 <__mdiff>
 800e782:	68c2      	ldr	r2, [r0, #12]
 800e784:	9b08      	ldr	r3, [sp, #32]
 800e786:	4605      	mov	r5, r0
 800e788:	bb02      	cbnz	r2, 800e7cc <_dtoa_r+0xa7c>
 800e78a:	4601      	mov	r1, r0
 800e78c:	4658      	mov	r0, fp
 800e78e:	f000 fd75 	bl	800f27c <__mcmp>
 800e792:	9b08      	ldr	r3, [sp, #32]
 800e794:	4602      	mov	r2, r0
 800e796:	4629      	mov	r1, r5
 800e798:	4620      	mov	r0, r4
 800e79a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e79e:	f000 fb2f 	bl	800ee00 <_Bfree>
 800e7a2:	9b05      	ldr	r3, [sp, #20]
 800e7a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7a6:	9d01      	ldr	r5, [sp, #4]
 800e7a8:	ea43 0102 	orr.w	r1, r3, r2
 800e7ac:	9b06      	ldr	r3, [sp, #24]
 800e7ae:	430b      	orrs	r3, r1
 800e7b0:	9b08      	ldr	r3, [sp, #32]
 800e7b2:	d10d      	bne.n	800e7d0 <_dtoa_r+0xa80>
 800e7b4:	2b39      	cmp	r3, #57	; 0x39
 800e7b6:	d029      	beq.n	800e80c <_dtoa_r+0xabc>
 800e7b8:	f1b9 0f00 	cmp.w	r9, #0
 800e7bc:	dd01      	ble.n	800e7c2 <_dtoa_r+0xa72>
 800e7be:	9b04      	ldr	r3, [sp, #16]
 800e7c0:	3331      	adds	r3, #49	; 0x31
 800e7c2:	9a02      	ldr	r2, [sp, #8]
 800e7c4:	7013      	strb	r3, [r2, #0]
 800e7c6:	e774      	b.n	800e6b2 <_dtoa_r+0x962>
 800e7c8:	4638      	mov	r0, r7
 800e7ca:	e7b9      	b.n	800e740 <_dtoa_r+0x9f0>
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	e7e2      	b.n	800e796 <_dtoa_r+0xa46>
 800e7d0:	f1b9 0f00 	cmp.w	r9, #0
 800e7d4:	db06      	blt.n	800e7e4 <_dtoa_r+0xa94>
 800e7d6:	9905      	ldr	r1, [sp, #20]
 800e7d8:	ea41 0909 	orr.w	r9, r1, r9
 800e7dc:	9906      	ldr	r1, [sp, #24]
 800e7de:	ea59 0101 	orrs.w	r1, r9, r1
 800e7e2:	d120      	bne.n	800e826 <_dtoa_r+0xad6>
 800e7e4:	2a00      	cmp	r2, #0
 800e7e6:	ddec      	ble.n	800e7c2 <_dtoa_r+0xa72>
 800e7e8:	4659      	mov	r1, fp
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	f000 fcd8 	bl	800f1a4 <__lshift>
 800e7f4:	4631      	mov	r1, r6
 800e7f6:	4683      	mov	fp, r0
 800e7f8:	f000 fd40 	bl	800f27c <__mcmp>
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	9b01      	ldr	r3, [sp, #4]
 800e800:	dc02      	bgt.n	800e808 <_dtoa_r+0xab8>
 800e802:	d1de      	bne.n	800e7c2 <_dtoa_r+0xa72>
 800e804:	07da      	lsls	r2, r3, #31
 800e806:	d5dc      	bpl.n	800e7c2 <_dtoa_r+0xa72>
 800e808:	2b39      	cmp	r3, #57	; 0x39
 800e80a:	d1d8      	bne.n	800e7be <_dtoa_r+0xa6e>
 800e80c:	9a02      	ldr	r2, [sp, #8]
 800e80e:	2339      	movs	r3, #57	; 0x39
 800e810:	7013      	strb	r3, [r2, #0]
 800e812:	462b      	mov	r3, r5
 800e814:	461d      	mov	r5, r3
 800e816:	3b01      	subs	r3, #1
 800e818:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e81c:	2a39      	cmp	r2, #57	; 0x39
 800e81e:	d050      	beq.n	800e8c2 <_dtoa_r+0xb72>
 800e820:	3201      	adds	r2, #1
 800e822:	701a      	strb	r2, [r3, #0]
 800e824:	e745      	b.n	800e6b2 <_dtoa_r+0x962>
 800e826:	2a00      	cmp	r2, #0
 800e828:	dd03      	ble.n	800e832 <_dtoa_r+0xae2>
 800e82a:	2b39      	cmp	r3, #57	; 0x39
 800e82c:	d0ee      	beq.n	800e80c <_dtoa_r+0xabc>
 800e82e:	3301      	adds	r3, #1
 800e830:	e7c7      	b.n	800e7c2 <_dtoa_r+0xa72>
 800e832:	9a01      	ldr	r2, [sp, #4]
 800e834:	9907      	ldr	r1, [sp, #28]
 800e836:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e83a:	428a      	cmp	r2, r1
 800e83c:	d02a      	beq.n	800e894 <_dtoa_r+0xb44>
 800e83e:	4659      	mov	r1, fp
 800e840:	2300      	movs	r3, #0
 800e842:	220a      	movs	r2, #10
 800e844:	4620      	mov	r0, r4
 800e846:	f000 fafd 	bl	800ee44 <__multadd>
 800e84a:	45b8      	cmp	r8, r7
 800e84c:	4683      	mov	fp, r0
 800e84e:	f04f 0300 	mov.w	r3, #0
 800e852:	f04f 020a 	mov.w	r2, #10
 800e856:	4641      	mov	r1, r8
 800e858:	4620      	mov	r0, r4
 800e85a:	d107      	bne.n	800e86c <_dtoa_r+0xb1c>
 800e85c:	f000 faf2 	bl	800ee44 <__multadd>
 800e860:	4680      	mov	r8, r0
 800e862:	4607      	mov	r7, r0
 800e864:	9b01      	ldr	r3, [sp, #4]
 800e866:	3301      	adds	r3, #1
 800e868:	9301      	str	r3, [sp, #4]
 800e86a:	e775      	b.n	800e758 <_dtoa_r+0xa08>
 800e86c:	f000 faea 	bl	800ee44 <__multadd>
 800e870:	4639      	mov	r1, r7
 800e872:	4680      	mov	r8, r0
 800e874:	2300      	movs	r3, #0
 800e876:	220a      	movs	r2, #10
 800e878:	4620      	mov	r0, r4
 800e87a:	f000 fae3 	bl	800ee44 <__multadd>
 800e87e:	4607      	mov	r7, r0
 800e880:	e7f0      	b.n	800e864 <_dtoa_r+0xb14>
 800e882:	f1b9 0f00 	cmp.w	r9, #0
 800e886:	9a00      	ldr	r2, [sp, #0]
 800e888:	bfcc      	ite	gt
 800e88a:	464d      	movgt	r5, r9
 800e88c:	2501      	movle	r5, #1
 800e88e:	4415      	add	r5, r2
 800e890:	f04f 0800 	mov.w	r8, #0
 800e894:	4659      	mov	r1, fp
 800e896:	2201      	movs	r2, #1
 800e898:	4620      	mov	r0, r4
 800e89a:	9301      	str	r3, [sp, #4]
 800e89c:	f000 fc82 	bl	800f1a4 <__lshift>
 800e8a0:	4631      	mov	r1, r6
 800e8a2:	4683      	mov	fp, r0
 800e8a4:	f000 fcea 	bl	800f27c <__mcmp>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	dcb2      	bgt.n	800e812 <_dtoa_r+0xac2>
 800e8ac:	d102      	bne.n	800e8b4 <_dtoa_r+0xb64>
 800e8ae:	9b01      	ldr	r3, [sp, #4]
 800e8b0:	07db      	lsls	r3, r3, #31
 800e8b2:	d4ae      	bmi.n	800e812 <_dtoa_r+0xac2>
 800e8b4:	462b      	mov	r3, r5
 800e8b6:	461d      	mov	r5, r3
 800e8b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e8bc:	2a30      	cmp	r2, #48	; 0x30
 800e8be:	d0fa      	beq.n	800e8b6 <_dtoa_r+0xb66>
 800e8c0:	e6f7      	b.n	800e6b2 <_dtoa_r+0x962>
 800e8c2:	9a00      	ldr	r2, [sp, #0]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d1a5      	bne.n	800e814 <_dtoa_r+0xac4>
 800e8c8:	f10a 0a01 	add.w	sl, sl, #1
 800e8cc:	2331      	movs	r3, #49	; 0x31
 800e8ce:	e779      	b.n	800e7c4 <_dtoa_r+0xa74>
 800e8d0:	4b13      	ldr	r3, [pc, #76]	; (800e920 <_dtoa_r+0xbd0>)
 800e8d2:	f7ff baaf 	b.w	800de34 <_dtoa_r+0xe4>
 800e8d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f47f aa86 	bne.w	800ddea <_dtoa_r+0x9a>
 800e8de:	4b11      	ldr	r3, [pc, #68]	; (800e924 <_dtoa_r+0xbd4>)
 800e8e0:	f7ff baa8 	b.w	800de34 <_dtoa_r+0xe4>
 800e8e4:	f1b9 0f00 	cmp.w	r9, #0
 800e8e8:	dc03      	bgt.n	800e8f2 <_dtoa_r+0xba2>
 800e8ea:	9b05      	ldr	r3, [sp, #20]
 800e8ec:	2b02      	cmp	r3, #2
 800e8ee:	f73f aec9 	bgt.w	800e684 <_dtoa_r+0x934>
 800e8f2:	9d00      	ldr	r5, [sp, #0]
 800e8f4:	4631      	mov	r1, r6
 800e8f6:	4658      	mov	r0, fp
 800e8f8:	f7ff f99c 	bl	800dc34 <quorem>
 800e8fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e900:	f805 3b01 	strb.w	r3, [r5], #1
 800e904:	9a00      	ldr	r2, [sp, #0]
 800e906:	1aaa      	subs	r2, r5, r2
 800e908:	4591      	cmp	r9, r2
 800e90a:	ddba      	ble.n	800e882 <_dtoa_r+0xb32>
 800e90c:	4659      	mov	r1, fp
 800e90e:	2300      	movs	r3, #0
 800e910:	220a      	movs	r2, #10
 800e912:	4620      	mov	r0, r4
 800e914:	f000 fa96 	bl	800ee44 <__multadd>
 800e918:	4683      	mov	fp, r0
 800e91a:	e7eb      	b.n	800e8f4 <_dtoa_r+0xba4>
 800e91c:	08013f63 	.word	0x08013f63
 800e920:	08013ebc 	.word	0x08013ebc
 800e924:	08013ee0 	.word	0x08013ee0

0800e928 <__sflush_r>:
 800e928:	898a      	ldrh	r2, [r1, #12]
 800e92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92e:	4605      	mov	r5, r0
 800e930:	0710      	lsls	r0, r2, #28
 800e932:	460c      	mov	r4, r1
 800e934:	d458      	bmi.n	800e9e8 <__sflush_r+0xc0>
 800e936:	684b      	ldr	r3, [r1, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	dc05      	bgt.n	800e948 <__sflush_r+0x20>
 800e93c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e93e:	2b00      	cmp	r3, #0
 800e940:	dc02      	bgt.n	800e948 <__sflush_r+0x20>
 800e942:	2000      	movs	r0, #0
 800e944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e94a:	2e00      	cmp	r6, #0
 800e94c:	d0f9      	beq.n	800e942 <__sflush_r+0x1a>
 800e94e:	2300      	movs	r3, #0
 800e950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e954:	682f      	ldr	r7, [r5, #0]
 800e956:	602b      	str	r3, [r5, #0]
 800e958:	d032      	beq.n	800e9c0 <__sflush_r+0x98>
 800e95a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e95c:	89a3      	ldrh	r3, [r4, #12]
 800e95e:	075a      	lsls	r2, r3, #29
 800e960:	d505      	bpl.n	800e96e <__sflush_r+0x46>
 800e962:	6863      	ldr	r3, [r4, #4]
 800e964:	1ac0      	subs	r0, r0, r3
 800e966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e968:	b10b      	cbz	r3, 800e96e <__sflush_r+0x46>
 800e96a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e96c:	1ac0      	subs	r0, r0, r3
 800e96e:	2300      	movs	r3, #0
 800e970:	4602      	mov	r2, r0
 800e972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e974:	6a21      	ldr	r1, [r4, #32]
 800e976:	4628      	mov	r0, r5
 800e978:	47b0      	blx	r6
 800e97a:	1c43      	adds	r3, r0, #1
 800e97c:	89a3      	ldrh	r3, [r4, #12]
 800e97e:	d106      	bne.n	800e98e <__sflush_r+0x66>
 800e980:	6829      	ldr	r1, [r5, #0]
 800e982:	291d      	cmp	r1, #29
 800e984:	d82c      	bhi.n	800e9e0 <__sflush_r+0xb8>
 800e986:	4a2a      	ldr	r2, [pc, #168]	; (800ea30 <__sflush_r+0x108>)
 800e988:	40ca      	lsrs	r2, r1
 800e98a:	07d6      	lsls	r6, r2, #31
 800e98c:	d528      	bpl.n	800e9e0 <__sflush_r+0xb8>
 800e98e:	2200      	movs	r2, #0
 800e990:	6062      	str	r2, [r4, #4]
 800e992:	04d9      	lsls	r1, r3, #19
 800e994:	6922      	ldr	r2, [r4, #16]
 800e996:	6022      	str	r2, [r4, #0]
 800e998:	d504      	bpl.n	800e9a4 <__sflush_r+0x7c>
 800e99a:	1c42      	adds	r2, r0, #1
 800e99c:	d101      	bne.n	800e9a2 <__sflush_r+0x7a>
 800e99e:	682b      	ldr	r3, [r5, #0]
 800e9a0:	b903      	cbnz	r3, 800e9a4 <__sflush_r+0x7c>
 800e9a2:	6560      	str	r0, [r4, #84]	; 0x54
 800e9a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9a6:	602f      	str	r7, [r5, #0]
 800e9a8:	2900      	cmp	r1, #0
 800e9aa:	d0ca      	beq.n	800e942 <__sflush_r+0x1a>
 800e9ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9b0:	4299      	cmp	r1, r3
 800e9b2:	d002      	beq.n	800e9ba <__sflush_r+0x92>
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	f000 fd71 	bl	800f49c <_free_r>
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	6360      	str	r0, [r4, #52]	; 0x34
 800e9be:	e7c1      	b.n	800e944 <__sflush_r+0x1c>
 800e9c0:	6a21      	ldr	r1, [r4, #32]
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	47b0      	blx	r6
 800e9c8:	1c41      	adds	r1, r0, #1
 800e9ca:	d1c7      	bne.n	800e95c <__sflush_r+0x34>
 800e9cc:	682b      	ldr	r3, [r5, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d0c4      	beq.n	800e95c <__sflush_r+0x34>
 800e9d2:	2b1d      	cmp	r3, #29
 800e9d4:	d001      	beq.n	800e9da <__sflush_r+0xb2>
 800e9d6:	2b16      	cmp	r3, #22
 800e9d8:	d101      	bne.n	800e9de <__sflush_r+0xb6>
 800e9da:	602f      	str	r7, [r5, #0]
 800e9dc:	e7b1      	b.n	800e942 <__sflush_r+0x1a>
 800e9de:	89a3      	ldrh	r3, [r4, #12]
 800e9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9e4:	81a3      	strh	r3, [r4, #12]
 800e9e6:	e7ad      	b.n	800e944 <__sflush_r+0x1c>
 800e9e8:	690f      	ldr	r7, [r1, #16]
 800e9ea:	2f00      	cmp	r7, #0
 800e9ec:	d0a9      	beq.n	800e942 <__sflush_r+0x1a>
 800e9ee:	0793      	lsls	r3, r2, #30
 800e9f0:	680e      	ldr	r6, [r1, #0]
 800e9f2:	bf08      	it	eq
 800e9f4:	694b      	ldreq	r3, [r1, #20]
 800e9f6:	600f      	str	r7, [r1, #0]
 800e9f8:	bf18      	it	ne
 800e9fa:	2300      	movne	r3, #0
 800e9fc:	eba6 0807 	sub.w	r8, r6, r7
 800ea00:	608b      	str	r3, [r1, #8]
 800ea02:	f1b8 0f00 	cmp.w	r8, #0
 800ea06:	dd9c      	ble.n	800e942 <__sflush_r+0x1a>
 800ea08:	6a21      	ldr	r1, [r4, #32]
 800ea0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea0c:	4643      	mov	r3, r8
 800ea0e:	463a      	mov	r2, r7
 800ea10:	4628      	mov	r0, r5
 800ea12:	47b0      	blx	r6
 800ea14:	2800      	cmp	r0, #0
 800ea16:	dc06      	bgt.n	800ea26 <__sflush_r+0xfe>
 800ea18:	89a3      	ldrh	r3, [r4, #12]
 800ea1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea1e:	81a3      	strh	r3, [r4, #12]
 800ea20:	f04f 30ff 	mov.w	r0, #4294967295
 800ea24:	e78e      	b.n	800e944 <__sflush_r+0x1c>
 800ea26:	4407      	add	r7, r0
 800ea28:	eba8 0800 	sub.w	r8, r8, r0
 800ea2c:	e7e9      	b.n	800ea02 <__sflush_r+0xda>
 800ea2e:	bf00      	nop
 800ea30:	20400001 	.word	0x20400001

0800ea34 <_fflush_r>:
 800ea34:	b538      	push	{r3, r4, r5, lr}
 800ea36:	690b      	ldr	r3, [r1, #16]
 800ea38:	4605      	mov	r5, r0
 800ea3a:	460c      	mov	r4, r1
 800ea3c:	b913      	cbnz	r3, 800ea44 <_fflush_r+0x10>
 800ea3e:	2500      	movs	r5, #0
 800ea40:	4628      	mov	r0, r5
 800ea42:	bd38      	pop	{r3, r4, r5, pc}
 800ea44:	b118      	cbz	r0, 800ea4e <_fflush_r+0x1a>
 800ea46:	6983      	ldr	r3, [r0, #24]
 800ea48:	b90b      	cbnz	r3, 800ea4e <_fflush_r+0x1a>
 800ea4a:	f000 f887 	bl	800eb5c <__sinit>
 800ea4e:	4b14      	ldr	r3, [pc, #80]	; (800eaa0 <_fflush_r+0x6c>)
 800ea50:	429c      	cmp	r4, r3
 800ea52:	d11b      	bne.n	800ea8c <_fflush_r+0x58>
 800ea54:	686c      	ldr	r4, [r5, #4]
 800ea56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d0ef      	beq.n	800ea3e <_fflush_r+0xa>
 800ea5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea60:	07d0      	lsls	r0, r2, #31
 800ea62:	d404      	bmi.n	800ea6e <_fflush_r+0x3a>
 800ea64:	0599      	lsls	r1, r3, #22
 800ea66:	d402      	bmi.n	800ea6e <_fflush_r+0x3a>
 800ea68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea6a:	f000 f91a 	bl	800eca2 <__retarget_lock_acquire_recursive>
 800ea6e:	4628      	mov	r0, r5
 800ea70:	4621      	mov	r1, r4
 800ea72:	f7ff ff59 	bl	800e928 <__sflush_r>
 800ea76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea78:	07da      	lsls	r2, r3, #31
 800ea7a:	4605      	mov	r5, r0
 800ea7c:	d4e0      	bmi.n	800ea40 <_fflush_r+0xc>
 800ea7e:	89a3      	ldrh	r3, [r4, #12]
 800ea80:	059b      	lsls	r3, r3, #22
 800ea82:	d4dd      	bmi.n	800ea40 <_fflush_r+0xc>
 800ea84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea86:	f000 f90d 	bl	800eca4 <__retarget_lock_release_recursive>
 800ea8a:	e7d9      	b.n	800ea40 <_fflush_r+0xc>
 800ea8c:	4b05      	ldr	r3, [pc, #20]	; (800eaa4 <_fflush_r+0x70>)
 800ea8e:	429c      	cmp	r4, r3
 800ea90:	d101      	bne.n	800ea96 <_fflush_r+0x62>
 800ea92:	68ac      	ldr	r4, [r5, #8]
 800ea94:	e7df      	b.n	800ea56 <_fflush_r+0x22>
 800ea96:	4b04      	ldr	r3, [pc, #16]	; (800eaa8 <_fflush_r+0x74>)
 800ea98:	429c      	cmp	r4, r3
 800ea9a:	bf08      	it	eq
 800ea9c:	68ec      	ldreq	r4, [r5, #12]
 800ea9e:	e7da      	b.n	800ea56 <_fflush_r+0x22>
 800eaa0:	08013f94 	.word	0x08013f94
 800eaa4:	08013fb4 	.word	0x08013fb4
 800eaa8:	08013f74 	.word	0x08013f74

0800eaac <std>:
 800eaac:	2300      	movs	r3, #0
 800eaae:	b510      	push	{r4, lr}
 800eab0:	4604      	mov	r4, r0
 800eab2:	e9c0 3300 	strd	r3, r3, [r0]
 800eab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaba:	6083      	str	r3, [r0, #8]
 800eabc:	8181      	strh	r1, [r0, #12]
 800eabe:	6643      	str	r3, [r0, #100]	; 0x64
 800eac0:	81c2      	strh	r2, [r0, #14]
 800eac2:	6183      	str	r3, [r0, #24]
 800eac4:	4619      	mov	r1, r3
 800eac6:	2208      	movs	r2, #8
 800eac8:	305c      	adds	r0, #92	; 0x5c
 800eaca:	f7fe faf3 	bl	800d0b4 <memset>
 800eace:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <std+0x38>)
 800ead0:	6263      	str	r3, [r4, #36]	; 0x24
 800ead2:	4b05      	ldr	r3, [pc, #20]	; (800eae8 <std+0x3c>)
 800ead4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ead6:	4b05      	ldr	r3, [pc, #20]	; (800eaec <std+0x40>)
 800ead8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eada:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <std+0x44>)
 800eadc:	6224      	str	r4, [r4, #32]
 800eade:	6323      	str	r3, [r4, #48]	; 0x30
 800eae0:	bd10      	pop	{r4, pc}
 800eae2:	bf00      	nop
 800eae4:	0800f8c5 	.word	0x0800f8c5
 800eae8:	0800f8e7 	.word	0x0800f8e7
 800eaec:	0800f91f 	.word	0x0800f91f
 800eaf0:	0800f943 	.word	0x0800f943

0800eaf4 <_cleanup_r>:
 800eaf4:	4901      	ldr	r1, [pc, #4]	; (800eafc <_cleanup_r+0x8>)
 800eaf6:	f000 b8af 	b.w	800ec58 <_fwalk_reent>
 800eafa:	bf00      	nop
 800eafc:	0800ea35 	.word	0x0800ea35

0800eb00 <__sfmoreglue>:
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	1e4a      	subs	r2, r1, #1
 800eb04:	2568      	movs	r5, #104	; 0x68
 800eb06:	4355      	muls	r5, r2
 800eb08:	460e      	mov	r6, r1
 800eb0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb0e:	f000 fd15 	bl	800f53c <_malloc_r>
 800eb12:	4604      	mov	r4, r0
 800eb14:	b140      	cbz	r0, 800eb28 <__sfmoreglue+0x28>
 800eb16:	2100      	movs	r1, #0
 800eb18:	e9c0 1600 	strd	r1, r6, [r0]
 800eb1c:	300c      	adds	r0, #12
 800eb1e:	60a0      	str	r0, [r4, #8]
 800eb20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb24:	f7fe fac6 	bl	800d0b4 <memset>
 800eb28:	4620      	mov	r0, r4
 800eb2a:	bd70      	pop	{r4, r5, r6, pc}

0800eb2c <__sfp_lock_acquire>:
 800eb2c:	4801      	ldr	r0, [pc, #4]	; (800eb34 <__sfp_lock_acquire+0x8>)
 800eb2e:	f000 b8b8 	b.w	800eca2 <__retarget_lock_acquire_recursive>
 800eb32:	bf00      	nop
 800eb34:	20022124 	.word	0x20022124

0800eb38 <__sfp_lock_release>:
 800eb38:	4801      	ldr	r0, [pc, #4]	; (800eb40 <__sfp_lock_release+0x8>)
 800eb3a:	f000 b8b3 	b.w	800eca4 <__retarget_lock_release_recursive>
 800eb3e:	bf00      	nop
 800eb40:	20022124 	.word	0x20022124

0800eb44 <__sinit_lock_acquire>:
 800eb44:	4801      	ldr	r0, [pc, #4]	; (800eb4c <__sinit_lock_acquire+0x8>)
 800eb46:	f000 b8ac 	b.w	800eca2 <__retarget_lock_acquire_recursive>
 800eb4a:	bf00      	nop
 800eb4c:	2002211f 	.word	0x2002211f

0800eb50 <__sinit_lock_release>:
 800eb50:	4801      	ldr	r0, [pc, #4]	; (800eb58 <__sinit_lock_release+0x8>)
 800eb52:	f000 b8a7 	b.w	800eca4 <__retarget_lock_release_recursive>
 800eb56:	bf00      	nop
 800eb58:	2002211f 	.word	0x2002211f

0800eb5c <__sinit>:
 800eb5c:	b510      	push	{r4, lr}
 800eb5e:	4604      	mov	r4, r0
 800eb60:	f7ff fff0 	bl	800eb44 <__sinit_lock_acquire>
 800eb64:	69a3      	ldr	r3, [r4, #24]
 800eb66:	b11b      	cbz	r3, 800eb70 <__sinit+0x14>
 800eb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb6c:	f7ff bff0 	b.w	800eb50 <__sinit_lock_release>
 800eb70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb74:	6523      	str	r3, [r4, #80]	; 0x50
 800eb76:	4b13      	ldr	r3, [pc, #76]	; (800ebc4 <__sinit+0x68>)
 800eb78:	4a13      	ldr	r2, [pc, #76]	; (800ebc8 <__sinit+0x6c>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb7e:	42a3      	cmp	r3, r4
 800eb80:	bf04      	itt	eq
 800eb82:	2301      	moveq	r3, #1
 800eb84:	61a3      	streq	r3, [r4, #24]
 800eb86:	4620      	mov	r0, r4
 800eb88:	f000 f820 	bl	800ebcc <__sfp>
 800eb8c:	6060      	str	r0, [r4, #4]
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f000 f81c 	bl	800ebcc <__sfp>
 800eb94:	60a0      	str	r0, [r4, #8]
 800eb96:	4620      	mov	r0, r4
 800eb98:	f000 f818 	bl	800ebcc <__sfp>
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	60e0      	str	r0, [r4, #12]
 800eba0:	2104      	movs	r1, #4
 800eba2:	6860      	ldr	r0, [r4, #4]
 800eba4:	f7ff ff82 	bl	800eaac <std>
 800eba8:	68a0      	ldr	r0, [r4, #8]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	2109      	movs	r1, #9
 800ebae:	f7ff ff7d 	bl	800eaac <std>
 800ebb2:	68e0      	ldr	r0, [r4, #12]
 800ebb4:	2202      	movs	r2, #2
 800ebb6:	2112      	movs	r1, #18
 800ebb8:	f7ff ff78 	bl	800eaac <std>
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	61a3      	str	r3, [r4, #24]
 800ebc0:	e7d2      	b.n	800eb68 <__sinit+0xc>
 800ebc2:	bf00      	nop
 800ebc4:	08013ea8 	.word	0x08013ea8
 800ebc8:	0800eaf5 	.word	0x0800eaf5

0800ebcc <__sfp>:
 800ebcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebce:	4607      	mov	r7, r0
 800ebd0:	f7ff ffac 	bl	800eb2c <__sfp_lock_acquire>
 800ebd4:	4b1e      	ldr	r3, [pc, #120]	; (800ec50 <__sfp+0x84>)
 800ebd6:	681e      	ldr	r6, [r3, #0]
 800ebd8:	69b3      	ldr	r3, [r6, #24]
 800ebda:	b913      	cbnz	r3, 800ebe2 <__sfp+0x16>
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f7ff ffbd 	bl	800eb5c <__sinit>
 800ebe2:	3648      	adds	r6, #72	; 0x48
 800ebe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	d503      	bpl.n	800ebf4 <__sfp+0x28>
 800ebec:	6833      	ldr	r3, [r6, #0]
 800ebee:	b30b      	cbz	r3, 800ec34 <__sfp+0x68>
 800ebf0:	6836      	ldr	r6, [r6, #0]
 800ebf2:	e7f7      	b.n	800ebe4 <__sfp+0x18>
 800ebf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebf8:	b9d5      	cbnz	r5, 800ec30 <__sfp+0x64>
 800ebfa:	4b16      	ldr	r3, [pc, #88]	; (800ec54 <__sfp+0x88>)
 800ebfc:	60e3      	str	r3, [r4, #12]
 800ebfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec02:	6665      	str	r5, [r4, #100]	; 0x64
 800ec04:	f000 f84c 	bl	800eca0 <__retarget_lock_init_recursive>
 800ec08:	f7ff ff96 	bl	800eb38 <__sfp_lock_release>
 800ec0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec14:	6025      	str	r5, [r4, #0]
 800ec16:	61a5      	str	r5, [r4, #24]
 800ec18:	2208      	movs	r2, #8
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec20:	f7fe fa48 	bl	800d0b4 <memset>
 800ec24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec30:	3468      	adds	r4, #104	; 0x68
 800ec32:	e7d9      	b.n	800ebe8 <__sfp+0x1c>
 800ec34:	2104      	movs	r1, #4
 800ec36:	4638      	mov	r0, r7
 800ec38:	f7ff ff62 	bl	800eb00 <__sfmoreglue>
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	6030      	str	r0, [r6, #0]
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d1d5      	bne.n	800ebf0 <__sfp+0x24>
 800ec44:	f7ff ff78 	bl	800eb38 <__sfp_lock_release>
 800ec48:	230c      	movs	r3, #12
 800ec4a:	603b      	str	r3, [r7, #0]
 800ec4c:	e7ee      	b.n	800ec2c <__sfp+0x60>
 800ec4e:	bf00      	nop
 800ec50:	08013ea8 	.word	0x08013ea8
 800ec54:	ffff0001 	.word	0xffff0001

0800ec58 <_fwalk_reent>:
 800ec58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	4688      	mov	r8, r1
 800ec60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec64:	2700      	movs	r7, #0
 800ec66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec6a:	f1b9 0901 	subs.w	r9, r9, #1
 800ec6e:	d505      	bpl.n	800ec7c <_fwalk_reent+0x24>
 800ec70:	6824      	ldr	r4, [r4, #0]
 800ec72:	2c00      	cmp	r4, #0
 800ec74:	d1f7      	bne.n	800ec66 <_fwalk_reent+0xe>
 800ec76:	4638      	mov	r0, r7
 800ec78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec7c:	89ab      	ldrh	r3, [r5, #12]
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d907      	bls.n	800ec92 <_fwalk_reent+0x3a>
 800ec82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec86:	3301      	adds	r3, #1
 800ec88:	d003      	beq.n	800ec92 <_fwalk_reent+0x3a>
 800ec8a:	4629      	mov	r1, r5
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	47c0      	blx	r8
 800ec90:	4307      	orrs	r7, r0
 800ec92:	3568      	adds	r5, #104	; 0x68
 800ec94:	e7e9      	b.n	800ec6a <_fwalk_reent+0x12>
	...

0800ec98 <_localeconv_r>:
 800ec98:	4800      	ldr	r0, [pc, #0]	; (800ec9c <_localeconv_r+0x4>)
 800ec9a:	4770      	bx	lr
 800ec9c:	200001bc 	.word	0x200001bc

0800eca0 <__retarget_lock_init_recursive>:
 800eca0:	4770      	bx	lr

0800eca2 <__retarget_lock_acquire_recursive>:
 800eca2:	4770      	bx	lr

0800eca4 <__retarget_lock_release_recursive>:
 800eca4:	4770      	bx	lr

0800eca6 <__swhatbuf_r>:
 800eca6:	b570      	push	{r4, r5, r6, lr}
 800eca8:	460e      	mov	r6, r1
 800ecaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecae:	2900      	cmp	r1, #0
 800ecb0:	b096      	sub	sp, #88	; 0x58
 800ecb2:	4614      	mov	r4, r2
 800ecb4:	461d      	mov	r5, r3
 800ecb6:	da07      	bge.n	800ecc8 <__swhatbuf_r+0x22>
 800ecb8:	2300      	movs	r3, #0
 800ecba:	602b      	str	r3, [r5, #0]
 800ecbc:	89b3      	ldrh	r3, [r6, #12]
 800ecbe:	061a      	lsls	r2, r3, #24
 800ecc0:	d410      	bmi.n	800ece4 <__swhatbuf_r+0x3e>
 800ecc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecc6:	e00e      	b.n	800ece6 <__swhatbuf_r+0x40>
 800ecc8:	466a      	mov	r2, sp
 800ecca:	f000 fe91 	bl	800f9f0 <_fstat_r>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	dbf2      	blt.n	800ecb8 <__swhatbuf_r+0x12>
 800ecd2:	9a01      	ldr	r2, [sp, #4]
 800ecd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ecd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ecdc:	425a      	negs	r2, r3
 800ecde:	415a      	adcs	r2, r3
 800ece0:	602a      	str	r2, [r5, #0]
 800ece2:	e7ee      	b.n	800ecc2 <__swhatbuf_r+0x1c>
 800ece4:	2340      	movs	r3, #64	; 0x40
 800ece6:	2000      	movs	r0, #0
 800ece8:	6023      	str	r3, [r4, #0]
 800ecea:	b016      	add	sp, #88	; 0x58
 800ecec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ecf0 <__smakebuf_r>:
 800ecf0:	898b      	ldrh	r3, [r1, #12]
 800ecf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ecf4:	079d      	lsls	r5, r3, #30
 800ecf6:	4606      	mov	r6, r0
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	d507      	bpl.n	800ed0c <__smakebuf_r+0x1c>
 800ecfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed00:	6023      	str	r3, [r4, #0]
 800ed02:	6123      	str	r3, [r4, #16]
 800ed04:	2301      	movs	r3, #1
 800ed06:	6163      	str	r3, [r4, #20]
 800ed08:	b002      	add	sp, #8
 800ed0a:	bd70      	pop	{r4, r5, r6, pc}
 800ed0c:	ab01      	add	r3, sp, #4
 800ed0e:	466a      	mov	r2, sp
 800ed10:	f7ff ffc9 	bl	800eca6 <__swhatbuf_r>
 800ed14:	9900      	ldr	r1, [sp, #0]
 800ed16:	4605      	mov	r5, r0
 800ed18:	4630      	mov	r0, r6
 800ed1a:	f000 fc0f 	bl	800f53c <_malloc_r>
 800ed1e:	b948      	cbnz	r0, 800ed34 <__smakebuf_r+0x44>
 800ed20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed24:	059a      	lsls	r2, r3, #22
 800ed26:	d4ef      	bmi.n	800ed08 <__smakebuf_r+0x18>
 800ed28:	f023 0303 	bic.w	r3, r3, #3
 800ed2c:	f043 0302 	orr.w	r3, r3, #2
 800ed30:	81a3      	strh	r3, [r4, #12]
 800ed32:	e7e3      	b.n	800ecfc <__smakebuf_r+0xc>
 800ed34:	4b0d      	ldr	r3, [pc, #52]	; (800ed6c <__smakebuf_r+0x7c>)
 800ed36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed38:	89a3      	ldrh	r3, [r4, #12]
 800ed3a:	6020      	str	r0, [r4, #0]
 800ed3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed40:	81a3      	strh	r3, [r4, #12]
 800ed42:	9b00      	ldr	r3, [sp, #0]
 800ed44:	6163      	str	r3, [r4, #20]
 800ed46:	9b01      	ldr	r3, [sp, #4]
 800ed48:	6120      	str	r0, [r4, #16]
 800ed4a:	b15b      	cbz	r3, 800ed64 <__smakebuf_r+0x74>
 800ed4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed50:	4630      	mov	r0, r6
 800ed52:	f000 fe5f 	bl	800fa14 <_isatty_r>
 800ed56:	b128      	cbz	r0, 800ed64 <__smakebuf_r+0x74>
 800ed58:	89a3      	ldrh	r3, [r4, #12]
 800ed5a:	f023 0303 	bic.w	r3, r3, #3
 800ed5e:	f043 0301 	orr.w	r3, r3, #1
 800ed62:	81a3      	strh	r3, [r4, #12]
 800ed64:	89a0      	ldrh	r0, [r4, #12]
 800ed66:	4305      	orrs	r5, r0
 800ed68:	81a5      	strh	r5, [r4, #12]
 800ed6a:	e7cd      	b.n	800ed08 <__smakebuf_r+0x18>
 800ed6c:	0800eaf5 	.word	0x0800eaf5

0800ed70 <malloc>:
 800ed70:	4b02      	ldr	r3, [pc, #8]	; (800ed7c <malloc+0xc>)
 800ed72:	4601      	mov	r1, r0
 800ed74:	6818      	ldr	r0, [r3, #0]
 800ed76:	f000 bbe1 	b.w	800f53c <_malloc_r>
 800ed7a:	bf00      	nop
 800ed7c:	20000068 	.word	0x20000068

0800ed80 <_Balloc>:
 800ed80:	b570      	push	{r4, r5, r6, lr}
 800ed82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed84:	4604      	mov	r4, r0
 800ed86:	460d      	mov	r5, r1
 800ed88:	b976      	cbnz	r6, 800eda8 <_Balloc+0x28>
 800ed8a:	2010      	movs	r0, #16
 800ed8c:	f7ff fff0 	bl	800ed70 <malloc>
 800ed90:	4602      	mov	r2, r0
 800ed92:	6260      	str	r0, [r4, #36]	; 0x24
 800ed94:	b920      	cbnz	r0, 800eda0 <_Balloc+0x20>
 800ed96:	4b18      	ldr	r3, [pc, #96]	; (800edf8 <_Balloc+0x78>)
 800ed98:	4818      	ldr	r0, [pc, #96]	; (800edfc <_Balloc+0x7c>)
 800ed9a:	2166      	movs	r1, #102	; 0x66
 800ed9c:	f000 fde8 	bl	800f970 <__assert_func>
 800eda0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eda4:	6006      	str	r6, [r0, #0]
 800eda6:	60c6      	str	r6, [r0, #12]
 800eda8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800edaa:	68f3      	ldr	r3, [r6, #12]
 800edac:	b183      	cbz	r3, 800edd0 <_Balloc+0x50>
 800edae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edb0:	68db      	ldr	r3, [r3, #12]
 800edb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800edb6:	b9b8      	cbnz	r0, 800ede8 <_Balloc+0x68>
 800edb8:	2101      	movs	r1, #1
 800edba:	fa01 f605 	lsl.w	r6, r1, r5
 800edbe:	1d72      	adds	r2, r6, #5
 800edc0:	0092      	lsls	r2, r2, #2
 800edc2:	4620      	mov	r0, r4
 800edc4:	f000 fb5a 	bl	800f47c <_calloc_r>
 800edc8:	b160      	cbz	r0, 800ede4 <_Balloc+0x64>
 800edca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800edce:	e00e      	b.n	800edee <_Balloc+0x6e>
 800edd0:	2221      	movs	r2, #33	; 0x21
 800edd2:	2104      	movs	r1, #4
 800edd4:	4620      	mov	r0, r4
 800edd6:	f000 fb51 	bl	800f47c <_calloc_r>
 800edda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eddc:	60f0      	str	r0, [r6, #12]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1e4      	bne.n	800edae <_Balloc+0x2e>
 800ede4:	2000      	movs	r0, #0
 800ede6:	bd70      	pop	{r4, r5, r6, pc}
 800ede8:	6802      	ldr	r2, [r0, #0]
 800edea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edee:	2300      	movs	r3, #0
 800edf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edf4:	e7f7      	b.n	800ede6 <_Balloc+0x66>
 800edf6:	bf00      	nop
 800edf8:	08013eed 	.word	0x08013eed
 800edfc:	08013fd4 	.word	0x08013fd4

0800ee00 <_Bfree>:
 800ee00:	b570      	push	{r4, r5, r6, lr}
 800ee02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee04:	4605      	mov	r5, r0
 800ee06:	460c      	mov	r4, r1
 800ee08:	b976      	cbnz	r6, 800ee28 <_Bfree+0x28>
 800ee0a:	2010      	movs	r0, #16
 800ee0c:	f7ff ffb0 	bl	800ed70 <malloc>
 800ee10:	4602      	mov	r2, r0
 800ee12:	6268      	str	r0, [r5, #36]	; 0x24
 800ee14:	b920      	cbnz	r0, 800ee20 <_Bfree+0x20>
 800ee16:	4b09      	ldr	r3, [pc, #36]	; (800ee3c <_Bfree+0x3c>)
 800ee18:	4809      	ldr	r0, [pc, #36]	; (800ee40 <_Bfree+0x40>)
 800ee1a:	218a      	movs	r1, #138	; 0x8a
 800ee1c:	f000 fda8 	bl	800f970 <__assert_func>
 800ee20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee24:	6006      	str	r6, [r0, #0]
 800ee26:	60c6      	str	r6, [r0, #12]
 800ee28:	b13c      	cbz	r4, 800ee3a <_Bfree+0x3a>
 800ee2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee2c:	6862      	ldr	r2, [r4, #4]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee34:	6021      	str	r1, [r4, #0]
 800ee36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee3a:	bd70      	pop	{r4, r5, r6, pc}
 800ee3c:	08013eed 	.word	0x08013eed
 800ee40:	08013fd4 	.word	0x08013fd4

0800ee44 <__multadd>:
 800ee44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee48:	690e      	ldr	r6, [r1, #16]
 800ee4a:	4607      	mov	r7, r0
 800ee4c:	4698      	mov	r8, r3
 800ee4e:	460c      	mov	r4, r1
 800ee50:	f101 0014 	add.w	r0, r1, #20
 800ee54:	2300      	movs	r3, #0
 800ee56:	6805      	ldr	r5, [r0, #0]
 800ee58:	b2a9      	uxth	r1, r5
 800ee5a:	fb02 8101 	mla	r1, r2, r1, r8
 800ee5e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ee62:	0c2d      	lsrs	r5, r5, #16
 800ee64:	fb02 c505 	mla	r5, r2, r5, ip
 800ee68:	b289      	uxth	r1, r1
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ee70:	429e      	cmp	r6, r3
 800ee72:	f840 1b04 	str.w	r1, [r0], #4
 800ee76:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ee7a:	dcec      	bgt.n	800ee56 <__multadd+0x12>
 800ee7c:	f1b8 0f00 	cmp.w	r8, #0
 800ee80:	d022      	beq.n	800eec8 <__multadd+0x84>
 800ee82:	68a3      	ldr	r3, [r4, #8]
 800ee84:	42b3      	cmp	r3, r6
 800ee86:	dc19      	bgt.n	800eebc <__multadd+0x78>
 800ee88:	6861      	ldr	r1, [r4, #4]
 800ee8a:	4638      	mov	r0, r7
 800ee8c:	3101      	adds	r1, #1
 800ee8e:	f7ff ff77 	bl	800ed80 <_Balloc>
 800ee92:	4605      	mov	r5, r0
 800ee94:	b928      	cbnz	r0, 800eea2 <__multadd+0x5e>
 800ee96:	4602      	mov	r2, r0
 800ee98:	4b0d      	ldr	r3, [pc, #52]	; (800eed0 <__multadd+0x8c>)
 800ee9a:	480e      	ldr	r0, [pc, #56]	; (800eed4 <__multadd+0x90>)
 800ee9c:	21b5      	movs	r1, #181	; 0xb5
 800ee9e:	f000 fd67 	bl	800f970 <__assert_func>
 800eea2:	6922      	ldr	r2, [r4, #16]
 800eea4:	3202      	adds	r2, #2
 800eea6:	f104 010c 	add.w	r1, r4, #12
 800eeaa:	0092      	lsls	r2, r2, #2
 800eeac:	300c      	adds	r0, #12
 800eeae:	f7fe f8f3 	bl	800d098 <memcpy>
 800eeb2:	4621      	mov	r1, r4
 800eeb4:	4638      	mov	r0, r7
 800eeb6:	f7ff ffa3 	bl	800ee00 <_Bfree>
 800eeba:	462c      	mov	r4, r5
 800eebc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800eec0:	3601      	adds	r6, #1
 800eec2:	f8c3 8014 	str.w	r8, [r3, #20]
 800eec6:	6126      	str	r6, [r4, #16]
 800eec8:	4620      	mov	r0, r4
 800eeca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eece:	bf00      	nop
 800eed0:	08013f63 	.word	0x08013f63
 800eed4:	08013fd4 	.word	0x08013fd4

0800eed8 <__hi0bits>:
 800eed8:	0c03      	lsrs	r3, r0, #16
 800eeda:	041b      	lsls	r3, r3, #16
 800eedc:	b9d3      	cbnz	r3, 800ef14 <__hi0bits+0x3c>
 800eede:	0400      	lsls	r0, r0, #16
 800eee0:	2310      	movs	r3, #16
 800eee2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eee6:	bf04      	itt	eq
 800eee8:	0200      	lsleq	r0, r0, #8
 800eeea:	3308      	addeq	r3, #8
 800eeec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eef0:	bf04      	itt	eq
 800eef2:	0100      	lsleq	r0, r0, #4
 800eef4:	3304      	addeq	r3, #4
 800eef6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eefa:	bf04      	itt	eq
 800eefc:	0080      	lsleq	r0, r0, #2
 800eefe:	3302      	addeq	r3, #2
 800ef00:	2800      	cmp	r0, #0
 800ef02:	db05      	blt.n	800ef10 <__hi0bits+0x38>
 800ef04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ef08:	f103 0301 	add.w	r3, r3, #1
 800ef0c:	bf08      	it	eq
 800ef0e:	2320      	moveq	r3, #32
 800ef10:	4618      	mov	r0, r3
 800ef12:	4770      	bx	lr
 800ef14:	2300      	movs	r3, #0
 800ef16:	e7e4      	b.n	800eee2 <__hi0bits+0xa>

0800ef18 <__lo0bits>:
 800ef18:	6803      	ldr	r3, [r0, #0]
 800ef1a:	f013 0207 	ands.w	r2, r3, #7
 800ef1e:	4601      	mov	r1, r0
 800ef20:	d00b      	beq.n	800ef3a <__lo0bits+0x22>
 800ef22:	07da      	lsls	r2, r3, #31
 800ef24:	d424      	bmi.n	800ef70 <__lo0bits+0x58>
 800ef26:	0798      	lsls	r0, r3, #30
 800ef28:	bf49      	itett	mi
 800ef2a:	085b      	lsrmi	r3, r3, #1
 800ef2c:	089b      	lsrpl	r3, r3, #2
 800ef2e:	2001      	movmi	r0, #1
 800ef30:	600b      	strmi	r3, [r1, #0]
 800ef32:	bf5c      	itt	pl
 800ef34:	600b      	strpl	r3, [r1, #0]
 800ef36:	2002      	movpl	r0, #2
 800ef38:	4770      	bx	lr
 800ef3a:	b298      	uxth	r0, r3
 800ef3c:	b9b0      	cbnz	r0, 800ef6c <__lo0bits+0x54>
 800ef3e:	0c1b      	lsrs	r3, r3, #16
 800ef40:	2010      	movs	r0, #16
 800ef42:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ef46:	bf04      	itt	eq
 800ef48:	0a1b      	lsreq	r3, r3, #8
 800ef4a:	3008      	addeq	r0, #8
 800ef4c:	071a      	lsls	r2, r3, #28
 800ef4e:	bf04      	itt	eq
 800ef50:	091b      	lsreq	r3, r3, #4
 800ef52:	3004      	addeq	r0, #4
 800ef54:	079a      	lsls	r2, r3, #30
 800ef56:	bf04      	itt	eq
 800ef58:	089b      	lsreq	r3, r3, #2
 800ef5a:	3002      	addeq	r0, #2
 800ef5c:	07da      	lsls	r2, r3, #31
 800ef5e:	d403      	bmi.n	800ef68 <__lo0bits+0x50>
 800ef60:	085b      	lsrs	r3, r3, #1
 800ef62:	f100 0001 	add.w	r0, r0, #1
 800ef66:	d005      	beq.n	800ef74 <__lo0bits+0x5c>
 800ef68:	600b      	str	r3, [r1, #0]
 800ef6a:	4770      	bx	lr
 800ef6c:	4610      	mov	r0, r2
 800ef6e:	e7e8      	b.n	800ef42 <__lo0bits+0x2a>
 800ef70:	2000      	movs	r0, #0
 800ef72:	4770      	bx	lr
 800ef74:	2020      	movs	r0, #32
 800ef76:	4770      	bx	lr

0800ef78 <__i2b>:
 800ef78:	b510      	push	{r4, lr}
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	2101      	movs	r1, #1
 800ef7e:	f7ff feff 	bl	800ed80 <_Balloc>
 800ef82:	4602      	mov	r2, r0
 800ef84:	b928      	cbnz	r0, 800ef92 <__i2b+0x1a>
 800ef86:	4b05      	ldr	r3, [pc, #20]	; (800ef9c <__i2b+0x24>)
 800ef88:	4805      	ldr	r0, [pc, #20]	; (800efa0 <__i2b+0x28>)
 800ef8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ef8e:	f000 fcef 	bl	800f970 <__assert_func>
 800ef92:	2301      	movs	r3, #1
 800ef94:	6144      	str	r4, [r0, #20]
 800ef96:	6103      	str	r3, [r0, #16]
 800ef98:	bd10      	pop	{r4, pc}
 800ef9a:	bf00      	nop
 800ef9c:	08013f63 	.word	0x08013f63
 800efa0:	08013fd4 	.word	0x08013fd4

0800efa4 <__multiply>:
 800efa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efa8:	4614      	mov	r4, r2
 800efaa:	690a      	ldr	r2, [r1, #16]
 800efac:	6923      	ldr	r3, [r4, #16]
 800efae:	429a      	cmp	r2, r3
 800efb0:	bfb8      	it	lt
 800efb2:	460b      	movlt	r3, r1
 800efb4:	460d      	mov	r5, r1
 800efb6:	bfbc      	itt	lt
 800efb8:	4625      	movlt	r5, r4
 800efba:	461c      	movlt	r4, r3
 800efbc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800efc0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800efc4:	68ab      	ldr	r3, [r5, #8]
 800efc6:	6869      	ldr	r1, [r5, #4]
 800efc8:	eb0a 0709 	add.w	r7, sl, r9
 800efcc:	42bb      	cmp	r3, r7
 800efce:	b085      	sub	sp, #20
 800efd0:	bfb8      	it	lt
 800efd2:	3101      	addlt	r1, #1
 800efd4:	f7ff fed4 	bl	800ed80 <_Balloc>
 800efd8:	b930      	cbnz	r0, 800efe8 <__multiply+0x44>
 800efda:	4602      	mov	r2, r0
 800efdc:	4b42      	ldr	r3, [pc, #264]	; (800f0e8 <__multiply+0x144>)
 800efde:	4843      	ldr	r0, [pc, #268]	; (800f0ec <__multiply+0x148>)
 800efe0:	f240 115d 	movw	r1, #349	; 0x15d
 800efe4:	f000 fcc4 	bl	800f970 <__assert_func>
 800efe8:	f100 0614 	add.w	r6, r0, #20
 800efec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800eff0:	4633      	mov	r3, r6
 800eff2:	2200      	movs	r2, #0
 800eff4:	4543      	cmp	r3, r8
 800eff6:	d31e      	bcc.n	800f036 <__multiply+0x92>
 800eff8:	f105 0c14 	add.w	ip, r5, #20
 800effc:	f104 0314 	add.w	r3, r4, #20
 800f000:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f004:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f008:	9202      	str	r2, [sp, #8]
 800f00a:	ebac 0205 	sub.w	r2, ip, r5
 800f00e:	3a15      	subs	r2, #21
 800f010:	f022 0203 	bic.w	r2, r2, #3
 800f014:	3204      	adds	r2, #4
 800f016:	f105 0115 	add.w	r1, r5, #21
 800f01a:	458c      	cmp	ip, r1
 800f01c:	bf38      	it	cc
 800f01e:	2204      	movcc	r2, #4
 800f020:	9201      	str	r2, [sp, #4]
 800f022:	9a02      	ldr	r2, [sp, #8]
 800f024:	9303      	str	r3, [sp, #12]
 800f026:	429a      	cmp	r2, r3
 800f028:	d808      	bhi.n	800f03c <__multiply+0x98>
 800f02a:	2f00      	cmp	r7, #0
 800f02c:	dc55      	bgt.n	800f0da <__multiply+0x136>
 800f02e:	6107      	str	r7, [r0, #16]
 800f030:	b005      	add	sp, #20
 800f032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f036:	f843 2b04 	str.w	r2, [r3], #4
 800f03a:	e7db      	b.n	800eff4 <__multiply+0x50>
 800f03c:	f8b3 a000 	ldrh.w	sl, [r3]
 800f040:	f1ba 0f00 	cmp.w	sl, #0
 800f044:	d020      	beq.n	800f088 <__multiply+0xe4>
 800f046:	f105 0e14 	add.w	lr, r5, #20
 800f04a:	46b1      	mov	r9, r6
 800f04c:	2200      	movs	r2, #0
 800f04e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f052:	f8d9 b000 	ldr.w	fp, [r9]
 800f056:	b2a1      	uxth	r1, r4
 800f058:	fa1f fb8b 	uxth.w	fp, fp
 800f05c:	fb0a b101 	mla	r1, sl, r1, fp
 800f060:	4411      	add	r1, r2
 800f062:	f8d9 2000 	ldr.w	r2, [r9]
 800f066:	0c24      	lsrs	r4, r4, #16
 800f068:	0c12      	lsrs	r2, r2, #16
 800f06a:	fb0a 2404 	mla	r4, sl, r4, r2
 800f06e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f072:	b289      	uxth	r1, r1
 800f074:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f078:	45f4      	cmp	ip, lr
 800f07a:	f849 1b04 	str.w	r1, [r9], #4
 800f07e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f082:	d8e4      	bhi.n	800f04e <__multiply+0xaa>
 800f084:	9901      	ldr	r1, [sp, #4]
 800f086:	5072      	str	r2, [r6, r1]
 800f088:	9a03      	ldr	r2, [sp, #12]
 800f08a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f08e:	3304      	adds	r3, #4
 800f090:	f1b9 0f00 	cmp.w	r9, #0
 800f094:	d01f      	beq.n	800f0d6 <__multiply+0x132>
 800f096:	6834      	ldr	r4, [r6, #0]
 800f098:	f105 0114 	add.w	r1, r5, #20
 800f09c:	46b6      	mov	lr, r6
 800f09e:	f04f 0a00 	mov.w	sl, #0
 800f0a2:	880a      	ldrh	r2, [r1, #0]
 800f0a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f0a8:	fb09 b202 	mla	r2, r9, r2, fp
 800f0ac:	4492      	add	sl, r2
 800f0ae:	b2a4      	uxth	r4, r4
 800f0b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f0b4:	f84e 4b04 	str.w	r4, [lr], #4
 800f0b8:	f851 4b04 	ldr.w	r4, [r1], #4
 800f0bc:	f8be 2000 	ldrh.w	r2, [lr]
 800f0c0:	0c24      	lsrs	r4, r4, #16
 800f0c2:	fb09 2404 	mla	r4, r9, r4, r2
 800f0c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f0ca:	458c      	cmp	ip, r1
 800f0cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f0d0:	d8e7      	bhi.n	800f0a2 <__multiply+0xfe>
 800f0d2:	9a01      	ldr	r2, [sp, #4]
 800f0d4:	50b4      	str	r4, [r6, r2]
 800f0d6:	3604      	adds	r6, #4
 800f0d8:	e7a3      	b.n	800f022 <__multiply+0x7e>
 800f0da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1a5      	bne.n	800f02e <__multiply+0x8a>
 800f0e2:	3f01      	subs	r7, #1
 800f0e4:	e7a1      	b.n	800f02a <__multiply+0x86>
 800f0e6:	bf00      	nop
 800f0e8:	08013f63 	.word	0x08013f63
 800f0ec:	08013fd4 	.word	0x08013fd4

0800f0f0 <__pow5mult>:
 800f0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0f4:	4615      	mov	r5, r2
 800f0f6:	f012 0203 	ands.w	r2, r2, #3
 800f0fa:	4606      	mov	r6, r0
 800f0fc:	460f      	mov	r7, r1
 800f0fe:	d007      	beq.n	800f110 <__pow5mult+0x20>
 800f100:	4c25      	ldr	r4, [pc, #148]	; (800f198 <__pow5mult+0xa8>)
 800f102:	3a01      	subs	r2, #1
 800f104:	2300      	movs	r3, #0
 800f106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f10a:	f7ff fe9b 	bl	800ee44 <__multadd>
 800f10e:	4607      	mov	r7, r0
 800f110:	10ad      	asrs	r5, r5, #2
 800f112:	d03d      	beq.n	800f190 <__pow5mult+0xa0>
 800f114:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f116:	b97c      	cbnz	r4, 800f138 <__pow5mult+0x48>
 800f118:	2010      	movs	r0, #16
 800f11a:	f7ff fe29 	bl	800ed70 <malloc>
 800f11e:	4602      	mov	r2, r0
 800f120:	6270      	str	r0, [r6, #36]	; 0x24
 800f122:	b928      	cbnz	r0, 800f130 <__pow5mult+0x40>
 800f124:	4b1d      	ldr	r3, [pc, #116]	; (800f19c <__pow5mult+0xac>)
 800f126:	481e      	ldr	r0, [pc, #120]	; (800f1a0 <__pow5mult+0xb0>)
 800f128:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f12c:	f000 fc20 	bl	800f970 <__assert_func>
 800f130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f134:	6004      	str	r4, [r0, #0]
 800f136:	60c4      	str	r4, [r0, #12]
 800f138:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f13c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f140:	b94c      	cbnz	r4, 800f156 <__pow5mult+0x66>
 800f142:	f240 2171 	movw	r1, #625	; 0x271
 800f146:	4630      	mov	r0, r6
 800f148:	f7ff ff16 	bl	800ef78 <__i2b>
 800f14c:	2300      	movs	r3, #0
 800f14e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f152:	4604      	mov	r4, r0
 800f154:	6003      	str	r3, [r0, #0]
 800f156:	f04f 0900 	mov.w	r9, #0
 800f15a:	07eb      	lsls	r3, r5, #31
 800f15c:	d50a      	bpl.n	800f174 <__pow5mult+0x84>
 800f15e:	4639      	mov	r1, r7
 800f160:	4622      	mov	r2, r4
 800f162:	4630      	mov	r0, r6
 800f164:	f7ff ff1e 	bl	800efa4 <__multiply>
 800f168:	4639      	mov	r1, r7
 800f16a:	4680      	mov	r8, r0
 800f16c:	4630      	mov	r0, r6
 800f16e:	f7ff fe47 	bl	800ee00 <_Bfree>
 800f172:	4647      	mov	r7, r8
 800f174:	106d      	asrs	r5, r5, #1
 800f176:	d00b      	beq.n	800f190 <__pow5mult+0xa0>
 800f178:	6820      	ldr	r0, [r4, #0]
 800f17a:	b938      	cbnz	r0, 800f18c <__pow5mult+0x9c>
 800f17c:	4622      	mov	r2, r4
 800f17e:	4621      	mov	r1, r4
 800f180:	4630      	mov	r0, r6
 800f182:	f7ff ff0f 	bl	800efa4 <__multiply>
 800f186:	6020      	str	r0, [r4, #0]
 800f188:	f8c0 9000 	str.w	r9, [r0]
 800f18c:	4604      	mov	r4, r0
 800f18e:	e7e4      	b.n	800f15a <__pow5mult+0x6a>
 800f190:	4638      	mov	r0, r7
 800f192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f196:	bf00      	nop
 800f198:	08014128 	.word	0x08014128
 800f19c:	08013eed 	.word	0x08013eed
 800f1a0:	08013fd4 	.word	0x08013fd4

0800f1a4 <__lshift>:
 800f1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a8:	460c      	mov	r4, r1
 800f1aa:	6849      	ldr	r1, [r1, #4]
 800f1ac:	6923      	ldr	r3, [r4, #16]
 800f1ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f1b2:	68a3      	ldr	r3, [r4, #8]
 800f1b4:	4607      	mov	r7, r0
 800f1b6:	4691      	mov	r9, r2
 800f1b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f1bc:	f108 0601 	add.w	r6, r8, #1
 800f1c0:	42b3      	cmp	r3, r6
 800f1c2:	db0b      	blt.n	800f1dc <__lshift+0x38>
 800f1c4:	4638      	mov	r0, r7
 800f1c6:	f7ff fddb 	bl	800ed80 <_Balloc>
 800f1ca:	4605      	mov	r5, r0
 800f1cc:	b948      	cbnz	r0, 800f1e2 <__lshift+0x3e>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	4b28      	ldr	r3, [pc, #160]	; (800f274 <__lshift+0xd0>)
 800f1d2:	4829      	ldr	r0, [pc, #164]	; (800f278 <__lshift+0xd4>)
 800f1d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f1d8:	f000 fbca 	bl	800f970 <__assert_func>
 800f1dc:	3101      	adds	r1, #1
 800f1de:	005b      	lsls	r3, r3, #1
 800f1e0:	e7ee      	b.n	800f1c0 <__lshift+0x1c>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f100 0114 	add.w	r1, r0, #20
 800f1e8:	f100 0210 	add.w	r2, r0, #16
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	4553      	cmp	r3, sl
 800f1f0:	db33      	blt.n	800f25a <__lshift+0xb6>
 800f1f2:	6920      	ldr	r0, [r4, #16]
 800f1f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f1f8:	f104 0314 	add.w	r3, r4, #20
 800f1fc:	f019 091f 	ands.w	r9, r9, #31
 800f200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f208:	d02b      	beq.n	800f262 <__lshift+0xbe>
 800f20a:	f1c9 0e20 	rsb	lr, r9, #32
 800f20e:	468a      	mov	sl, r1
 800f210:	2200      	movs	r2, #0
 800f212:	6818      	ldr	r0, [r3, #0]
 800f214:	fa00 f009 	lsl.w	r0, r0, r9
 800f218:	4302      	orrs	r2, r0
 800f21a:	f84a 2b04 	str.w	r2, [sl], #4
 800f21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f222:	459c      	cmp	ip, r3
 800f224:	fa22 f20e 	lsr.w	r2, r2, lr
 800f228:	d8f3      	bhi.n	800f212 <__lshift+0x6e>
 800f22a:	ebac 0304 	sub.w	r3, ip, r4
 800f22e:	3b15      	subs	r3, #21
 800f230:	f023 0303 	bic.w	r3, r3, #3
 800f234:	3304      	adds	r3, #4
 800f236:	f104 0015 	add.w	r0, r4, #21
 800f23a:	4584      	cmp	ip, r0
 800f23c:	bf38      	it	cc
 800f23e:	2304      	movcc	r3, #4
 800f240:	50ca      	str	r2, [r1, r3]
 800f242:	b10a      	cbz	r2, 800f248 <__lshift+0xa4>
 800f244:	f108 0602 	add.w	r6, r8, #2
 800f248:	3e01      	subs	r6, #1
 800f24a:	4638      	mov	r0, r7
 800f24c:	612e      	str	r6, [r5, #16]
 800f24e:	4621      	mov	r1, r4
 800f250:	f7ff fdd6 	bl	800ee00 <_Bfree>
 800f254:	4628      	mov	r0, r5
 800f256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f25a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f25e:	3301      	adds	r3, #1
 800f260:	e7c5      	b.n	800f1ee <__lshift+0x4a>
 800f262:	3904      	subs	r1, #4
 800f264:	f853 2b04 	ldr.w	r2, [r3], #4
 800f268:	f841 2f04 	str.w	r2, [r1, #4]!
 800f26c:	459c      	cmp	ip, r3
 800f26e:	d8f9      	bhi.n	800f264 <__lshift+0xc0>
 800f270:	e7ea      	b.n	800f248 <__lshift+0xa4>
 800f272:	bf00      	nop
 800f274:	08013f63 	.word	0x08013f63
 800f278:	08013fd4 	.word	0x08013fd4

0800f27c <__mcmp>:
 800f27c:	b530      	push	{r4, r5, lr}
 800f27e:	6902      	ldr	r2, [r0, #16]
 800f280:	690c      	ldr	r4, [r1, #16]
 800f282:	1b12      	subs	r2, r2, r4
 800f284:	d10e      	bne.n	800f2a4 <__mcmp+0x28>
 800f286:	f100 0314 	add.w	r3, r0, #20
 800f28a:	3114      	adds	r1, #20
 800f28c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f29c:	42a5      	cmp	r5, r4
 800f29e:	d003      	beq.n	800f2a8 <__mcmp+0x2c>
 800f2a0:	d305      	bcc.n	800f2ae <__mcmp+0x32>
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	4610      	mov	r0, r2
 800f2a6:	bd30      	pop	{r4, r5, pc}
 800f2a8:	4283      	cmp	r3, r0
 800f2aa:	d3f3      	bcc.n	800f294 <__mcmp+0x18>
 800f2ac:	e7fa      	b.n	800f2a4 <__mcmp+0x28>
 800f2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b2:	e7f7      	b.n	800f2a4 <__mcmp+0x28>

0800f2b4 <__mdiff>:
 800f2b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b8:	460c      	mov	r4, r1
 800f2ba:	4606      	mov	r6, r0
 800f2bc:	4611      	mov	r1, r2
 800f2be:	4620      	mov	r0, r4
 800f2c0:	4617      	mov	r7, r2
 800f2c2:	f7ff ffdb 	bl	800f27c <__mcmp>
 800f2c6:	1e05      	subs	r5, r0, #0
 800f2c8:	d110      	bne.n	800f2ec <__mdiff+0x38>
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	f7ff fd57 	bl	800ed80 <_Balloc>
 800f2d2:	b930      	cbnz	r0, 800f2e2 <__mdiff+0x2e>
 800f2d4:	4b39      	ldr	r3, [pc, #228]	; (800f3bc <__mdiff+0x108>)
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	f240 2132 	movw	r1, #562	; 0x232
 800f2dc:	4838      	ldr	r0, [pc, #224]	; (800f3c0 <__mdiff+0x10c>)
 800f2de:	f000 fb47 	bl	800f970 <__assert_func>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ec:	bfa4      	itt	ge
 800f2ee:	463b      	movge	r3, r7
 800f2f0:	4627      	movge	r7, r4
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	6879      	ldr	r1, [r7, #4]
 800f2f6:	bfa6      	itte	ge
 800f2f8:	461c      	movge	r4, r3
 800f2fa:	2500      	movge	r5, #0
 800f2fc:	2501      	movlt	r5, #1
 800f2fe:	f7ff fd3f 	bl	800ed80 <_Balloc>
 800f302:	b920      	cbnz	r0, 800f30e <__mdiff+0x5a>
 800f304:	4b2d      	ldr	r3, [pc, #180]	; (800f3bc <__mdiff+0x108>)
 800f306:	4602      	mov	r2, r0
 800f308:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f30c:	e7e6      	b.n	800f2dc <__mdiff+0x28>
 800f30e:	693e      	ldr	r6, [r7, #16]
 800f310:	60c5      	str	r5, [r0, #12]
 800f312:	6925      	ldr	r5, [r4, #16]
 800f314:	f107 0114 	add.w	r1, r7, #20
 800f318:	f104 0914 	add.w	r9, r4, #20
 800f31c:	f100 0e14 	add.w	lr, r0, #20
 800f320:	f107 0210 	add.w	r2, r7, #16
 800f324:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f328:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f32c:	46f2      	mov	sl, lr
 800f32e:	2700      	movs	r7, #0
 800f330:	f859 3b04 	ldr.w	r3, [r9], #4
 800f334:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f338:	fa1f f883 	uxth.w	r8, r3
 800f33c:	fa17 f78b 	uxtah	r7, r7, fp
 800f340:	0c1b      	lsrs	r3, r3, #16
 800f342:	eba7 0808 	sub.w	r8, r7, r8
 800f346:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f34a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f34e:	fa1f f888 	uxth.w	r8, r8
 800f352:	141f      	asrs	r7, r3, #16
 800f354:	454d      	cmp	r5, r9
 800f356:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f35a:	f84a 3b04 	str.w	r3, [sl], #4
 800f35e:	d8e7      	bhi.n	800f330 <__mdiff+0x7c>
 800f360:	1b2b      	subs	r3, r5, r4
 800f362:	3b15      	subs	r3, #21
 800f364:	f023 0303 	bic.w	r3, r3, #3
 800f368:	3304      	adds	r3, #4
 800f36a:	3415      	adds	r4, #21
 800f36c:	42a5      	cmp	r5, r4
 800f36e:	bf38      	it	cc
 800f370:	2304      	movcc	r3, #4
 800f372:	4419      	add	r1, r3
 800f374:	4473      	add	r3, lr
 800f376:	469e      	mov	lr, r3
 800f378:	460d      	mov	r5, r1
 800f37a:	4565      	cmp	r5, ip
 800f37c:	d30e      	bcc.n	800f39c <__mdiff+0xe8>
 800f37e:	f10c 0203 	add.w	r2, ip, #3
 800f382:	1a52      	subs	r2, r2, r1
 800f384:	f022 0203 	bic.w	r2, r2, #3
 800f388:	3903      	subs	r1, #3
 800f38a:	458c      	cmp	ip, r1
 800f38c:	bf38      	it	cc
 800f38e:	2200      	movcc	r2, #0
 800f390:	441a      	add	r2, r3
 800f392:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f396:	b17b      	cbz	r3, 800f3b8 <__mdiff+0x104>
 800f398:	6106      	str	r6, [r0, #16]
 800f39a:	e7a5      	b.n	800f2e8 <__mdiff+0x34>
 800f39c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f3a0:	fa17 f488 	uxtah	r4, r7, r8
 800f3a4:	1422      	asrs	r2, r4, #16
 800f3a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f3aa:	b2a4      	uxth	r4, r4
 800f3ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f3b0:	f84e 4b04 	str.w	r4, [lr], #4
 800f3b4:	1417      	asrs	r7, r2, #16
 800f3b6:	e7e0      	b.n	800f37a <__mdiff+0xc6>
 800f3b8:	3e01      	subs	r6, #1
 800f3ba:	e7ea      	b.n	800f392 <__mdiff+0xde>
 800f3bc:	08013f63 	.word	0x08013f63
 800f3c0:	08013fd4 	.word	0x08013fd4

0800f3c4 <__d2b>:
 800f3c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3c8:	4689      	mov	r9, r1
 800f3ca:	2101      	movs	r1, #1
 800f3cc:	ec57 6b10 	vmov	r6, r7, d0
 800f3d0:	4690      	mov	r8, r2
 800f3d2:	f7ff fcd5 	bl	800ed80 <_Balloc>
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	b930      	cbnz	r0, 800f3e8 <__d2b+0x24>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	4b25      	ldr	r3, [pc, #148]	; (800f474 <__d2b+0xb0>)
 800f3de:	4826      	ldr	r0, [pc, #152]	; (800f478 <__d2b+0xb4>)
 800f3e0:	f240 310a 	movw	r1, #778	; 0x30a
 800f3e4:	f000 fac4 	bl	800f970 <__assert_func>
 800f3e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f3ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f3f0:	bb35      	cbnz	r5, 800f440 <__d2b+0x7c>
 800f3f2:	2e00      	cmp	r6, #0
 800f3f4:	9301      	str	r3, [sp, #4]
 800f3f6:	d028      	beq.n	800f44a <__d2b+0x86>
 800f3f8:	4668      	mov	r0, sp
 800f3fa:	9600      	str	r6, [sp, #0]
 800f3fc:	f7ff fd8c 	bl	800ef18 <__lo0bits>
 800f400:	9900      	ldr	r1, [sp, #0]
 800f402:	b300      	cbz	r0, 800f446 <__d2b+0x82>
 800f404:	9a01      	ldr	r2, [sp, #4]
 800f406:	f1c0 0320 	rsb	r3, r0, #32
 800f40a:	fa02 f303 	lsl.w	r3, r2, r3
 800f40e:	430b      	orrs	r3, r1
 800f410:	40c2      	lsrs	r2, r0
 800f412:	6163      	str	r3, [r4, #20]
 800f414:	9201      	str	r2, [sp, #4]
 800f416:	9b01      	ldr	r3, [sp, #4]
 800f418:	61a3      	str	r3, [r4, #24]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	bf14      	ite	ne
 800f41e:	2202      	movne	r2, #2
 800f420:	2201      	moveq	r2, #1
 800f422:	6122      	str	r2, [r4, #16]
 800f424:	b1d5      	cbz	r5, 800f45c <__d2b+0x98>
 800f426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f42a:	4405      	add	r5, r0
 800f42c:	f8c9 5000 	str.w	r5, [r9]
 800f430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f434:	f8c8 0000 	str.w	r0, [r8]
 800f438:	4620      	mov	r0, r4
 800f43a:	b003      	add	sp, #12
 800f43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f444:	e7d5      	b.n	800f3f2 <__d2b+0x2e>
 800f446:	6161      	str	r1, [r4, #20]
 800f448:	e7e5      	b.n	800f416 <__d2b+0x52>
 800f44a:	a801      	add	r0, sp, #4
 800f44c:	f7ff fd64 	bl	800ef18 <__lo0bits>
 800f450:	9b01      	ldr	r3, [sp, #4]
 800f452:	6163      	str	r3, [r4, #20]
 800f454:	2201      	movs	r2, #1
 800f456:	6122      	str	r2, [r4, #16]
 800f458:	3020      	adds	r0, #32
 800f45a:	e7e3      	b.n	800f424 <__d2b+0x60>
 800f45c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f464:	f8c9 0000 	str.w	r0, [r9]
 800f468:	6918      	ldr	r0, [r3, #16]
 800f46a:	f7ff fd35 	bl	800eed8 <__hi0bits>
 800f46e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f472:	e7df      	b.n	800f434 <__d2b+0x70>
 800f474:	08013f63 	.word	0x08013f63
 800f478:	08013fd4 	.word	0x08013fd4

0800f47c <_calloc_r>:
 800f47c:	b513      	push	{r0, r1, r4, lr}
 800f47e:	434a      	muls	r2, r1
 800f480:	4611      	mov	r1, r2
 800f482:	9201      	str	r2, [sp, #4]
 800f484:	f000 f85a 	bl	800f53c <_malloc_r>
 800f488:	4604      	mov	r4, r0
 800f48a:	b118      	cbz	r0, 800f494 <_calloc_r+0x18>
 800f48c:	9a01      	ldr	r2, [sp, #4]
 800f48e:	2100      	movs	r1, #0
 800f490:	f7fd fe10 	bl	800d0b4 <memset>
 800f494:	4620      	mov	r0, r4
 800f496:	b002      	add	sp, #8
 800f498:	bd10      	pop	{r4, pc}
	...

0800f49c <_free_r>:
 800f49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f49e:	2900      	cmp	r1, #0
 800f4a0:	d048      	beq.n	800f534 <_free_r+0x98>
 800f4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4a6:	9001      	str	r0, [sp, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800f4ae:	bfb8      	it	lt
 800f4b0:	18e4      	addlt	r4, r4, r3
 800f4b2:	f000 fae3 	bl	800fa7c <__malloc_lock>
 800f4b6:	4a20      	ldr	r2, [pc, #128]	; (800f538 <_free_r+0x9c>)
 800f4b8:	9801      	ldr	r0, [sp, #4]
 800f4ba:	6813      	ldr	r3, [r2, #0]
 800f4bc:	4615      	mov	r5, r2
 800f4be:	b933      	cbnz	r3, 800f4ce <_free_r+0x32>
 800f4c0:	6063      	str	r3, [r4, #4]
 800f4c2:	6014      	str	r4, [r2, #0]
 800f4c4:	b003      	add	sp, #12
 800f4c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4ca:	f000 badd 	b.w	800fa88 <__malloc_unlock>
 800f4ce:	42a3      	cmp	r3, r4
 800f4d0:	d90b      	bls.n	800f4ea <_free_r+0x4e>
 800f4d2:	6821      	ldr	r1, [r4, #0]
 800f4d4:	1862      	adds	r2, r4, r1
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	bf04      	itt	eq
 800f4da:	681a      	ldreq	r2, [r3, #0]
 800f4dc:	685b      	ldreq	r3, [r3, #4]
 800f4de:	6063      	str	r3, [r4, #4]
 800f4e0:	bf04      	itt	eq
 800f4e2:	1852      	addeq	r2, r2, r1
 800f4e4:	6022      	streq	r2, [r4, #0]
 800f4e6:	602c      	str	r4, [r5, #0]
 800f4e8:	e7ec      	b.n	800f4c4 <_free_r+0x28>
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	b10b      	cbz	r3, 800f4f4 <_free_r+0x58>
 800f4f0:	42a3      	cmp	r3, r4
 800f4f2:	d9fa      	bls.n	800f4ea <_free_r+0x4e>
 800f4f4:	6811      	ldr	r1, [r2, #0]
 800f4f6:	1855      	adds	r5, r2, r1
 800f4f8:	42a5      	cmp	r5, r4
 800f4fa:	d10b      	bne.n	800f514 <_free_r+0x78>
 800f4fc:	6824      	ldr	r4, [r4, #0]
 800f4fe:	4421      	add	r1, r4
 800f500:	1854      	adds	r4, r2, r1
 800f502:	42a3      	cmp	r3, r4
 800f504:	6011      	str	r1, [r2, #0]
 800f506:	d1dd      	bne.n	800f4c4 <_free_r+0x28>
 800f508:	681c      	ldr	r4, [r3, #0]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	6053      	str	r3, [r2, #4]
 800f50e:	4421      	add	r1, r4
 800f510:	6011      	str	r1, [r2, #0]
 800f512:	e7d7      	b.n	800f4c4 <_free_r+0x28>
 800f514:	d902      	bls.n	800f51c <_free_r+0x80>
 800f516:	230c      	movs	r3, #12
 800f518:	6003      	str	r3, [r0, #0]
 800f51a:	e7d3      	b.n	800f4c4 <_free_r+0x28>
 800f51c:	6825      	ldr	r5, [r4, #0]
 800f51e:	1961      	adds	r1, r4, r5
 800f520:	428b      	cmp	r3, r1
 800f522:	bf04      	itt	eq
 800f524:	6819      	ldreq	r1, [r3, #0]
 800f526:	685b      	ldreq	r3, [r3, #4]
 800f528:	6063      	str	r3, [r4, #4]
 800f52a:	bf04      	itt	eq
 800f52c:	1949      	addeq	r1, r1, r5
 800f52e:	6021      	streq	r1, [r4, #0]
 800f530:	6054      	str	r4, [r2, #4]
 800f532:	e7c7      	b.n	800f4c4 <_free_r+0x28>
 800f534:	b003      	add	sp, #12
 800f536:	bd30      	pop	{r4, r5, pc}
 800f538:	20021c64 	.word	0x20021c64

0800f53c <_malloc_r>:
 800f53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f53e:	1ccd      	adds	r5, r1, #3
 800f540:	f025 0503 	bic.w	r5, r5, #3
 800f544:	3508      	adds	r5, #8
 800f546:	2d0c      	cmp	r5, #12
 800f548:	bf38      	it	cc
 800f54a:	250c      	movcc	r5, #12
 800f54c:	2d00      	cmp	r5, #0
 800f54e:	4606      	mov	r6, r0
 800f550:	db01      	blt.n	800f556 <_malloc_r+0x1a>
 800f552:	42a9      	cmp	r1, r5
 800f554:	d903      	bls.n	800f55e <_malloc_r+0x22>
 800f556:	230c      	movs	r3, #12
 800f558:	6033      	str	r3, [r6, #0]
 800f55a:	2000      	movs	r0, #0
 800f55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f55e:	f000 fa8d 	bl	800fa7c <__malloc_lock>
 800f562:	4921      	ldr	r1, [pc, #132]	; (800f5e8 <_malloc_r+0xac>)
 800f564:	680a      	ldr	r2, [r1, #0]
 800f566:	4614      	mov	r4, r2
 800f568:	b99c      	cbnz	r4, 800f592 <_malloc_r+0x56>
 800f56a:	4f20      	ldr	r7, [pc, #128]	; (800f5ec <_malloc_r+0xb0>)
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	b923      	cbnz	r3, 800f57a <_malloc_r+0x3e>
 800f570:	4621      	mov	r1, r4
 800f572:	4630      	mov	r0, r6
 800f574:	f000 f996 	bl	800f8a4 <_sbrk_r>
 800f578:	6038      	str	r0, [r7, #0]
 800f57a:	4629      	mov	r1, r5
 800f57c:	4630      	mov	r0, r6
 800f57e:	f000 f991 	bl	800f8a4 <_sbrk_r>
 800f582:	1c43      	adds	r3, r0, #1
 800f584:	d123      	bne.n	800f5ce <_malloc_r+0x92>
 800f586:	230c      	movs	r3, #12
 800f588:	6033      	str	r3, [r6, #0]
 800f58a:	4630      	mov	r0, r6
 800f58c:	f000 fa7c 	bl	800fa88 <__malloc_unlock>
 800f590:	e7e3      	b.n	800f55a <_malloc_r+0x1e>
 800f592:	6823      	ldr	r3, [r4, #0]
 800f594:	1b5b      	subs	r3, r3, r5
 800f596:	d417      	bmi.n	800f5c8 <_malloc_r+0x8c>
 800f598:	2b0b      	cmp	r3, #11
 800f59a:	d903      	bls.n	800f5a4 <_malloc_r+0x68>
 800f59c:	6023      	str	r3, [r4, #0]
 800f59e:	441c      	add	r4, r3
 800f5a0:	6025      	str	r5, [r4, #0]
 800f5a2:	e004      	b.n	800f5ae <_malloc_r+0x72>
 800f5a4:	6863      	ldr	r3, [r4, #4]
 800f5a6:	42a2      	cmp	r2, r4
 800f5a8:	bf0c      	ite	eq
 800f5aa:	600b      	streq	r3, [r1, #0]
 800f5ac:	6053      	strne	r3, [r2, #4]
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	f000 fa6a 	bl	800fa88 <__malloc_unlock>
 800f5b4:	f104 000b 	add.w	r0, r4, #11
 800f5b8:	1d23      	adds	r3, r4, #4
 800f5ba:	f020 0007 	bic.w	r0, r0, #7
 800f5be:	1ac2      	subs	r2, r0, r3
 800f5c0:	d0cc      	beq.n	800f55c <_malloc_r+0x20>
 800f5c2:	1a1b      	subs	r3, r3, r0
 800f5c4:	50a3      	str	r3, [r4, r2]
 800f5c6:	e7c9      	b.n	800f55c <_malloc_r+0x20>
 800f5c8:	4622      	mov	r2, r4
 800f5ca:	6864      	ldr	r4, [r4, #4]
 800f5cc:	e7cc      	b.n	800f568 <_malloc_r+0x2c>
 800f5ce:	1cc4      	adds	r4, r0, #3
 800f5d0:	f024 0403 	bic.w	r4, r4, #3
 800f5d4:	42a0      	cmp	r0, r4
 800f5d6:	d0e3      	beq.n	800f5a0 <_malloc_r+0x64>
 800f5d8:	1a21      	subs	r1, r4, r0
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f000 f962 	bl	800f8a4 <_sbrk_r>
 800f5e0:	3001      	adds	r0, #1
 800f5e2:	d1dd      	bne.n	800f5a0 <_malloc_r+0x64>
 800f5e4:	e7cf      	b.n	800f586 <_malloc_r+0x4a>
 800f5e6:	bf00      	nop
 800f5e8:	20021c64 	.word	0x20021c64
 800f5ec:	20021c68 	.word	0x20021c68

0800f5f0 <__sfputc_r>:
 800f5f0:	6893      	ldr	r3, [r2, #8]
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	b410      	push	{r4}
 800f5f8:	6093      	str	r3, [r2, #8]
 800f5fa:	da08      	bge.n	800f60e <__sfputc_r+0x1e>
 800f5fc:	6994      	ldr	r4, [r2, #24]
 800f5fe:	42a3      	cmp	r3, r4
 800f600:	db01      	blt.n	800f606 <__sfputc_r+0x16>
 800f602:	290a      	cmp	r1, #10
 800f604:	d103      	bne.n	800f60e <__sfputc_r+0x1e>
 800f606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f60a:	f7fe ba53 	b.w	800dab4 <__swbuf_r>
 800f60e:	6813      	ldr	r3, [r2, #0]
 800f610:	1c58      	adds	r0, r3, #1
 800f612:	6010      	str	r0, [r2, #0]
 800f614:	7019      	strb	r1, [r3, #0]
 800f616:	4608      	mov	r0, r1
 800f618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f61c:	4770      	bx	lr

0800f61e <__sfputs_r>:
 800f61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f620:	4606      	mov	r6, r0
 800f622:	460f      	mov	r7, r1
 800f624:	4614      	mov	r4, r2
 800f626:	18d5      	adds	r5, r2, r3
 800f628:	42ac      	cmp	r4, r5
 800f62a:	d101      	bne.n	800f630 <__sfputs_r+0x12>
 800f62c:	2000      	movs	r0, #0
 800f62e:	e007      	b.n	800f640 <__sfputs_r+0x22>
 800f630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f634:	463a      	mov	r2, r7
 800f636:	4630      	mov	r0, r6
 800f638:	f7ff ffda 	bl	800f5f0 <__sfputc_r>
 800f63c:	1c43      	adds	r3, r0, #1
 800f63e:	d1f3      	bne.n	800f628 <__sfputs_r+0xa>
 800f640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f644 <_vfiprintf_r>:
 800f644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f648:	460d      	mov	r5, r1
 800f64a:	b09d      	sub	sp, #116	; 0x74
 800f64c:	4614      	mov	r4, r2
 800f64e:	4698      	mov	r8, r3
 800f650:	4606      	mov	r6, r0
 800f652:	b118      	cbz	r0, 800f65c <_vfiprintf_r+0x18>
 800f654:	6983      	ldr	r3, [r0, #24]
 800f656:	b90b      	cbnz	r3, 800f65c <_vfiprintf_r+0x18>
 800f658:	f7ff fa80 	bl	800eb5c <__sinit>
 800f65c:	4b89      	ldr	r3, [pc, #548]	; (800f884 <_vfiprintf_r+0x240>)
 800f65e:	429d      	cmp	r5, r3
 800f660:	d11b      	bne.n	800f69a <_vfiprintf_r+0x56>
 800f662:	6875      	ldr	r5, [r6, #4]
 800f664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f666:	07d9      	lsls	r1, r3, #31
 800f668:	d405      	bmi.n	800f676 <_vfiprintf_r+0x32>
 800f66a:	89ab      	ldrh	r3, [r5, #12]
 800f66c:	059a      	lsls	r2, r3, #22
 800f66e:	d402      	bmi.n	800f676 <_vfiprintf_r+0x32>
 800f670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f672:	f7ff fb16 	bl	800eca2 <__retarget_lock_acquire_recursive>
 800f676:	89ab      	ldrh	r3, [r5, #12]
 800f678:	071b      	lsls	r3, r3, #28
 800f67a:	d501      	bpl.n	800f680 <_vfiprintf_r+0x3c>
 800f67c:	692b      	ldr	r3, [r5, #16]
 800f67e:	b9eb      	cbnz	r3, 800f6bc <_vfiprintf_r+0x78>
 800f680:	4629      	mov	r1, r5
 800f682:	4630      	mov	r0, r6
 800f684:	f7fe fa68 	bl	800db58 <__swsetup_r>
 800f688:	b1c0      	cbz	r0, 800f6bc <_vfiprintf_r+0x78>
 800f68a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f68c:	07dc      	lsls	r4, r3, #31
 800f68e:	d50e      	bpl.n	800f6ae <_vfiprintf_r+0x6a>
 800f690:	f04f 30ff 	mov.w	r0, #4294967295
 800f694:	b01d      	add	sp, #116	; 0x74
 800f696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f69a:	4b7b      	ldr	r3, [pc, #492]	; (800f888 <_vfiprintf_r+0x244>)
 800f69c:	429d      	cmp	r5, r3
 800f69e:	d101      	bne.n	800f6a4 <_vfiprintf_r+0x60>
 800f6a0:	68b5      	ldr	r5, [r6, #8]
 800f6a2:	e7df      	b.n	800f664 <_vfiprintf_r+0x20>
 800f6a4:	4b79      	ldr	r3, [pc, #484]	; (800f88c <_vfiprintf_r+0x248>)
 800f6a6:	429d      	cmp	r5, r3
 800f6a8:	bf08      	it	eq
 800f6aa:	68f5      	ldreq	r5, [r6, #12]
 800f6ac:	e7da      	b.n	800f664 <_vfiprintf_r+0x20>
 800f6ae:	89ab      	ldrh	r3, [r5, #12]
 800f6b0:	0598      	lsls	r0, r3, #22
 800f6b2:	d4ed      	bmi.n	800f690 <_vfiprintf_r+0x4c>
 800f6b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6b6:	f7ff faf5 	bl	800eca4 <__retarget_lock_release_recursive>
 800f6ba:	e7e9      	b.n	800f690 <_vfiprintf_r+0x4c>
 800f6bc:	2300      	movs	r3, #0
 800f6be:	9309      	str	r3, [sp, #36]	; 0x24
 800f6c0:	2320      	movs	r3, #32
 800f6c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6ca:	2330      	movs	r3, #48	; 0x30
 800f6cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f890 <_vfiprintf_r+0x24c>
 800f6d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6d4:	f04f 0901 	mov.w	r9, #1
 800f6d8:	4623      	mov	r3, r4
 800f6da:	469a      	mov	sl, r3
 800f6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6e0:	b10a      	cbz	r2, 800f6e6 <_vfiprintf_r+0xa2>
 800f6e2:	2a25      	cmp	r2, #37	; 0x25
 800f6e4:	d1f9      	bne.n	800f6da <_vfiprintf_r+0x96>
 800f6e6:	ebba 0b04 	subs.w	fp, sl, r4
 800f6ea:	d00b      	beq.n	800f704 <_vfiprintf_r+0xc0>
 800f6ec:	465b      	mov	r3, fp
 800f6ee:	4622      	mov	r2, r4
 800f6f0:	4629      	mov	r1, r5
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f7ff ff93 	bl	800f61e <__sfputs_r>
 800f6f8:	3001      	adds	r0, #1
 800f6fa:	f000 80aa 	beq.w	800f852 <_vfiprintf_r+0x20e>
 800f6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f700:	445a      	add	r2, fp
 800f702:	9209      	str	r2, [sp, #36]	; 0x24
 800f704:	f89a 3000 	ldrb.w	r3, [sl]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	f000 80a2 	beq.w	800f852 <_vfiprintf_r+0x20e>
 800f70e:	2300      	movs	r3, #0
 800f710:	f04f 32ff 	mov.w	r2, #4294967295
 800f714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f718:	f10a 0a01 	add.w	sl, sl, #1
 800f71c:	9304      	str	r3, [sp, #16]
 800f71e:	9307      	str	r3, [sp, #28]
 800f720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f724:	931a      	str	r3, [sp, #104]	; 0x68
 800f726:	4654      	mov	r4, sl
 800f728:	2205      	movs	r2, #5
 800f72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f72e:	4858      	ldr	r0, [pc, #352]	; (800f890 <_vfiprintf_r+0x24c>)
 800f730:	f7f0 fd66 	bl	8000200 <memchr>
 800f734:	9a04      	ldr	r2, [sp, #16]
 800f736:	b9d8      	cbnz	r0, 800f770 <_vfiprintf_r+0x12c>
 800f738:	06d1      	lsls	r1, r2, #27
 800f73a:	bf44      	itt	mi
 800f73c:	2320      	movmi	r3, #32
 800f73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f742:	0713      	lsls	r3, r2, #28
 800f744:	bf44      	itt	mi
 800f746:	232b      	movmi	r3, #43	; 0x2b
 800f748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f74c:	f89a 3000 	ldrb.w	r3, [sl]
 800f750:	2b2a      	cmp	r3, #42	; 0x2a
 800f752:	d015      	beq.n	800f780 <_vfiprintf_r+0x13c>
 800f754:	9a07      	ldr	r2, [sp, #28]
 800f756:	4654      	mov	r4, sl
 800f758:	2000      	movs	r0, #0
 800f75a:	f04f 0c0a 	mov.w	ip, #10
 800f75e:	4621      	mov	r1, r4
 800f760:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f764:	3b30      	subs	r3, #48	; 0x30
 800f766:	2b09      	cmp	r3, #9
 800f768:	d94e      	bls.n	800f808 <_vfiprintf_r+0x1c4>
 800f76a:	b1b0      	cbz	r0, 800f79a <_vfiprintf_r+0x156>
 800f76c:	9207      	str	r2, [sp, #28]
 800f76e:	e014      	b.n	800f79a <_vfiprintf_r+0x156>
 800f770:	eba0 0308 	sub.w	r3, r0, r8
 800f774:	fa09 f303 	lsl.w	r3, r9, r3
 800f778:	4313      	orrs	r3, r2
 800f77a:	9304      	str	r3, [sp, #16]
 800f77c:	46a2      	mov	sl, r4
 800f77e:	e7d2      	b.n	800f726 <_vfiprintf_r+0xe2>
 800f780:	9b03      	ldr	r3, [sp, #12]
 800f782:	1d19      	adds	r1, r3, #4
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	9103      	str	r1, [sp, #12]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	bfbb      	ittet	lt
 800f78c:	425b      	neglt	r3, r3
 800f78e:	f042 0202 	orrlt.w	r2, r2, #2
 800f792:	9307      	strge	r3, [sp, #28]
 800f794:	9307      	strlt	r3, [sp, #28]
 800f796:	bfb8      	it	lt
 800f798:	9204      	strlt	r2, [sp, #16]
 800f79a:	7823      	ldrb	r3, [r4, #0]
 800f79c:	2b2e      	cmp	r3, #46	; 0x2e
 800f79e:	d10c      	bne.n	800f7ba <_vfiprintf_r+0x176>
 800f7a0:	7863      	ldrb	r3, [r4, #1]
 800f7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800f7a4:	d135      	bne.n	800f812 <_vfiprintf_r+0x1ce>
 800f7a6:	9b03      	ldr	r3, [sp, #12]
 800f7a8:	1d1a      	adds	r2, r3, #4
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	9203      	str	r2, [sp, #12]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	bfb8      	it	lt
 800f7b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7b6:	3402      	adds	r4, #2
 800f7b8:	9305      	str	r3, [sp, #20]
 800f7ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f8a0 <_vfiprintf_r+0x25c>
 800f7be:	7821      	ldrb	r1, [r4, #0]
 800f7c0:	2203      	movs	r2, #3
 800f7c2:	4650      	mov	r0, sl
 800f7c4:	f7f0 fd1c 	bl	8000200 <memchr>
 800f7c8:	b140      	cbz	r0, 800f7dc <_vfiprintf_r+0x198>
 800f7ca:	2340      	movs	r3, #64	; 0x40
 800f7cc:	eba0 000a 	sub.w	r0, r0, sl
 800f7d0:	fa03 f000 	lsl.w	r0, r3, r0
 800f7d4:	9b04      	ldr	r3, [sp, #16]
 800f7d6:	4303      	orrs	r3, r0
 800f7d8:	3401      	adds	r4, #1
 800f7da:	9304      	str	r3, [sp, #16]
 800f7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7e0:	482c      	ldr	r0, [pc, #176]	; (800f894 <_vfiprintf_r+0x250>)
 800f7e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7e6:	2206      	movs	r2, #6
 800f7e8:	f7f0 fd0a 	bl	8000200 <memchr>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d03f      	beq.n	800f870 <_vfiprintf_r+0x22c>
 800f7f0:	4b29      	ldr	r3, [pc, #164]	; (800f898 <_vfiprintf_r+0x254>)
 800f7f2:	bb1b      	cbnz	r3, 800f83c <_vfiprintf_r+0x1f8>
 800f7f4:	9b03      	ldr	r3, [sp, #12]
 800f7f6:	3307      	adds	r3, #7
 800f7f8:	f023 0307 	bic.w	r3, r3, #7
 800f7fc:	3308      	adds	r3, #8
 800f7fe:	9303      	str	r3, [sp, #12]
 800f800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f802:	443b      	add	r3, r7
 800f804:	9309      	str	r3, [sp, #36]	; 0x24
 800f806:	e767      	b.n	800f6d8 <_vfiprintf_r+0x94>
 800f808:	fb0c 3202 	mla	r2, ip, r2, r3
 800f80c:	460c      	mov	r4, r1
 800f80e:	2001      	movs	r0, #1
 800f810:	e7a5      	b.n	800f75e <_vfiprintf_r+0x11a>
 800f812:	2300      	movs	r3, #0
 800f814:	3401      	adds	r4, #1
 800f816:	9305      	str	r3, [sp, #20]
 800f818:	4619      	mov	r1, r3
 800f81a:	f04f 0c0a 	mov.w	ip, #10
 800f81e:	4620      	mov	r0, r4
 800f820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f824:	3a30      	subs	r2, #48	; 0x30
 800f826:	2a09      	cmp	r2, #9
 800f828:	d903      	bls.n	800f832 <_vfiprintf_r+0x1ee>
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d0c5      	beq.n	800f7ba <_vfiprintf_r+0x176>
 800f82e:	9105      	str	r1, [sp, #20]
 800f830:	e7c3      	b.n	800f7ba <_vfiprintf_r+0x176>
 800f832:	fb0c 2101 	mla	r1, ip, r1, r2
 800f836:	4604      	mov	r4, r0
 800f838:	2301      	movs	r3, #1
 800f83a:	e7f0      	b.n	800f81e <_vfiprintf_r+0x1da>
 800f83c:	ab03      	add	r3, sp, #12
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	462a      	mov	r2, r5
 800f842:	4b16      	ldr	r3, [pc, #88]	; (800f89c <_vfiprintf_r+0x258>)
 800f844:	a904      	add	r1, sp, #16
 800f846:	4630      	mov	r0, r6
 800f848:	f7fd fcdc 	bl	800d204 <_printf_float>
 800f84c:	4607      	mov	r7, r0
 800f84e:	1c78      	adds	r0, r7, #1
 800f850:	d1d6      	bne.n	800f800 <_vfiprintf_r+0x1bc>
 800f852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f854:	07d9      	lsls	r1, r3, #31
 800f856:	d405      	bmi.n	800f864 <_vfiprintf_r+0x220>
 800f858:	89ab      	ldrh	r3, [r5, #12]
 800f85a:	059a      	lsls	r2, r3, #22
 800f85c:	d402      	bmi.n	800f864 <_vfiprintf_r+0x220>
 800f85e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f860:	f7ff fa20 	bl	800eca4 <__retarget_lock_release_recursive>
 800f864:	89ab      	ldrh	r3, [r5, #12]
 800f866:	065b      	lsls	r3, r3, #25
 800f868:	f53f af12 	bmi.w	800f690 <_vfiprintf_r+0x4c>
 800f86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f86e:	e711      	b.n	800f694 <_vfiprintf_r+0x50>
 800f870:	ab03      	add	r3, sp, #12
 800f872:	9300      	str	r3, [sp, #0]
 800f874:	462a      	mov	r2, r5
 800f876:	4b09      	ldr	r3, [pc, #36]	; (800f89c <_vfiprintf_r+0x258>)
 800f878:	a904      	add	r1, sp, #16
 800f87a:	4630      	mov	r0, r6
 800f87c:	f7fd ff66 	bl	800d74c <_printf_i>
 800f880:	e7e4      	b.n	800f84c <_vfiprintf_r+0x208>
 800f882:	bf00      	nop
 800f884:	08013f94 	.word	0x08013f94
 800f888:	08013fb4 	.word	0x08013fb4
 800f88c:	08013f74 	.word	0x08013f74
 800f890:	08014134 	.word	0x08014134
 800f894:	0801413e 	.word	0x0801413e
 800f898:	0800d205 	.word	0x0800d205
 800f89c:	0800f61f 	.word	0x0800f61f
 800f8a0:	0801413a 	.word	0x0801413a

0800f8a4 <_sbrk_r>:
 800f8a4:	b538      	push	{r3, r4, r5, lr}
 800f8a6:	4d06      	ldr	r5, [pc, #24]	; (800f8c0 <_sbrk_r+0x1c>)
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	4608      	mov	r0, r1
 800f8ae:	602b      	str	r3, [r5, #0]
 800f8b0:	f7f2 fbb0 	bl	8002014 <_sbrk>
 800f8b4:	1c43      	adds	r3, r0, #1
 800f8b6:	d102      	bne.n	800f8be <_sbrk_r+0x1a>
 800f8b8:	682b      	ldr	r3, [r5, #0]
 800f8ba:	b103      	cbz	r3, 800f8be <_sbrk_r+0x1a>
 800f8bc:	6023      	str	r3, [r4, #0]
 800f8be:	bd38      	pop	{r3, r4, r5, pc}
 800f8c0:	20022128 	.word	0x20022128

0800f8c4 <__sread>:
 800f8c4:	b510      	push	{r4, lr}
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8cc:	f000 f8e2 	bl	800fa94 <_read_r>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	bfab      	itete	ge
 800f8d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f8d6:	89a3      	ldrhlt	r3, [r4, #12]
 800f8d8:	181b      	addge	r3, r3, r0
 800f8da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f8de:	bfac      	ite	ge
 800f8e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f8e2:	81a3      	strhlt	r3, [r4, #12]
 800f8e4:	bd10      	pop	{r4, pc}

0800f8e6 <__swrite>:
 800f8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ea:	461f      	mov	r7, r3
 800f8ec:	898b      	ldrh	r3, [r1, #12]
 800f8ee:	05db      	lsls	r3, r3, #23
 800f8f0:	4605      	mov	r5, r0
 800f8f2:	460c      	mov	r4, r1
 800f8f4:	4616      	mov	r6, r2
 800f8f6:	d505      	bpl.n	800f904 <__swrite+0x1e>
 800f8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	2200      	movs	r2, #0
 800f900:	f000 f898 	bl	800fa34 <_lseek_r>
 800f904:	89a3      	ldrh	r3, [r4, #12]
 800f906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f90a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f90e:	81a3      	strh	r3, [r4, #12]
 800f910:	4632      	mov	r2, r6
 800f912:	463b      	mov	r3, r7
 800f914:	4628      	mov	r0, r5
 800f916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f91a:	f000 b817 	b.w	800f94c <_write_r>

0800f91e <__sseek>:
 800f91e:	b510      	push	{r4, lr}
 800f920:	460c      	mov	r4, r1
 800f922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f926:	f000 f885 	bl	800fa34 <_lseek_r>
 800f92a:	1c43      	adds	r3, r0, #1
 800f92c:	89a3      	ldrh	r3, [r4, #12]
 800f92e:	bf15      	itete	ne
 800f930:	6560      	strne	r0, [r4, #84]	; 0x54
 800f932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f93a:	81a3      	strheq	r3, [r4, #12]
 800f93c:	bf18      	it	ne
 800f93e:	81a3      	strhne	r3, [r4, #12]
 800f940:	bd10      	pop	{r4, pc}

0800f942 <__sclose>:
 800f942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f946:	f000 b831 	b.w	800f9ac <_close_r>
	...

0800f94c <_write_r>:
 800f94c:	b538      	push	{r3, r4, r5, lr}
 800f94e:	4d07      	ldr	r5, [pc, #28]	; (800f96c <_write_r+0x20>)
 800f950:	4604      	mov	r4, r0
 800f952:	4608      	mov	r0, r1
 800f954:	4611      	mov	r1, r2
 800f956:	2200      	movs	r2, #0
 800f958:	602a      	str	r2, [r5, #0]
 800f95a:	461a      	mov	r2, r3
 800f95c:	f7f2 fb09 	bl	8001f72 <_write>
 800f960:	1c43      	adds	r3, r0, #1
 800f962:	d102      	bne.n	800f96a <_write_r+0x1e>
 800f964:	682b      	ldr	r3, [r5, #0]
 800f966:	b103      	cbz	r3, 800f96a <_write_r+0x1e>
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	bd38      	pop	{r3, r4, r5, pc}
 800f96c:	20022128 	.word	0x20022128

0800f970 <__assert_func>:
 800f970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f972:	4614      	mov	r4, r2
 800f974:	461a      	mov	r2, r3
 800f976:	4b09      	ldr	r3, [pc, #36]	; (800f99c <__assert_func+0x2c>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4605      	mov	r5, r0
 800f97c:	68d8      	ldr	r0, [r3, #12]
 800f97e:	b14c      	cbz	r4, 800f994 <__assert_func+0x24>
 800f980:	4b07      	ldr	r3, [pc, #28]	; (800f9a0 <__assert_func+0x30>)
 800f982:	9100      	str	r1, [sp, #0]
 800f984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f988:	4906      	ldr	r1, [pc, #24]	; (800f9a4 <__assert_func+0x34>)
 800f98a:	462b      	mov	r3, r5
 800f98c:	f000 f81e 	bl	800f9cc <fiprintf>
 800f990:	f000 f89f 	bl	800fad2 <abort>
 800f994:	4b04      	ldr	r3, [pc, #16]	; (800f9a8 <__assert_func+0x38>)
 800f996:	461c      	mov	r4, r3
 800f998:	e7f3      	b.n	800f982 <__assert_func+0x12>
 800f99a:	bf00      	nop
 800f99c:	20000068 	.word	0x20000068
 800f9a0:	08014145 	.word	0x08014145
 800f9a4:	08014152 	.word	0x08014152
 800f9a8:	08014180 	.word	0x08014180

0800f9ac <_close_r>:
 800f9ac:	b538      	push	{r3, r4, r5, lr}
 800f9ae:	4d06      	ldr	r5, [pc, #24]	; (800f9c8 <_close_r+0x1c>)
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	4604      	mov	r4, r0
 800f9b4:	4608      	mov	r0, r1
 800f9b6:	602b      	str	r3, [r5, #0]
 800f9b8:	f7f2 faf7 	bl	8001faa <_close>
 800f9bc:	1c43      	adds	r3, r0, #1
 800f9be:	d102      	bne.n	800f9c6 <_close_r+0x1a>
 800f9c0:	682b      	ldr	r3, [r5, #0]
 800f9c2:	b103      	cbz	r3, 800f9c6 <_close_r+0x1a>
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	bd38      	pop	{r3, r4, r5, pc}
 800f9c8:	20022128 	.word	0x20022128

0800f9cc <fiprintf>:
 800f9cc:	b40e      	push	{r1, r2, r3}
 800f9ce:	b503      	push	{r0, r1, lr}
 800f9d0:	4601      	mov	r1, r0
 800f9d2:	ab03      	add	r3, sp, #12
 800f9d4:	4805      	ldr	r0, [pc, #20]	; (800f9ec <fiprintf+0x20>)
 800f9d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9da:	6800      	ldr	r0, [r0, #0]
 800f9dc:	9301      	str	r3, [sp, #4]
 800f9de:	f7ff fe31 	bl	800f644 <_vfiprintf_r>
 800f9e2:	b002      	add	sp, #8
 800f9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9e8:	b003      	add	sp, #12
 800f9ea:	4770      	bx	lr
 800f9ec:	20000068 	.word	0x20000068

0800f9f0 <_fstat_r>:
 800f9f0:	b538      	push	{r3, r4, r5, lr}
 800f9f2:	4d07      	ldr	r5, [pc, #28]	; (800fa10 <_fstat_r+0x20>)
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	4608      	mov	r0, r1
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	602b      	str	r3, [r5, #0]
 800f9fe:	f7f2 fae0 	bl	8001fc2 <_fstat>
 800fa02:	1c43      	adds	r3, r0, #1
 800fa04:	d102      	bne.n	800fa0c <_fstat_r+0x1c>
 800fa06:	682b      	ldr	r3, [r5, #0]
 800fa08:	b103      	cbz	r3, 800fa0c <_fstat_r+0x1c>
 800fa0a:	6023      	str	r3, [r4, #0]
 800fa0c:	bd38      	pop	{r3, r4, r5, pc}
 800fa0e:	bf00      	nop
 800fa10:	20022128 	.word	0x20022128

0800fa14 <_isatty_r>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	4d06      	ldr	r5, [pc, #24]	; (800fa30 <_isatty_r+0x1c>)
 800fa18:	2300      	movs	r3, #0
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	4608      	mov	r0, r1
 800fa1e:	602b      	str	r3, [r5, #0]
 800fa20:	f7f2 fadf 	bl	8001fe2 <_isatty>
 800fa24:	1c43      	adds	r3, r0, #1
 800fa26:	d102      	bne.n	800fa2e <_isatty_r+0x1a>
 800fa28:	682b      	ldr	r3, [r5, #0]
 800fa2a:	b103      	cbz	r3, 800fa2e <_isatty_r+0x1a>
 800fa2c:	6023      	str	r3, [r4, #0]
 800fa2e:	bd38      	pop	{r3, r4, r5, pc}
 800fa30:	20022128 	.word	0x20022128

0800fa34 <_lseek_r>:
 800fa34:	b538      	push	{r3, r4, r5, lr}
 800fa36:	4d07      	ldr	r5, [pc, #28]	; (800fa54 <_lseek_r+0x20>)
 800fa38:	4604      	mov	r4, r0
 800fa3a:	4608      	mov	r0, r1
 800fa3c:	4611      	mov	r1, r2
 800fa3e:	2200      	movs	r2, #0
 800fa40:	602a      	str	r2, [r5, #0]
 800fa42:	461a      	mov	r2, r3
 800fa44:	f7f2 fad8 	bl	8001ff8 <_lseek>
 800fa48:	1c43      	adds	r3, r0, #1
 800fa4a:	d102      	bne.n	800fa52 <_lseek_r+0x1e>
 800fa4c:	682b      	ldr	r3, [r5, #0]
 800fa4e:	b103      	cbz	r3, 800fa52 <_lseek_r+0x1e>
 800fa50:	6023      	str	r3, [r4, #0]
 800fa52:	bd38      	pop	{r3, r4, r5, pc}
 800fa54:	20022128 	.word	0x20022128

0800fa58 <__ascii_mbtowc>:
 800fa58:	b082      	sub	sp, #8
 800fa5a:	b901      	cbnz	r1, 800fa5e <__ascii_mbtowc+0x6>
 800fa5c:	a901      	add	r1, sp, #4
 800fa5e:	b142      	cbz	r2, 800fa72 <__ascii_mbtowc+0x1a>
 800fa60:	b14b      	cbz	r3, 800fa76 <__ascii_mbtowc+0x1e>
 800fa62:	7813      	ldrb	r3, [r2, #0]
 800fa64:	600b      	str	r3, [r1, #0]
 800fa66:	7812      	ldrb	r2, [r2, #0]
 800fa68:	1e10      	subs	r0, r2, #0
 800fa6a:	bf18      	it	ne
 800fa6c:	2001      	movne	r0, #1
 800fa6e:	b002      	add	sp, #8
 800fa70:	4770      	bx	lr
 800fa72:	4610      	mov	r0, r2
 800fa74:	e7fb      	b.n	800fa6e <__ascii_mbtowc+0x16>
 800fa76:	f06f 0001 	mvn.w	r0, #1
 800fa7a:	e7f8      	b.n	800fa6e <__ascii_mbtowc+0x16>

0800fa7c <__malloc_lock>:
 800fa7c:	4801      	ldr	r0, [pc, #4]	; (800fa84 <__malloc_lock+0x8>)
 800fa7e:	f7ff b910 	b.w	800eca2 <__retarget_lock_acquire_recursive>
 800fa82:	bf00      	nop
 800fa84:	20022120 	.word	0x20022120

0800fa88 <__malloc_unlock>:
 800fa88:	4801      	ldr	r0, [pc, #4]	; (800fa90 <__malloc_unlock+0x8>)
 800fa8a:	f7ff b90b 	b.w	800eca4 <__retarget_lock_release_recursive>
 800fa8e:	bf00      	nop
 800fa90:	20022120 	.word	0x20022120

0800fa94 <_read_r>:
 800fa94:	b538      	push	{r3, r4, r5, lr}
 800fa96:	4d07      	ldr	r5, [pc, #28]	; (800fab4 <_read_r+0x20>)
 800fa98:	4604      	mov	r4, r0
 800fa9a:	4608      	mov	r0, r1
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	2200      	movs	r2, #0
 800faa0:	602a      	str	r2, [r5, #0]
 800faa2:	461a      	mov	r2, r3
 800faa4:	f7f2 fa48 	bl	8001f38 <_read>
 800faa8:	1c43      	adds	r3, r0, #1
 800faaa:	d102      	bne.n	800fab2 <_read_r+0x1e>
 800faac:	682b      	ldr	r3, [r5, #0]
 800faae:	b103      	cbz	r3, 800fab2 <_read_r+0x1e>
 800fab0:	6023      	str	r3, [r4, #0]
 800fab2:	bd38      	pop	{r3, r4, r5, pc}
 800fab4:	20022128 	.word	0x20022128

0800fab8 <__ascii_wctomb>:
 800fab8:	b149      	cbz	r1, 800face <__ascii_wctomb+0x16>
 800faba:	2aff      	cmp	r2, #255	; 0xff
 800fabc:	bf85      	ittet	hi
 800fabe:	238a      	movhi	r3, #138	; 0x8a
 800fac0:	6003      	strhi	r3, [r0, #0]
 800fac2:	700a      	strbls	r2, [r1, #0]
 800fac4:	f04f 30ff 	movhi.w	r0, #4294967295
 800fac8:	bf98      	it	ls
 800faca:	2001      	movls	r0, #1
 800facc:	4770      	bx	lr
 800face:	4608      	mov	r0, r1
 800fad0:	4770      	bx	lr

0800fad2 <abort>:
 800fad2:	b508      	push	{r3, lr}
 800fad4:	2006      	movs	r0, #6
 800fad6:	f000 f82b 	bl	800fb30 <raise>
 800fada:	2001      	movs	r0, #1
 800fadc:	f7f2 fa22 	bl	8001f24 <_exit>

0800fae0 <_raise_r>:
 800fae0:	291f      	cmp	r1, #31
 800fae2:	b538      	push	{r3, r4, r5, lr}
 800fae4:	4604      	mov	r4, r0
 800fae6:	460d      	mov	r5, r1
 800fae8:	d904      	bls.n	800faf4 <_raise_r+0x14>
 800faea:	2316      	movs	r3, #22
 800faec:	6003      	str	r3, [r0, #0]
 800faee:	f04f 30ff 	mov.w	r0, #4294967295
 800faf2:	bd38      	pop	{r3, r4, r5, pc}
 800faf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800faf6:	b112      	cbz	r2, 800fafe <_raise_r+0x1e>
 800faf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fafc:	b94b      	cbnz	r3, 800fb12 <_raise_r+0x32>
 800fafe:	4620      	mov	r0, r4
 800fb00:	f000 f830 	bl	800fb64 <_getpid_r>
 800fb04:	462a      	mov	r2, r5
 800fb06:	4601      	mov	r1, r0
 800fb08:	4620      	mov	r0, r4
 800fb0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb0e:	f000 b817 	b.w	800fb40 <_kill_r>
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d00a      	beq.n	800fb2c <_raise_r+0x4c>
 800fb16:	1c59      	adds	r1, r3, #1
 800fb18:	d103      	bne.n	800fb22 <_raise_r+0x42>
 800fb1a:	2316      	movs	r3, #22
 800fb1c:	6003      	str	r3, [r0, #0]
 800fb1e:	2001      	movs	r0, #1
 800fb20:	e7e7      	b.n	800faf2 <_raise_r+0x12>
 800fb22:	2400      	movs	r4, #0
 800fb24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fb28:	4628      	mov	r0, r5
 800fb2a:	4798      	blx	r3
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	e7e0      	b.n	800faf2 <_raise_r+0x12>

0800fb30 <raise>:
 800fb30:	4b02      	ldr	r3, [pc, #8]	; (800fb3c <raise+0xc>)
 800fb32:	4601      	mov	r1, r0
 800fb34:	6818      	ldr	r0, [r3, #0]
 800fb36:	f7ff bfd3 	b.w	800fae0 <_raise_r>
 800fb3a:	bf00      	nop
 800fb3c:	20000068 	.word	0x20000068

0800fb40 <_kill_r>:
 800fb40:	b538      	push	{r3, r4, r5, lr}
 800fb42:	4d07      	ldr	r5, [pc, #28]	; (800fb60 <_kill_r+0x20>)
 800fb44:	2300      	movs	r3, #0
 800fb46:	4604      	mov	r4, r0
 800fb48:	4608      	mov	r0, r1
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	602b      	str	r3, [r5, #0]
 800fb4e:	f7f2 f9d9 	bl	8001f04 <_kill>
 800fb52:	1c43      	adds	r3, r0, #1
 800fb54:	d102      	bne.n	800fb5c <_kill_r+0x1c>
 800fb56:	682b      	ldr	r3, [r5, #0]
 800fb58:	b103      	cbz	r3, 800fb5c <_kill_r+0x1c>
 800fb5a:	6023      	str	r3, [r4, #0]
 800fb5c:	bd38      	pop	{r3, r4, r5, pc}
 800fb5e:	bf00      	nop
 800fb60:	20022128 	.word	0x20022128

0800fb64 <_getpid_r>:
 800fb64:	f7f2 b9c6 	b.w	8001ef4 <_getpid>

0800fb68 <atan>:
 800fb68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6c:	ec55 4b10 	vmov	r4, r5, d0
 800fb70:	4bc3      	ldr	r3, [pc, #780]	; (800fe80 <atan+0x318>)
 800fb72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fb76:	429e      	cmp	r6, r3
 800fb78:	46ab      	mov	fp, r5
 800fb7a:	dd18      	ble.n	800fbae <atan+0x46>
 800fb7c:	4bc1      	ldr	r3, [pc, #772]	; (800fe84 <atan+0x31c>)
 800fb7e:	429e      	cmp	r6, r3
 800fb80:	dc01      	bgt.n	800fb86 <atan+0x1e>
 800fb82:	d109      	bne.n	800fb98 <atan+0x30>
 800fb84:	b144      	cbz	r4, 800fb98 <atan+0x30>
 800fb86:	4622      	mov	r2, r4
 800fb88:	462b      	mov	r3, r5
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	4629      	mov	r1, r5
 800fb8e:	f7f0 fb8d 	bl	80002ac <__adddf3>
 800fb92:	4604      	mov	r4, r0
 800fb94:	460d      	mov	r5, r1
 800fb96:	e006      	b.n	800fba6 <atan+0x3e>
 800fb98:	f1bb 0f00 	cmp.w	fp, #0
 800fb9c:	f300 8131 	bgt.w	800fe02 <atan+0x29a>
 800fba0:	a59b      	add	r5, pc, #620	; (adr r5, 800fe10 <atan+0x2a8>)
 800fba2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fba6:	ec45 4b10 	vmov	d0, r4, r5
 800fbaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbae:	4bb6      	ldr	r3, [pc, #728]	; (800fe88 <atan+0x320>)
 800fbb0:	429e      	cmp	r6, r3
 800fbb2:	dc14      	bgt.n	800fbde <atan+0x76>
 800fbb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fbb8:	429e      	cmp	r6, r3
 800fbba:	dc0d      	bgt.n	800fbd8 <atan+0x70>
 800fbbc:	a396      	add	r3, pc, #600	; (adr r3, 800fe18 <atan+0x2b0>)
 800fbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc2:	ee10 0a10 	vmov	r0, s0
 800fbc6:	4629      	mov	r1, r5
 800fbc8:	f7f0 fb70 	bl	80002ac <__adddf3>
 800fbcc:	4baf      	ldr	r3, [pc, #700]	; (800fe8c <atan+0x324>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f7f0 ffb2 	bl	8000b38 <__aeabi_dcmpgt>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d1e6      	bne.n	800fba6 <atan+0x3e>
 800fbd8:	f04f 3aff 	mov.w	sl, #4294967295
 800fbdc:	e02b      	b.n	800fc36 <atan+0xce>
 800fbde:	f000 f9b3 	bl	800ff48 <fabs>
 800fbe2:	4bab      	ldr	r3, [pc, #684]	; (800fe90 <atan+0x328>)
 800fbe4:	429e      	cmp	r6, r3
 800fbe6:	ec55 4b10 	vmov	r4, r5, d0
 800fbea:	f300 80bf 	bgt.w	800fd6c <atan+0x204>
 800fbee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fbf2:	429e      	cmp	r6, r3
 800fbf4:	f300 80a0 	bgt.w	800fd38 <atan+0x1d0>
 800fbf8:	ee10 2a10 	vmov	r2, s0
 800fbfc:	ee10 0a10 	vmov	r0, s0
 800fc00:	462b      	mov	r3, r5
 800fc02:	4629      	mov	r1, r5
 800fc04:	f7f0 fb52 	bl	80002ac <__adddf3>
 800fc08:	4ba0      	ldr	r3, [pc, #640]	; (800fe8c <atan+0x324>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f7f0 fb4c 	bl	80002a8 <__aeabi_dsub>
 800fc10:	2200      	movs	r2, #0
 800fc12:	4606      	mov	r6, r0
 800fc14:	460f      	mov	r7, r1
 800fc16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	4629      	mov	r1, r5
 800fc1e:	f7f0 fb45 	bl	80002ac <__adddf3>
 800fc22:	4602      	mov	r2, r0
 800fc24:	460b      	mov	r3, r1
 800fc26:	4630      	mov	r0, r6
 800fc28:	4639      	mov	r1, r7
 800fc2a:	f7f0 fe1f 	bl	800086c <__aeabi_ddiv>
 800fc2e:	f04f 0a00 	mov.w	sl, #0
 800fc32:	4604      	mov	r4, r0
 800fc34:	460d      	mov	r5, r1
 800fc36:	4622      	mov	r2, r4
 800fc38:	462b      	mov	r3, r5
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	4629      	mov	r1, r5
 800fc3e:	f7f0 fceb 	bl	8000618 <__aeabi_dmul>
 800fc42:	4602      	mov	r2, r0
 800fc44:	460b      	mov	r3, r1
 800fc46:	4680      	mov	r8, r0
 800fc48:	4689      	mov	r9, r1
 800fc4a:	f7f0 fce5 	bl	8000618 <__aeabi_dmul>
 800fc4e:	a374      	add	r3, pc, #464	; (adr r3, 800fe20 <atan+0x2b8>)
 800fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc54:	4606      	mov	r6, r0
 800fc56:	460f      	mov	r7, r1
 800fc58:	f7f0 fcde 	bl	8000618 <__aeabi_dmul>
 800fc5c:	a372      	add	r3, pc, #456	; (adr r3, 800fe28 <atan+0x2c0>)
 800fc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc62:	f7f0 fb23 	bl	80002ac <__adddf3>
 800fc66:	4632      	mov	r2, r6
 800fc68:	463b      	mov	r3, r7
 800fc6a:	f7f0 fcd5 	bl	8000618 <__aeabi_dmul>
 800fc6e:	a370      	add	r3, pc, #448	; (adr r3, 800fe30 <atan+0x2c8>)
 800fc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc74:	f7f0 fb1a 	bl	80002ac <__adddf3>
 800fc78:	4632      	mov	r2, r6
 800fc7a:	463b      	mov	r3, r7
 800fc7c:	f7f0 fccc 	bl	8000618 <__aeabi_dmul>
 800fc80:	a36d      	add	r3, pc, #436	; (adr r3, 800fe38 <atan+0x2d0>)
 800fc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc86:	f7f0 fb11 	bl	80002ac <__adddf3>
 800fc8a:	4632      	mov	r2, r6
 800fc8c:	463b      	mov	r3, r7
 800fc8e:	f7f0 fcc3 	bl	8000618 <__aeabi_dmul>
 800fc92:	a36b      	add	r3, pc, #428	; (adr r3, 800fe40 <atan+0x2d8>)
 800fc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc98:	f7f0 fb08 	bl	80002ac <__adddf3>
 800fc9c:	4632      	mov	r2, r6
 800fc9e:	463b      	mov	r3, r7
 800fca0:	f7f0 fcba 	bl	8000618 <__aeabi_dmul>
 800fca4:	a368      	add	r3, pc, #416	; (adr r3, 800fe48 <atan+0x2e0>)
 800fca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcaa:	f7f0 faff 	bl	80002ac <__adddf3>
 800fcae:	4642      	mov	r2, r8
 800fcb0:	464b      	mov	r3, r9
 800fcb2:	f7f0 fcb1 	bl	8000618 <__aeabi_dmul>
 800fcb6:	a366      	add	r3, pc, #408	; (adr r3, 800fe50 <atan+0x2e8>)
 800fcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcbc:	4680      	mov	r8, r0
 800fcbe:	4689      	mov	r9, r1
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	4639      	mov	r1, r7
 800fcc4:	f7f0 fca8 	bl	8000618 <__aeabi_dmul>
 800fcc8:	a363      	add	r3, pc, #396	; (adr r3, 800fe58 <atan+0x2f0>)
 800fcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcce:	f7f0 faeb 	bl	80002a8 <__aeabi_dsub>
 800fcd2:	4632      	mov	r2, r6
 800fcd4:	463b      	mov	r3, r7
 800fcd6:	f7f0 fc9f 	bl	8000618 <__aeabi_dmul>
 800fcda:	a361      	add	r3, pc, #388	; (adr r3, 800fe60 <atan+0x2f8>)
 800fcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce0:	f7f0 fae2 	bl	80002a8 <__aeabi_dsub>
 800fce4:	4632      	mov	r2, r6
 800fce6:	463b      	mov	r3, r7
 800fce8:	f7f0 fc96 	bl	8000618 <__aeabi_dmul>
 800fcec:	a35e      	add	r3, pc, #376	; (adr r3, 800fe68 <atan+0x300>)
 800fcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf2:	f7f0 fad9 	bl	80002a8 <__aeabi_dsub>
 800fcf6:	4632      	mov	r2, r6
 800fcf8:	463b      	mov	r3, r7
 800fcfa:	f7f0 fc8d 	bl	8000618 <__aeabi_dmul>
 800fcfe:	a35c      	add	r3, pc, #368	; (adr r3, 800fe70 <atan+0x308>)
 800fd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd04:	f7f0 fad0 	bl	80002a8 <__aeabi_dsub>
 800fd08:	4632      	mov	r2, r6
 800fd0a:	463b      	mov	r3, r7
 800fd0c:	f7f0 fc84 	bl	8000618 <__aeabi_dmul>
 800fd10:	4602      	mov	r2, r0
 800fd12:	460b      	mov	r3, r1
 800fd14:	4640      	mov	r0, r8
 800fd16:	4649      	mov	r1, r9
 800fd18:	f7f0 fac8 	bl	80002ac <__adddf3>
 800fd1c:	4622      	mov	r2, r4
 800fd1e:	462b      	mov	r3, r5
 800fd20:	f7f0 fc7a 	bl	8000618 <__aeabi_dmul>
 800fd24:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fd28:	4602      	mov	r2, r0
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	d14b      	bne.n	800fdc6 <atan+0x25e>
 800fd2e:	4620      	mov	r0, r4
 800fd30:	4629      	mov	r1, r5
 800fd32:	f7f0 fab9 	bl	80002a8 <__aeabi_dsub>
 800fd36:	e72c      	b.n	800fb92 <atan+0x2a>
 800fd38:	ee10 0a10 	vmov	r0, s0
 800fd3c:	4b53      	ldr	r3, [pc, #332]	; (800fe8c <atan+0x324>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	4629      	mov	r1, r5
 800fd42:	f7f0 fab1 	bl	80002a8 <__aeabi_dsub>
 800fd46:	4b51      	ldr	r3, [pc, #324]	; (800fe8c <atan+0x324>)
 800fd48:	4606      	mov	r6, r0
 800fd4a:	460f      	mov	r7, r1
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	4620      	mov	r0, r4
 800fd50:	4629      	mov	r1, r5
 800fd52:	f7f0 faab 	bl	80002ac <__adddf3>
 800fd56:	4602      	mov	r2, r0
 800fd58:	460b      	mov	r3, r1
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	4639      	mov	r1, r7
 800fd5e:	f7f0 fd85 	bl	800086c <__aeabi_ddiv>
 800fd62:	f04f 0a01 	mov.w	sl, #1
 800fd66:	4604      	mov	r4, r0
 800fd68:	460d      	mov	r5, r1
 800fd6a:	e764      	b.n	800fc36 <atan+0xce>
 800fd6c:	4b49      	ldr	r3, [pc, #292]	; (800fe94 <atan+0x32c>)
 800fd6e:	429e      	cmp	r6, r3
 800fd70:	da1d      	bge.n	800fdae <atan+0x246>
 800fd72:	ee10 0a10 	vmov	r0, s0
 800fd76:	4b48      	ldr	r3, [pc, #288]	; (800fe98 <atan+0x330>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	4629      	mov	r1, r5
 800fd7c:	f7f0 fa94 	bl	80002a8 <__aeabi_dsub>
 800fd80:	4b45      	ldr	r3, [pc, #276]	; (800fe98 <atan+0x330>)
 800fd82:	4606      	mov	r6, r0
 800fd84:	460f      	mov	r7, r1
 800fd86:	2200      	movs	r2, #0
 800fd88:	4620      	mov	r0, r4
 800fd8a:	4629      	mov	r1, r5
 800fd8c:	f7f0 fc44 	bl	8000618 <__aeabi_dmul>
 800fd90:	4b3e      	ldr	r3, [pc, #248]	; (800fe8c <atan+0x324>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	f7f0 fa8a 	bl	80002ac <__adddf3>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	4639      	mov	r1, r7
 800fda0:	f7f0 fd64 	bl	800086c <__aeabi_ddiv>
 800fda4:	f04f 0a02 	mov.w	sl, #2
 800fda8:	4604      	mov	r4, r0
 800fdaa:	460d      	mov	r5, r1
 800fdac:	e743      	b.n	800fc36 <atan+0xce>
 800fdae:	462b      	mov	r3, r5
 800fdb0:	ee10 2a10 	vmov	r2, s0
 800fdb4:	4939      	ldr	r1, [pc, #228]	; (800fe9c <atan+0x334>)
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	f7f0 fd58 	bl	800086c <__aeabi_ddiv>
 800fdbc:	f04f 0a03 	mov.w	sl, #3
 800fdc0:	4604      	mov	r4, r0
 800fdc2:	460d      	mov	r5, r1
 800fdc4:	e737      	b.n	800fc36 <atan+0xce>
 800fdc6:	4b36      	ldr	r3, [pc, #216]	; (800fea0 <atan+0x338>)
 800fdc8:	4e36      	ldr	r6, [pc, #216]	; (800fea4 <atan+0x33c>)
 800fdca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fdce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fdd2:	e9da 2300 	ldrd	r2, r3, [sl]
 800fdd6:	f7f0 fa67 	bl	80002a8 <__aeabi_dsub>
 800fdda:	4622      	mov	r2, r4
 800fddc:	462b      	mov	r3, r5
 800fdde:	f7f0 fa63 	bl	80002a8 <__aeabi_dsub>
 800fde2:	4602      	mov	r2, r0
 800fde4:	460b      	mov	r3, r1
 800fde6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fdea:	f7f0 fa5d 	bl	80002a8 <__aeabi_dsub>
 800fdee:	f1bb 0f00 	cmp.w	fp, #0
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	460d      	mov	r5, r1
 800fdf6:	f6bf aed6 	bge.w	800fba6 <atan+0x3e>
 800fdfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdfe:	461d      	mov	r5, r3
 800fe00:	e6d1      	b.n	800fba6 <atan+0x3e>
 800fe02:	a51d      	add	r5, pc, #116	; (adr r5, 800fe78 <atan+0x310>)
 800fe04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe08:	e6cd      	b.n	800fba6 <atan+0x3e>
 800fe0a:	bf00      	nop
 800fe0c:	f3af 8000 	nop.w
 800fe10:	54442d18 	.word	0x54442d18
 800fe14:	bff921fb 	.word	0xbff921fb
 800fe18:	8800759c 	.word	0x8800759c
 800fe1c:	7e37e43c 	.word	0x7e37e43c
 800fe20:	e322da11 	.word	0xe322da11
 800fe24:	3f90ad3a 	.word	0x3f90ad3a
 800fe28:	24760deb 	.word	0x24760deb
 800fe2c:	3fa97b4b 	.word	0x3fa97b4b
 800fe30:	a0d03d51 	.word	0xa0d03d51
 800fe34:	3fb10d66 	.word	0x3fb10d66
 800fe38:	c54c206e 	.word	0xc54c206e
 800fe3c:	3fb745cd 	.word	0x3fb745cd
 800fe40:	920083ff 	.word	0x920083ff
 800fe44:	3fc24924 	.word	0x3fc24924
 800fe48:	5555550d 	.word	0x5555550d
 800fe4c:	3fd55555 	.word	0x3fd55555
 800fe50:	2c6a6c2f 	.word	0x2c6a6c2f
 800fe54:	bfa2b444 	.word	0xbfa2b444
 800fe58:	52defd9a 	.word	0x52defd9a
 800fe5c:	3fadde2d 	.word	0x3fadde2d
 800fe60:	af749a6d 	.word	0xaf749a6d
 800fe64:	3fb3b0f2 	.word	0x3fb3b0f2
 800fe68:	fe231671 	.word	0xfe231671
 800fe6c:	3fbc71c6 	.word	0x3fbc71c6
 800fe70:	9998ebc4 	.word	0x9998ebc4
 800fe74:	3fc99999 	.word	0x3fc99999
 800fe78:	54442d18 	.word	0x54442d18
 800fe7c:	3ff921fb 	.word	0x3ff921fb
 800fe80:	440fffff 	.word	0x440fffff
 800fe84:	7ff00000 	.word	0x7ff00000
 800fe88:	3fdbffff 	.word	0x3fdbffff
 800fe8c:	3ff00000 	.word	0x3ff00000
 800fe90:	3ff2ffff 	.word	0x3ff2ffff
 800fe94:	40038000 	.word	0x40038000
 800fe98:	3ff80000 	.word	0x3ff80000
 800fe9c:	bff00000 	.word	0xbff00000
 800fea0:	080142b0 	.word	0x080142b0
 800fea4:	08014290 	.word	0x08014290

0800fea8 <cos>:
 800fea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800feaa:	ec53 2b10 	vmov	r2, r3, d0
 800feae:	4824      	ldr	r0, [pc, #144]	; (800ff40 <cos+0x98>)
 800feb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800feb4:	4281      	cmp	r1, r0
 800feb6:	dc06      	bgt.n	800fec6 <cos+0x1e>
 800feb8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800ff38 <cos+0x90>
 800febc:	f000 fb80 	bl	80105c0 <__kernel_cos>
 800fec0:	ec51 0b10 	vmov	r0, r1, d0
 800fec4:	e007      	b.n	800fed6 <cos+0x2e>
 800fec6:	481f      	ldr	r0, [pc, #124]	; (800ff44 <cos+0x9c>)
 800fec8:	4281      	cmp	r1, r0
 800feca:	dd09      	ble.n	800fee0 <cos+0x38>
 800fecc:	ee10 0a10 	vmov	r0, s0
 800fed0:	4619      	mov	r1, r3
 800fed2:	f7f0 f9e9 	bl	80002a8 <__aeabi_dsub>
 800fed6:	ec41 0b10 	vmov	d0, r0, r1
 800feda:	b005      	add	sp, #20
 800fedc:	f85d fb04 	ldr.w	pc, [sp], #4
 800fee0:	4668      	mov	r0, sp
 800fee2:	f000 f961 	bl	80101a8 <__ieee754_rem_pio2>
 800fee6:	f000 0003 	and.w	r0, r0, #3
 800feea:	2801      	cmp	r0, #1
 800feec:	d007      	beq.n	800fefe <cos+0x56>
 800feee:	2802      	cmp	r0, #2
 800fef0:	d012      	beq.n	800ff18 <cos+0x70>
 800fef2:	b9c0      	cbnz	r0, 800ff26 <cos+0x7e>
 800fef4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fef8:	ed9d 0b00 	vldr	d0, [sp]
 800fefc:	e7de      	b.n	800febc <cos+0x14>
 800fefe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff02:	ed9d 0b00 	vldr	d0, [sp]
 800ff06:	f000 ff63 	bl	8010dd0 <__kernel_sin>
 800ff0a:	ec53 2b10 	vmov	r2, r3, d0
 800ff0e:	ee10 0a10 	vmov	r0, s0
 800ff12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ff16:	e7de      	b.n	800fed6 <cos+0x2e>
 800ff18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff1c:	ed9d 0b00 	vldr	d0, [sp]
 800ff20:	f000 fb4e 	bl	80105c0 <__kernel_cos>
 800ff24:	e7f1      	b.n	800ff0a <cos+0x62>
 800ff26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff2a:	ed9d 0b00 	vldr	d0, [sp]
 800ff2e:	2001      	movs	r0, #1
 800ff30:	f000 ff4e 	bl	8010dd0 <__kernel_sin>
 800ff34:	e7c4      	b.n	800fec0 <cos+0x18>
 800ff36:	bf00      	nop
	...
 800ff40:	3fe921fb 	.word	0x3fe921fb
 800ff44:	7fefffff 	.word	0x7fefffff

0800ff48 <fabs>:
 800ff48:	ec51 0b10 	vmov	r0, r1, d0
 800ff4c:	ee10 2a10 	vmov	r2, s0
 800ff50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff54:	ec43 2b10 	vmov	d0, r2, r3
 800ff58:	4770      	bx	lr
 800ff5a:	0000      	movs	r0, r0
 800ff5c:	0000      	movs	r0, r0
	...

0800ff60 <sin>:
 800ff60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff62:	ec53 2b10 	vmov	r2, r3, d0
 800ff66:	4826      	ldr	r0, [pc, #152]	; (8010000 <sin+0xa0>)
 800ff68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ff6c:	4281      	cmp	r1, r0
 800ff6e:	dc07      	bgt.n	800ff80 <sin+0x20>
 800ff70:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fff8 <sin+0x98>
 800ff74:	2000      	movs	r0, #0
 800ff76:	f000 ff2b 	bl	8010dd0 <__kernel_sin>
 800ff7a:	ec51 0b10 	vmov	r0, r1, d0
 800ff7e:	e007      	b.n	800ff90 <sin+0x30>
 800ff80:	4820      	ldr	r0, [pc, #128]	; (8010004 <sin+0xa4>)
 800ff82:	4281      	cmp	r1, r0
 800ff84:	dd09      	ble.n	800ff9a <sin+0x3a>
 800ff86:	ee10 0a10 	vmov	r0, s0
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	f7f0 f98c 	bl	80002a8 <__aeabi_dsub>
 800ff90:	ec41 0b10 	vmov	d0, r0, r1
 800ff94:	b005      	add	sp, #20
 800ff96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff9a:	4668      	mov	r0, sp
 800ff9c:	f000 f904 	bl	80101a8 <__ieee754_rem_pio2>
 800ffa0:	f000 0003 	and.w	r0, r0, #3
 800ffa4:	2801      	cmp	r0, #1
 800ffa6:	d008      	beq.n	800ffba <sin+0x5a>
 800ffa8:	2802      	cmp	r0, #2
 800ffaa:	d00d      	beq.n	800ffc8 <sin+0x68>
 800ffac:	b9d0      	cbnz	r0, 800ffe4 <sin+0x84>
 800ffae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffb2:	ed9d 0b00 	vldr	d0, [sp]
 800ffb6:	2001      	movs	r0, #1
 800ffb8:	e7dd      	b.n	800ff76 <sin+0x16>
 800ffba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffbe:	ed9d 0b00 	vldr	d0, [sp]
 800ffc2:	f000 fafd 	bl	80105c0 <__kernel_cos>
 800ffc6:	e7d8      	b.n	800ff7a <sin+0x1a>
 800ffc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffcc:	ed9d 0b00 	vldr	d0, [sp]
 800ffd0:	2001      	movs	r0, #1
 800ffd2:	f000 fefd 	bl	8010dd0 <__kernel_sin>
 800ffd6:	ec53 2b10 	vmov	r2, r3, d0
 800ffda:	ee10 0a10 	vmov	r0, s0
 800ffde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ffe2:	e7d5      	b.n	800ff90 <sin+0x30>
 800ffe4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffe8:	ed9d 0b00 	vldr	d0, [sp]
 800ffec:	f000 fae8 	bl	80105c0 <__kernel_cos>
 800fff0:	e7f1      	b.n	800ffd6 <sin+0x76>
 800fff2:	bf00      	nop
 800fff4:	f3af 8000 	nop.w
	...
 8010000:	3fe921fb 	.word	0x3fe921fb
 8010004:	7fefffff 	.word	0x7fefffff

08010008 <atan2>:
 8010008:	f000 b802 	b.w	8010010 <__ieee754_atan2>
 801000c:	0000      	movs	r0, r0
	...

08010010 <__ieee754_atan2>:
 8010010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010014:	ec57 6b11 	vmov	r6, r7, d1
 8010018:	4273      	negs	r3, r6
 801001a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80101a0 <__ieee754_atan2+0x190>
 801001e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010022:	4333      	orrs	r3, r6
 8010024:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010028:	4573      	cmp	r3, lr
 801002a:	ec51 0b10 	vmov	r0, r1, d0
 801002e:	ee11 8a10 	vmov	r8, s2
 8010032:	d80a      	bhi.n	801004a <__ieee754_atan2+0x3a>
 8010034:	4244      	negs	r4, r0
 8010036:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801003a:	4304      	orrs	r4, r0
 801003c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010040:	4574      	cmp	r4, lr
 8010042:	ee10 9a10 	vmov	r9, s0
 8010046:	468c      	mov	ip, r1
 8010048:	d907      	bls.n	801005a <__ieee754_atan2+0x4a>
 801004a:	4632      	mov	r2, r6
 801004c:	463b      	mov	r3, r7
 801004e:	f7f0 f92d 	bl	80002ac <__adddf3>
 8010052:	ec41 0b10 	vmov	d0, r0, r1
 8010056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801005a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801005e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010062:	4334      	orrs	r4, r6
 8010064:	d103      	bne.n	801006e <__ieee754_atan2+0x5e>
 8010066:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801006a:	f7ff bd7d 	b.w	800fb68 <atan>
 801006e:	17bc      	asrs	r4, r7, #30
 8010070:	f004 0402 	and.w	r4, r4, #2
 8010074:	ea53 0909 	orrs.w	r9, r3, r9
 8010078:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801007c:	d107      	bne.n	801008e <__ieee754_atan2+0x7e>
 801007e:	2c02      	cmp	r4, #2
 8010080:	d060      	beq.n	8010144 <__ieee754_atan2+0x134>
 8010082:	2c03      	cmp	r4, #3
 8010084:	d1e5      	bne.n	8010052 <__ieee754_atan2+0x42>
 8010086:	a142      	add	r1, pc, #264	; (adr r1, 8010190 <__ieee754_atan2+0x180>)
 8010088:	e9d1 0100 	ldrd	r0, r1, [r1]
 801008c:	e7e1      	b.n	8010052 <__ieee754_atan2+0x42>
 801008e:	ea52 0808 	orrs.w	r8, r2, r8
 8010092:	d106      	bne.n	80100a2 <__ieee754_atan2+0x92>
 8010094:	f1bc 0f00 	cmp.w	ip, #0
 8010098:	da5f      	bge.n	801015a <__ieee754_atan2+0x14a>
 801009a:	a13f      	add	r1, pc, #252	; (adr r1, 8010198 <__ieee754_atan2+0x188>)
 801009c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100a0:	e7d7      	b.n	8010052 <__ieee754_atan2+0x42>
 80100a2:	4572      	cmp	r2, lr
 80100a4:	d10f      	bne.n	80100c6 <__ieee754_atan2+0xb6>
 80100a6:	4293      	cmp	r3, r2
 80100a8:	f104 34ff 	add.w	r4, r4, #4294967295
 80100ac:	d107      	bne.n	80100be <__ieee754_atan2+0xae>
 80100ae:	2c02      	cmp	r4, #2
 80100b0:	d84c      	bhi.n	801014c <__ieee754_atan2+0x13c>
 80100b2:	4b35      	ldr	r3, [pc, #212]	; (8010188 <__ieee754_atan2+0x178>)
 80100b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80100b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80100bc:	e7c9      	b.n	8010052 <__ieee754_atan2+0x42>
 80100be:	2c02      	cmp	r4, #2
 80100c0:	d848      	bhi.n	8010154 <__ieee754_atan2+0x144>
 80100c2:	4b32      	ldr	r3, [pc, #200]	; (801018c <__ieee754_atan2+0x17c>)
 80100c4:	e7f6      	b.n	80100b4 <__ieee754_atan2+0xa4>
 80100c6:	4573      	cmp	r3, lr
 80100c8:	d0e4      	beq.n	8010094 <__ieee754_atan2+0x84>
 80100ca:	1a9b      	subs	r3, r3, r2
 80100cc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80100d0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80100d4:	da1e      	bge.n	8010114 <__ieee754_atan2+0x104>
 80100d6:	2f00      	cmp	r7, #0
 80100d8:	da01      	bge.n	80100de <__ieee754_atan2+0xce>
 80100da:	323c      	adds	r2, #60	; 0x3c
 80100dc:	db1e      	blt.n	801011c <__ieee754_atan2+0x10c>
 80100de:	4632      	mov	r2, r6
 80100e0:	463b      	mov	r3, r7
 80100e2:	f7f0 fbc3 	bl	800086c <__aeabi_ddiv>
 80100e6:	ec41 0b10 	vmov	d0, r0, r1
 80100ea:	f7ff ff2d 	bl	800ff48 <fabs>
 80100ee:	f7ff fd3b 	bl	800fb68 <atan>
 80100f2:	ec51 0b10 	vmov	r0, r1, d0
 80100f6:	2c01      	cmp	r4, #1
 80100f8:	d013      	beq.n	8010122 <__ieee754_atan2+0x112>
 80100fa:	2c02      	cmp	r4, #2
 80100fc:	d015      	beq.n	801012a <__ieee754_atan2+0x11a>
 80100fe:	2c00      	cmp	r4, #0
 8010100:	d0a7      	beq.n	8010052 <__ieee754_atan2+0x42>
 8010102:	a319      	add	r3, pc, #100	; (adr r3, 8010168 <__ieee754_atan2+0x158>)
 8010104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010108:	f7f0 f8ce 	bl	80002a8 <__aeabi_dsub>
 801010c:	a318      	add	r3, pc, #96	; (adr r3, 8010170 <__ieee754_atan2+0x160>)
 801010e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010112:	e014      	b.n	801013e <__ieee754_atan2+0x12e>
 8010114:	a118      	add	r1, pc, #96	; (adr r1, 8010178 <__ieee754_atan2+0x168>)
 8010116:	e9d1 0100 	ldrd	r0, r1, [r1]
 801011a:	e7ec      	b.n	80100f6 <__ieee754_atan2+0xe6>
 801011c:	2000      	movs	r0, #0
 801011e:	2100      	movs	r1, #0
 8010120:	e7e9      	b.n	80100f6 <__ieee754_atan2+0xe6>
 8010122:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010126:	4619      	mov	r1, r3
 8010128:	e793      	b.n	8010052 <__ieee754_atan2+0x42>
 801012a:	a30f      	add	r3, pc, #60	; (adr r3, 8010168 <__ieee754_atan2+0x158>)
 801012c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010130:	f7f0 f8ba 	bl	80002a8 <__aeabi_dsub>
 8010134:	4602      	mov	r2, r0
 8010136:	460b      	mov	r3, r1
 8010138:	a10d      	add	r1, pc, #52	; (adr r1, 8010170 <__ieee754_atan2+0x160>)
 801013a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801013e:	f7f0 f8b3 	bl	80002a8 <__aeabi_dsub>
 8010142:	e786      	b.n	8010052 <__ieee754_atan2+0x42>
 8010144:	a10a      	add	r1, pc, #40	; (adr r1, 8010170 <__ieee754_atan2+0x160>)
 8010146:	e9d1 0100 	ldrd	r0, r1, [r1]
 801014a:	e782      	b.n	8010052 <__ieee754_atan2+0x42>
 801014c:	a10c      	add	r1, pc, #48	; (adr r1, 8010180 <__ieee754_atan2+0x170>)
 801014e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010152:	e77e      	b.n	8010052 <__ieee754_atan2+0x42>
 8010154:	2000      	movs	r0, #0
 8010156:	2100      	movs	r1, #0
 8010158:	e77b      	b.n	8010052 <__ieee754_atan2+0x42>
 801015a:	a107      	add	r1, pc, #28	; (adr r1, 8010178 <__ieee754_atan2+0x168>)
 801015c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010160:	e777      	b.n	8010052 <__ieee754_atan2+0x42>
 8010162:	bf00      	nop
 8010164:	f3af 8000 	nop.w
 8010168:	33145c07 	.word	0x33145c07
 801016c:	3ca1a626 	.word	0x3ca1a626
 8010170:	54442d18 	.word	0x54442d18
 8010174:	400921fb 	.word	0x400921fb
 8010178:	54442d18 	.word	0x54442d18
 801017c:	3ff921fb 	.word	0x3ff921fb
 8010180:	54442d18 	.word	0x54442d18
 8010184:	3fe921fb 	.word	0x3fe921fb
 8010188:	080142d0 	.word	0x080142d0
 801018c:	080142e8 	.word	0x080142e8
 8010190:	54442d18 	.word	0x54442d18
 8010194:	c00921fb 	.word	0xc00921fb
 8010198:	54442d18 	.word	0x54442d18
 801019c:	bff921fb 	.word	0xbff921fb
 80101a0:	7ff00000 	.word	0x7ff00000
 80101a4:	00000000 	.word	0x00000000

080101a8 <__ieee754_rem_pio2>:
 80101a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ac:	ed2d 8b02 	vpush	{d8}
 80101b0:	ec55 4b10 	vmov	r4, r5, d0
 80101b4:	4bca      	ldr	r3, [pc, #808]	; (80104e0 <__ieee754_rem_pio2+0x338>)
 80101b6:	b08b      	sub	sp, #44	; 0x2c
 80101b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80101bc:	4598      	cmp	r8, r3
 80101be:	4682      	mov	sl, r0
 80101c0:	9502      	str	r5, [sp, #8]
 80101c2:	dc08      	bgt.n	80101d6 <__ieee754_rem_pio2+0x2e>
 80101c4:	2200      	movs	r2, #0
 80101c6:	2300      	movs	r3, #0
 80101c8:	ed80 0b00 	vstr	d0, [r0]
 80101cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80101d0:	f04f 0b00 	mov.w	fp, #0
 80101d4:	e028      	b.n	8010228 <__ieee754_rem_pio2+0x80>
 80101d6:	4bc3      	ldr	r3, [pc, #780]	; (80104e4 <__ieee754_rem_pio2+0x33c>)
 80101d8:	4598      	cmp	r8, r3
 80101da:	dc78      	bgt.n	80102ce <__ieee754_rem_pio2+0x126>
 80101dc:	9b02      	ldr	r3, [sp, #8]
 80101de:	4ec2      	ldr	r6, [pc, #776]	; (80104e8 <__ieee754_rem_pio2+0x340>)
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	ee10 0a10 	vmov	r0, s0
 80101e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80104a8 <__ieee754_rem_pio2+0x300>)
 80101e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ec:	4629      	mov	r1, r5
 80101ee:	dd39      	ble.n	8010264 <__ieee754_rem_pio2+0xbc>
 80101f0:	f7f0 f85a 	bl	80002a8 <__aeabi_dsub>
 80101f4:	45b0      	cmp	r8, r6
 80101f6:	4604      	mov	r4, r0
 80101f8:	460d      	mov	r5, r1
 80101fa:	d01b      	beq.n	8010234 <__ieee754_rem_pio2+0x8c>
 80101fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80104b0 <__ieee754_rem_pio2+0x308>)
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	f7f0 f851 	bl	80002a8 <__aeabi_dsub>
 8010206:	4602      	mov	r2, r0
 8010208:	460b      	mov	r3, r1
 801020a:	e9ca 2300 	strd	r2, r3, [sl]
 801020e:	4620      	mov	r0, r4
 8010210:	4629      	mov	r1, r5
 8010212:	f7f0 f849 	bl	80002a8 <__aeabi_dsub>
 8010216:	a3a6      	add	r3, pc, #664	; (adr r3, 80104b0 <__ieee754_rem_pio2+0x308>)
 8010218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021c:	f7f0 f844 	bl	80002a8 <__aeabi_dsub>
 8010220:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010224:	f04f 0b01 	mov.w	fp, #1
 8010228:	4658      	mov	r0, fp
 801022a:	b00b      	add	sp, #44	; 0x2c
 801022c:	ecbd 8b02 	vpop	{d8}
 8010230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010234:	a3a0      	add	r3, pc, #640	; (adr r3, 80104b8 <__ieee754_rem_pio2+0x310>)
 8010236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023a:	f7f0 f835 	bl	80002a8 <__aeabi_dsub>
 801023e:	a3a0      	add	r3, pc, #640	; (adr r3, 80104c0 <__ieee754_rem_pio2+0x318>)
 8010240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010244:	4604      	mov	r4, r0
 8010246:	460d      	mov	r5, r1
 8010248:	f7f0 f82e 	bl	80002a8 <__aeabi_dsub>
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	e9ca 2300 	strd	r2, r3, [sl]
 8010254:	4620      	mov	r0, r4
 8010256:	4629      	mov	r1, r5
 8010258:	f7f0 f826 	bl	80002a8 <__aeabi_dsub>
 801025c:	a398      	add	r3, pc, #608	; (adr r3, 80104c0 <__ieee754_rem_pio2+0x318>)
 801025e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010262:	e7db      	b.n	801021c <__ieee754_rem_pio2+0x74>
 8010264:	f7f0 f822 	bl	80002ac <__adddf3>
 8010268:	45b0      	cmp	r8, r6
 801026a:	4604      	mov	r4, r0
 801026c:	460d      	mov	r5, r1
 801026e:	d016      	beq.n	801029e <__ieee754_rem_pio2+0xf6>
 8010270:	a38f      	add	r3, pc, #572	; (adr r3, 80104b0 <__ieee754_rem_pio2+0x308>)
 8010272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010276:	f7f0 f819 	bl	80002ac <__adddf3>
 801027a:	4602      	mov	r2, r0
 801027c:	460b      	mov	r3, r1
 801027e:	e9ca 2300 	strd	r2, r3, [sl]
 8010282:	4620      	mov	r0, r4
 8010284:	4629      	mov	r1, r5
 8010286:	f7f0 f80f 	bl	80002a8 <__aeabi_dsub>
 801028a:	a389      	add	r3, pc, #548	; (adr r3, 80104b0 <__ieee754_rem_pio2+0x308>)
 801028c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010290:	f7f0 f80c 	bl	80002ac <__adddf3>
 8010294:	f04f 3bff 	mov.w	fp, #4294967295
 8010298:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801029c:	e7c4      	b.n	8010228 <__ieee754_rem_pio2+0x80>
 801029e:	a386      	add	r3, pc, #536	; (adr r3, 80104b8 <__ieee754_rem_pio2+0x310>)
 80102a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a4:	f7f0 f802 	bl	80002ac <__adddf3>
 80102a8:	a385      	add	r3, pc, #532	; (adr r3, 80104c0 <__ieee754_rem_pio2+0x318>)
 80102aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ae:	4604      	mov	r4, r0
 80102b0:	460d      	mov	r5, r1
 80102b2:	f7ef fffb 	bl	80002ac <__adddf3>
 80102b6:	4602      	mov	r2, r0
 80102b8:	460b      	mov	r3, r1
 80102ba:	e9ca 2300 	strd	r2, r3, [sl]
 80102be:	4620      	mov	r0, r4
 80102c0:	4629      	mov	r1, r5
 80102c2:	f7ef fff1 	bl	80002a8 <__aeabi_dsub>
 80102c6:	a37e      	add	r3, pc, #504	; (adr r3, 80104c0 <__ieee754_rem_pio2+0x318>)
 80102c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102cc:	e7e0      	b.n	8010290 <__ieee754_rem_pio2+0xe8>
 80102ce:	4b87      	ldr	r3, [pc, #540]	; (80104ec <__ieee754_rem_pio2+0x344>)
 80102d0:	4598      	cmp	r8, r3
 80102d2:	f300 80d9 	bgt.w	8010488 <__ieee754_rem_pio2+0x2e0>
 80102d6:	f7ff fe37 	bl	800ff48 <fabs>
 80102da:	ec55 4b10 	vmov	r4, r5, d0
 80102de:	ee10 0a10 	vmov	r0, s0
 80102e2:	a379      	add	r3, pc, #484	; (adr r3, 80104c8 <__ieee754_rem_pio2+0x320>)
 80102e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e8:	4629      	mov	r1, r5
 80102ea:	f7f0 f995 	bl	8000618 <__aeabi_dmul>
 80102ee:	4b80      	ldr	r3, [pc, #512]	; (80104f0 <__ieee754_rem_pio2+0x348>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	f7ef ffdb 	bl	80002ac <__adddf3>
 80102f6:	f7f0 fc3f 	bl	8000b78 <__aeabi_d2iz>
 80102fa:	4683      	mov	fp, r0
 80102fc:	f7f0 f922 	bl	8000544 <__aeabi_i2d>
 8010300:	4602      	mov	r2, r0
 8010302:	460b      	mov	r3, r1
 8010304:	ec43 2b18 	vmov	d8, r2, r3
 8010308:	a367      	add	r3, pc, #412	; (adr r3, 80104a8 <__ieee754_rem_pio2+0x300>)
 801030a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030e:	f7f0 f983 	bl	8000618 <__aeabi_dmul>
 8010312:	4602      	mov	r2, r0
 8010314:	460b      	mov	r3, r1
 8010316:	4620      	mov	r0, r4
 8010318:	4629      	mov	r1, r5
 801031a:	f7ef ffc5 	bl	80002a8 <__aeabi_dsub>
 801031e:	a364      	add	r3, pc, #400	; (adr r3, 80104b0 <__ieee754_rem_pio2+0x308>)
 8010320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010324:	4606      	mov	r6, r0
 8010326:	460f      	mov	r7, r1
 8010328:	ec51 0b18 	vmov	r0, r1, d8
 801032c:	f7f0 f974 	bl	8000618 <__aeabi_dmul>
 8010330:	f1bb 0f1f 	cmp.w	fp, #31
 8010334:	4604      	mov	r4, r0
 8010336:	460d      	mov	r5, r1
 8010338:	dc0d      	bgt.n	8010356 <__ieee754_rem_pio2+0x1ae>
 801033a:	4b6e      	ldr	r3, [pc, #440]	; (80104f4 <__ieee754_rem_pio2+0x34c>)
 801033c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010344:	4543      	cmp	r3, r8
 8010346:	d006      	beq.n	8010356 <__ieee754_rem_pio2+0x1ae>
 8010348:	4622      	mov	r2, r4
 801034a:	462b      	mov	r3, r5
 801034c:	4630      	mov	r0, r6
 801034e:	4639      	mov	r1, r7
 8010350:	f7ef ffaa 	bl	80002a8 <__aeabi_dsub>
 8010354:	e00f      	b.n	8010376 <__ieee754_rem_pio2+0x1ce>
 8010356:	462b      	mov	r3, r5
 8010358:	4622      	mov	r2, r4
 801035a:	4630      	mov	r0, r6
 801035c:	4639      	mov	r1, r7
 801035e:	f7ef ffa3 	bl	80002a8 <__aeabi_dsub>
 8010362:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010366:	9303      	str	r3, [sp, #12]
 8010368:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801036c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010370:	f1b8 0f10 	cmp.w	r8, #16
 8010374:	dc02      	bgt.n	801037c <__ieee754_rem_pio2+0x1d4>
 8010376:	e9ca 0100 	strd	r0, r1, [sl]
 801037a:	e039      	b.n	80103f0 <__ieee754_rem_pio2+0x248>
 801037c:	a34e      	add	r3, pc, #312	; (adr r3, 80104b8 <__ieee754_rem_pio2+0x310>)
 801037e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010382:	ec51 0b18 	vmov	r0, r1, d8
 8010386:	f7f0 f947 	bl	8000618 <__aeabi_dmul>
 801038a:	4604      	mov	r4, r0
 801038c:	460d      	mov	r5, r1
 801038e:	4602      	mov	r2, r0
 8010390:	460b      	mov	r3, r1
 8010392:	4630      	mov	r0, r6
 8010394:	4639      	mov	r1, r7
 8010396:	f7ef ff87 	bl	80002a8 <__aeabi_dsub>
 801039a:	4602      	mov	r2, r0
 801039c:	460b      	mov	r3, r1
 801039e:	4680      	mov	r8, r0
 80103a0:	4689      	mov	r9, r1
 80103a2:	4630      	mov	r0, r6
 80103a4:	4639      	mov	r1, r7
 80103a6:	f7ef ff7f 	bl	80002a8 <__aeabi_dsub>
 80103aa:	4622      	mov	r2, r4
 80103ac:	462b      	mov	r3, r5
 80103ae:	f7ef ff7b 	bl	80002a8 <__aeabi_dsub>
 80103b2:	a343      	add	r3, pc, #268	; (adr r3, 80104c0 <__ieee754_rem_pio2+0x318>)
 80103b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b8:	4604      	mov	r4, r0
 80103ba:	460d      	mov	r5, r1
 80103bc:	ec51 0b18 	vmov	r0, r1, d8
 80103c0:	f7f0 f92a 	bl	8000618 <__aeabi_dmul>
 80103c4:	4622      	mov	r2, r4
 80103c6:	462b      	mov	r3, r5
 80103c8:	f7ef ff6e 	bl	80002a8 <__aeabi_dsub>
 80103cc:	4602      	mov	r2, r0
 80103ce:	460b      	mov	r3, r1
 80103d0:	4604      	mov	r4, r0
 80103d2:	460d      	mov	r5, r1
 80103d4:	4640      	mov	r0, r8
 80103d6:	4649      	mov	r1, r9
 80103d8:	f7ef ff66 	bl	80002a8 <__aeabi_dsub>
 80103dc:	9a03      	ldr	r2, [sp, #12]
 80103de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	2b31      	cmp	r3, #49	; 0x31
 80103e6:	dc24      	bgt.n	8010432 <__ieee754_rem_pio2+0x28a>
 80103e8:	e9ca 0100 	strd	r0, r1, [sl]
 80103ec:	4646      	mov	r6, r8
 80103ee:	464f      	mov	r7, r9
 80103f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80103f4:	4630      	mov	r0, r6
 80103f6:	4642      	mov	r2, r8
 80103f8:	464b      	mov	r3, r9
 80103fa:	4639      	mov	r1, r7
 80103fc:	f7ef ff54 	bl	80002a8 <__aeabi_dsub>
 8010400:	462b      	mov	r3, r5
 8010402:	4622      	mov	r2, r4
 8010404:	f7ef ff50 	bl	80002a8 <__aeabi_dsub>
 8010408:	9b02      	ldr	r3, [sp, #8]
 801040a:	2b00      	cmp	r3, #0
 801040c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010410:	f6bf af0a 	bge.w	8010228 <__ieee754_rem_pio2+0x80>
 8010414:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010418:	f8ca 3004 	str.w	r3, [sl, #4]
 801041c:	f8ca 8000 	str.w	r8, [sl]
 8010420:	f8ca 0008 	str.w	r0, [sl, #8]
 8010424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010428:	f8ca 300c 	str.w	r3, [sl, #12]
 801042c:	f1cb 0b00 	rsb	fp, fp, #0
 8010430:	e6fa      	b.n	8010228 <__ieee754_rem_pio2+0x80>
 8010432:	a327      	add	r3, pc, #156	; (adr r3, 80104d0 <__ieee754_rem_pio2+0x328>)
 8010434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010438:	ec51 0b18 	vmov	r0, r1, d8
 801043c:	f7f0 f8ec 	bl	8000618 <__aeabi_dmul>
 8010440:	4604      	mov	r4, r0
 8010442:	460d      	mov	r5, r1
 8010444:	4602      	mov	r2, r0
 8010446:	460b      	mov	r3, r1
 8010448:	4640      	mov	r0, r8
 801044a:	4649      	mov	r1, r9
 801044c:	f7ef ff2c 	bl	80002a8 <__aeabi_dsub>
 8010450:	4602      	mov	r2, r0
 8010452:	460b      	mov	r3, r1
 8010454:	4606      	mov	r6, r0
 8010456:	460f      	mov	r7, r1
 8010458:	4640      	mov	r0, r8
 801045a:	4649      	mov	r1, r9
 801045c:	f7ef ff24 	bl	80002a8 <__aeabi_dsub>
 8010460:	4622      	mov	r2, r4
 8010462:	462b      	mov	r3, r5
 8010464:	f7ef ff20 	bl	80002a8 <__aeabi_dsub>
 8010468:	a31b      	add	r3, pc, #108	; (adr r3, 80104d8 <__ieee754_rem_pio2+0x330>)
 801046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046e:	4604      	mov	r4, r0
 8010470:	460d      	mov	r5, r1
 8010472:	ec51 0b18 	vmov	r0, r1, d8
 8010476:	f7f0 f8cf 	bl	8000618 <__aeabi_dmul>
 801047a:	4622      	mov	r2, r4
 801047c:	462b      	mov	r3, r5
 801047e:	f7ef ff13 	bl	80002a8 <__aeabi_dsub>
 8010482:	4604      	mov	r4, r0
 8010484:	460d      	mov	r5, r1
 8010486:	e75f      	b.n	8010348 <__ieee754_rem_pio2+0x1a0>
 8010488:	4b1b      	ldr	r3, [pc, #108]	; (80104f8 <__ieee754_rem_pio2+0x350>)
 801048a:	4598      	cmp	r8, r3
 801048c:	dd36      	ble.n	80104fc <__ieee754_rem_pio2+0x354>
 801048e:	ee10 2a10 	vmov	r2, s0
 8010492:	462b      	mov	r3, r5
 8010494:	4620      	mov	r0, r4
 8010496:	4629      	mov	r1, r5
 8010498:	f7ef ff06 	bl	80002a8 <__aeabi_dsub>
 801049c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80104a0:	e9ca 0100 	strd	r0, r1, [sl]
 80104a4:	e694      	b.n	80101d0 <__ieee754_rem_pio2+0x28>
 80104a6:	bf00      	nop
 80104a8:	54400000 	.word	0x54400000
 80104ac:	3ff921fb 	.word	0x3ff921fb
 80104b0:	1a626331 	.word	0x1a626331
 80104b4:	3dd0b461 	.word	0x3dd0b461
 80104b8:	1a600000 	.word	0x1a600000
 80104bc:	3dd0b461 	.word	0x3dd0b461
 80104c0:	2e037073 	.word	0x2e037073
 80104c4:	3ba3198a 	.word	0x3ba3198a
 80104c8:	6dc9c883 	.word	0x6dc9c883
 80104cc:	3fe45f30 	.word	0x3fe45f30
 80104d0:	2e000000 	.word	0x2e000000
 80104d4:	3ba3198a 	.word	0x3ba3198a
 80104d8:	252049c1 	.word	0x252049c1
 80104dc:	397b839a 	.word	0x397b839a
 80104e0:	3fe921fb 	.word	0x3fe921fb
 80104e4:	4002d97b 	.word	0x4002d97b
 80104e8:	3ff921fb 	.word	0x3ff921fb
 80104ec:	413921fb 	.word	0x413921fb
 80104f0:	3fe00000 	.word	0x3fe00000
 80104f4:	08014300 	.word	0x08014300
 80104f8:	7fefffff 	.word	0x7fefffff
 80104fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010500:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010504:	ee10 0a10 	vmov	r0, s0
 8010508:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801050c:	ee10 6a10 	vmov	r6, s0
 8010510:	460f      	mov	r7, r1
 8010512:	f7f0 fb31 	bl	8000b78 <__aeabi_d2iz>
 8010516:	f7f0 f815 	bl	8000544 <__aeabi_i2d>
 801051a:	4602      	mov	r2, r0
 801051c:	460b      	mov	r3, r1
 801051e:	4630      	mov	r0, r6
 8010520:	4639      	mov	r1, r7
 8010522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010526:	f7ef febf 	bl	80002a8 <__aeabi_dsub>
 801052a:	4b22      	ldr	r3, [pc, #136]	; (80105b4 <__ieee754_rem_pio2+0x40c>)
 801052c:	2200      	movs	r2, #0
 801052e:	f7f0 f873 	bl	8000618 <__aeabi_dmul>
 8010532:	460f      	mov	r7, r1
 8010534:	4606      	mov	r6, r0
 8010536:	f7f0 fb1f 	bl	8000b78 <__aeabi_d2iz>
 801053a:	f7f0 f803 	bl	8000544 <__aeabi_i2d>
 801053e:	4602      	mov	r2, r0
 8010540:	460b      	mov	r3, r1
 8010542:	4630      	mov	r0, r6
 8010544:	4639      	mov	r1, r7
 8010546:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801054a:	f7ef fead 	bl	80002a8 <__aeabi_dsub>
 801054e:	4b19      	ldr	r3, [pc, #100]	; (80105b4 <__ieee754_rem_pio2+0x40c>)
 8010550:	2200      	movs	r2, #0
 8010552:	f7f0 f861 	bl	8000618 <__aeabi_dmul>
 8010556:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801055a:	ad04      	add	r5, sp, #16
 801055c:	f04f 0803 	mov.w	r8, #3
 8010560:	46a9      	mov	r9, r5
 8010562:	2600      	movs	r6, #0
 8010564:	2700      	movs	r7, #0
 8010566:	4632      	mov	r2, r6
 8010568:	463b      	mov	r3, r7
 801056a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801056e:	46c3      	mov	fp, r8
 8010570:	3d08      	subs	r5, #8
 8010572:	f108 38ff 	add.w	r8, r8, #4294967295
 8010576:	f7f0 fab7 	bl	8000ae8 <__aeabi_dcmpeq>
 801057a:	2800      	cmp	r0, #0
 801057c:	d1f3      	bne.n	8010566 <__ieee754_rem_pio2+0x3be>
 801057e:	4b0e      	ldr	r3, [pc, #56]	; (80105b8 <__ieee754_rem_pio2+0x410>)
 8010580:	9301      	str	r3, [sp, #4]
 8010582:	2302      	movs	r3, #2
 8010584:	9300      	str	r3, [sp, #0]
 8010586:	4622      	mov	r2, r4
 8010588:	465b      	mov	r3, fp
 801058a:	4651      	mov	r1, sl
 801058c:	4648      	mov	r0, r9
 801058e:	f000 f8df 	bl	8010750 <__kernel_rem_pio2>
 8010592:	9b02      	ldr	r3, [sp, #8]
 8010594:	2b00      	cmp	r3, #0
 8010596:	4683      	mov	fp, r0
 8010598:	f6bf ae46 	bge.w	8010228 <__ieee754_rem_pio2+0x80>
 801059c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80105a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80105a4:	f8ca 3004 	str.w	r3, [sl, #4]
 80105a8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80105ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80105b0:	e73a      	b.n	8010428 <__ieee754_rem_pio2+0x280>
 80105b2:	bf00      	nop
 80105b4:	41700000 	.word	0x41700000
 80105b8:	08014380 	.word	0x08014380
 80105bc:	00000000 	.word	0x00000000

080105c0 <__kernel_cos>:
 80105c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c4:	ec57 6b10 	vmov	r6, r7, d0
 80105c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80105cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80105d0:	ed8d 1b00 	vstr	d1, [sp]
 80105d4:	da07      	bge.n	80105e6 <__kernel_cos+0x26>
 80105d6:	ee10 0a10 	vmov	r0, s0
 80105da:	4639      	mov	r1, r7
 80105dc:	f7f0 facc 	bl	8000b78 <__aeabi_d2iz>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	f000 8088 	beq.w	80106f6 <__kernel_cos+0x136>
 80105e6:	4632      	mov	r2, r6
 80105e8:	463b      	mov	r3, r7
 80105ea:	4630      	mov	r0, r6
 80105ec:	4639      	mov	r1, r7
 80105ee:	f7f0 f813 	bl	8000618 <__aeabi_dmul>
 80105f2:	4b51      	ldr	r3, [pc, #324]	; (8010738 <__kernel_cos+0x178>)
 80105f4:	2200      	movs	r2, #0
 80105f6:	4604      	mov	r4, r0
 80105f8:	460d      	mov	r5, r1
 80105fa:	f7f0 f80d 	bl	8000618 <__aeabi_dmul>
 80105fe:	a340      	add	r3, pc, #256	; (adr r3, 8010700 <__kernel_cos+0x140>)
 8010600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010604:	4682      	mov	sl, r0
 8010606:	468b      	mov	fp, r1
 8010608:	4620      	mov	r0, r4
 801060a:	4629      	mov	r1, r5
 801060c:	f7f0 f804 	bl	8000618 <__aeabi_dmul>
 8010610:	a33d      	add	r3, pc, #244	; (adr r3, 8010708 <__kernel_cos+0x148>)
 8010612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010616:	f7ef fe49 	bl	80002ac <__adddf3>
 801061a:	4622      	mov	r2, r4
 801061c:	462b      	mov	r3, r5
 801061e:	f7ef fffb 	bl	8000618 <__aeabi_dmul>
 8010622:	a33b      	add	r3, pc, #236	; (adr r3, 8010710 <__kernel_cos+0x150>)
 8010624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010628:	f7ef fe3e 	bl	80002a8 <__aeabi_dsub>
 801062c:	4622      	mov	r2, r4
 801062e:	462b      	mov	r3, r5
 8010630:	f7ef fff2 	bl	8000618 <__aeabi_dmul>
 8010634:	a338      	add	r3, pc, #224	; (adr r3, 8010718 <__kernel_cos+0x158>)
 8010636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063a:	f7ef fe37 	bl	80002ac <__adddf3>
 801063e:	4622      	mov	r2, r4
 8010640:	462b      	mov	r3, r5
 8010642:	f7ef ffe9 	bl	8000618 <__aeabi_dmul>
 8010646:	a336      	add	r3, pc, #216	; (adr r3, 8010720 <__kernel_cos+0x160>)
 8010648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064c:	f7ef fe2c 	bl	80002a8 <__aeabi_dsub>
 8010650:	4622      	mov	r2, r4
 8010652:	462b      	mov	r3, r5
 8010654:	f7ef ffe0 	bl	8000618 <__aeabi_dmul>
 8010658:	a333      	add	r3, pc, #204	; (adr r3, 8010728 <__kernel_cos+0x168>)
 801065a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065e:	f7ef fe25 	bl	80002ac <__adddf3>
 8010662:	4622      	mov	r2, r4
 8010664:	462b      	mov	r3, r5
 8010666:	f7ef ffd7 	bl	8000618 <__aeabi_dmul>
 801066a:	4622      	mov	r2, r4
 801066c:	462b      	mov	r3, r5
 801066e:	f7ef ffd3 	bl	8000618 <__aeabi_dmul>
 8010672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010676:	4604      	mov	r4, r0
 8010678:	460d      	mov	r5, r1
 801067a:	4630      	mov	r0, r6
 801067c:	4639      	mov	r1, r7
 801067e:	f7ef ffcb 	bl	8000618 <__aeabi_dmul>
 8010682:	460b      	mov	r3, r1
 8010684:	4602      	mov	r2, r0
 8010686:	4629      	mov	r1, r5
 8010688:	4620      	mov	r0, r4
 801068a:	f7ef fe0d 	bl	80002a8 <__aeabi_dsub>
 801068e:	4b2b      	ldr	r3, [pc, #172]	; (801073c <__kernel_cos+0x17c>)
 8010690:	4598      	cmp	r8, r3
 8010692:	4606      	mov	r6, r0
 8010694:	460f      	mov	r7, r1
 8010696:	dc10      	bgt.n	80106ba <__kernel_cos+0xfa>
 8010698:	4602      	mov	r2, r0
 801069a:	460b      	mov	r3, r1
 801069c:	4650      	mov	r0, sl
 801069e:	4659      	mov	r1, fp
 80106a0:	f7ef fe02 	bl	80002a8 <__aeabi_dsub>
 80106a4:	460b      	mov	r3, r1
 80106a6:	4926      	ldr	r1, [pc, #152]	; (8010740 <__kernel_cos+0x180>)
 80106a8:	4602      	mov	r2, r0
 80106aa:	2000      	movs	r0, #0
 80106ac:	f7ef fdfc 	bl	80002a8 <__aeabi_dsub>
 80106b0:	ec41 0b10 	vmov	d0, r0, r1
 80106b4:	b003      	add	sp, #12
 80106b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ba:	4b22      	ldr	r3, [pc, #136]	; (8010744 <__kernel_cos+0x184>)
 80106bc:	4920      	ldr	r1, [pc, #128]	; (8010740 <__kernel_cos+0x180>)
 80106be:	4598      	cmp	r8, r3
 80106c0:	bfcc      	ite	gt
 80106c2:	4d21      	ldrgt	r5, [pc, #132]	; (8010748 <__kernel_cos+0x188>)
 80106c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80106c8:	2400      	movs	r4, #0
 80106ca:	4622      	mov	r2, r4
 80106cc:	462b      	mov	r3, r5
 80106ce:	2000      	movs	r0, #0
 80106d0:	f7ef fdea 	bl	80002a8 <__aeabi_dsub>
 80106d4:	4622      	mov	r2, r4
 80106d6:	4680      	mov	r8, r0
 80106d8:	4689      	mov	r9, r1
 80106da:	462b      	mov	r3, r5
 80106dc:	4650      	mov	r0, sl
 80106de:	4659      	mov	r1, fp
 80106e0:	f7ef fde2 	bl	80002a8 <__aeabi_dsub>
 80106e4:	4632      	mov	r2, r6
 80106e6:	463b      	mov	r3, r7
 80106e8:	f7ef fdde 	bl	80002a8 <__aeabi_dsub>
 80106ec:	4602      	mov	r2, r0
 80106ee:	460b      	mov	r3, r1
 80106f0:	4640      	mov	r0, r8
 80106f2:	4649      	mov	r1, r9
 80106f4:	e7da      	b.n	80106ac <__kernel_cos+0xec>
 80106f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010730 <__kernel_cos+0x170>
 80106fa:	e7db      	b.n	80106b4 <__kernel_cos+0xf4>
 80106fc:	f3af 8000 	nop.w
 8010700:	be8838d4 	.word	0xbe8838d4
 8010704:	bda8fae9 	.word	0xbda8fae9
 8010708:	bdb4b1c4 	.word	0xbdb4b1c4
 801070c:	3e21ee9e 	.word	0x3e21ee9e
 8010710:	809c52ad 	.word	0x809c52ad
 8010714:	3e927e4f 	.word	0x3e927e4f
 8010718:	19cb1590 	.word	0x19cb1590
 801071c:	3efa01a0 	.word	0x3efa01a0
 8010720:	16c15177 	.word	0x16c15177
 8010724:	3f56c16c 	.word	0x3f56c16c
 8010728:	5555554c 	.word	0x5555554c
 801072c:	3fa55555 	.word	0x3fa55555
 8010730:	00000000 	.word	0x00000000
 8010734:	3ff00000 	.word	0x3ff00000
 8010738:	3fe00000 	.word	0x3fe00000
 801073c:	3fd33332 	.word	0x3fd33332
 8010740:	3ff00000 	.word	0x3ff00000
 8010744:	3fe90000 	.word	0x3fe90000
 8010748:	3fd20000 	.word	0x3fd20000
 801074c:	00000000 	.word	0x00000000

08010750 <__kernel_rem_pio2>:
 8010750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010754:	ed2d 8b02 	vpush	{d8}
 8010758:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801075c:	f112 0f14 	cmn.w	r2, #20
 8010760:	9308      	str	r3, [sp, #32]
 8010762:	9101      	str	r1, [sp, #4]
 8010764:	4bc6      	ldr	r3, [pc, #792]	; (8010a80 <__kernel_rem_pio2+0x330>)
 8010766:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010768:	9009      	str	r0, [sp, #36]	; 0x24
 801076a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801076e:	9304      	str	r3, [sp, #16]
 8010770:	9b08      	ldr	r3, [sp, #32]
 8010772:	f103 33ff 	add.w	r3, r3, #4294967295
 8010776:	bfa8      	it	ge
 8010778:	1ed4      	subge	r4, r2, #3
 801077a:	9306      	str	r3, [sp, #24]
 801077c:	bfb2      	itee	lt
 801077e:	2400      	movlt	r4, #0
 8010780:	2318      	movge	r3, #24
 8010782:	fb94 f4f3 	sdivge	r4, r4, r3
 8010786:	f06f 0317 	mvn.w	r3, #23
 801078a:	fb04 3303 	mla	r3, r4, r3, r3
 801078e:	eb03 0a02 	add.w	sl, r3, r2
 8010792:	9b04      	ldr	r3, [sp, #16]
 8010794:	9a06      	ldr	r2, [sp, #24]
 8010796:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010a70 <__kernel_rem_pio2+0x320>
 801079a:	eb03 0802 	add.w	r8, r3, r2
 801079e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80107a0:	1aa7      	subs	r7, r4, r2
 80107a2:	ae20      	add	r6, sp, #128	; 0x80
 80107a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80107a8:	2500      	movs	r5, #0
 80107aa:	4545      	cmp	r5, r8
 80107ac:	dd18      	ble.n	80107e0 <__kernel_rem_pio2+0x90>
 80107ae:	9b08      	ldr	r3, [sp, #32]
 80107b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80107b4:	aa20      	add	r2, sp, #128	; 0x80
 80107b6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8010a70 <__kernel_rem_pio2+0x320>
 80107ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80107be:	f1c3 0301 	rsb	r3, r3, #1
 80107c2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80107c6:	9307      	str	r3, [sp, #28]
 80107c8:	9b07      	ldr	r3, [sp, #28]
 80107ca:	9a04      	ldr	r2, [sp, #16]
 80107cc:	4443      	add	r3, r8
 80107ce:	429a      	cmp	r2, r3
 80107d0:	db2f      	blt.n	8010832 <__kernel_rem_pio2+0xe2>
 80107d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80107d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80107da:	462f      	mov	r7, r5
 80107dc:	2600      	movs	r6, #0
 80107de:	e01b      	b.n	8010818 <__kernel_rem_pio2+0xc8>
 80107e0:	42ef      	cmn	r7, r5
 80107e2:	d407      	bmi.n	80107f4 <__kernel_rem_pio2+0xa4>
 80107e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80107e8:	f7ef feac 	bl	8000544 <__aeabi_i2d>
 80107ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80107f0:	3501      	adds	r5, #1
 80107f2:	e7da      	b.n	80107aa <__kernel_rem_pio2+0x5a>
 80107f4:	ec51 0b18 	vmov	r0, r1, d8
 80107f8:	e7f8      	b.n	80107ec <__kernel_rem_pio2+0x9c>
 80107fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107fe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010802:	f7ef ff09 	bl	8000618 <__aeabi_dmul>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801080e:	f7ef fd4d 	bl	80002ac <__adddf3>
 8010812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010816:	3601      	adds	r6, #1
 8010818:	9b06      	ldr	r3, [sp, #24]
 801081a:	429e      	cmp	r6, r3
 801081c:	f1a7 0708 	sub.w	r7, r7, #8
 8010820:	ddeb      	ble.n	80107fa <__kernel_rem_pio2+0xaa>
 8010822:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010826:	3508      	adds	r5, #8
 8010828:	ecab 7b02 	vstmia	fp!, {d7}
 801082c:	f108 0801 	add.w	r8, r8, #1
 8010830:	e7ca      	b.n	80107c8 <__kernel_rem_pio2+0x78>
 8010832:	9b04      	ldr	r3, [sp, #16]
 8010834:	aa0c      	add	r2, sp, #48	; 0x30
 8010836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801083a:	930b      	str	r3, [sp, #44]	; 0x2c
 801083c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801083e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010842:	9c04      	ldr	r4, [sp, #16]
 8010844:	930a      	str	r3, [sp, #40]	; 0x28
 8010846:	ab98      	add	r3, sp, #608	; 0x260
 8010848:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801084c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010850:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8010854:	f8cd b008 	str.w	fp, [sp, #8]
 8010858:	4625      	mov	r5, r4
 801085a:	2d00      	cmp	r5, #0
 801085c:	dc78      	bgt.n	8010950 <__kernel_rem_pio2+0x200>
 801085e:	ec47 6b10 	vmov	d0, r6, r7
 8010862:	4650      	mov	r0, sl
 8010864:	f000 fbf4 	bl	8011050 <scalbn>
 8010868:	ec57 6b10 	vmov	r6, r7, d0
 801086c:	2200      	movs	r2, #0
 801086e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010872:	ee10 0a10 	vmov	r0, s0
 8010876:	4639      	mov	r1, r7
 8010878:	f7ef fece 	bl	8000618 <__aeabi_dmul>
 801087c:	ec41 0b10 	vmov	d0, r0, r1
 8010880:	f000 fb66 	bl	8010f50 <floor>
 8010884:	4b7f      	ldr	r3, [pc, #508]	; (8010a84 <__kernel_rem_pio2+0x334>)
 8010886:	ec51 0b10 	vmov	r0, r1, d0
 801088a:	2200      	movs	r2, #0
 801088c:	f7ef fec4 	bl	8000618 <__aeabi_dmul>
 8010890:	4602      	mov	r2, r0
 8010892:	460b      	mov	r3, r1
 8010894:	4630      	mov	r0, r6
 8010896:	4639      	mov	r1, r7
 8010898:	f7ef fd06 	bl	80002a8 <__aeabi_dsub>
 801089c:	460f      	mov	r7, r1
 801089e:	4606      	mov	r6, r0
 80108a0:	f7f0 f96a 	bl	8000b78 <__aeabi_d2iz>
 80108a4:	9007      	str	r0, [sp, #28]
 80108a6:	f7ef fe4d 	bl	8000544 <__aeabi_i2d>
 80108aa:	4602      	mov	r2, r0
 80108ac:	460b      	mov	r3, r1
 80108ae:	4630      	mov	r0, r6
 80108b0:	4639      	mov	r1, r7
 80108b2:	f7ef fcf9 	bl	80002a8 <__aeabi_dsub>
 80108b6:	f1ba 0f00 	cmp.w	sl, #0
 80108ba:	4606      	mov	r6, r0
 80108bc:	460f      	mov	r7, r1
 80108be:	dd70      	ble.n	80109a2 <__kernel_rem_pio2+0x252>
 80108c0:	1e62      	subs	r2, r4, #1
 80108c2:	ab0c      	add	r3, sp, #48	; 0x30
 80108c4:	9d07      	ldr	r5, [sp, #28]
 80108c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80108ca:	f1ca 0118 	rsb	r1, sl, #24
 80108ce:	fa40 f301 	asr.w	r3, r0, r1
 80108d2:	441d      	add	r5, r3
 80108d4:	408b      	lsls	r3, r1
 80108d6:	1ac0      	subs	r0, r0, r3
 80108d8:	ab0c      	add	r3, sp, #48	; 0x30
 80108da:	9507      	str	r5, [sp, #28]
 80108dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80108e0:	f1ca 0317 	rsb	r3, sl, #23
 80108e4:	fa40 f303 	asr.w	r3, r0, r3
 80108e8:	9302      	str	r3, [sp, #8]
 80108ea:	9b02      	ldr	r3, [sp, #8]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	dd66      	ble.n	80109be <__kernel_rem_pio2+0x26e>
 80108f0:	9b07      	ldr	r3, [sp, #28]
 80108f2:	2200      	movs	r2, #0
 80108f4:	3301      	adds	r3, #1
 80108f6:	9307      	str	r3, [sp, #28]
 80108f8:	4615      	mov	r5, r2
 80108fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80108fe:	4294      	cmp	r4, r2
 8010900:	f300 8099 	bgt.w	8010a36 <__kernel_rem_pio2+0x2e6>
 8010904:	f1ba 0f00 	cmp.w	sl, #0
 8010908:	dd07      	ble.n	801091a <__kernel_rem_pio2+0x1ca>
 801090a:	f1ba 0f01 	cmp.w	sl, #1
 801090e:	f000 80a5 	beq.w	8010a5c <__kernel_rem_pio2+0x30c>
 8010912:	f1ba 0f02 	cmp.w	sl, #2
 8010916:	f000 80c1 	beq.w	8010a9c <__kernel_rem_pio2+0x34c>
 801091a:	9b02      	ldr	r3, [sp, #8]
 801091c:	2b02      	cmp	r3, #2
 801091e:	d14e      	bne.n	80109be <__kernel_rem_pio2+0x26e>
 8010920:	4632      	mov	r2, r6
 8010922:	463b      	mov	r3, r7
 8010924:	4958      	ldr	r1, [pc, #352]	; (8010a88 <__kernel_rem_pio2+0x338>)
 8010926:	2000      	movs	r0, #0
 8010928:	f7ef fcbe 	bl	80002a8 <__aeabi_dsub>
 801092c:	4606      	mov	r6, r0
 801092e:	460f      	mov	r7, r1
 8010930:	2d00      	cmp	r5, #0
 8010932:	d044      	beq.n	80109be <__kernel_rem_pio2+0x26e>
 8010934:	4650      	mov	r0, sl
 8010936:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010a78 <__kernel_rem_pio2+0x328>
 801093a:	f000 fb89 	bl	8011050 <scalbn>
 801093e:	4630      	mov	r0, r6
 8010940:	4639      	mov	r1, r7
 8010942:	ec53 2b10 	vmov	r2, r3, d0
 8010946:	f7ef fcaf 	bl	80002a8 <__aeabi_dsub>
 801094a:	4606      	mov	r6, r0
 801094c:	460f      	mov	r7, r1
 801094e:	e036      	b.n	80109be <__kernel_rem_pio2+0x26e>
 8010950:	4b4e      	ldr	r3, [pc, #312]	; (8010a8c <__kernel_rem_pio2+0x33c>)
 8010952:	2200      	movs	r2, #0
 8010954:	4630      	mov	r0, r6
 8010956:	4639      	mov	r1, r7
 8010958:	f7ef fe5e 	bl	8000618 <__aeabi_dmul>
 801095c:	f7f0 f90c 	bl	8000b78 <__aeabi_d2iz>
 8010960:	f7ef fdf0 	bl	8000544 <__aeabi_i2d>
 8010964:	4b4a      	ldr	r3, [pc, #296]	; (8010a90 <__kernel_rem_pio2+0x340>)
 8010966:	2200      	movs	r2, #0
 8010968:	4680      	mov	r8, r0
 801096a:	4689      	mov	r9, r1
 801096c:	f7ef fe54 	bl	8000618 <__aeabi_dmul>
 8010970:	4602      	mov	r2, r0
 8010972:	460b      	mov	r3, r1
 8010974:	4630      	mov	r0, r6
 8010976:	4639      	mov	r1, r7
 8010978:	f7ef fc96 	bl	80002a8 <__aeabi_dsub>
 801097c:	f7f0 f8fc 	bl	8000b78 <__aeabi_d2iz>
 8010980:	9b02      	ldr	r3, [sp, #8]
 8010982:	f843 0b04 	str.w	r0, [r3], #4
 8010986:	3d01      	subs	r5, #1
 8010988:	9302      	str	r3, [sp, #8]
 801098a:	ab70      	add	r3, sp, #448	; 0x1c0
 801098c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010994:	4640      	mov	r0, r8
 8010996:	4649      	mov	r1, r9
 8010998:	f7ef fc88 	bl	80002ac <__adddf3>
 801099c:	4606      	mov	r6, r0
 801099e:	460f      	mov	r7, r1
 80109a0:	e75b      	b.n	801085a <__kernel_rem_pio2+0x10a>
 80109a2:	d105      	bne.n	80109b0 <__kernel_rem_pio2+0x260>
 80109a4:	1e63      	subs	r3, r4, #1
 80109a6:	aa0c      	add	r2, sp, #48	; 0x30
 80109a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80109ac:	15c3      	asrs	r3, r0, #23
 80109ae:	e79b      	b.n	80108e8 <__kernel_rem_pio2+0x198>
 80109b0:	4b38      	ldr	r3, [pc, #224]	; (8010a94 <__kernel_rem_pio2+0x344>)
 80109b2:	2200      	movs	r2, #0
 80109b4:	f7f0 f8b6 	bl	8000b24 <__aeabi_dcmpge>
 80109b8:	2800      	cmp	r0, #0
 80109ba:	d139      	bne.n	8010a30 <__kernel_rem_pio2+0x2e0>
 80109bc:	9002      	str	r0, [sp, #8]
 80109be:	2200      	movs	r2, #0
 80109c0:	2300      	movs	r3, #0
 80109c2:	4630      	mov	r0, r6
 80109c4:	4639      	mov	r1, r7
 80109c6:	f7f0 f88f 	bl	8000ae8 <__aeabi_dcmpeq>
 80109ca:	2800      	cmp	r0, #0
 80109cc:	f000 80b4 	beq.w	8010b38 <__kernel_rem_pio2+0x3e8>
 80109d0:	f104 3bff 	add.w	fp, r4, #4294967295
 80109d4:	465b      	mov	r3, fp
 80109d6:	2200      	movs	r2, #0
 80109d8:	9904      	ldr	r1, [sp, #16]
 80109da:	428b      	cmp	r3, r1
 80109dc:	da65      	bge.n	8010aaa <__kernel_rem_pio2+0x35a>
 80109de:	2a00      	cmp	r2, #0
 80109e0:	d07b      	beq.n	8010ada <__kernel_rem_pio2+0x38a>
 80109e2:	ab0c      	add	r3, sp, #48	; 0x30
 80109e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80109e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f000 80a0 	beq.w	8010b32 <__kernel_rem_pio2+0x3e2>
 80109f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010a78 <__kernel_rem_pio2+0x328>
 80109f6:	4650      	mov	r0, sl
 80109f8:	f000 fb2a 	bl	8011050 <scalbn>
 80109fc:	4f23      	ldr	r7, [pc, #140]	; (8010a8c <__kernel_rem_pio2+0x33c>)
 80109fe:	ec55 4b10 	vmov	r4, r5, d0
 8010a02:	46d8      	mov	r8, fp
 8010a04:	2600      	movs	r6, #0
 8010a06:	f1b8 0f00 	cmp.w	r8, #0
 8010a0a:	f280 80cf 	bge.w	8010bac <__kernel_rem_pio2+0x45c>
 8010a0e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8010a70 <__kernel_rem_pio2+0x320>
 8010a12:	465f      	mov	r7, fp
 8010a14:	f04f 0800 	mov.w	r8, #0
 8010a18:	2f00      	cmp	r7, #0
 8010a1a:	f2c0 80fd 	blt.w	8010c18 <__kernel_rem_pio2+0x4c8>
 8010a1e:	ab70      	add	r3, sp, #448	; 0x1c0
 8010a20:	f8df a074 	ldr.w	sl, [pc, #116]	; 8010a98 <__kernel_rem_pio2+0x348>
 8010a24:	ec55 4b18 	vmov	r4, r5, d8
 8010a28:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8010a2c:	2600      	movs	r6, #0
 8010a2e:	e0e5      	b.n	8010bfc <__kernel_rem_pio2+0x4ac>
 8010a30:	2302      	movs	r3, #2
 8010a32:	9302      	str	r3, [sp, #8]
 8010a34:	e75c      	b.n	80108f0 <__kernel_rem_pio2+0x1a0>
 8010a36:	f8db 3000 	ldr.w	r3, [fp]
 8010a3a:	b955      	cbnz	r5, 8010a52 <__kernel_rem_pio2+0x302>
 8010a3c:	b123      	cbz	r3, 8010a48 <__kernel_rem_pio2+0x2f8>
 8010a3e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010a42:	f8cb 3000 	str.w	r3, [fp]
 8010a46:	2301      	movs	r3, #1
 8010a48:	3201      	adds	r2, #1
 8010a4a:	f10b 0b04 	add.w	fp, fp, #4
 8010a4e:	461d      	mov	r5, r3
 8010a50:	e755      	b.n	80108fe <__kernel_rem_pio2+0x1ae>
 8010a52:	1acb      	subs	r3, r1, r3
 8010a54:	f8cb 3000 	str.w	r3, [fp]
 8010a58:	462b      	mov	r3, r5
 8010a5a:	e7f5      	b.n	8010a48 <__kernel_rem_pio2+0x2f8>
 8010a5c:	1e62      	subs	r2, r4, #1
 8010a5e:	ab0c      	add	r3, sp, #48	; 0x30
 8010a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a64:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010a68:	a90c      	add	r1, sp, #48	; 0x30
 8010a6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010a6e:	e754      	b.n	801091a <__kernel_rem_pio2+0x1ca>
	...
 8010a7c:	3ff00000 	.word	0x3ff00000
 8010a80:	080144c8 	.word	0x080144c8
 8010a84:	40200000 	.word	0x40200000
 8010a88:	3ff00000 	.word	0x3ff00000
 8010a8c:	3e700000 	.word	0x3e700000
 8010a90:	41700000 	.word	0x41700000
 8010a94:	3fe00000 	.word	0x3fe00000
 8010a98:	08014488 	.word	0x08014488
 8010a9c:	1e62      	subs	r2, r4, #1
 8010a9e:	ab0c      	add	r3, sp, #48	; 0x30
 8010aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010aa4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010aa8:	e7de      	b.n	8010a68 <__kernel_rem_pio2+0x318>
 8010aaa:	a90c      	add	r1, sp, #48	; 0x30
 8010aac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010ab0:	3b01      	subs	r3, #1
 8010ab2:	430a      	orrs	r2, r1
 8010ab4:	e790      	b.n	80109d8 <__kernel_rem_pio2+0x288>
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010abc:	2900      	cmp	r1, #0
 8010abe:	d0fa      	beq.n	8010ab6 <__kernel_rem_pio2+0x366>
 8010ac0:	9a08      	ldr	r2, [sp, #32]
 8010ac2:	18e3      	adds	r3, r4, r3
 8010ac4:	18a6      	adds	r6, r4, r2
 8010ac6:	aa20      	add	r2, sp, #128	; 0x80
 8010ac8:	1c65      	adds	r5, r4, #1
 8010aca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010ace:	9302      	str	r3, [sp, #8]
 8010ad0:	9b02      	ldr	r3, [sp, #8]
 8010ad2:	42ab      	cmp	r3, r5
 8010ad4:	da04      	bge.n	8010ae0 <__kernel_rem_pio2+0x390>
 8010ad6:	461c      	mov	r4, r3
 8010ad8:	e6b5      	b.n	8010846 <__kernel_rem_pio2+0xf6>
 8010ada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010adc:	2301      	movs	r3, #1
 8010ade:	e7eb      	b.n	8010ab8 <__kernel_rem_pio2+0x368>
 8010ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010ae6:	f7ef fd2d 	bl	8000544 <__aeabi_i2d>
 8010aea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010af0:	46b3      	mov	fp, r6
 8010af2:	461c      	mov	r4, r3
 8010af4:	2700      	movs	r7, #0
 8010af6:	f04f 0800 	mov.w	r8, #0
 8010afa:	f04f 0900 	mov.w	r9, #0
 8010afe:	9b06      	ldr	r3, [sp, #24]
 8010b00:	429f      	cmp	r7, r3
 8010b02:	dd06      	ble.n	8010b12 <__kernel_rem_pio2+0x3c2>
 8010b04:	ab70      	add	r3, sp, #448	; 0x1c0
 8010b06:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010b0a:	e9c3 8900 	strd	r8, r9, [r3]
 8010b0e:	3501      	adds	r5, #1
 8010b10:	e7de      	b.n	8010ad0 <__kernel_rem_pio2+0x380>
 8010b12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010b16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010b1a:	f7ef fd7d 	bl	8000618 <__aeabi_dmul>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	4640      	mov	r0, r8
 8010b24:	4649      	mov	r1, r9
 8010b26:	f7ef fbc1 	bl	80002ac <__adddf3>
 8010b2a:	3701      	adds	r7, #1
 8010b2c:	4680      	mov	r8, r0
 8010b2e:	4689      	mov	r9, r1
 8010b30:	e7e5      	b.n	8010afe <__kernel_rem_pio2+0x3ae>
 8010b32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b36:	e754      	b.n	80109e2 <__kernel_rem_pio2+0x292>
 8010b38:	ec47 6b10 	vmov	d0, r6, r7
 8010b3c:	f1ca 0000 	rsb	r0, sl, #0
 8010b40:	f000 fa86 	bl	8011050 <scalbn>
 8010b44:	ec57 6b10 	vmov	r6, r7, d0
 8010b48:	4b9f      	ldr	r3, [pc, #636]	; (8010dc8 <__kernel_rem_pio2+0x678>)
 8010b4a:	ee10 0a10 	vmov	r0, s0
 8010b4e:	2200      	movs	r2, #0
 8010b50:	4639      	mov	r1, r7
 8010b52:	f7ef ffe7 	bl	8000b24 <__aeabi_dcmpge>
 8010b56:	b300      	cbz	r0, 8010b9a <__kernel_rem_pio2+0x44a>
 8010b58:	4b9c      	ldr	r3, [pc, #624]	; (8010dcc <__kernel_rem_pio2+0x67c>)
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	4630      	mov	r0, r6
 8010b5e:	4639      	mov	r1, r7
 8010b60:	f7ef fd5a 	bl	8000618 <__aeabi_dmul>
 8010b64:	f7f0 f808 	bl	8000b78 <__aeabi_d2iz>
 8010b68:	4605      	mov	r5, r0
 8010b6a:	f7ef fceb 	bl	8000544 <__aeabi_i2d>
 8010b6e:	4b96      	ldr	r3, [pc, #600]	; (8010dc8 <__kernel_rem_pio2+0x678>)
 8010b70:	2200      	movs	r2, #0
 8010b72:	f7ef fd51 	bl	8000618 <__aeabi_dmul>
 8010b76:	460b      	mov	r3, r1
 8010b78:	4602      	mov	r2, r0
 8010b7a:	4639      	mov	r1, r7
 8010b7c:	4630      	mov	r0, r6
 8010b7e:	f7ef fb93 	bl	80002a8 <__aeabi_dsub>
 8010b82:	f7ef fff9 	bl	8000b78 <__aeabi_d2iz>
 8010b86:	f104 0b01 	add.w	fp, r4, #1
 8010b8a:	ab0c      	add	r3, sp, #48	; 0x30
 8010b8c:	f10a 0a18 	add.w	sl, sl, #24
 8010b90:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010b94:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8010b98:	e72b      	b.n	80109f2 <__kernel_rem_pio2+0x2a2>
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	4639      	mov	r1, r7
 8010b9e:	f7ef ffeb 	bl	8000b78 <__aeabi_d2iz>
 8010ba2:	ab0c      	add	r3, sp, #48	; 0x30
 8010ba4:	46a3      	mov	fp, r4
 8010ba6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010baa:	e722      	b.n	80109f2 <__kernel_rem_pio2+0x2a2>
 8010bac:	ab70      	add	r3, sp, #448	; 0x1c0
 8010bae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8010bb2:	ab0c      	add	r3, sp, #48	; 0x30
 8010bb4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010bb8:	f7ef fcc4 	bl	8000544 <__aeabi_i2d>
 8010bbc:	4622      	mov	r2, r4
 8010bbe:	462b      	mov	r3, r5
 8010bc0:	f7ef fd2a 	bl	8000618 <__aeabi_dmul>
 8010bc4:	4632      	mov	r2, r6
 8010bc6:	e9c9 0100 	strd	r0, r1, [r9]
 8010bca:	463b      	mov	r3, r7
 8010bcc:	4620      	mov	r0, r4
 8010bce:	4629      	mov	r1, r5
 8010bd0:	f7ef fd22 	bl	8000618 <__aeabi_dmul>
 8010bd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8010bd8:	4604      	mov	r4, r0
 8010bda:	460d      	mov	r5, r1
 8010bdc:	e713      	b.n	8010a06 <__kernel_rem_pio2+0x2b6>
 8010bde:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010be2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010be6:	f7ef fd17 	bl	8000618 <__aeabi_dmul>
 8010bea:	4602      	mov	r2, r0
 8010bec:	460b      	mov	r3, r1
 8010bee:	4620      	mov	r0, r4
 8010bf0:	4629      	mov	r1, r5
 8010bf2:	f7ef fb5b 	bl	80002ac <__adddf3>
 8010bf6:	3601      	adds	r6, #1
 8010bf8:	4604      	mov	r4, r0
 8010bfa:	460d      	mov	r5, r1
 8010bfc:	9b04      	ldr	r3, [sp, #16]
 8010bfe:	429e      	cmp	r6, r3
 8010c00:	dc01      	bgt.n	8010c06 <__kernel_rem_pio2+0x4b6>
 8010c02:	45b0      	cmp	r8, r6
 8010c04:	daeb      	bge.n	8010bde <__kernel_rem_pio2+0x48e>
 8010c06:	ab48      	add	r3, sp, #288	; 0x120
 8010c08:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010c0c:	e9c3 4500 	strd	r4, r5, [r3]
 8010c10:	3f01      	subs	r7, #1
 8010c12:	f108 0801 	add.w	r8, r8, #1
 8010c16:	e6ff      	b.n	8010a18 <__kernel_rem_pio2+0x2c8>
 8010c18:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	dc0b      	bgt.n	8010c36 <__kernel_rem_pio2+0x4e6>
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	dc6e      	bgt.n	8010d00 <__kernel_rem_pio2+0x5b0>
 8010c22:	d045      	beq.n	8010cb0 <__kernel_rem_pio2+0x560>
 8010c24:	9b07      	ldr	r3, [sp, #28]
 8010c26:	f003 0007 	and.w	r0, r3, #7
 8010c2a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010c2e:	ecbd 8b02 	vpop	{d8}
 8010c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c36:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010c38:	2b03      	cmp	r3, #3
 8010c3a:	d1f3      	bne.n	8010c24 <__kernel_rem_pio2+0x4d4>
 8010c3c:	ab48      	add	r3, sp, #288	; 0x120
 8010c3e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8010c42:	46d0      	mov	r8, sl
 8010c44:	46d9      	mov	r9, fp
 8010c46:	f1b9 0f00 	cmp.w	r9, #0
 8010c4a:	f1a8 0808 	sub.w	r8, r8, #8
 8010c4e:	dc64      	bgt.n	8010d1a <__kernel_rem_pio2+0x5ca>
 8010c50:	465c      	mov	r4, fp
 8010c52:	2c01      	cmp	r4, #1
 8010c54:	f1aa 0a08 	sub.w	sl, sl, #8
 8010c58:	dc7e      	bgt.n	8010d58 <__kernel_rem_pio2+0x608>
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	f1bb 0f01 	cmp.w	fp, #1
 8010c62:	f300 8097 	bgt.w	8010d94 <__kernel_rem_pio2+0x644>
 8010c66:	9b02      	ldr	r3, [sp, #8]
 8010c68:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8010c6c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	f040 8099 	bne.w	8010da8 <__kernel_rem_pio2+0x658>
 8010c76:	9b01      	ldr	r3, [sp, #4]
 8010c78:	e9c3 5600 	strd	r5, r6, [r3]
 8010c7c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010c80:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010c84:	e7ce      	b.n	8010c24 <__kernel_rem_pio2+0x4d4>
 8010c86:	ab48      	add	r3, sp, #288	; 0x120
 8010c88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c90:	f7ef fb0c 	bl	80002ac <__adddf3>
 8010c94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010c98:	f1bb 0f00 	cmp.w	fp, #0
 8010c9c:	daf3      	bge.n	8010c86 <__kernel_rem_pio2+0x536>
 8010c9e:	9b02      	ldr	r3, [sp, #8]
 8010ca0:	b113      	cbz	r3, 8010ca8 <__kernel_rem_pio2+0x558>
 8010ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	9b01      	ldr	r3, [sp, #4]
 8010caa:	e9c3 0100 	strd	r0, r1, [r3]
 8010cae:	e7b9      	b.n	8010c24 <__kernel_rem_pio2+0x4d4>
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	2100      	movs	r1, #0
 8010cb4:	e7f0      	b.n	8010c98 <__kernel_rem_pio2+0x548>
 8010cb6:	ab48      	add	r3, sp, #288	; 0x120
 8010cb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc0:	f7ef faf4 	bl	80002ac <__adddf3>
 8010cc4:	3c01      	subs	r4, #1
 8010cc6:	2c00      	cmp	r4, #0
 8010cc8:	daf5      	bge.n	8010cb6 <__kernel_rem_pio2+0x566>
 8010cca:	9b02      	ldr	r3, [sp, #8]
 8010ccc:	b1e3      	cbz	r3, 8010d08 <__kernel_rem_pio2+0x5b8>
 8010cce:	4602      	mov	r2, r0
 8010cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010cd4:	9c01      	ldr	r4, [sp, #4]
 8010cd6:	e9c4 2300 	strd	r2, r3, [r4]
 8010cda:	4602      	mov	r2, r0
 8010cdc:	460b      	mov	r3, r1
 8010cde:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010ce2:	f7ef fae1 	bl	80002a8 <__aeabi_dsub>
 8010ce6:	ad4a      	add	r5, sp, #296	; 0x128
 8010ce8:	2401      	movs	r4, #1
 8010cea:	45a3      	cmp	fp, r4
 8010cec:	da0f      	bge.n	8010d0e <__kernel_rem_pio2+0x5be>
 8010cee:	9b02      	ldr	r3, [sp, #8]
 8010cf0:	b113      	cbz	r3, 8010cf8 <__kernel_rem_pio2+0x5a8>
 8010cf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	9b01      	ldr	r3, [sp, #4]
 8010cfa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010cfe:	e791      	b.n	8010c24 <__kernel_rem_pio2+0x4d4>
 8010d00:	465c      	mov	r4, fp
 8010d02:	2000      	movs	r0, #0
 8010d04:	2100      	movs	r1, #0
 8010d06:	e7de      	b.n	8010cc6 <__kernel_rem_pio2+0x576>
 8010d08:	4602      	mov	r2, r0
 8010d0a:	460b      	mov	r3, r1
 8010d0c:	e7e2      	b.n	8010cd4 <__kernel_rem_pio2+0x584>
 8010d0e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010d12:	f7ef facb 	bl	80002ac <__adddf3>
 8010d16:	3401      	adds	r4, #1
 8010d18:	e7e7      	b.n	8010cea <__kernel_rem_pio2+0x59a>
 8010d1a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8010d1e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8010d22:	4620      	mov	r0, r4
 8010d24:	4632      	mov	r2, r6
 8010d26:	463b      	mov	r3, r7
 8010d28:	4629      	mov	r1, r5
 8010d2a:	f7ef fabf 	bl	80002ac <__adddf3>
 8010d2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d32:	4602      	mov	r2, r0
 8010d34:	460b      	mov	r3, r1
 8010d36:	4620      	mov	r0, r4
 8010d38:	4629      	mov	r1, r5
 8010d3a:	f7ef fab5 	bl	80002a8 <__aeabi_dsub>
 8010d3e:	4632      	mov	r2, r6
 8010d40:	463b      	mov	r3, r7
 8010d42:	f7ef fab3 	bl	80002ac <__adddf3>
 8010d46:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010d4a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8010d4e:	ed88 7b00 	vstr	d7, [r8]
 8010d52:	f109 39ff 	add.w	r9, r9, #4294967295
 8010d56:	e776      	b.n	8010c46 <__kernel_rem_pio2+0x4f6>
 8010d58:	e9da 8900 	ldrd	r8, r9, [sl]
 8010d5c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010d60:	4640      	mov	r0, r8
 8010d62:	4632      	mov	r2, r6
 8010d64:	463b      	mov	r3, r7
 8010d66:	4649      	mov	r1, r9
 8010d68:	f7ef faa0 	bl	80002ac <__adddf3>
 8010d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d70:	4602      	mov	r2, r0
 8010d72:	460b      	mov	r3, r1
 8010d74:	4640      	mov	r0, r8
 8010d76:	4649      	mov	r1, r9
 8010d78:	f7ef fa96 	bl	80002a8 <__aeabi_dsub>
 8010d7c:	4632      	mov	r2, r6
 8010d7e:	463b      	mov	r3, r7
 8010d80:	f7ef fa94 	bl	80002ac <__adddf3>
 8010d84:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010d88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010d8c:	ed8a 7b00 	vstr	d7, [sl]
 8010d90:	3c01      	subs	r4, #1
 8010d92:	e75e      	b.n	8010c52 <__kernel_rem_pio2+0x502>
 8010d94:	ab48      	add	r3, sp, #288	; 0x120
 8010d96:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d9e:	f7ef fa85 	bl	80002ac <__adddf3>
 8010da2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010da6:	e75a      	b.n	8010c5e <__kernel_rem_pio2+0x50e>
 8010da8:	9b01      	ldr	r3, [sp, #4]
 8010daa:	9a01      	ldr	r2, [sp, #4]
 8010dac:	601d      	str	r5, [r3, #0]
 8010dae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010db2:	605c      	str	r4, [r3, #4]
 8010db4:	609f      	str	r7, [r3, #8]
 8010db6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010dba:	60d3      	str	r3, [r2, #12]
 8010dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010dc0:	6110      	str	r0, [r2, #16]
 8010dc2:	6153      	str	r3, [r2, #20]
 8010dc4:	e72e      	b.n	8010c24 <__kernel_rem_pio2+0x4d4>
 8010dc6:	bf00      	nop
 8010dc8:	41700000 	.word	0x41700000
 8010dcc:	3e700000 	.word	0x3e700000

08010dd0 <__kernel_sin>:
 8010dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd4:	ed2d 8b04 	vpush	{d8-d9}
 8010dd8:	eeb0 8a41 	vmov.f32	s16, s2
 8010ddc:	eef0 8a61 	vmov.f32	s17, s3
 8010de0:	ec55 4b10 	vmov	r4, r5, d0
 8010de4:	b083      	sub	sp, #12
 8010de6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010dea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010dee:	9001      	str	r0, [sp, #4]
 8010df0:	da06      	bge.n	8010e00 <__kernel_sin+0x30>
 8010df2:	ee10 0a10 	vmov	r0, s0
 8010df6:	4629      	mov	r1, r5
 8010df8:	f7ef febe 	bl	8000b78 <__aeabi_d2iz>
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	d051      	beq.n	8010ea4 <__kernel_sin+0xd4>
 8010e00:	4622      	mov	r2, r4
 8010e02:	462b      	mov	r3, r5
 8010e04:	4620      	mov	r0, r4
 8010e06:	4629      	mov	r1, r5
 8010e08:	f7ef fc06 	bl	8000618 <__aeabi_dmul>
 8010e0c:	4682      	mov	sl, r0
 8010e0e:	468b      	mov	fp, r1
 8010e10:	4602      	mov	r2, r0
 8010e12:	460b      	mov	r3, r1
 8010e14:	4620      	mov	r0, r4
 8010e16:	4629      	mov	r1, r5
 8010e18:	f7ef fbfe 	bl	8000618 <__aeabi_dmul>
 8010e1c:	a341      	add	r3, pc, #260	; (adr r3, 8010f24 <__kernel_sin+0x154>)
 8010e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e22:	4680      	mov	r8, r0
 8010e24:	4689      	mov	r9, r1
 8010e26:	4650      	mov	r0, sl
 8010e28:	4659      	mov	r1, fp
 8010e2a:	f7ef fbf5 	bl	8000618 <__aeabi_dmul>
 8010e2e:	a33f      	add	r3, pc, #252	; (adr r3, 8010f2c <__kernel_sin+0x15c>)
 8010e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e34:	f7ef fa38 	bl	80002a8 <__aeabi_dsub>
 8010e38:	4652      	mov	r2, sl
 8010e3a:	465b      	mov	r3, fp
 8010e3c:	f7ef fbec 	bl	8000618 <__aeabi_dmul>
 8010e40:	a33c      	add	r3, pc, #240	; (adr r3, 8010f34 <__kernel_sin+0x164>)
 8010e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e46:	f7ef fa31 	bl	80002ac <__adddf3>
 8010e4a:	4652      	mov	r2, sl
 8010e4c:	465b      	mov	r3, fp
 8010e4e:	f7ef fbe3 	bl	8000618 <__aeabi_dmul>
 8010e52:	a33a      	add	r3, pc, #232	; (adr r3, 8010f3c <__kernel_sin+0x16c>)
 8010e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e58:	f7ef fa26 	bl	80002a8 <__aeabi_dsub>
 8010e5c:	4652      	mov	r2, sl
 8010e5e:	465b      	mov	r3, fp
 8010e60:	f7ef fbda 	bl	8000618 <__aeabi_dmul>
 8010e64:	a337      	add	r3, pc, #220	; (adr r3, 8010f44 <__kernel_sin+0x174>)
 8010e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6a:	f7ef fa1f 	bl	80002ac <__adddf3>
 8010e6e:	9b01      	ldr	r3, [sp, #4]
 8010e70:	4606      	mov	r6, r0
 8010e72:	460f      	mov	r7, r1
 8010e74:	b9eb      	cbnz	r3, 8010eb2 <__kernel_sin+0xe2>
 8010e76:	4602      	mov	r2, r0
 8010e78:	460b      	mov	r3, r1
 8010e7a:	4650      	mov	r0, sl
 8010e7c:	4659      	mov	r1, fp
 8010e7e:	f7ef fbcb 	bl	8000618 <__aeabi_dmul>
 8010e82:	a325      	add	r3, pc, #148	; (adr r3, 8010f18 <__kernel_sin+0x148>)
 8010e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e88:	f7ef fa0e 	bl	80002a8 <__aeabi_dsub>
 8010e8c:	4642      	mov	r2, r8
 8010e8e:	464b      	mov	r3, r9
 8010e90:	f7ef fbc2 	bl	8000618 <__aeabi_dmul>
 8010e94:	4602      	mov	r2, r0
 8010e96:	460b      	mov	r3, r1
 8010e98:	4620      	mov	r0, r4
 8010e9a:	4629      	mov	r1, r5
 8010e9c:	f7ef fa06 	bl	80002ac <__adddf3>
 8010ea0:	4604      	mov	r4, r0
 8010ea2:	460d      	mov	r5, r1
 8010ea4:	ec45 4b10 	vmov	d0, r4, r5
 8010ea8:	b003      	add	sp, #12
 8010eaa:	ecbd 8b04 	vpop	{d8-d9}
 8010eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb2:	4b1b      	ldr	r3, [pc, #108]	; (8010f20 <__kernel_sin+0x150>)
 8010eb4:	ec51 0b18 	vmov	r0, r1, d8
 8010eb8:	2200      	movs	r2, #0
 8010eba:	f7ef fbad 	bl	8000618 <__aeabi_dmul>
 8010ebe:	4632      	mov	r2, r6
 8010ec0:	ec41 0b19 	vmov	d9, r0, r1
 8010ec4:	463b      	mov	r3, r7
 8010ec6:	4640      	mov	r0, r8
 8010ec8:	4649      	mov	r1, r9
 8010eca:	f7ef fba5 	bl	8000618 <__aeabi_dmul>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	ec51 0b19 	vmov	r0, r1, d9
 8010ed6:	f7ef f9e7 	bl	80002a8 <__aeabi_dsub>
 8010eda:	4652      	mov	r2, sl
 8010edc:	465b      	mov	r3, fp
 8010ede:	f7ef fb9b 	bl	8000618 <__aeabi_dmul>
 8010ee2:	ec53 2b18 	vmov	r2, r3, d8
 8010ee6:	f7ef f9df 	bl	80002a8 <__aeabi_dsub>
 8010eea:	a30b      	add	r3, pc, #44	; (adr r3, 8010f18 <__kernel_sin+0x148>)
 8010eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	460f      	mov	r7, r1
 8010ef4:	4640      	mov	r0, r8
 8010ef6:	4649      	mov	r1, r9
 8010ef8:	f7ef fb8e 	bl	8000618 <__aeabi_dmul>
 8010efc:	4602      	mov	r2, r0
 8010efe:	460b      	mov	r3, r1
 8010f00:	4630      	mov	r0, r6
 8010f02:	4639      	mov	r1, r7
 8010f04:	f7ef f9d2 	bl	80002ac <__adddf3>
 8010f08:	4602      	mov	r2, r0
 8010f0a:	460b      	mov	r3, r1
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	4629      	mov	r1, r5
 8010f10:	f7ef f9ca 	bl	80002a8 <__aeabi_dsub>
 8010f14:	e7c4      	b.n	8010ea0 <__kernel_sin+0xd0>
 8010f16:	bf00      	nop
 8010f18:	55555549 	.word	0x55555549
 8010f1c:	3fc55555 	.word	0x3fc55555
 8010f20:	3fe00000 	.word	0x3fe00000
 8010f24:	5acfd57c 	.word	0x5acfd57c
 8010f28:	3de5d93a 	.word	0x3de5d93a
 8010f2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010f30:	3e5ae5e6 	.word	0x3e5ae5e6
 8010f34:	57b1fe7d 	.word	0x57b1fe7d
 8010f38:	3ec71de3 	.word	0x3ec71de3
 8010f3c:	19c161d5 	.word	0x19c161d5
 8010f40:	3f2a01a0 	.word	0x3f2a01a0
 8010f44:	1110f8a6 	.word	0x1110f8a6
 8010f48:	3f811111 	.word	0x3f811111
 8010f4c:	00000000 	.word	0x00000000

08010f50 <floor>:
 8010f50:	ec51 0b10 	vmov	r0, r1, d0
 8010f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010f5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010f60:	2e13      	cmp	r6, #19
 8010f62:	ee10 5a10 	vmov	r5, s0
 8010f66:	ee10 8a10 	vmov	r8, s0
 8010f6a:	460c      	mov	r4, r1
 8010f6c:	dc32      	bgt.n	8010fd4 <floor+0x84>
 8010f6e:	2e00      	cmp	r6, #0
 8010f70:	da14      	bge.n	8010f9c <floor+0x4c>
 8010f72:	a333      	add	r3, pc, #204	; (adr r3, 8011040 <floor+0xf0>)
 8010f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f78:	f7ef f998 	bl	80002ac <__adddf3>
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	2300      	movs	r3, #0
 8010f80:	f7ef fdda 	bl	8000b38 <__aeabi_dcmpgt>
 8010f84:	b138      	cbz	r0, 8010f96 <floor+0x46>
 8010f86:	2c00      	cmp	r4, #0
 8010f88:	da57      	bge.n	801103a <floor+0xea>
 8010f8a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010f8e:	431d      	orrs	r5, r3
 8010f90:	d001      	beq.n	8010f96 <floor+0x46>
 8010f92:	4c2d      	ldr	r4, [pc, #180]	; (8011048 <floor+0xf8>)
 8010f94:	2500      	movs	r5, #0
 8010f96:	4621      	mov	r1, r4
 8010f98:	4628      	mov	r0, r5
 8010f9a:	e025      	b.n	8010fe8 <floor+0x98>
 8010f9c:	4f2b      	ldr	r7, [pc, #172]	; (801104c <floor+0xfc>)
 8010f9e:	4137      	asrs	r7, r6
 8010fa0:	ea01 0307 	and.w	r3, r1, r7
 8010fa4:	4303      	orrs	r3, r0
 8010fa6:	d01f      	beq.n	8010fe8 <floor+0x98>
 8010fa8:	a325      	add	r3, pc, #148	; (adr r3, 8011040 <floor+0xf0>)
 8010faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fae:	f7ef f97d 	bl	80002ac <__adddf3>
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	f7ef fdbf 	bl	8000b38 <__aeabi_dcmpgt>
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	d0eb      	beq.n	8010f96 <floor+0x46>
 8010fbe:	2c00      	cmp	r4, #0
 8010fc0:	bfbe      	ittt	lt
 8010fc2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010fc6:	fa43 f606 	asrlt.w	r6, r3, r6
 8010fca:	19a4      	addlt	r4, r4, r6
 8010fcc:	ea24 0407 	bic.w	r4, r4, r7
 8010fd0:	2500      	movs	r5, #0
 8010fd2:	e7e0      	b.n	8010f96 <floor+0x46>
 8010fd4:	2e33      	cmp	r6, #51	; 0x33
 8010fd6:	dd0b      	ble.n	8010ff0 <floor+0xa0>
 8010fd8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010fdc:	d104      	bne.n	8010fe8 <floor+0x98>
 8010fde:	ee10 2a10 	vmov	r2, s0
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	f7ef f962 	bl	80002ac <__adddf3>
 8010fe8:	ec41 0b10 	vmov	d0, r0, r1
 8010fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ff8:	fa23 f707 	lsr.w	r7, r3, r7
 8010ffc:	4207      	tst	r7, r0
 8010ffe:	d0f3      	beq.n	8010fe8 <floor+0x98>
 8011000:	a30f      	add	r3, pc, #60	; (adr r3, 8011040 <floor+0xf0>)
 8011002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011006:	f7ef f951 	bl	80002ac <__adddf3>
 801100a:	2200      	movs	r2, #0
 801100c:	2300      	movs	r3, #0
 801100e:	f7ef fd93 	bl	8000b38 <__aeabi_dcmpgt>
 8011012:	2800      	cmp	r0, #0
 8011014:	d0bf      	beq.n	8010f96 <floor+0x46>
 8011016:	2c00      	cmp	r4, #0
 8011018:	da02      	bge.n	8011020 <floor+0xd0>
 801101a:	2e14      	cmp	r6, #20
 801101c:	d103      	bne.n	8011026 <floor+0xd6>
 801101e:	3401      	adds	r4, #1
 8011020:	ea25 0507 	bic.w	r5, r5, r7
 8011024:	e7b7      	b.n	8010f96 <floor+0x46>
 8011026:	2301      	movs	r3, #1
 8011028:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801102c:	fa03 f606 	lsl.w	r6, r3, r6
 8011030:	4435      	add	r5, r6
 8011032:	4545      	cmp	r5, r8
 8011034:	bf38      	it	cc
 8011036:	18e4      	addcc	r4, r4, r3
 8011038:	e7f2      	b.n	8011020 <floor+0xd0>
 801103a:	2500      	movs	r5, #0
 801103c:	462c      	mov	r4, r5
 801103e:	e7aa      	b.n	8010f96 <floor+0x46>
 8011040:	8800759c 	.word	0x8800759c
 8011044:	7e37e43c 	.word	0x7e37e43c
 8011048:	bff00000 	.word	0xbff00000
 801104c:	000fffff 	.word	0x000fffff

08011050 <scalbn>:
 8011050:	b570      	push	{r4, r5, r6, lr}
 8011052:	ec55 4b10 	vmov	r4, r5, d0
 8011056:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801105a:	4606      	mov	r6, r0
 801105c:	462b      	mov	r3, r5
 801105e:	b99a      	cbnz	r2, 8011088 <scalbn+0x38>
 8011060:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011064:	4323      	orrs	r3, r4
 8011066:	d036      	beq.n	80110d6 <scalbn+0x86>
 8011068:	4b39      	ldr	r3, [pc, #228]	; (8011150 <scalbn+0x100>)
 801106a:	4629      	mov	r1, r5
 801106c:	ee10 0a10 	vmov	r0, s0
 8011070:	2200      	movs	r2, #0
 8011072:	f7ef fad1 	bl	8000618 <__aeabi_dmul>
 8011076:	4b37      	ldr	r3, [pc, #220]	; (8011154 <scalbn+0x104>)
 8011078:	429e      	cmp	r6, r3
 801107a:	4604      	mov	r4, r0
 801107c:	460d      	mov	r5, r1
 801107e:	da10      	bge.n	80110a2 <scalbn+0x52>
 8011080:	a32b      	add	r3, pc, #172	; (adr r3, 8011130 <scalbn+0xe0>)
 8011082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011086:	e03a      	b.n	80110fe <scalbn+0xae>
 8011088:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801108c:	428a      	cmp	r2, r1
 801108e:	d10c      	bne.n	80110aa <scalbn+0x5a>
 8011090:	ee10 2a10 	vmov	r2, s0
 8011094:	4620      	mov	r0, r4
 8011096:	4629      	mov	r1, r5
 8011098:	f7ef f908 	bl	80002ac <__adddf3>
 801109c:	4604      	mov	r4, r0
 801109e:	460d      	mov	r5, r1
 80110a0:	e019      	b.n	80110d6 <scalbn+0x86>
 80110a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80110a6:	460b      	mov	r3, r1
 80110a8:	3a36      	subs	r2, #54	; 0x36
 80110aa:	4432      	add	r2, r6
 80110ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80110b0:	428a      	cmp	r2, r1
 80110b2:	dd08      	ble.n	80110c6 <scalbn+0x76>
 80110b4:	2d00      	cmp	r5, #0
 80110b6:	a120      	add	r1, pc, #128	; (adr r1, 8011138 <scalbn+0xe8>)
 80110b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110bc:	da1c      	bge.n	80110f8 <scalbn+0xa8>
 80110be:	a120      	add	r1, pc, #128	; (adr r1, 8011140 <scalbn+0xf0>)
 80110c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110c4:	e018      	b.n	80110f8 <scalbn+0xa8>
 80110c6:	2a00      	cmp	r2, #0
 80110c8:	dd08      	ble.n	80110dc <scalbn+0x8c>
 80110ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80110ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80110d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80110d6:	ec45 4b10 	vmov	d0, r4, r5
 80110da:	bd70      	pop	{r4, r5, r6, pc}
 80110dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80110e0:	da19      	bge.n	8011116 <scalbn+0xc6>
 80110e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80110e6:	429e      	cmp	r6, r3
 80110e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80110ec:	dd0a      	ble.n	8011104 <scalbn+0xb4>
 80110ee:	a112      	add	r1, pc, #72	; (adr r1, 8011138 <scalbn+0xe8>)
 80110f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d1e2      	bne.n	80110be <scalbn+0x6e>
 80110f8:	a30f      	add	r3, pc, #60	; (adr r3, 8011138 <scalbn+0xe8>)
 80110fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fe:	f7ef fa8b 	bl	8000618 <__aeabi_dmul>
 8011102:	e7cb      	b.n	801109c <scalbn+0x4c>
 8011104:	a10a      	add	r1, pc, #40	; (adr r1, 8011130 <scalbn+0xe0>)
 8011106:	e9d1 0100 	ldrd	r0, r1, [r1]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d0b8      	beq.n	8011080 <scalbn+0x30>
 801110e:	a10e      	add	r1, pc, #56	; (adr r1, 8011148 <scalbn+0xf8>)
 8011110:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011114:	e7b4      	b.n	8011080 <scalbn+0x30>
 8011116:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801111a:	3236      	adds	r2, #54	; 0x36
 801111c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011120:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011124:	4620      	mov	r0, r4
 8011126:	4b0c      	ldr	r3, [pc, #48]	; (8011158 <scalbn+0x108>)
 8011128:	2200      	movs	r2, #0
 801112a:	e7e8      	b.n	80110fe <scalbn+0xae>
 801112c:	f3af 8000 	nop.w
 8011130:	c2f8f359 	.word	0xc2f8f359
 8011134:	01a56e1f 	.word	0x01a56e1f
 8011138:	8800759c 	.word	0x8800759c
 801113c:	7e37e43c 	.word	0x7e37e43c
 8011140:	8800759c 	.word	0x8800759c
 8011144:	fe37e43c 	.word	0xfe37e43c
 8011148:	c2f8f359 	.word	0xc2f8f359
 801114c:	81a56e1f 	.word	0x81a56e1f
 8011150:	43500000 	.word	0x43500000
 8011154:	ffff3cb0 	.word	0xffff3cb0
 8011158:	3c900000 	.word	0x3c900000

0801115c <_init>:
 801115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115e:	bf00      	nop
 8011160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011162:	bc08      	pop	{r3}
 8011164:	469e      	mov	lr, r3
 8011166:	4770      	bx	lr

08011168 <_fini>:
 8011168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116a:	bf00      	nop
 801116c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801116e:	bc08      	pop	{r3}
 8011170:	469e      	mov	lr, r3
 8011172:	4770      	bx	lr
