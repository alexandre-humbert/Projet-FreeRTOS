
2021_FreeRTOS_FISE3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000305c  0800f880  0800f880  0001f880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128dc  080128dc  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  080128dc  080128dc  000228dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128e4  080128e4  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128e4  080128e4  000228e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080128e8  080128e8  000228e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080128ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00021ee8  20000238  08012b24  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20022120  08012b24  00032120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003036d  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062dd  00000000  00000000  000605d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a8  00000000  00000000  000668b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef8  00000000  00000000  00068a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004a249  00000000  00000000  0006a958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002951c  00000000  00000000  000b4ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f50f0  00000000  00000000  000de0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d31ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c28  00000000  00000000  001d3200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000238 	.word	0x20000238
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f868 	.word	0x0800f868

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000023c 	.word	0x2000023c
 80001ec:	0800f868 	.word	0x0800f868

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <MX_DMA2D_Init+0x60>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef6:	f003 f913 	bl	8004120 <HAL_DMA2D_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f00:	f000 fe72 	bl	8001be8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f04:	2101      	movs	r1, #1
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000f08:	f003 fb78 	bl	80045fc <HAL_DMA2D_ConfigLayer>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f12:	f000 fe69 	bl	8001be8 <Error_Handler>
  }

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20021c6c 	.word	0x20021c6c
 8000f20:	4002b000 	.word	0x4002b000

08000f24 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_DMA2D_MspInit+0x48>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d115      	bne.n	8000f62 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	205a      	movs	r0, #90	; 0x5a
 8000f58:	f002 fed8 	bl	8003d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f5c:	205a      	movs	r0, #90	; 0x5a
 8000f5e:	f002 fef1 	bl	8003d44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	4002b000 	.word	0x4002b000
 8000f70:	40023800 	.word	0x40023800

08000f74 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_FMC_Init+0x98>)
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <MX_FMC_Init+0x9c>)
 8000f90:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_FMC_Init+0x98>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_FMC_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_FMC_Init+0x98>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_FMC_Init+0x98>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_FMC_Init+0x98>)
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_FMC_Init+0x98>)
 8000fb2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000fb6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_FMC_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_FMC_Init+0x98>)
 8000fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_FMC_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_FMC_Init+0x98>)
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_FMC_Init+0x98>)
 8000ff6:	f006 faa7 	bl	8007548 <HAL_SDRAM_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001000:	f000 fdf2 	bl	8001be8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20021cac 	.word	0x20021cac
 8001010:	a0000140 	.word	0xa0000140

08001014 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <HAL_FMC_MspInit+0x104>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d16f      	bne.n	8001110 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_FMC_MspInit+0x104>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_FMC_MspInit+0x108>)
 800103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6393      	str	r3, [r2, #56]	; 0x38
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001052:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001056:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001064:	230c      	movs	r3, #12
 8001066:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	482c      	ldr	r0, [pc, #176]	; (8001120 <HAL_FMC_MspInit+0x10c>)
 800106e:	f003 fbf3 	bl	8004858 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001072:	2301      	movs	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001082:	230c      	movs	r3, #12
 8001084:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4826      	ldr	r0, [pc, #152]	; (8001124 <HAL_FMC_MspInit+0x110>)
 800108c:	f003 fbe4 	bl	8004858 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001090:	f248 1333 	movw	r3, #33075	; 0x8133
 8001094:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	481f      	ldr	r0, [pc, #124]	; (8001128 <HAL_FMC_MspInit+0x114>)
 80010ac:	f003 fbd4 	bl	8004858 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010b4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c2:	230c      	movs	r3, #12
 80010c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <HAL_FMC_MspInit+0x118>)
 80010cc:	f003 fbc4 	bl	8004858 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80010d0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80010d4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e2:	230c      	movs	r3, #12
 80010e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <HAL_FMC_MspInit+0x11c>)
 80010ec:	f003 fbb4 	bl	8004858 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001100:	230c      	movs	r3, #12
 8001102:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <HAL_FMC_MspInit+0x120>)
 800110a:	f003 fba5 	bl	8004858 <HAL_GPIO_Init>
 800110e:	e000      	b.n	8001112 <HAL_FMC_MspInit+0xfe>
    return;
 8001110:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000254 	.word	0x20000254
 800111c:	40023800 	.word	0x40023800
 8001120:	40021400 	.word	0x40021400
 8001124:	40020800 	.word	0x40020800
 8001128:	40021800 	.word	0x40021800
 800112c:	40021000 	.word	0x40021000
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40020400 	.word	0x40020400

08001138 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001140:	f7ff ff68 	bl	8001014 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <vApplicationGetTimerTaskMemory>:
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize )
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <vApplicationGetTimerTaskMemory+0x2c>)
 800115c:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <vApplicationGetTimerTaskMemory+0x30>)
 8001162:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	200004bc 	.word	0x200004bc
 800117c:	20000520 	.word	0x20000520

08001180 <vApplicationGetIdleTaskMemory>:

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a07      	ldr	r2, [pc, #28]	; (80011ac <vApplicationGetIdleTaskMemory+0x2c>)
 8001190:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <vApplicationGetIdleTaskMemory+0x30>)
 8001196:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000258 	.word	0x20000258
 80011b0:	200002bc 	.word	0x200002bc

080011b4 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08e      	sub	sp, #56	; 0x38
 80011b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	4b89      	ldr	r3, [pc, #548]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a88      	ldr	r2, [pc, #544]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b86      	ldr	r3, [pc, #536]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	4b82      	ldr	r3, [pc, #520]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a81      	ldr	r2, [pc, #516]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a7a      	ldr	r2, [pc, #488]	; (80013f4 <MX_GPIO_Init+0x240>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b78      	ldr	r3, [pc, #480]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b74      	ldr	r3, [pc, #464]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a73      	ldr	r2, [pc, #460]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b71      	ldr	r3, [pc, #452]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a6c      	ldr	r2, [pc, #432]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <MX_GPIO_Init+0x240>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <MX_GPIO_Init+0x240>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a5e      	ldr	r2, [pc, #376]	; (80013f4 <MX_GPIO_Init+0x240>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b55      	ldr	r3, [pc, #340]	; (80013f4 <MX_GPIO_Init+0x240>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2116      	movs	r1, #22
 80012ae:	4852      	ldr	r0, [pc, #328]	; (80013f8 <MX_GPIO_Init+0x244>)
 80012b0:	f003 fd8a 	bl	8004dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	4850      	ldr	r0, [pc, #320]	; (80013fc <MX_GPIO_Init+0x248>)
 80012ba:	f003 fd85 	bl	8004dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80012c4:	484e      	ldr	r0, [pc, #312]	; (8001400 <MX_GPIO_Init+0x24c>)
 80012c6:	f003 fd7f 	bl	8004dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012d0:	484c      	ldr	r0, [pc, #304]	; (8001404 <MX_GPIO_Init+0x250>)
 80012d2:	f003 fd79 	bl	8004dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80012d6:	2316      	movs	r3, #22
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4842      	ldr	r0, [pc, #264]	; (80013f8 <MX_GPIO_Init+0x244>)
 80012ee:	f003 fab3 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80012f2:	f248 0307 	movw	r3, #32775	; 0x8007
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f8:	4b43      	ldr	r3, [pc, #268]	; (8001408 <MX_GPIO_Init+0x254>)
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	483d      	ldr	r0, [pc, #244]	; (80013fc <MX_GPIO_Init+0x248>)
 8001308:	f003 faa6 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4836      	ldr	r0, [pc, #216]	; (80013fc <MX_GPIO_Init+0x248>)
 8001324:	f003 fa98 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <MX_GPIO_Init+0x254>)
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	482f      	ldr	r0, [pc, #188]	; (80013f8 <MX_GPIO_Init+0x244>)
 800133c:	f003 fa8c 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001340:	2304      	movs	r3, #4
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	482e      	ldr	r0, [pc, #184]	; (800140c <MX_GPIO_Init+0x258>)
 8001354:	f003 fa80 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001358:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800136a:	230c      	movs	r3, #12
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4825      	ldr	r0, [pc, #148]	; (800140c <MX_GPIO_Init+0x258>)
 8001376:	f003 fa6f 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_GPIO_Init+0x258>)
 8001390:	f003 fa62 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_GPIO_Init+0x24c>)
 80013aa:	f003 fa55 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80013ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_GPIO_Init+0x24c>)
 80013c8:	f003 fa46 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80013cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_GPIO_Init+0x250>)
 80013e6:	f003 fa37 	bl	8004858 <HAL_GPIO_Init>

}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021800 	.word	0x40021800
 8001408:	10120000 	.word	0x10120000
 800140c:	40020400 	.word	0x40020400

08001410 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_I2C3_Init+0x74>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <MX_I2C3_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_I2C3_Init+0x74>)
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <MX_I2C3_Init+0x7c>)
 800141e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_I2C3_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_I2C3_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_I2C3_Init+0x74>)
 800142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001432:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_I2C3_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C3_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_I2C3_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C3_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_I2C3_Init+0x74>)
 800144e:	f003 fcd5 	bl	8004dfc <HAL_I2C_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001458:	f000 fbc6 	bl	8001be8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <MX_I2C3_Init+0x74>)
 8001460:	f004 fdb9 	bl	8005fd6 <HAL_I2CEx_ConfigAnalogFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800146a:	f000 fbbd 	bl	8001be8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C3_Init+0x74>)
 8001472:	f004 fdec 	bl	800604e <HAL_I2CEx_ConfigDigitalFilter>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800147c:	f000 fbb4 	bl	8001be8 <Error_Handler>
  }

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20021ce0 	.word	0x20021ce0
 8001488:	40005c00 	.word	0x40005c00
 800148c:	000186a0 	.word	0x000186a0

08001490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <HAL_I2C_MspInit+0xc4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d14b      	bne.n	800154a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014fc:	2304      	movs	r3, #4
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4815      	ldr	r0, [pc, #84]	; (800155c <HAL_I2C_MspInit+0xcc>)
 8001508:	f003 f9a6 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800150c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001512:	2312      	movs	r3, #18
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800151e:	2304      	movs	r3, #4
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <HAL_I2C_MspInit+0xd0>)
 800152a:	f003 f995 	bl	8004858 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005c00 	.word	0x40005c00
 8001558:	40023800 	.word	0x40023800
 800155c:	40020800 	.word	0x40020800
 8001560:	40020000 	.word	0x40020000

08001564 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2234      	movs	r2, #52	; 0x34
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00b fc21 	bl	800cdb8 <memset>

  hltdc.Instance = LTDC;
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <MX_LTDC_Init+0xf8>)
 8001578:	4a39      	ldr	r2, [pc, #228]	; (8001660 <MX_LTDC_Init+0xfc>)
 800157a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800157c:	4b37      	ldr	r3, [pc, #220]	; (800165c <MX_LTDC_Init+0xf8>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <MX_LTDC_Init+0xf8>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001588:	4b34      	ldr	r3, [pc, #208]	; (800165c <MX_LTDC_Init+0xf8>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <MX_LTDC_Init+0xf8>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <MX_LTDC_Init+0xf8>)
 8001596:	2209      	movs	r2, #9
 8001598:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <MX_LTDC_Init+0xf8>)
 800159c:	2201      	movs	r2, #1
 800159e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <MX_LTDC_Init+0xf8>)
 80015a2:	221d      	movs	r2, #29
 80015a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <MX_LTDC_Init+0xf8>)
 80015a8:	2203      	movs	r2, #3
 80015aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <MX_LTDC_Init+0xf8>)
 80015ae:	f240 120d 	movw	r2, #269	; 0x10d
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <MX_LTDC_Init+0xf8>)
 80015b6:	f240 1243 	movw	r2, #323	; 0x143
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <MX_LTDC_Init+0xf8>)
 80015be:	f240 1217 	movw	r2, #279	; 0x117
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_LTDC_Init+0xf8>)
 80015c6:	f240 1247 	movw	r2, #327	; 0x147
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_LTDC_Init+0xf8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_LTDC_Init+0xf8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_LTDC_Init+0xf8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015e4:	481d      	ldr	r0, [pc, #116]	; (800165c <MX_LTDC_Init+0xf8>)
 80015e6:	f004 fd71 	bl	80060cc <HAL_LTDC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80015f0:	f000 fafa 	bl	8001be8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80015f8:	23f0      	movs	r3, #240	; 0xf0
 80015fa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001600:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001604:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001606:	2302      	movs	r3, #2
 8001608:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001612:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001616:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001618:	2307      	movs	r3, #7
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800161c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001622:	23f0      	movs	r3, #240	; 0xf0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001626:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_LTDC_Init+0xf8>)
 8001646:	f004 fed3 	bl	80063f0 <HAL_LTDC_ConfigLayer>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001650:	f000 faca 	bl	8001be8 <Error_Handler>
  }

}
 8001654:	bf00      	nop
 8001656:	3738      	adds	r7, #56	; 0x38
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20021d34 	.word	0x20021d34
 8001660:	40016800 	.word	0x40016800

08001664 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a7b      	ldr	r2, [pc, #492]	; (8001870 <HAL_LTDC_MspInit+0x20c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	f040 80f0 	bne.w	8001868 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	4b79      	ldr	r3, [pc, #484]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	4a78      	ldr	r2, [pc, #480]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001696:	6453      	str	r3, [r2, #68]	; 0x44
 8001698:	4b76      	ldr	r3, [pc, #472]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	4b72      	ldr	r3, [pc, #456]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4a71      	ldr	r2, [pc, #452]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ae:	f043 0320 	orr.w	r3, r3, #32
 80016b2:	6313      	str	r3, [r2, #48]	; 0x30
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	4b64      	ldr	r3, [pc, #400]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	4a63      	ldr	r2, [pc, #396]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	6313      	str	r3, [r2, #48]	; 0x30
 80016ec:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	4a5c      	ldr	r2, [pc, #368]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001706:	6313      	str	r3, [r2, #48]	; 0x30
 8001708:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b56      	ldr	r3, [pc, #344]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a55      	ldr	r2, [pc, #340]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800175e:	230e      	movs	r3, #14
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4843      	ldr	r0, [pc, #268]	; (8001878 <HAL_LTDC_MspInit+0x214>)
 800176a:	f003 f875 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800176e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001780:	230e      	movs	r3, #14
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	483c      	ldr	r0, [pc, #240]	; (800187c <HAL_LTDC_MspInit+0x218>)
 800178c:	f003 f864 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001790:	2303      	movs	r3, #3
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017a0:	2309      	movs	r3, #9
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4835      	ldr	r0, [pc, #212]	; (8001880 <HAL_LTDC_MspInit+0x21c>)
 80017ac:	f003 f854 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80017b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017c2:	230e      	movs	r3, #14
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	482c      	ldr	r0, [pc, #176]	; (8001880 <HAL_LTDC_MspInit+0x21c>)
 80017ce:	f003 f843 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80017d2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017e4:	230e      	movs	r3, #14
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4825      	ldr	r0, [pc, #148]	; (8001884 <HAL_LTDC_MspInit+0x220>)
 80017f0:	f003 f832 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80017f4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001806:	230e      	movs	r3, #14
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	4619      	mov	r1, r3
 8001810:	481d      	ldr	r0, [pc, #116]	; (8001888 <HAL_LTDC_MspInit+0x224>)
 8001812:	f003 f821 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001816:	2348      	movs	r3, #72	; 0x48
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001826:	230e      	movs	r3, #14
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	4816      	ldr	r0, [pc, #88]	; (800188c <HAL_LTDC_MspInit+0x228>)
 8001832:	f003 f811 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001836:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001848:	2309      	movs	r3, #9
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <HAL_LTDC_MspInit+0x220>)
 8001854:	f003 f800 	bl	8004858 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2105      	movs	r1, #5
 800185c:	2058      	movs	r0, #88	; 0x58
 800185e:	f002 fa55 	bl	8003d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001862:	2058      	movs	r0, #88	; 0x58
 8001864:	f002 fa6e 	bl	8003d44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40016800 	.word	0x40016800
 8001874:	40023800 	.word	0x40023800
 8001878:	40021400 	.word	0x40021400
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40021800 	.word	0x40021800
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00

08001890 <RTOS_AppConfigureTimerForRuntimeStats>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t RTOS_RunTimeCounter;

void RTOS_AppConfigureTimerForRuntimeStats(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  RTOS_RunTimeCounter = 0;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <RTOS_AppConfigureTimerForRuntimeStats+0x14>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <RTOS_AppConfigureTimerForRuntimeStats+0x18>)
 800189c:	f006 fc89 	bl	80081b2 <HAL_TIM_Base_Start_IT>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20021df8 	.word	0x20021df8
 80018a8:	20021fc0 	.word	0x20021fc0

080018ac <RTOS_AppGetRuntimeCounterValueFromISR>:

uint32_t RTOS_AppGetRuntimeCounterValueFromISR(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return RTOS_RunTimeCounter;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <RTOS_AppGetRuntimeCounterValueFromISR+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20021df8 	.word	0x20021df8

080018c4 <__io_putchar>:

/*Redirecting printf to USART1*/
int __io_putchar(int ch)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80018cc:	1d39      	adds	r1, r7, #4
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	2201      	movs	r2, #1
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <__io_putchar+0x20>)
 80018d6:	f007 f89c 	bl	8008a12 <HAL_UART_Transmit>
	return ch;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20021ef8 	.word	0x20021ef8

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ee:	f002 f8ef 	bl	8003ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f2:	f000 f8dd 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f6:	f7ff fc5d 	bl	80011b4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80018fa:	f7ff fae1 	bl	8000ec0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80018fe:	f7ff fb39 	bl	8000f74 <MX_FMC_Init>
  MX_I2C3_Init();
 8001902:	f7ff fd85 	bl	8001410 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001906:	f7ff fe2d 	bl	8001564 <MX_LTDC_Init>
  MX_SPI5_Init();
 800190a:	f000 f975 	bl	8001bf8 <MX_SPI5_Init>
  MX_TIM1_Init();
 800190e:	f000 fd67 	bl	80023e0 <MX_TIM1_Init>
  MX_TIM7_Init();
 8001912:	f000 fe03 	bl	800251c <MX_TIM7_Init>
  MX_TIM5_Init();
 8001916:	f000 fdb3 	bl	8002480 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800191a:	f000 fe91 	bl	8002640 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*LEDs turned on*/
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001924:	4852      	ldr	r0, [pc, #328]	; (8001a70 <main+0x188>)
 8001926:	f003 fa4f 	bl	8004dc8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001930:	484f      	ldr	r0, [pc, #316]	; (8001a70 <main+0x188>)
 8001932:	f003 fa49 	bl	8004dc8 <HAL_GPIO_WritePin>

 /*LCD screen initialization and test*/
	BSP_LCD_Init();
 8001936:	f001 fa81 	bl	8002e3c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 800193a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800193e:	2000      	movs	r0, #0
 8001940:	f001 fafe 	bl	8002f40 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8001944:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001948:	2001      	movs	r0, #1
 800194a:	f001 faf9 	bl	8002f40 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 800194e:	2001      	movs	r0, #1
 8001950:	f001 fb5a 	bl	8003008 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001954:	f001 fcf4 	bl	8003340 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f001 fbc6 	bl	80030ec <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 8001960:	4844      	ldr	r0, [pc, #272]	; (8001a74 <main+0x18c>)
 8001962:	f001 fb93 	bl	800308c <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001966:	f04f 30ff 	mov.w	r0, #4294967295
 800196a:	f001 fb75 	bl	8003058 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_B_TELECOM);
 800196e:	4842      	ldr	r0, [pc, #264]	; (8001a78 <main+0x190>)
 8001970:	f001 fb5a 	bl	8003028 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"PROJET", CENTER_MODE);
 8001974:	f001 fba4 	bl	80030c0 <BSP_LCD_GetFont>
 8001978:	4603      	mov	r3, r0
 800197a:	88d9      	ldrh	r1, [r3, #6]
 800197c:	2301      	movs	r3, #1
 800197e:	4a3f      	ldr	r2, [pc, #252]	; (8001a7c <main+0x194>)
 8001980:	2000      	movs	r0, #0
 8001982:	f001 fc1f 	bl	80031c4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"SYSTEMES", CENTER_MODE);
 8001986:	f001 fb9b 	bl	80030c0 <BSP_LCD_GetFont>
 800198a:	4603      	mov	r3, r0
 800198c:	88db      	ldrh	r3, [r3, #6]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b299      	uxth	r1, r3
 8001992:	2301      	movs	r3, #1
 8001994:	4a3a      	ldr	r2, [pc, #232]	; (8001a80 <main+0x198>)
 8001996:	2000      	movs	r0, #0
 8001998:	f001 fc14 	bl	80031c4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"TEMPS REEL", CENTER_MODE);
 800199c:	f001 fb90 	bl	80030c0 <BSP_LCD_GetFont>
 80019a0:	4603      	mov	r3, r0
 80019a2:	88db      	ldrh	r3, [r3, #6]
 80019a4:	461a      	mov	r2, r3
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	b299      	uxth	r1, r3
 80019ac:	2301      	movs	r3, #1
 80019ae:	4a35      	ldr	r2, [pc, #212]	; (8001a84 <main+0x19c>)
 80019b0:	2000      	movs	r0, #0
 80019b2:	f001 fc07 	bl	80031c4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_G_TELECOM);
 80019b6:	4834      	ldr	r0, [pc, #208]	; (8001a88 <main+0x1a0>)
 80019b8:	f001 fb36 	bl	8003028 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"2021/2022", CENTER_MODE);
 80019bc:	f001 fb80 	bl	80030c0 <BSP_LCD_GetFont>
 80019c0:	4603      	mov	r3, r0
 80019c2:	88db      	ldrh	r3, [r3, #6]
 80019c4:	461a      	mov	r2, r3
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	b299      	uxth	r1, r3
 80019cc:	2301      	movs	r3, #1
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <main+0x1a4>)
 80019d0:	2000      	movs	r0, #0
 80019d2:	f001 fbf7 	bl	80031c4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_R_TELECOM);
 80019d6:	482e      	ldr	r0, [pc, #184]	; (8001a90 <main+0x1a8>)
 80019d8:	f001 fb26 	bl	8003028 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"TELECOM STE", CENTER_MODE);
 80019dc:	f001 fb70 	bl	80030c0 <BSP_LCD_GetFont>
 80019e0:	4603      	mov	r3, r0
 80019e2:	88db      	ldrh	r3, [r3, #6]
 80019e4:	461a      	mov	r2, r3
 80019e6:	00d2      	lsls	r2, r2, #3
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	b299      	uxth	r1, r3
 80019ec:	2301      	movs	r3, #1
 80019ee:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <main+0x1ac>)
 80019f0:	2000      	movs	r0, #0
 80019f2:	f001 fbe7 	bl	80031c4 <BSP_LCD_DisplayStringAt>


	HAL_Delay(2000);
 80019f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019fa:	f002 f8ab 	bl	8003b54 <HAL_Delay>
	BSP_LCD_SetFont(&Font12);
 80019fe:	4826      	ldr	r0, [pc, #152]	; (8001a98 <main+0x1b0>)
 8001a00:	f001 fb44 	bl	800308c <BSP_LCD_SetFont>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f001 fb70 	bl	80030ec <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a0c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a10:	f001 fb0a 	bl	8003028 <BSP_LCD_SetTextColor>

/*LEDs turned off*/
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1a:	4815      	ldr	r0, [pc, #84]	; (8001a70 <main+0x188>)
 8001a1c:	f003 f9d4 	bl	8004dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	4812      	ldr	r0, [pc, #72]	; (8001a70 <main+0x188>)
 8001a28:	f003 f9ce 	bl	8004dc8 <HAL_GPIO_WritePin>

/*I2C3 bus scan*/
	I2C_Scan(&hi2c3,I2C_add);
 8001a2c:	491b      	ldr	r1, [pc, #108]	; (8001a9c <main+0x1b4>)
 8001a2e:	481c      	ldr	r0, [pc, #112]	; (8001aa0 <main+0x1b8>)
 8001a30:	f00a ff74 	bl	800c91c <I2C_Scan>

/*Sensors initialization*/
	Init(&hi2c3);
 8001a34:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <main+0x1b8>)
 8001a36:	f00a ff9a 	bl	800c96e <Init>
	Init_BMP280(&hi2c3);
 8001a3a:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <main+0x1b8>)
 8001a3c:	f00a fff2 	bl	800ca24 <Init_BMP280>

/*I2C3 bus scan*/
	I2C_Scan(&hi2c3,I2C_add);
 8001a40:	4916      	ldr	r1, [pc, #88]	; (8001a9c <main+0x1b4>)
 8001a42:	4817      	ldr	r0, [pc, #92]	; (8001aa0 <main+0x1b8>)
 8001a44:	f00a ff6a 	bl	800c91c <I2C_Scan>
/* Start scheduler FreeRTOS*/

	TaskHandle_t xHandleTaskInit;

	/* Create the task init. */
	if( xTaskCreate(
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2300      	movs	r3, #0
 8001a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a56:	4913      	ldr	r1, [pc, #76]	; (8001aa4 <main+0x1bc>)
 8001a58:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <main+0x1c0>)
 8001a5a:	f008 ff38 	bl	800a8ce <xTaskCreate>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <main+0x182>
	1000,
	NULL,
	4,
	&xHandleTaskInit
	) != pdPASS ){
		printf("Init task created");
 8001a64:	4811      	ldr	r0, [pc, #68]	; (8001aac <main+0x1c4>)
 8001a66:	f00b fe19 	bl	800d69c <iprintf>
	}
	vTaskStartScheduler();
 8001a6a:	f009 f909 	bl	800ac80 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <main+0x186>
 8001a70:	40021800 	.word	0x40021800
 8001a74:	20000048 	.word	0x20000048
 8001a78:	ff065784 	.word	0xff065784
 8001a7c:	0800f880 	.word	0x0800f880
 8001a80:	0800f888 	.word	0x0800f888
 8001a84:	0800f894 	.word	0x0800f894
 8001a88:	ff81b835 	.word	0xff81b835
 8001a8c:	0800f8a0 	.word	0x0800f8a0
 8001a90:	ff813c2f 	.word	0xff813c2f
 8001a94:	0800f8ac 	.word	0x0800f8ac
 8001a98:	20000050 	.word	0x20000050
 8001a9c:	20021e08 	.word	0x20021e08
 8001aa0:	20021ce0 	.word	0x20021ce0
 8001aa4:	0800f8b8 	.word	0x0800f8b8
 8001aa8:	08002129 	.word	0x08002129
 8001aac:	0800f8c4 	.word	0x0800f8c4

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0a0      	sub	sp, #128	; 0x80
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aba:	2230      	movs	r2, #48	; 0x30
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00b f97a 	bl	800cdb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2230      	movs	r2, #48	; 0x30
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00b f96b 	bl	800cdb8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <SystemClock_Config+0x10c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a34      	ldr	r2, [pc, #208]	; (8001bbc <SystemClock_Config+0x10c>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <SystemClock_Config+0x10c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a2e      	ldr	r2, [pc, #184]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b22:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b24:	2302      	movs	r3, #2
 8001b26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b32:	23b4      	movs	r3, #180	; 0xb4
 8001b34:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 fea4 	bl	8006890 <HAL_RCC_OscConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b4e:	f000 f84b 	bl	8001be8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b52:	f004 fe4d 	bl	80067f0 <HAL_PWREx_EnableOverDrive>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001b5c:	f000 f844 	bl	8001be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	230f      	movs	r3, #15
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b64:	2302      	movs	r3, #2
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 f8f6 	bl	8006d70 <HAL_RCC_ClockConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001b8a:	f000 f82d 	bl	8001be8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001b92:	233c      	movs	r3, #60	; 0x3c
 8001b94:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001b96:	2305      	movs	r3, #5
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 fb11 	bl	80071cc <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001bb0:	f000 f81a 	bl	8001be8 <Error_Handler>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3780      	adds	r7, #128	; 0x80
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bd6:	f001 ff9d 	bl	8003b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40001000 	.word	0x40001000

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <MX_SPI5_Init+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c08:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c28:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c2c:	2218      	movs	r2, #24
 8001c2e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c44:	220a      	movs	r2, #10
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c4a:	f005 fcfc 	bl	8007646 <HAL_SPI_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c54:	f7ff ffc8 	bl	8001be8 <Error_Handler>
  }

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20021e58 	.word	0x20021e58
 8001c60:	40015000 	.word	0x40015000

08001c64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <HAL_SPI_MspInit+0x84>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12c      	bne.n	8001ce0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001cbe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_SPI_MspInit+0x8c>)
 8001cdc:	f002 fdbc 	bl	8004858 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40015000 	.word	0x40015000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40021400 	.word	0x40021400

08001cf4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_SPI_MspDeInit+0x30>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10a      	bne.n	8001d1c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_SPI_MspDeInit+0x34>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_SPI_MspDeInit+0x34>)
 8001d0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001d12:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_SPI_MspDeInit+0x38>)
 8001d18:	f002 ff4a 	bl	8004bb0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40015000 	.word	0x40015000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40021400 	.word	0x40021400

08001d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_MspInit+0x54>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_MspInit+0x54>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_MspInit+0x54>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_MspInit+0x54>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_MspInit+0x54>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_MspInit+0x54>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	210f      	movs	r1, #15
 8001d72:	f06f 0001 	mvn.w	r0, #1
 8001d76:	f001 ffc9 	bl	8003d0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	2036      	movs	r0, #54	; 0x36
 8001d9e:	f001 ffb5 	bl	8003d0c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001da2:	2036      	movs	r0, #54	; 0x36
 8001da4:	f001 ffce 	bl	8003d44 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_InitTick+0xa4>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <HAL_InitTick+0xa4>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6413      	str	r3, [r2, #64]	; 0x40
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_InitTick+0xa4>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc4:	f107 0210 	add.w	r2, r7, #16
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 f9ca 	bl	8007168 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001dd4:	f005 f9a0 	bl	8007118 <HAL_RCC_GetPCLK1Freq>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_InitTick+0xa8>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9b      	lsrs	r3, r3, #18
 8001de8:	3b01      	subs	r3, #1
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_InitTick+0xac>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_InitTick+0xb0>)
 8001df0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_InitTick+0xac>)
 8001df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_InitTick+0xac>)
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_InitTick+0xac>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_InitTick+0xac>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_InitTick+0xac>)
 8001e0e:	f006 f9a5 	bl	800815c <HAL_TIM_Base_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e18:	4806      	ldr	r0, [pc, #24]	; (8001e34 <HAL_InitTick+0xac>)
 8001e1a:	f006 f9ca 	bl	80081b2 <HAL_TIM_Base_Start_IT>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3730      	adds	r7, #48	; 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	431bde83 	.word	0x431bde83
 8001e34:	20021eb0 	.word	0x20021eb0
 8001e38:	40001000 	.word	0x40001000

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <MemManage_Handler+0x4>

08001e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <USART1_IRQHandler+0x10>)
 8001e76:	f006 fe65 	bl	8008b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20021ef8 	.word	0x20021ef8

08001e84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM5_IRQHandler+0x10>)
 8001e8a:	f006 f9b6 	bl	80081fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20021f40 	.word	0x20021f40

08001e98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <TIM6_DAC_IRQHandler+0x10>)
 8001e9e:	f006 f9ac 	bl	80081fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20021eb0 	.word	0x20021eb0

08001eac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	RTOS_RunTimeCounter++;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <TIM7_IRQHandler+0x18>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <TIM7_IRQHandler+0x18>)
 8001eb8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <TIM7_IRQHandler+0x1c>)
 8001ebc:	f006 f99d 	bl	80081fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20021df8 	.word	0x20021df8
 8001ec8:	20021fc0 	.word	0x20021fc0

08001ecc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <LTDC_IRQHandler+0x10>)
 8001ed2:	f004 f9cb 	bl	800626c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20021d34 	.word	0x20021d34

08001ee0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA2D_IRQHandler+0x10>)
 8001ee6:	f002 fa78 	bl	80043da <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20021c6c 	.word	0x20021c6c

08001ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
	return 1;
 8001ef8:	2301      	movs	r3, #1
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_kill>:

int _kill(int pid, int sig)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f0e:	f00a ff07 	bl	800cd20 <__errno>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2216      	movs	r2, #22
 8001f16:	601a      	str	r2, [r3, #0]
	return -1;
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_exit>:

void _exit (int status)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ffe7 	bl	8001f04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f36:	e7fe      	b.n	8001f36 <_exit+0x12>

08001f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e00a      	b.n	8001f60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f4a:	f3af 8000 	nop.w
 8001f4e:	4601      	mov	r1, r0
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	60ba      	str	r2, [r7, #8]
 8001f56:	b2ca      	uxtb	r2, r1
 8001f58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf0      	blt.n	8001f4a <_read+0x12>
	}

return len;
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e009      	b.n	8001f98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc99 	bl	80018c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbf1      	blt.n	8001f84 <_write+0x12>
	}
	return len;
 8001fa0:	687b      	ldr	r3, [r7, #4]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_close>:

int _close(int file)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
	return -1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd2:	605a      	str	r2, [r3, #4]
	return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_isatty>:

int _isatty(int file)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	return 1;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
	return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f00a fe6c 	bl	800cd20 <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20030000 	.word	0x20030000
 8002074:	00000400 	.word	0x00000400
 8002078:	20002460 	.word	0x20002460
 800207c:	20022120 	.word	0x20022120

08002080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <SystemInit+0x28>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <SystemInit+0x28>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SystemInit+0x28>)
 8002096:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800209a:	609a      	str	r2, [r3, #8]
#endif
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <vCallbackT1>:
SemaphoreHandle_t SemB_1a;
SemaphoreHandle_t SemB_1b;
SemaphoreHandle_t SemB_3;
SemaphoreHandle_t SemB_4;

void  vCallbackT1(TimerHandle_t xTimer){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(SemB_1a);
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <vCallbackT1+0x20>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	f007 fea1 	bl	8009e04 <xQueueGenericSend>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20021ef0 	.word	0x20021ef0

080020d0 <vCallbackT2>:

void  vCallbackT2(TimerHandle_t xTimer){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(SemB_1b);
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <vCallbackT2+0x20>)
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	2300      	movs	r3, #0
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	f007 fe8f 	bl	8009e04 <xQueueGenericSend>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20021ef4 	.word	0x20021ef4

080020f4 <vCallbackT3>:


void vCallbackT3(TimerHandle_t xTimer){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(SemB_3);
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <vCallbackT3+0x2c>)
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	2300      	movs	r3, #0
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	f007 fe7d 	bl	8009e04 <xQueueGenericSend>
	xSemaphoreGive(SemB_4);
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <vCallbackT3+0x30>)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	f007 fe76 	bl	8009e04 <xQueueGenericSend>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20021f3c 	.word	0x20021f3c
 8002124:	20021f38 	.word	0x20021f38

08002128 <vTaskInit>:




void vTaskInit(void *pvParameters ){
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af02      	add	r7, sp, #8
 800212e:	6078      	str	r0, [r7, #4]
	//---------------------------------------
	// TIMER - START
	//---------------------------------------

	// Creation des timers
	Timer1 = xTimerCreate("Timer1", pdMS_TO_TICKS(10), pdTRUE, ( void * ) 0, vCallbackT1 );
 8002130:	4b73      	ldr	r3, [pc, #460]	; (8002300 <vTaskInit+0x1d8>)
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2300      	movs	r3, #0
 8002136:	2201      	movs	r2, #1
 8002138:	210a      	movs	r1, #10
 800213a:	4872      	ldr	r0, [pc, #456]	; (8002304 <vTaskInit+0x1dc>)
 800213c:	f009 fc7c 	bl	800ba38 <xTimerCreate>
 8002140:	6138      	str	r0, [r7, #16]
	Timer2 = xTimerCreate("Timer2", pdMS_TO_TICKS(20), pdTRUE, ( void * ) 0, vCallbackT2 );
 8002142:	4b71      	ldr	r3, [pc, #452]	; (8002308 <vTaskInit+0x1e0>)
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	2201      	movs	r2, #1
 800214a:	2114      	movs	r1, #20
 800214c:	486f      	ldr	r0, [pc, #444]	; (800230c <vTaskInit+0x1e4>)
 800214e:	f009 fc73 	bl	800ba38 <xTimerCreate>
 8002152:	60f8      	str	r0, [r7, #12]
	Timer3 = xTimerCreate("Timer3", pdMS_TO_TICKS(100), pdTRUE, ( void * ) 0, vCallbackT3 );
 8002154:	4b6e      	ldr	r3, [pc, #440]	; (8002310 <vTaskInit+0x1e8>)
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2300      	movs	r3, #0
 800215a:	2201      	movs	r2, #1
 800215c:	2164      	movs	r1, #100	; 0x64
 800215e:	486d      	ldr	r0, [pc, #436]	; (8002314 <vTaskInit+0x1ec>)
 8002160:	f009 fc6a 	bl	800ba38 <xTimerCreate>
 8002164:	60b8      	str	r0, [r7, #8]

	// Demarrage des timers
	if( ( Timer1 != NULL ) && ( Timer2 != NULL ) && ( Timer3 != NULL ) ){
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d026      	beq.n	80021ba <vTaskInit+0x92>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d023      	beq.n	80021ba <vTaskInit+0x92>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <vTaskInit+0x92>
		xTimer1Started = xTimerStart( Timer1, 0 );
 8002178:	f008 fe94 	bl	800aea4 <xTaskGetTickCount>
 800217c:	4602      	mov	r2, r0
 800217e:	2300      	movs	r3, #0
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2300      	movs	r3, #0
 8002184:	2101      	movs	r1, #1
 8002186:	6938      	ldr	r0, [r7, #16]
 8002188:	f009 fcb2 	bl	800baf0 <xTimerGenericCommand>
 800218c:	61f8      	str	r0, [r7, #28]
		xTimer2Started = xTimerStart( Timer3, 0 );
 800218e:	f008 fe89 	bl	800aea4 <xTaskGetTickCount>
 8002192:	4602      	mov	r2, r0
 8002194:	2300      	movs	r3, #0
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2300      	movs	r3, #0
 800219a:	2101      	movs	r1, #1
 800219c:	68b8      	ldr	r0, [r7, #8]
 800219e:	f009 fca7 	bl	800baf0 <xTimerGenericCommand>
 80021a2:	61b8      	str	r0, [r7, #24]
		xTimer3Started = xTimerStart( Timer3, 0 );
 80021a4:	f008 fe7e 	bl	800aea4 <xTaskGetTickCount>
 80021a8:	4602      	mov	r2, r0
 80021aa:	2300      	movs	r3, #0
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2300      	movs	r3, #0
 80021b0:	2101      	movs	r1, #1
 80021b2:	68b8      	ldr	r0, [r7, #8]
 80021b4:	f009 fc9c 	bl	800baf0 <xTimerGenericCommand>
 80021b8:	6178      	str	r0, [r7, #20]
	}


	if( ( xTimer1Started == pdPASS ) && ( xTimer2Started == pdPASS ) && ( xTimer3Started == pdPASS ) )
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d108      	bne.n	80021d2 <vTaskInit+0xaa>
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <vTaskInit+0xaa>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d102      	bne.n	80021d2 <vTaskInit+0xaa>
	 {
		printf("Timers running");
 80021cc:	4852      	ldr	r0, [pc, #328]	; (8002318 <vTaskInit+0x1f0>)
 80021ce:	f00b fa65 	bl	800d69c <iprintf>
	// SEMAPHORE - START
	//---------------------------------------

	// création des sémaphores binaires

	SemB_1a = xSemaphoreCreateBinary();
 80021d2:	2203      	movs	r2, #3
 80021d4:	2100      	movs	r1, #0
 80021d6:	2001      	movs	r0, #1
 80021d8:	f007 fdb0 	bl	8009d3c <xQueueGenericCreate>
 80021dc:	4603      	mov	r3, r0
 80021de:	4a4f      	ldr	r2, [pc, #316]	; (800231c <vTaskInit+0x1f4>)
 80021e0:	6013      	str	r3, [r2, #0]
	SemB_1b = xSemaphoreCreateBinary();
 80021e2:	2203      	movs	r2, #3
 80021e4:	2100      	movs	r1, #0
 80021e6:	2001      	movs	r0, #1
 80021e8:	f007 fda8 	bl	8009d3c <xQueueGenericCreate>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <vTaskInit+0x1f8>)
 80021f0:	6013      	str	r3, [r2, #0]
	SemB_3  = xSemaphoreCreateBinary();
 80021f2:	2203      	movs	r2, #3
 80021f4:	2100      	movs	r1, #0
 80021f6:	2001      	movs	r0, #1
 80021f8:	f007 fda0 	bl	8009d3c <xQueueGenericCreate>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4a49      	ldr	r2, [pc, #292]	; (8002324 <vTaskInit+0x1fc>)
 8002200:	6013      	str	r3, [r2, #0]
	SemB_4  = xSemaphoreCreateBinary();
 8002202:	2203      	movs	r2, #3
 8002204:	2100      	movs	r1, #0
 8002206:	2001      	movs	r0, #1
 8002208:	f007 fd98 	bl	8009d3c <xQueueGenericCreate>
 800220c:	4603      	mov	r3, r0
 800220e:	4a46      	ldr	r2, [pc, #280]	; (8002328 <vTaskInit+0x200>)
 8002210:	6013      	str	r3, [r2, #0]

	// vérification

	if(SemB_1a==NULL || SemB_1b==NULL || SemB_3==NULL || SemB_4==NULL)
 8002212:	4b42      	ldr	r3, [pc, #264]	; (800231c <vTaskInit+0x1f4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <vTaskInit+0x10a>
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <vTaskInit+0x1f8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <vTaskInit+0x10a>
 8002222:	4b40      	ldr	r3, [pc, #256]	; (8002324 <vTaskInit+0x1fc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <vTaskInit+0x10a>
 800222a:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <vTaskInit+0x200>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <vTaskInit+0x116>
	{
		printf("Erreur création sémaphore  !\r\n");
 8002232:	483e      	ldr	r0, [pc, #248]	; (800232c <vTaskInit+0x204>)
 8002234:	f00b fab8 	bl	800d7a8 <puts>
		exit(1);
 8002238:	2001      	movs	r0, #1
 800223a:	f00a fd77 	bl	800cd2c <exit>
	}

	// Debug

	vQueueAddToRegistry(SemB_1a, "SemB_1a");
 800223e:	4b37      	ldr	r3, [pc, #220]	; (800231c <vTaskInit+0x1f4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	493b      	ldr	r1, [pc, #236]	; (8002330 <vTaskInit+0x208>)
 8002244:	4618      	mov	r0, r3
 8002246:	f008 fa87 	bl	800a758 <vQueueAddToRegistry>
	vQueueAddToRegistry(SemB_1b, "SemB_1b");
 800224a:	4b35      	ldr	r3, [pc, #212]	; (8002320 <vTaskInit+0x1f8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4939      	ldr	r1, [pc, #228]	; (8002334 <vTaskInit+0x20c>)
 8002250:	4618      	mov	r0, r3
 8002252:	f008 fa81 	bl	800a758 <vQueueAddToRegistry>
	vQueueAddToRegistry(SemB_3, "SemB_3");
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <vTaskInit+0x1fc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4937      	ldr	r1, [pc, #220]	; (8002338 <vTaskInit+0x210>)
 800225c:	4618      	mov	r0, r3
 800225e:	f008 fa7b 	bl	800a758 <vQueueAddToRegistry>
	vQueueAddToRegistry(SemB_4, "SemB_4");
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <vTaskInit+0x200>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4935      	ldr	r1, [pc, #212]	; (800233c <vTaskInit+0x214>)
 8002268:	4618      	mov	r0, r3
 800226a:	f008 fa75 	bl	800a758 <vQueueAddToRegistry>

	//---------------------------------------
	// TACHE - START
	//---------------------------------------

	xTaskCreate(vTask1a, "task 1a", 1000, NULL, 3, NULL);
 800226e:	2300      	movs	r3, #0
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	2303      	movs	r3, #3
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800227c:	4930      	ldr	r1, [pc, #192]	; (8002340 <vTaskInit+0x218>)
 800227e:	4831      	ldr	r0, [pc, #196]	; (8002344 <vTaskInit+0x21c>)
 8002280:	f008 fb25 	bl	800a8ce <xTaskCreate>
	xTaskCreate(vTask1b, "task 1b", 1000, NULL, 3, NULL);
 8002284:	2300      	movs	r3, #0
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	2303      	movs	r3, #3
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2300      	movs	r3, #0
 800228e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002292:	492d      	ldr	r1, [pc, #180]	; (8002348 <vTaskInit+0x220>)
 8002294:	482d      	ldr	r0, [pc, #180]	; (800234c <vTaskInit+0x224>)
 8002296:	f008 fb1a 	bl	800a8ce <xTaskCreate>
	xTaskCreate(vTask2a, "task 1a", 1000, NULL, 2, NULL);
 800229a:	2300      	movs	r3, #0
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	2302      	movs	r3, #2
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a8:	4925      	ldr	r1, [pc, #148]	; (8002340 <vTaskInit+0x218>)
 80022aa:	4829      	ldr	r0, [pc, #164]	; (8002350 <vTaskInit+0x228>)
 80022ac:	f008 fb0f 	bl	800a8ce <xTaskCreate>
	xTaskCreate(vTask2b, "task 1b", 1000, NULL, 2, NULL);
 80022b0:	2300      	movs	r3, #0
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2302      	movs	r3, #2
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2300      	movs	r3, #0
 80022ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022be:	4922      	ldr	r1, [pc, #136]	; (8002348 <vTaskInit+0x220>)
 80022c0:	4824      	ldr	r0, [pc, #144]	; (8002354 <vTaskInit+0x22c>)
 80022c2:	f008 fb04 	bl	800a8ce <xTaskCreate>
	xTaskCreate(vTask1a, "task 3", 1000, NULL, 1, NULL);
 80022c6:	2300      	movs	r3, #0
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2301      	movs	r3, #1
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022d4:	4920      	ldr	r1, [pc, #128]	; (8002358 <vTaskInit+0x230>)
 80022d6:	481b      	ldr	r0, [pc, #108]	; (8002344 <vTaskInit+0x21c>)
 80022d8:	f008 faf9 	bl	800a8ce <xTaskCreate>
	xTaskCreate(vTask1b, "task 4", 1000, NULL, 1, NULL);
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2301      	movs	r3, #1
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2300      	movs	r3, #0
 80022e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022ea:	491c      	ldr	r1, [pc, #112]	; (800235c <vTaskInit+0x234>)
 80022ec:	4817      	ldr	r0, [pc, #92]	; (800234c <vTaskInit+0x224>)
 80022ee:	f008 faee 	bl	800a8ce <xTaskCreate>
	//---------------------------------------
	// TACHE - END
	//---------------------------------------

	// Destruction de la tache
	vTaskDelete(NULL);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f008 fc34 	bl	800ab60 <vTaskDelete>
}
 80022f8:	bf00      	nop
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	080020ad 	.word	0x080020ad
 8002304:	0800f8d8 	.word	0x0800f8d8
 8002308:	080020d1 	.word	0x080020d1
 800230c:	0800f8e0 	.word	0x0800f8e0
 8002310:	080020f5 	.word	0x080020f5
 8002314:	0800f8e8 	.word	0x0800f8e8
 8002318:	0800f8f0 	.word	0x0800f8f0
 800231c:	20021ef0 	.word	0x20021ef0
 8002320:	20021ef4 	.word	0x20021ef4
 8002324:	20021f3c 	.word	0x20021f3c
 8002328:	20021f38 	.word	0x20021f38
 800232c:	0800f900 	.word	0x0800f900
 8002330:	0800f920 	.word	0x0800f920
 8002334:	0800f928 	.word	0x0800f928
 8002338:	0800f930 	.word	0x0800f930
 800233c:	0800f938 	.word	0x0800f938
 8002340:	0800f940 	.word	0x0800f940
 8002344:	08002361 	.word	0x08002361
 8002348:	0800f948 	.word	0x0800f948
 800234c:	080023a5 	.word	0x080023a5
 8002350:	080023cd 	.word	0x080023cd
 8002354:	080023d7 	.word	0x080023d7
 8002358:	0800f950 	.word	0x0800f950
 800235c:	0800f958 	.word	0x0800f958

08002360 <vTask1a>:


void vTask1a(void *pvParameters ){
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	; 0x38
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("Tache1a");
 8002368:	480b      	ldr	r0, [pc, #44]	; (8002398 <vTask1a+0x38>)
 800236a:	f00b f997 	bl	800d69c <iprintf>
		xSemaphoreTake(SemB_1a, portMAX_DELAY);
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <vTask1a+0x3c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f04f 31ff 	mov.w	r1, #4294967295
 8002376:	4618      	mov	r0, r3
 8002378:	f007 ffba 	bl	800a2f0 <xQueueSemaphoreTake>
		double acc[3];

		double gyro[3];

		MeasureA(&hi2c3,acc);
 800237c:	f107 0320 	add.w	r3, r7, #32
 8002380:	4619      	mov	r1, r3
 8002382:	4807      	ldr	r0, [pc, #28]	; (80023a0 <vTask1a+0x40>)
 8002384:	f00a fb84 	bl	800ca90 <MeasureA>
		MeasureG(&hi2c3,gyro);
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	4619      	mov	r1, r3
 800238e:	4804      	ldr	r0, [pc, #16]	; (80023a0 <vTask1a+0x40>)
 8002390:	f00a fc0e 	bl	800cbb0 <MeasureG>
	{
 8002394:	e7e8      	b.n	8002368 <vTask1a+0x8>
 8002396:	bf00      	nop
 8002398:	0800f960 	.word	0x0800f960
 800239c:	20021ef0 	.word	0x20021ef0
 80023a0:	20021ce0 	.word	0x20021ce0

080023a4 <vTask1b>:

	}
}

void vTask1b(void *pvParameters ){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("Tache1b");
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <vTask1b+0x20>)
 80023ae:	f00b f975 	bl	800d69c <iprintf>
		xSemaphoreTake(SemB_1b, portMAX_DELAY);
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <vTask1b+0x24>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f04f 31ff 	mov.w	r1, #4294967295
 80023ba:	4618      	mov	r0, r3
 80023bc:	f007 ff98 	bl	800a2f0 <xQueueSemaphoreTake>
		printf("Tache1b");
 80023c0:	e7f4      	b.n	80023ac <vTask1b+0x8>
 80023c2:	bf00      	nop
 80023c4:	0800f968 	.word	0x0800f968
 80023c8:	20021ef4 	.word	0x20021ef4

080023cc <vTask2a>:

	}
}

void vTask2a(void *pvParameters ){
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	while(1)
 80023d4:	e7fe      	b.n	80023d4 <vTask2a+0x8>

080023d6 <vTask2b>:


	}
}

void vTask2b(void *pvParameters ){
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
	while(1)
 80023de:	e7fe      	b.n	80023de <vTask2b+0x8>

080023e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e6:	f107 0308 	add.w	r3, r7, #8
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f4:	463b      	mov	r3, r7
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <MX_TIM1_Init+0x98>)
 80023fe:	4a1f      	ldr	r2, [pc, #124]	; (800247c <MX_TIM1_Init+0x9c>)
 8002400:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <MX_TIM1_Init+0x98>)
 8002404:	2200      	movs	r2, #0
 8002406:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <MX_TIM1_Init+0x98>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <MX_TIM1_Init+0x98>)
 8002410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002414:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <MX_TIM1_Init+0x98>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800241c:	4b16      	ldr	r3, [pc, #88]	; (8002478 <MX_TIM1_Init+0x98>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <MX_TIM1_Init+0x98>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002428:	4813      	ldr	r0, [pc, #76]	; (8002478 <MX_TIM1_Init+0x98>)
 800242a:	f005 fe97 	bl	800815c <HAL_TIM_Base_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002434:	f7ff fbd8 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	4619      	mov	r1, r3
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <MX_TIM1_Init+0x98>)
 8002446:	f005 ffe0 	bl	800840a <HAL_TIM_ConfigClockSource>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002450:	f7ff fbca 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002454:	2300      	movs	r3, #0
 8002456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800245c:	463b      	mov	r3, r7
 800245e:	4619      	mov	r1, r3
 8002460:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_TIM1_Init+0x98>)
 8002462:	f006 f9f9 	bl	8008858 <HAL_TIMEx_MasterConfigSynchronization>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800246c:	f7ff fbbc 	bl	8001be8 <Error_Handler>
  }

}
 8002470:	bf00      	nop
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20021f80 	.word	0x20021f80
 800247c:	40010000 	.word	0x40010000

08002480 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002486:	f107 0308 	add.w	r3, r7, #8
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002494:	463b      	mov	r3, r7
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <MX_TIM5_Init+0x94>)
 800249e:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <MX_TIM5_Init+0x98>)
 80024a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <MX_TIM5_Init+0x94>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <MX_TIM5_Init+0x94>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <MX_TIM5_Init+0x94>)
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <MX_TIM5_Init+0x94>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <MX_TIM5_Init+0x94>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024c2:	4814      	ldr	r0, [pc, #80]	; (8002514 <MX_TIM5_Init+0x94>)
 80024c4:	f005 fe4a 	bl	800815c <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80024ce:	f7ff fb8b 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024d8:	f107 0308 	add.w	r3, r7, #8
 80024dc:	4619      	mov	r1, r3
 80024de:	480d      	ldr	r0, [pc, #52]	; (8002514 <MX_TIM5_Init+0x94>)
 80024e0:	f005 ff93 	bl	800840a <HAL_TIM_ConfigClockSource>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80024ea:	f7ff fb7d 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024f6:	463b      	mov	r3, r7
 80024f8:	4619      	mov	r1, r3
 80024fa:	4806      	ldr	r0, [pc, #24]	; (8002514 <MX_TIM5_Init+0x94>)
 80024fc:	f006 f9ac 	bl	8008858 <HAL_TIMEx_MasterConfigSynchronization>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002506:	f7ff fb6f 	bl	8001be8 <Error_Handler>
  }

}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20021f40 	.word	0x20021f40
 8002518:	40000c00 	.word	0x40000c00

0800251c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002522:	463b      	mov	r3, r7
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <MX_TIM7_Init+0x64>)
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <MX_TIM7_Init+0x68>)
 800252e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <MX_TIM7_Init+0x64>)
 8002532:	2200      	movs	r2, #0
 8002534:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <MX_TIM7_Init+0x64>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <MX_TIM7_Init+0x64>)
 800253e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002542:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <MX_TIM7_Init+0x64>)
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800254a:	480d      	ldr	r0, [pc, #52]	; (8002580 <MX_TIM7_Init+0x64>)
 800254c:	f005 fe06 	bl	800815c <HAL_TIM_Base_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002556:	f7ff fb47 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002562:	463b      	mov	r3, r7
 8002564:	4619      	mov	r1, r3
 8002566:	4806      	ldr	r0, [pc, #24]	; (8002580 <MX_TIM7_Init+0x64>)
 8002568:	f006 f976 	bl	8008858 <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002572:	f7ff fb39 	bl	8001be8 <Error_Handler>
  }

}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20021fc0 	.word	0x20021fc0
 8002584:	40001400 	.word	0x40001400

08002588 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a26      	ldr	r2, [pc, #152]	; (8002630 <HAL_TIM_Base_MspInit+0xa8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	4b25      	ldr	r3, [pc, #148]	; (8002634 <HAL_TIM_Base_MspInit+0xac>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4a24      	ldr	r2, [pc, #144]	; (8002634 <HAL_TIM_Base_MspInit+0xac>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
 80025aa:	4b22      	ldr	r3, [pc, #136]	; (8002634 <HAL_TIM_Base_MspInit+0xac>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80025b6:	e036      	b.n	8002626 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_TIM_Base_MspInit+0xb0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d116      	bne.n	80025f0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_TIM_Base_MspInit+0xac>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <HAL_TIM_Base_MspInit+0xac>)
 80025cc:	f043 0308 	orr.w	r3, r3, #8
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_TIM_Base_MspInit+0xac>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2105      	movs	r1, #5
 80025e2:	2032      	movs	r0, #50	; 0x32
 80025e4:	f001 fb92 	bl	8003d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80025e8:	2032      	movs	r0, #50	; 0x32
 80025ea:	f001 fbab 	bl	8003d44 <HAL_NVIC_EnableIRQ>
}
 80025ee:	e01a      	b.n	8002626 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a11      	ldr	r2, [pc, #68]	; (800263c <HAL_TIM_Base_MspInit+0xb4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d115      	bne.n	8002626 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_TIM_Base_MspInit+0xac>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <HAL_TIM_Base_MspInit+0xac>)
 8002604:	f043 0320 	orr.w	r3, r3, #32
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_TIM_Base_MspInit+0xac>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2105      	movs	r1, #5
 800261a:	2037      	movs	r0, #55	; 0x37
 800261c:	f001 fb76 	bl	8003d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002620:	2037      	movs	r0, #55	; 0x37
 8002622:	f001 fb8f 	bl	8003d44 <HAL_NVIC_EnableIRQ>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40010000 	.word	0x40010000
 8002634:	40023800 	.word	0x40023800
 8002638:	40000c00 	.word	0x40000c00
 800263c:	40001400 	.word	0x40001400

08002640 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <MX_USART1_UART_Init+0x4c>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <MX_USART1_UART_Init+0x50>)
 8002648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <MX_USART1_UART_Init+0x4c>)
 800264c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <MX_USART1_UART_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <MX_USART1_UART_Init+0x4c>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <MX_USART1_UART_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_USART1_UART_Init+0x4c>)
 8002666:	220c      	movs	r2, #12
 8002668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <MX_USART1_UART_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_USART1_UART_Init+0x4c>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_USART1_UART_Init+0x4c>)
 8002678:	f006 f97e 	bl	8008978 <HAL_UART_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002682:	f7ff fab1 	bl	8001be8 <Error_Handler>
  }

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20021ef8 	.word	0x20021ef8
 8002690:	40011000 	.word	0x40011000

08002694 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_UART_MspInit+0x94>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d134      	bne.n	8002720 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	4b1c      	ldr	r3, [pc, #112]	; (800272c <HAL_UART_MspInit+0x98>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a1b      	ldr	r2, [pc, #108]	; (800272c <HAL_UART_MspInit+0x98>)
 80026c0:	f043 0310 	orr.w	r3, r3, #16
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_UART_MspInit+0x98>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_UART_MspInit+0x98>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a14      	ldr	r2, [pc, #80]	; (800272c <HAL_UART_MspInit+0x98>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_UART_MspInit+0x98>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80026ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002700:	2307      	movs	r3, #7
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	4809      	ldr	r0, [pc, #36]	; (8002730 <HAL_UART_MspInit+0x9c>)
 800270c:	f002 f8a4 	bl	8004858 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	2105      	movs	r1, #5
 8002714:	2025      	movs	r0, #37	; 0x25
 8002716:	f001 faf9 	bl	8003d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800271a:	2025      	movs	r0, #37	; 0x25
 800271c:	f001 fb12 	bl	8003d44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002720:	bf00      	nop
 8002722:	3728      	adds	r7, #40	; 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40011000 	.word	0x40011000
 800272c:	40023800 	.word	0x40023800
 8002730:	40020000 	.word	0x40020000

08002734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002738:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800273a:	e003      	b.n	8002744 <LoopCopyDataInit>

0800273c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800273e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002740:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002742:	3104      	adds	r1, #4

08002744 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002744:	480b      	ldr	r0, [pc, #44]	; (8002774 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002748:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800274a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800274c:	d3f6      	bcc.n	800273c <CopyDataInit>
  ldr  r2, =_sbss
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002750:	e002      	b.n	8002758 <LoopFillZerobss>

08002752 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002752:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002754:	f842 3b04 	str.w	r3, [r2], #4

08002758 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800275a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800275c:	d3f9      	bcc.n	8002752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800275e:	f7ff fc8f 	bl	8002080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002762:	f00a faf7 	bl	800cd54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002766:	f7ff f8bf 	bl	80018e8 <main>
  bx  lr    
 800276a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800276c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002770:	080128ec 	.word	0x080128ec
  ldr  r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002778:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 800277c:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8002780:	20022120 	.word	0x20022120

08002784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC_IRQHandler>

08002786 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800278a:	f000 fa5d 	bl	8002c48 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800278e:	20ca      	movs	r0, #202	; 0xca
 8002790:	f000 f95d 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002794:	20c3      	movs	r0, #195	; 0xc3
 8002796:	f000 f967 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800279a:	2008      	movs	r0, #8
 800279c:	f000 f964 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80027a0:	2050      	movs	r0, #80	; 0x50
 80027a2:	f000 f961 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80027a6:	20cf      	movs	r0, #207	; 0xcf
 80027a8:	f000 f951 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f000 f95b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80027b2:	20c1      	movs	r0, #193	; 0xc1
 80027b4:	f000 f958 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80027b8:	2030      	movs	r0, #48	; 0x30
 80027ba:	f000 f955 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80027be:	20ed      	movs	r0, #237	; 0xed
 80027c0:	f000 f945 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	f000 f94f 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80027ca:	2003      	movs	r0, #3
 80027cc:	f000 f94c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80027d0:	2012      	movs	r0, #18
 80027d2:	f000 f949 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80027d6:	2081      	movs	r0, #129	; 0x81
 80027d8:	f000 f946 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80027dc:	20e8      	movs	r0, #232	; 0xe8
 80027de:	f000 f936 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80027e2:	2085      	movs	r0, #133	; 0x85
 80027e4:	f000 f940 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f000 f93d 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80027ee:	2078      	movs	r0, #120	; 0x78
 80027f0:	f000 f93a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80027f4:	20cb      	movs	r0, #203	; 0xcb
 80027f6:	f000 f92a 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80027fa:	2039      	movs	r0, #57	; 0x39
 80027fc:	f000 f934 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002800:	202c      	movs	r0, #44	; 0x2c
 8002802:	f000 f931 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002806:	2000      	movs	r0, #0
 8002808:	f000 f92e 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800280c:	2034      	movs	r0, #52	; 0x34
 800280e:	f000 f92b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002812:	2002      	movs	r0, #2
 8002814:	f000 f928 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002818:	20f7      	movs	r0, #247	; 0xf7
 800281a:	f000 f918 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800281e:	2020      	movs	r0, #32
 8002820:	f000 f922 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002824:	20ea      	movs	r0, #234	; 0xea
 8002826:	f000 f912 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f91c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f000 f919 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002836:	20b1      	movs	r0, #177	; 0xb1
 8002838:	f000 f909 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f000 f913 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002842:	201b      	movs	r0, #27
 8002844:	f000 f910 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002848:	20b6      	movs	r0, #182	; 0xb6
 800284a:	f000 f900 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800284e:	200a      	movs	r0, #10
 8002850:	f000 f90a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002854:	20a2      	movs	r0, #162	; 0xa2
 8002856:	f000 f907 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800285a:	20c0      	movs	r0, #192	; 0xc0
 800285c:	f000 f8f7 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002860:	2010      	movs	r0, #16
 8002862:	f000 f901 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002866:	20c1      	movs	r0, #193	; 0xc1
 8002868:	f000 f8f1 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800286c:	2010      	movs	r0, #16
 800286e:	f000 f8fb 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002872:	20c5      	movs	r0, #197	; 0xc5
 8002874:	f000 f8eb 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002878:	2045      	movs	r0, #69	; 0x45
 800287a:	f000 f8f5 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800287e:	2015      	movs	r0, #21
 8002880:	f000 f8f2 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002884:	20c7      	movs	r0, #199	; 0xc7
 8002886:	f000 f8e2 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800288a:	2090      	movs	r0, #144	; 0x90
 800288c:	f000 f8ec 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002890:	2036      	movs	r0, #54	; 0x36
 8002892:	f000 f8dc 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002896:	20c8      	movs	r0, #200	; 0xc8
 8002898:	f000 f8e6 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800289c:	20f2      	movs	r0, #242	; 0xf2
 800289e:	f000 f8d6 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f000 f8e0 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80028a8:	20b0      	movs	r0, #176	; 0xb0
 80028aa:	f000 f8d0 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80028ae:	20c2      	movs	r0, #194	; 0xc2
 80028b0:	f000 f8da 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80028b4:	20b6      	movs	r0, #182	; 0xb6
 80028b6:	f000 f8ca 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80028ba:	200a      	movs	r0, #10
 80028bc:	f000 f8d4 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80028c0:	20a7      	movs	r0, #167	; 0xa7
 80028c2:	f000 f8d1 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80028c6:	2027      	movs	r0, #39	; 0x27
 80028c8:	f000 f8ce 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80028cc:	2004      	movs	r0, #4
 80028ce:	f000 f8cb 	bl	8002a68 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80028d2:	202a      	movs	r0, #42	; 0x2a
 80028d4:	f000 f8bb 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028d8:	2000      	movs	r0, #0
 80028da:	f000 f8c5 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 f8c2 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 f8bf 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80028ea:	20ef      	movs	r0, #239	; 0xef
 80028ec:	f000 f8bc 	bl	8002a68 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80028f0:	202b      	movs	r0, #43	; 0x2b
 80028f2:	f000 f8ac 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f8b6 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f000 f8b3 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002902:	2001      	movs	r0, #1
 8002904:	f000 f8b0 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002908:	203f      	movs	r0, #63	; 0x3f
 800290a:	f000 f8ad 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800290e:	20f6      	movs	r0, #246	; 0xf6
 8002910:	f000 f89d 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002914:	2001      	movs	r0, #1
 8002916:	f000 f8a7 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f000 f8a4 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002920:	2006      	movs	r0, #6
 8002922:	f000 f8a1 	bl	8002a68 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002926:	202c      	movs	r0, #44	; 0x2c
 8002928:	f000 f891 	bl	8002a4e <ili9341_WriteReg>
  LCD_Delay(200);
 800292c:	20c8      	movs	r0, #200	; 0xc8
 800292e:	f000 fa79 	bl	8002e24 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002932:	2026      	movs	r0, #38	; 0x26
 8002934:	f000 f88b 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002938:	2001      	movs	r0, #1
 800293a:	f000 f895 	bl	8002a68 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800293e:	20e0      	movs	r0, #224	; 0xe0
 8002940:	f000 f885 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002944:	200f      	movs	r0, #15
 8002946:	f000 f88f 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800294a:	2029      	movs	r0, #41	; 0x29
 800294c:	f000 f88c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002950:	2024      	movs	r0, #36	; 0x24
 8002952:	f000 f889 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002956:	200c      	movs	r0, #12
 8002958:	f000 f886 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800295c:	200e      	movs	r0, #14
 800295e:	f000 f883 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002962:	2009      	movs	r0, #9
 8002964:	f000 f880 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002968:	204e      	movs	r0, #78	; 0x4e
 800296a:	f000 f87d 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800296e:	2078      	movs	r0, #120	; 0x78
 8002970:	f000 f87a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002974:	203c      	movs	r0, #60	; 0x3c
 8002976:	f000 f877 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800297a:	2009      	movs	r0, #9
 800297c:	f000 f874 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002980:	2013      	movs	r0, #19
 8002982:	f000 f871 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002986:	2005      	movs	r0, #5
 8002988:	f000 f86e 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800298c:	2017      	movs	r0, #23
 800298e:	f000 f86b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002992:	2011      	movs	r0, #17
 8002994:	f000 f868 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f000 f865 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800299e:	20e1      	movs	r0, #225	; 0xe1
 80029a0:	f000 f855 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f000 f85f 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80029aa:	2016      	movs	r0, #22
 80029ac:	f000 f85c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80029b0:	201b      	movs	r0, #27
 80029b2:	f000 f859 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80029b6:	2004      	movs	r0, #4
 80029b8:	f000 f856 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80029bc:	2011      	movs	r0, #17
 80029be:	f000 f853 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80029c2:	2007      	movs	r0, #7
 80029c4:	f000 f850 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80029c8:	2031      	movs	r0, #49	; 0x31
 80029ca:	f000 f84d 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80029ce:	2033      	movs	r0, #51	; 0x33
 80029d0:	f000 f84a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80029d4:	2042      	movs	r0, #66	; 0x42
 80029d6:	f000 f847 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80029da:	2005      	movs	r0, #5
 80029dc:	f000 f844 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80029e0:	200c      	movs	r0, #12
 80029e2:	f000 f841 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80029e6:	200a      	movs	r0, #10
 80029e8:	f000 f83e 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80029ec:	2028      	movs	r0, #40	; 0x28
 80029ee:	f000 f83b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80029f2:	202f      	movs	r0, #47	; 0x2f
 80029f4:	f000 f838 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80029f8:	200f      	movs	r0, #15
 80029fa:	f000 f835 	bl	8002a68 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80029fe:	2011      	movs	r0, #17
 8002a00:	f000 f825 	bl	8002a4e <ili9341_WriteReg>
  LCD_Delay(200);
 8002a04:	20c8      	movs	r0, #200	; 0xc8
 8002a06:	f000 fa0d 	bl	8002e24 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002a0a:	2029      	movs	r0, #41	; 0x29
 8002a0c:	f000 f81f 	bl	8002a4e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002a10:	202c      	movs	r0, #44	; 0x2c
 8002a12:	f000 f81c 	bl	8002a4e <ili9341_WriteReg>
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002a1e:	f000 f913 	bl	8002c48 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002a22:	2103      	movs	r1, #3
 8002a24:	20d3      	movs	r0, #211	; 0xd3
 8002a26:	f000 f82c 	bl	8002a82 <ili9341_ReadData>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	b29b      	uxth	r3, r3
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002a36:	2029      	movs	r0, #41	; 0x29
 8002a38:	f000 f809 	bl	8002a4e <ili9341_WriteReg>
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002a44:	2028      	movs	r0, #40	; 0x28
 8002a46:	f000 f802 	bl	8002a4e <ili9341_WriteReg>
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f98e 	bl	8002d7c <LCD_IO_WriteReg>
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f95f 	bl	8002d38 <LCD_IO_WriteData>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	80fb      	strh	r3, [r7, #6]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002a92:	797a      	ldrb	r2, [r7, #5]
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f991 	bl	8002dc0 <LCD_IO_ReadData>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002aac:	23f0      	movs	r3, #240	; 0xf0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002abc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002ad0:	4819      	ldr	r0, [pc, #100]	; (8002b38 <SPIx_Init+0x6c>)
 8002ad2:	f005 fa23 	bl	8007f1c <HAL_SPI_GetState>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d12b      	bne.n	8002b34 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <SPIx_Init+0x6c>)
 8002ade:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <SPIx_Init+0x70>)
 8002ae0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <SPIx_Init+0x6c>)
 8002ae4:	2218      	movs	r2, #24
 8002ae6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <SPIx_Init+0x6c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <SPIx_Init+0x6c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <SPIx_Init+0x6c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <SPIx_Init+0x6c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <SPIx_Init+0x6c>)
 8002b02:	2207      	movs	r2, #7
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <SPIx_Init+0x6c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <SPIx_Init+0x6c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <SPIx_Init+0x6c>)
 8002b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b18:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <SPIx_Init+0x6c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SPIx_Init+0x6c>)
 8002b22:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b26:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002b28:	4803      	ldr	r0, [pc, #12]	; (8002b38 <SPIx_Init+0x6c>)
 8002b2a:	f000 f853 	bl	8002bd4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002b2e:	4802      	ldr	r0, [pc, #8]	; (8002b38 <SPIx_Init+0x6c>)
 8002b30:	f004 fd89 	bl	8007646 <HAL_SPI_Init>
  } 
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20002464 	.word	0x20002464
 8002b3c:	40015000 	.word	0x40015000

08002b40 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <SPIx_Read+0x38>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f107 0108 	add.w	r1, r7, #8
 8002b5a:	4808      	ldr	r0, [pc, #32]	; (8002b7c <SPIx_Read+0x3c>)
 8002b5c:	f004 ff33 	bl	80079c6 <HAL_SPI_Receive>
 8002b60:	4603      	mov	r3, r0
 8002b62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002b6a:	f000 f827 	bl	8002bbc <SPIx_Error>
  }
  
  return readvalue;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	2000003c 	.word	0x2000003c
 8002b7c:	20002464 	.word	0x20002464

08002b80 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <SPIx_Write+0x34>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	1db9      	adds	r1, r7, #6
 8002b94:	2201      	movs	r2, #1
 8002b96:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <SPIx_Write+0x38>)
 8002b98:	f004 fde1 	bl	800775e <HAL_SPI_Transmit>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002ba6:	f000 f809 	bl	8002bbc <SPIx_Error>
  }
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000003c 	.word	0x2000003c
 8002bb8:	20002464 	.word	0x20002464

08002bbc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002bc0:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <SPIx_Error+0x14>)
 8002bc2:	f004 fda4 	bl	800770e <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002bc6:	f7ff ff81 	bl	8002acc <SPIx_Init>
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20002464 	.word	0x20002464

08002bd4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bea:	6453      	str	r3, [r2, #68]	; 0x44
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002c02:	f043 0320 	orr.w	r3, r3, #32
 8002c06:	6313      	str	r3, [r2, #48]	; 0x30
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002c14:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002c22:	2301      	movs	r3, #1
 8002c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002c26:	2305      	movs	r3, #5
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4804      	ldr	r0, [pc, #16]	; (8002c44 <SPIx_MspInit+0x70>)
 8002c32:	f001 fe11 	bl	8004858 <HAL_GPIO_Init>
}
 8002c36:	bf00      	nop
 8002c38:	3728      	adds	r7, #40	; 0x28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40021400 	.word	0x40021400

08002c48 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <LCD_IO_Init+0xe0>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d164      	bne.n	8002d20 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <LCD_IO_Init+0xe0>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4a31      	ldr	r2, [pc, #196]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6c:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002c86:	2302      	movs	r3, #2
 8002c88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002c8a:	f107 030c 	add.w	r3, r7, #12
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4827      	ldr	r0, [pc, #156]	; (8002d30 <LCD_IO_Init+0xe8>)
 8002c92:	f001 fde1 	bl	8004858 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002ca0:	f043 0308 	orr.w	r3, r3, #8
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4819      	ldr	r0, [pc, #100]	; (8002d30 <LCD_IO_Init+0xe8>)
 8002ccc:	f001 fdc4 	bl	8004858 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002cec:	2304      	movs	r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	4619      	mov	r1, r3
 8002d02:	480c      	ldr	r0, [pc, #48]	; (8002d34 <LCD_IO_Init+0xec>)
 8002d04:	f001 fda8 	bl	8004858 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2104      	movs	r1, #4
 8002d0c:	4809      	ldr	r0, [pc, #36]	; (8002d34 <LCD_IO_Init+0xec>)
 8002d0e:	f002 f85b 	bl	8004dc8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002d12:	2201      	movs	r2, #1
 8002d14:	2104      	movs	r1, #4
 8002d16:	4807      	ldr	r0, [pc, #28]	; (8002d34 <LCD_IO_Init+0xec>)
 8002d18:	f002 f856 	bl	8004dc8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002d1c:	f7ff fed6 	bl	8002acc <SPIx_Init>
  }
}
 8002d20:	bf00      	nop
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200024bc 	.word	0x200024bc
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40020800 	.word	0x40020800

08002d38 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002d42:	2201      	movs	r2, #1
 8002d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d48:	480a      	ldr	r0, [pc, #40]	; (8002d74 <LCD_IO_WriteData+0x3c>)
 8002d4a:	f002 f83d 	bl	8004dc8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2104      	movs	r1, #4
 8002d52:	4809      	ldr	r0, [pc, #36]	; (8002d78 <LCD_IO_WriteData+0x40>)
 8002d54:	f002 f838 	bl	8004dc8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff10 	bl	8002b80 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002d60:	2201      	movs	r2, #1
 8002d62:	2104      	movs	r1, #4
 8002d64:	4804      	ldr	r0, [pc, #16]	; (8002d78 <LCD_IO_WriteData+0x40>)
 8002d66:	f002 f82f 	bl	8004dc8 <HAL_GPIO_WritePin>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40020c00 	.word	0x40020c00
 8002d78:	40020800 	.word	0x40020800

08002d7c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002d86:	2200      	movs	r2, #0
 8002d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d8c:	480a      	ldr	r0, [pc, #40]	; (8002db8 <LCD_IO_WriteReg+0x3c>)
 8002d8e:	f002 f81b 	bl	8004dc8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002d92:	2200      	movs	r2, #0
 8002d94:	2104      	movs	r1, #4
 8002d96:	4809      	ldr	r0, [pc, #36]	; (8002dbc <LCD_IO_WriteReg+0x40>)
 8002d98:	f002 f816 	bl	8004dc8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff feed 	bl	8002b80 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002da6:	2201      	movs	r2, #1
 8002da8:	2104      	movs	r1, #4
 8002daa:	4804      	ldr	r0, [pc, #16]	; (8002dbc <LCD_IO_WriteReg+0x40>)
 8002dac:	f002 f80c 	bl	8004dc8 <HAL_GPIO_WritePin>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40020800 	.word	0x40020800

08002dc0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	460a      	mov	r2, r1
 8002dca:	80fb      	strh	r3, [r7, #6]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	4810      	ldr	r0, [pc, #64]	; (8002e1c <LCD_IO_ReadData+0x5c>)
 8002dda:	f001 fff5 	bl	8004dc8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002dde:	2200      	movs	r2, #0
 8002de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002de4:	480e      	ldr	r0, [pc, #56]	; (8002e20 <LCD_IO_ReadData+0x60>)
 8002de6:	f001 ffef 	bl	8004dc8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fec7 	bl	8002b80 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002df2:	797b      	ldrb	r3, [r7, #5]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fea3 	bl	8002b40 <SPIx_Read>
 8002dfa:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e02:	4807      	ldr	r0, [pc, #28]	; (8002e20 <LCD_IO_ReadData+0x60>)
 8002e04:	f001 ffe0 	bl	8004dc8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	4803      	ldr	r0, [pc, #12]	; (8002e1c <LCD_IO_ReadData+0x5c>)
 8002e0e:	f001 ffdb 	bl	8004dc8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002e12:	68fb      	ldr	r3, [r7, #12]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020c00 	.word	0x40020c00

08002e24 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fe91 	bl	8003b54 <HAL_Delay>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002e40:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e42:	4a2e      	ldr	r2, [pc, #184]	; (8002efc <BSP_LCD_Init+0xc0>)
 8002e44:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002e46:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e48:	2209      	movs	r2, #9
 8002e4a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002e4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002e52:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e54:	221d      	movs	r2, #29
 8002e56:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e60:	f240 120d 	movw	r2, #269	; 0x10d
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e68:	f240 1243 	movw	r2, #323	; 0x143
 8002e6c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002e6e:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e70:	f240 1217 	movw	r2, #279	; 0x117
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e78:	f240 1247 	movw	r2, #327	; 0x147
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <BSP_LCD_Init+0xc4>)
 8002e98:	2208      	movs	r2, #8
 8002e9a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <BSP_LCD_Init+0xc4>)
 8002e9e:	22c0      	movs	r2, #192	; 0xc0
 8002ea0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <BSP_LCD_Init+0xc4>)
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <BSP_LCD_Init+0xc4>)
 8002eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002eb0:	4813      	ldr	r0, [pc, #76]	; (8002f00 <BSP_LCD_Init+0xc4>)
 8002eb2:	f004 f98b 	bl	80071cc <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002ece:	f000 fa47 	bl	8003360 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002ed2:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002ed4:	f003 f8fa 	bl	80060cc <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <BSP_LCD_Init+0xc8>)
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <BSP_LCD_Init+0xcc>)
 8002edc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <BSP_LCD_Init+0xc8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002ee6:	f000 fc29 	bl	800373c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002eea:	4808      	ldr	r0, [pc, #32]	; (8002f0c <BSP_LCD_Init+0xd0>)
 8002eec:	f000 f8ce 	bl	800308c <BSP_LCD_SetFont>

  return LCD_OK;
 8002ef0:	2300      	movs	r3, #0
}  
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20022000 	.word	0x20022000
 8002efc:	40016800 	.word	0x40016800
 8002f00:	20002500 	.word	0x20002500
 8002f04:	200220a8 	.word	0x200220a8
 8002f08:	20000004 	.word	0x20000004
 8002f0c:	20000040 	.word	0x20000040

08002f10 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <BSP_LCD_GetXSize+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	4798      	blx	r3
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200220a8 	.word	0x200220a8

08002f28 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <BSP_LCD_GetYSize+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	4798      	blx	r3
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200220a8 	.word	0x200220a8

08002f40 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b090      	sub	sp, #64	; 0x40
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002f50:	f7ff ffde 	bl	8002f10 <BSP_LCD_GetXSize>
 8002f54:	4603      	mov	r3, r0
 8002f56:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002f5c:	f7ff ffe4 	bl	8002f28 <BSP_LCD_GetYSize>
 8002f60:	4603      	mov	r3, r0
 8002f62:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002f6c:	23ff      	movs	r3, #255	; 0xff
 8002f6e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002f86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002f90:	f7ff ffbe 	bl	8002f10 <BSP_LCD_GetXSize>
 8002f94:	4603      	mov	r3, r0
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002f98:	f7ff ffc6 	bl	8002f28 <BSP_LCD_GetYSize>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4814      	ldr	r0, [pc, #80]	; (8002ffc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002faa:	f003 fa21 	bl	80063f0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	4913      	ldr	r1, [pc, #76]	; (8003000 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	490e      	ldr	r1, [pc, #56]	; (8003000 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	4a0b      	ldr	r2, [pc, #44]	; (8003004 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002fd6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	4909      	ldr	r1, [pc, #36]	; (8003000 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002fea:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002fec:	4803      	ldr	r0, [pc, #12]	; (8002ffc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002fee:	f003 fa3d 	bl	800646c <HAL_LTDC_EnableDither>
}
 8002ff2:	bf00      	nop
 8002ff4:	3740      	adds	r7, #64	; 0x40
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20022000 	.word	0x20022000
 8003000:	20002534 	.word	0x20002534
 8003004:	20000040 	.word	0x20000040

08003008 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <BSP_LCD_SelectLayer+0x1c>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6013      	str	r3, [r2, #0]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20002530 	.word	0x20002530

08003028 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003030:	4b07      	ldr	r3, [pc, #28]	; (8003050 <BSP_LCD_SetTextColor+0x28>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4907      	ldr	r1, [pc, #28]	; (8003054 <BSP_LCD_SetTextColor+0x2c>)
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	20002530 	.word	0x20002530
 8003054:	20002534 	.word	0x20002534

08003058 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <BSP_LCD_SetBackColor+0x2c>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4908      	ldr	r1, [pc, #32]	; (8003088 <BSP_LCD_SetBackColor+0x30>)
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	3304      	adds	r3, #4
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	601a      	str	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20002530 	.word	0x20002530
 8003088:	20002534 	.word	0x20002534

0800308c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <BSP_LCD_SetFont+0x2c>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4908      	ldr	r1, [pc, #32]	; (80030bc <BSP_LCD_SetFont+0x30>)
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3308      	adds	r3, #8
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20002530 	.word	0x20002530
 80030bc:	20002534 	.word	0x20002534

080030c0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <BSP_LCD_GetFont+0x24>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4907      	ldr	r1, [pc, #28]	; (80030e8 <BSP_LCD_GetFont+0x28>)
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	3308      	adds	r3, #8
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20002530 	.word	0x20002530
 80030e8:	20002534 	.word	0x20002534

080030ec <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <BSP_LCD_Clear+0x48>)
 80030f6:	681c      	ldr	r4, [r3, #0]
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <BSP_LCD_Clear+0x48>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <BSP_LCD_Clear+0x4c>)
 80030fe:	2134      	movs	r1, #52	; 0x34
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	335c      	adds	r3, #92	; 0x5c
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461e      	mov	r6, r3
 800310c:	f7ff ff00 	bl	8002f10 <BSP_LCD_GetXSize>
 8003110:	4605      	mov	r5, r0
 8003112:	f7ff ff09 	bl	8002f28 <BSP_LCD_GetYSize>
 8003116:	4602      	mov	r2, r0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	2300      	movs	r3, #0
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	462a      	mov	r2, r5
 8003124:	4631      	mov	r1, r6
 8003126:	4620      	mov	r0, r4
 8003128:	f000 fad0 	bl	80036cc <FillBuffer>
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003134:	20002530 	.word	0x20002530
 8003138:	20022000 	.word	0x20022000

0800313c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
 8003146:	460b      	mov	r3, r1
 8003148:	80bb      	strh	r3, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <BSP_LCD_DisplayChar+0x80>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	491b      	ldr	r1, [pc, #108]	; (80031c0 <BSP_LCD_DisplayChar+0x84>)
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3308      	adds	r3, #8
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800316a:	4b14      	ldr	r3, [pc, #80]	; (80031bc <BSP_LCD_DisplayChar+0x80>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4c14      	ldr	r4, [pc, #80]	; (80031c0 <BSP_LCD_DisplayChar+0x84>)
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4423      	add	r3, r4
 800317a:	3308      	adds	r3, #8
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003180:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003184:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <BSP_LCD_DisplayChar+0x80>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4c0d      	ldr	r4, [pc, #52]	; (80031c0 <BSP_LCD_DisplayChar+0x84>)
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4423      	add	r3, r4
 8003194:	3308      	adds	r3, #8
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	889b      	ldrh	r3, [r3, #4]
 800319a:	3307      	adds	r3, #7
 800319c:	2b00      	cmp	r3, #0
 800319e:	da00      	bge.n	80031a2 <BSP_LCD_DisplayChar+0x66>
 80031a0:	3307      	adds	r3, #7
 80031a2:	10db      	asrs	r3, r3, #3
 80031a4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80031a8:	18ca      	adds	r2, r1, r3
 80031aa:	88b9      	ldrh	r1, [r7, #4]
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f9d2 	bl	8003558 <DrawChar>
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}
 80031bc:	20002530 	.word	0x20002530
 80031c0:	20002534 	.word	0x20002534

080031c4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60ba      	str	r2, [r7, #8]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	81fb      	strh	r3, [r7, #14]
 80031d2:	460b      	mov	r3, r1
 80031d4:	81bb      	strh	r3, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80031da:	2301      	movs	r3, #1
 80031dc:	83fb      	strh	r3, [r7, #30]
 80031de:	2300      	movs	r3, #0
 80031e0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80031ee:	e002      	b.n	80031f6 <BSP_LCD_DisplayStringAt+0x32>
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	3301      	adds	r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	617a      	str	r2, [r7, #20]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f6      	bne.n	80031f0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003202:	f7ff fe85 	bl	8002f10 <BSP_LCD_GetXSize>
 8003206:	4601      	mov	r1, r0
 8003208:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <BSP_LCD_DisplayStringAt+0x174>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	484b      	ldr	r0, [pc, #300]	; (800333c <BSP_LCD_DisplayStringAt+0x178>)
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4403      	add	r3, r0
 8003218:	3308      	adds	r3, #8
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	889b      	ldrh	r3, [r3, #4]
 800321e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003222:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b03      	cmp	r3, #3
 8003228:	d01c      	beq.n	8003264 <BSP_LCD_DisplayStringAt+0xa0>
 800322a:	2b03      	cmp	r3, #3
 800322c:	dc33      	bgt.n	8003296 <BSP_LCD_DisplayStringAt+0xd2>
 800322e:	2b01      	cmp	r3, #1
 8003230:	d002      	beq.n	8003238 <BSP_LCD_DisplayStringAt+0x74>
 8003232:	2b02      	cmp	r3, #2
 8003234:	d019      	beq.n	800326a <BSP_LCD_DisplayStringAt+0xa6>
 8003236:	e02e      	b.n	8003296 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	1ad1      	subs	r1, r2, r3
 800323e:	4b3e      	ldr	r3, [pc, #248]	; (8003338 <BSP_LCD_DisplayStringAt+0x174>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	483e      	ldr	r0, [pc, #248]	; (800333c <BSP_LCD_DisplayStringAt+0x178>)
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4403      	add	r3, r0
 800324e:	3308      	adds	r3, #8
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	889b      	ldrh	r3, [r3, #4]
 8003254:	fb03 f301 	mul.w	r3, r3, r1
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	89fb      	ldrh	r3, [r7, #14]
 800325e:	4413      	add	r3, r2
 8003260:	83fb      	strh	r3, [r7, #30]
      break;
 8003262:	e01b      	b.n	800329c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003264:	89fb      	ldrh	r3, [r7, #14]
 8003266:	83fb      	strh	r3, [r7, #30]
      break;
 8003268:	e018      	b.n	800329c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	b299      	uxth	r1, r3
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <BSP_LCD_DisplayStringAt+0x174>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4831      	ldr	r0, [pc, #196]	; (800333c <BSP_LCD_DisplayStringAt+0x178>)
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4403      	add	r3, r0
 8003282:	3308      	adds	r3, #8
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	889b      	ldrh	r3, [r3, #4]
 8003288:	fb11 f303 	smulbb	r3, r1, r3
 800328c:	b29a      	uxth	r2, r3
 800328e:	89fb      	ldrh	r3, [r7, #14]
 8003290:	4413      	add	r3, r2
 8003292:	83fb      	strh	r3, [r7, #30]
      break;
 8003294:	e002      	b.n	800329c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003296:	89fb      	ldrh	r3, [r7, #14]
 8003298:	83fb      	strh	r3, [r7, #30]
      break;
 800329a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800329c:	e01a      	b.n	80032d4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	89b9      	ldrh	r1, [r7, #12]
 80032a4:	8bfb      	ldrh	r3, [r7, #30]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff48 	bl	800313c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80032ac:	4b22      	ldr	r3, [pc, #136]	; (8003338 <BSP_LCD_DisplayStringAt+0x174>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4922      	ldr	r1, [pc, #136]	; (800333c <BSP_LCD_DisplayStringAt+0x178>)
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3308      	adds	r3, #8
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	889a      	ldrh	r2, [r3, #4]
 80032c2:	8bfb      	ldrh	r3, [r7, #30]
 80032c4:	4413      	add	r3, r2
 80032c6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
    i++;
 80032ce:	8bbb      	ldrh	r3, [r7, #28]
 80032d0:	3301      	adds	r3, #1
 80032d2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2dc      	uxtb	r4, r3
 80032e2:	f7ff fe15 	bl	8002f10 <BSP_LCD_GetXSize>
 80032e6:	8bb9      	ldrh	r1, [r7, #28]
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <BSP_LCD_DisplayStringAt+0x174>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4d13      	ldr	r5, [pc, #76]	; (800333c <BSP_LCD_DisplayStringAt+0x178>)
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	442b      	add	r3, r5
 80032f8:	3308      	adds	r3, #8
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	889b      	ldrh	r3, [r3, #4]
 80032fe:	fb03 f301 	mul.w	r3, r3, r1
 8003302:	1ac3      	subs	r3, r0, r3
 8003304:	b299      	uxth	r1, r3
 8003306:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <BSP_LCD_DisplayStringAt+0x174>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	480c      	ldr	r0, [pc, #48]	; (800333c <BSP_LCD_DisplayStringAt+0x178>)
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4403      	add	r3, r0
 8003316:	3308      	adds	r3, #8
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	889b      	ldrh	r3, [r3, #4]
 800331c:	4299      	cmp	r1, r3
 800331e:	bf2c      	ite	cs
 8003320:	2301      	movcs	r3, #1
 8003322:	2300      	movcc	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	4023      	ands	r3, r4
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1b7      	bne.n	800329e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bdb0      	pop	{r4, r5, r7, pc}
 8003338:	20002530 	.word	0x20002530
 800333c:	20002534 	.word	0x20002534

08003340 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <BSP_LCD_DisplayOn+0x1c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800334e:	4b03      	ldr	r3, [pc, #12]	; (800335c <BSP_LCD_DisplayOn+0x1c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4798      	blx	r3
  }
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200220a8 	.word	0x200220a8

08003360 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
 800336a:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4a60      	ldr	r2, [pc, #384]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 8003370:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b5e      	ldr	r3, [pc, #376]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	4b5a      	ldr	r3, [pc, #360]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a59      	ldr	r2, [pc, #356]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 800338c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b57      	ldr	r3, [pc, #348]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b50      	ldr	r3, [pc, #320]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a4b      	ldr	r2, [pc, #300]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	4b45      	ldr	r3, [pc, #276]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a44      	ldr	r2, [pc, #272]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033e0:	f043 0304 	orr.w	r3, r3, #4
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b42      	ldr	r3, [pc, #264]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	4b3e      	ldr	r3, [pc, #248]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a3d      	ldr	r2, [pc, #244]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 8003418:	f043 0320 	orr.w	r3, r3, #32
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 8003434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <BSP_LCD_MspInit+0x190>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003446:	f641 0358 	movw	r3, #6232	; 0x1858
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003454:	2302      	movs	r3, #2
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003458:	230e      	movs	r3, #14
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800345c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003460:	4619      	mov	r1, r3
 8003462:	4824      	ldr	r0, [pc, #144]	; (80034f4 <BSP_LCD_MspInit+0x194>)
 8003464:	f001 f9f8 	bl	8004858 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003468:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800346e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003472:	4619      	mov	r1, r3
 8003474:	4820      	ldr	r0, [pc, #128]	; (80034f8 <BSP_LCD_MspInit+0x198>)
 8003476:	f001 f9ef 	bl	8004858 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800347a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003484:	4619      	mov	r1, r3
 8003486:	481d      	ldr	r0, [pc, #116]	; (80034fc <BSP_LCD_MspInit+0x19c>)
 8003488:	f001 f9e6 	bl	8004858 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800348c:	2348      	movs	r3, #72	; 0x48
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003494:	4619      	mov	r1, r3
 8003496:	481a      	ldr	r0, [pc, #104]	; (8003500 <BSP_LCD_MspInit+0x1a0>)
 8003498:	f001 f9de 	bl	8004858 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800349c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80034a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a6:	4619      	mov	r1, r3
 80034a8:	4816      	ldr	r0, [pc, #88]	; (8003504 <BSP_LCD_MspInit+0x1a4>)
 80034aa:	f001 f9d5 	bl	8004858 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80034ae:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b8:	4619      	mov	r1, r3
 80034ba:	4813      	ldr	r0, [pc, #76]	; (8003508 <BSP_LCD_MspInit+0x1a8>)
 80034bc:	f001 f9cc 	bl	8004858 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80034c0:	2303      	movs	r3, #3
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80034c4:	2309      	movs	r3, #9
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034cc:	4619      	mov	r1, r3
 80034ce:	480a      	ldr	r0, [pc, #40]	; (80034f8 <BSP_LCD_MspInit+0x198>)
 80034d0:	f001 f9c2 	bl	8004858 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80034d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034de:	4619      	mov	r1, r3
 80034e0:	4809      	ldr	r0, [pc, #36]	; (8003508 <BSP_LCD_MspInit+0x1a8>)
 80034e2:	f001 f9b9 	bl	8004858 <HAL_GPIO_Init>
}
 80034e6:	bf00      	nop
 80034e8:	3738      	adds	r7, #56	; 0x38
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020000 	.word	0x40020000
 80034f8:	40020400 	.word	0x40020400
 80034fc:	40020800 	.word	0x40020800
 8003500:	40020c00 	.word	0x40020c00
 8003504:	40021400 	.word	0x40021400
 8003508:	40021800 	.word	0x40021800

0800350c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800350c:	b5b0      	push	{r4, r5, r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	603a      	str	r2, [r7, #0]
 8003516:	80fb      	strh	r3, [r7, #6]
 8003518:	460b      	mov	r3, r1
 800351a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <BSP_LCD_DrawPixel+0x44>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <BSP_LCD_DrawPixel+0x48>)
 8003522:	2134      	movs	r1, #52	; 0x34
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	335c      	adds	r3, #92	; 0x5c
 800352c:	681c      	ldr	r4, [r3, #0]
 800352e:	88bd      	ldrh	r5, [r7, #4]
 8003530:	f7ff fcee 	bl	8002f10 <BSP_LCD_GetXSize>
 8003534:	4603      	mov	r3, r0
 8003536:	fb03 f205 	mul.w	r2, r3, r5
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4423      	add	r3, r4
 8003542:	461a      	mov	r2, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6013      	str	r3, [r2, #0]
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bdb0      	pop	{r4, r5, r7, pc}
 8003550:	20002530 	.word	0x20002530
 8003554:	20022000 	.word	0x20022000

08003558 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	603a      	str	r2, [r7, #0]
 8003562:	80fb      	strh	r3, [r7, #6]
 8003564:	460b      	mov	r3, r1
 8003566:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <DrawChar+0x16c>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4953      	ldr	r1, [pc, #332]	; (80036c8 <DrawChar+0x170>)
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	3308      	adds	r3, #8
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	88db      	ldrh	r3, [r3, #6]
 800358a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800358c:	4b4d      	ldr	r3, [pc, #308]	; (80036c4 <DrawChar+0x16c>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	494d      	ldr	r1, [pc, #308]	; (80036c8 <DrawChar+0x170>)
 8003592:	4613      	mov	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3308      	adds	r3, #8
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	889b      	ldrh	r3, [r3, #4]
 80035a2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80035a4:	8a3b      	ldrh	r3, [r7, #16]
 80035a6:	3307      	adds	r3, #7
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da00      	bge.n	80035ae <DrawChar+0x56>
 80035ac:	3307      	adds	r3, #7
 80035ae:	10db      	asrs	r3, r3, #3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	8a3b      	ldrh	r3, [r7, #16]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e076      	b.n	80036b2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80035c4:	8a3b      	ldrh	r3, [r7, #16]
 80035c6:	3307      	adds	r3, #7
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	da00      	bge.n	80035ce <DrawChar+0x76>
 80035cc:	3307      	adds	r3, #7
 80035ce:	10db      	asrs	r3, r3, #3
 80035d0:	461a      	mov	r2, r3
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fb03 f302 	mul.w	r3, r3, r2
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80035de:	8a3b      	ldrh	r3, [r7, #16]
 80035e0:	3307      	adds	r3, #7
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	da00      	bge.n	80035e8 <DrawChar+0x90>
 80035e6:	3307      	adds	r3, #7
 80035e8:	10db      	asrs	r3, r3, #3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d002      	beq.n	80035f4 <DrawChar+0x9c>
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d004      	beq.n	80035fc <DrawChar+0xa4>
 80035f2:	e00c      	b.n	800360e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	617b      	str	r3, [r7, #20]
      break;
 80035fa:	e016      	b.n	800362a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	3201      	adds	r2, #1
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
      break;
 800360c:	e00d      	b.n	800362a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	041a      	lsls	r2, r3, #16
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	3301      	adds	r3, #1
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	4313      	orrs	r3, r2
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	3202      	adds	r2, #2
 8003622:	7812      	ldrb	r2, [r2, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
      break;
 8003628:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	e036      	b.n	800369e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003630:	8a3a      	ldrh	r2, [r7, #16]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	1ad2      	subs	r2, r2, r3
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	4413      	add	r3, r2
 800363a:	3b01      	subs	r3, #1
 800363c:	2201      	movs	r2, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	461a      	mov	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d012      	beq.n	8003672 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	b29a      	uxth	r2, r3
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	4413      	add	r3, r2
 8003654:	b298      	uxth	r0, r3
 8003656:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <DrawChar+0x16c>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	491b      	ldr	r1, [pc, #108]	; (80036c8 <DrawChar+0x170>)
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	88bb      	ldrh	r3, [r7, #4]
 800366a:	4619      	mov	r1, r3
 800366c:	f7ff ff4e 	bl	800350c <BSP_LCD_DrawPixel>
 8003670:	e012      	b.n	8003698 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	b29a      	uxth	r2, r3
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	4413      	add	r3, r2
 800367a:	b298      	uxth	r0, r3
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <DrawChar+0x16c>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4911      	ldr	r1, [pc, #68]	; (80036c8 <DrawChar+0x170>)
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3304      	adds	r3, #4
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	88bb      	ldrh	r3, [r7, #4]
 8003692:	4619      	mov	r1, r3
 8003694:	f7ff ff3a 	bl	800350c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	3301      	adds	r3, #1
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	8a3b      	ldrh	r3, [r7, #16]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d3c4      	bcc.n	8003630 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80036a6:	88bb      	ldrh	r3, [r7, #4]
 80036a8:	3301      	adds	r3, #1
 80036aa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	8a7b      	ldrh	r3, [r7, #18]
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d384      	bcc.n	80035c4 <DrawChar+0x6c>
  }
}
 80036ba:	bf00      	nop
 80036bc:	bf00      	nop
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20002530 	.word	0x20002530
 80036c8:	20002534 	.word	0x20002534

080036cc <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <FillBuffer+0x68>)
 80036dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036e0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <FillBuffer+0x68>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80036e8:	4a12      	ldr	r2, [pc, #72]	; (8003734 <FillBuffer+0x68>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <FillBuffer+0x68>)
 80036f0:	4a11      	ldr	r2, [pc, #68]	; (8003738 <FillBuffer+0x6c>)
 80036f2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80036f4:	480f      	ldr	r0, [pc, #60]	; (8003734 <FillBuffer+0x68>)
 80036f6:	f000 fd13 	bl	8004120 <HAL_DMA2D_Init>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d115      	bne.n	800372c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003700:	68f9      	ldr	r1, [r7, #12]
 8003702:	480c      	ldr	r0, [pc, #48]	; (8003734 <FillBuffer+0x68>)
 8003704:	f000 ff7a 	bl	80045fc <HAL_DMA2D_ConfigLayer>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10e      	bne.n	800372c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69f9      	ldr	r1, [r7, #28]
 8003718:	4806      	ldr	r0, [pc, #24]	; (8003734 <FillBuffer+0x68>)
 800371a:	f000 fd4a 	bl	80041b2 <HAL_DMA2D_Start>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d103      	bne.n	800372c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003724:	210a      	movs	r1, #10
 8003726:	4803      	ldr	r0, [pc, #12]	; (8003734 <FillBuffer+0x68>)
 8003728:	f000 fd6e 	bl	8004208 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	200024c0 	.word	0x200024c0
 8003738:	4002b000 	.word	0x4002b000

0800373c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003740:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003742:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <BSP_SDRAM_Init+0xb0>)
 8003744:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003746:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 8003748:	2202      	movs	r2, #2
 800374a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800374c:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 800374e:	2207      	movs	r2, #7
 8003750:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003752:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 8003754:	2204      	movs	r2, #4
 8003756:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 800375a:	2207      	movs	r2, #7
 800375c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 8003760:	2202      	movs	r2, #2
 8003762:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003764:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 8003766:	2202      	movs	r2, #2
 8003768:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 800376c:	2202      	movs	r2, #2
 800376e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003772:	2201      	movs	r2, #1
 8003774:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 800377e:	2204      	movs	r2, #4
 8003780:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003782:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003784:	2210      	movs	r2, #16
 8003786:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800378e:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003790:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003794:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003798:	2200      	movs	r2, #0
 800379a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 800379e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80037a4:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 80037ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80037b2:	2100      	movs	r1, #0
 80037b4:	480c      	ldr	r0, [pc, #48]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 80037b6:	f000 f87f 	bl	80038b8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80037ba:	490d      	ldr	r1, [pc, #52]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 80037bc:	480a      	ldr	r0, [pc, #40]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 80037be:	f003 fec3 	bl	8007548 <HAL_SDRAM_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <BSP_SDRAM_Init+0xb8>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e002      	b.n	80037d6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <BSP_SDRAM_Init+0xb8>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80037d6:	f240 506a 	movw	r0, #1386	; 0x56a
 80037da:	f000 f80d 	bl	80037f8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <BSP_SDRAM_Init+0xb8>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	2000254c 	.word	0x2000254c
 80037ec:	a0000140 	.word	0xa0000140
 80037f0:	20002580 	.word	0x20002580
 80037f4:	20000058 	.word	0x20000058

080037f8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003804:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800380a:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800380c:	2208      	movs	r2, #8
 800380e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003810:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003812:	2201      	movs	r2, #1
 8003814:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003816:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003818:	2200      	movs	r2, #0
 800381a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800381c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003820:	4923      	ldr	r1, [pc, #140]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003822:	4824      	ldr	r0, [pc, #144]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003824:	f003 fec4 	bl	80075b0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003828:	2001      	movs	r0, #1
 800382a:	f000 f993 	bl	8003b54 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003830:	2202      	movs	r2, #2
 8003832:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003834:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003836:	2208      	movs	r2, #8
 8003838:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800383c:	2201      	movs	r2, #1
 800383e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003840:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800384a:	4919      	ldr	r1, [pc, #100]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800384c:	4819      	ldr	r0, [pc, #100]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800384e:	f003 feaf 	bl	80075b0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003854:	2203      	movs	r2, #3
 8003856:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800385a:	2208      	movs	r2, #8
 800385c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800385e:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003860:	2204      	movs	r2, #4
 8003862:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800386a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800386e:	4910      	ldr	r1, [pc, #64]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003870:	4810      	ldr	r0, [pc, #64]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003872:	f003 fe9d 	bl	80075b0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003876:	f44f 730c 	mov.w	r3, #560	; 0x230
 800387a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800387e:	2204      	movs	r2, #4
 8003880:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003884:	2208      	movs	r2, #8
 8003886:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800388a:	2201      	movs	r2, #1
 800388c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003892:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003898:	4905      	ldr	r1, [pc, #20]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800389a:	4806      	ldr	r0, [pc, #24]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800389c:	f003 fe88 	bl	80075b0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4804      	ldr	r0, [pc, #16]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038a4:	f003 feaf 	bl	8007606 <HAL_SDRAM_ProgramRefreshRate>
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	2000259c 	.word	0x2000259c
 80038b4:	2000254c 	.word	0x2000254c

080038b8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b090      	sub	sp, #64	; 0x40
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80ec 	beq.w	8003aa2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ce:	4b77      	ldr	r3, [pc, #476]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	4a76      	ldr	r2, [pc, #472]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6393      	str	r3, [r2, #56]	; 0x38
 80038da:	4b74      	ldr	r3, [pc, #464]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	4b70      	ldr	r3, [pc, #448]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a6f      	ldr	r2, [pc, #444]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 80038f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f4:	6313      	str	r3, [r2, #48]	; 0x30
 80038f6:	4b6d      	ldr	r3, [pc, #436]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
 8003906:	4b69      	ldr	r3, [pc, #420]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a68      	ldr	r2, [pc, #416]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b66      	ldr	r3, [pc, #408]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	4b62      	ldr	r3, [pc, #392]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a61      	ldr	r2, [pc, #388]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	4b5b      	ldr	r3, [pc, #364]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a5a      	ldr	r2, [pc, #360]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003944:	f043 0308 	orr.w	r3, r3, #8
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b58      	ldr	r3, [pc, #352]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	4b54      	ldr	r3, [pc, #336]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a53      	ldr	r2, [pc, #332]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003960:	f043 0310 	orr.w	r3, r3, #16
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b51      	ldr	r3, [pc, #324]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	4b4d      	ldr	r3, [pc, #308]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a4c      	ldr	r2, [pc, #304]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 800397c:	f043 0320 	orr.w	r3, r3, #32
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b4a      	ldr	r3, [pc, #296]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b46      	ldr	r3, [pc, #280]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a45      	ldr	r2, [pc, #276]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 8003998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b43      	ldr	r3, [pc, #268]	; (8003aac <BSP_SDRAM_MspInit+0x1f4>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80039ae:	2302      	movs	r3, #2
 80039b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80039b6:	230c      	movs	r3, #12
 80039b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80039ba:	2360      	movs	r3, #96	; 0x60
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80039be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c2:	4619      	mov	r1, r3
 80039c4:	483a      	ldr	r0, [pc, #232]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f8>)
 80039c6:	f000 ff47 	bl	8004858 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80039ca:	2301      	movs	r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80039ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039d2:	4619      	mov	r1, r3
 80039d4:	4837      	ldr	r0, [pc, #220]	; (8003ab4 <BSP_SDRAM_MspInit+0x1fc>)
 80039d6:	f000 ff3f 	bl	8004858 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80039da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80039e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e4:	4619      	mov	r1, r3
 80039e6:	4834      	ldr	r0, [pc, #208]	; (8003ab8 <BSP_SDRAM_MspInit+0x200>)
 80039e8:	f000 ff36 	bl	8004858 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80039ec:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80039f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039f6:	4619      	mov	r1, r3
 80039f8:	4830      	ldr	r0, [pc, #192]	; (8003abc <BSP_SDRAM_MspInit+0x204>)
 80039fa:	f000 ff2d 	bl	8004858 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80039fe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a08:	4619      	mov	r1, r3
 8003a0a:	482d      	ldr	r0, [pc, #180]	; (8003ac0 <BSP_SDRAM_MspInit+0x208>)
 8003a0c:	f000 ff24 	bl	8004858 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003a10:	f248 1333 	movw	r3, #33075	; 0x8133
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4829      	ldr	r0, [pc, #164]	; (8003ac4 <BSP_SDRAM_MspInit+0x20c>)
 8003a1e:	f000 ff1b 	bl	8004858 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003a22:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a2a:	2280      	movs	r2, #128	; 0x80
 8003a2c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003a2e:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a34:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a3c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a44:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a4c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a54:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a5a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003a5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a62:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a64:	2203      	movs	r2, #3
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a68:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003a6e:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003a74:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a76:	4a15      	ldr	r2, [pc, #84]	; (8003acc <BSP_SDRAM_MspInit+0x214>)
 8003a78:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a80:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003a86:	4810      	ldr	r0, [pc, #64]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a88:	f000 fa18 	bl	8003ebc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003a8c:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <BSP_SDRAM_MspInit+0x210>)
 8003a8e:	f000 f967 	bl	8003d60 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	210f      	movs	r1, #15
 8003a96:	2038      	movs	r0, #56	; 0x38
 8003a98:	f000 f938 	bl	8003d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003a9c:	2038      	movs	r0, #56	; 0x38
 8003a9e:	f000 f951 	bl	8003d44 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003aa2:	bf00      	nop
 8003aa4:	3740      	adds	r7, #64	; 0x40
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40020400 	.word	0x40020400
 8003ab4:	40020800 	.word	0x40020800
 8003ab8:	40020c00 	.word	0x40020c00
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40021400 	.word	0x40021400
 8003ac4:	40021800 	.word	0x40021800
 8003ac8:	200025ac 	.word	0x200025ac
 8003acc:	40026410 	.word	0x40026410

08003ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <HAL_Init+0x40>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <HAL_Init+0x40>)
 8003ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <HAL_Init+0x40>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <HAL_Init+0x40>)
 8003ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aec:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <HAL_Init+0x40>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a07      	ldr	r2, [pc, #28]	; (8003b10 <HAL_Init+0x40>)
 8003af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003af8:	2003      	movs	r0, #3
 8003afa:	f000 f8fc 	bl	8003cf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7fe f942 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b04:	f7fe f914 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023c00 	.word	0x40023c00

08003b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_IncTick+0x20>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_IncTick+0x24>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4413      	add	r3, r2
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_IncTick+0x24>)
 8003b26:	6013      	str	r3, [r2, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000060 	.word	0x20000060
 8003b38:	200220ac 	.word	0x200220ac

08003b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_GetTick+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	200220ac 	.word	0x200220ac

08003b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b5c:	f7ff ffee 	bl	8003b3c <HAL_GetTick>
 8003b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d005      	beq.n	8003b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_Delay+0x44>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b7a:	bf00      	nop
 8003b7c:	f7ff ffde 	bl	8003b3c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d8f7      	bhi.n	8003b7c <HAL_Delay+0x28>
  {
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000060 	.word	0x20000060

08003b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bce:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	60d3      	str	r3, [r2, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <__NVIC_GetPriorityGrouping+0x18>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	f003 0307 	and.w	r3, r3, #7
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	db0b      	blt.n	8003c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	4907      	ldr	r1, [pc, #28]	; (8003c38 <__NVIC_EnableIRQ+0x38>)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2001      	movs	r0, #1
 8003c22:	fa00 f202 	lsl.w	r2, r0, r2
 8003c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	e000e100 	.word	0xe000e100

08003c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	db0a      	blt.n	8003c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	490c      	ldr	r1, [pc, #48]	; (8003c88 <__NVIC_SetPriority+0x4c>)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c64:	e00a      	b.n	8003c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	4908      	ldr	r1, [pc, #32]	; (8003c8c <__NVIC_SetPriority+0x50>)
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3b04      	subs	r3, #4
 8003c74:	0112      	lsls	r2, r2, #4
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	440b      	add	r3, r1
 8003c7a:	761a      	strb	r2, [r3, #24]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000e100 	.word	0xe000e100
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	; 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f1c3 0307 	rsb	r3, r3, #7
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	bf28      	it	cs
 8003cae:	2304      	movcs	r3, #4
 8003cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d902      	bls.n	8003cc0 <NVIC_EncodePriority+0x30>
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3b03      	subs	r3, #3
 8003cbe:	e000      	b.n	8003cc2 <NVIC_EncodePriority+0x32>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	43d9      	mvns	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	4313      	orrs	r3, r2
         );
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3724      	adds	r7, #36	; 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff ff4c 	bl	8003b9c <__NVIC_SetPriorityGrouping>
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d1e:	f7ff ff61 	bl	8003be4 <__NVIC_GetPriorityGrouping>
 8003d22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	6978      	ldr	r0, [r7, #20]
 8003d2a:	f7ff ffb1 	bl	8003c90 <NVIC_EncodePriority>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff80 	bl	8003c3c <__NVIC_SetPriority>
}
 8003d3c:	bf00      	nop
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff54 	bl	8003c00 <__NVIC_EnableIRQ>
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d6c:	f7ff fee6 	bl	8003b3c <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e099      	b.n	8003eb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d9c:	e00f      	b.n	8003dbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d9e:	f7ff fecd 	bl	8003b3c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d908      	bls.n	8003dbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2203      	movs	r2, #3
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e078      	b.n	8003eb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e8      	bne.n	8003d9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4b38      	ldr	r3, [pc, #224]	; (8003eb8 <HAL_DMA_Init+0x158>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d107      	bne.n	8003e28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	4313      	orrs	r3, r2
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0307 	bic.w	r3, r3, #7
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d117      	bne.n	8003e82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f8df 	bl	8004028 <DMA_CheckFifoParam>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2240      	movs	r2, #64	; 0x40
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e016      	b.n	8003eb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f896 	bl	8003fbc <DMA_CalcBaseAndBitshift>
 8003e90:	4603      	mov	r3, r0
 8003e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	223f      	movs	r2, #63	; 0x3f
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	f010803f 	.word	0xf010803f

08003ebc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e050      	b.n	8003f70 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d101      	bne.n	8003ede <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
 8003edc:	e048      	b.n	8003f70 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2200      	movs	r2, #0
 8003f14:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2221      	movs	r2, #33	; 0x21
 8003f1c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f84c 	bl	8003fbc <DMA_CalcBaseAndBitshift>
 8003f24:	4603      	mov	r3, r0
 8003f26:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	223f      	movs	r2, #63	; 0x3f
 8003f52:	409a      	lsls	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d004      	beq.n	8003f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e00c      	b.n	8003fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2205      	movs	r2, #5
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	3b10      	subs	r3, #16
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <DMA_CalcBaseAndBitshift+0x64>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fd6:	4a13      	ldr	r2, [pc, #76]	; (8004024 <DMA_CalcBaseAndBitshift+0x68>)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d909      	bls.n	8003ffe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	1d1a      	adds	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	659a      	str	r2, [r3, #88]	; 0x58
 8003ffc:	e007      	b.n	800400e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	aaaaaaab 	.word	0xaaaaaaab
 8004024:	080124f4 	.word	0x080124f4

08004028 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d11f      	bne.n	8004082 <DMA_CheckFifoParam+0x5a>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d856      	bhi.n	80040f6 <DMA_CheckFifoParam+0xce>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <DMA_CheckFifoParam+0x28>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004061 	.word	0x08004061
 8004054:	08004073 	.word	0x08004073
 8004058:	08004061 	.word	0x08004061
 800405c:	080040f7 	.word	0x080040f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d046      	beq.n	80040fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004070:	e043      	b.n	80040fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800407a:	d140      	bne.n	80040fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004080:	e03d      	b.n	80040fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408a:	d121      	bne.n	80040d0 <DMA_CheckFifoParam+0xa8>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d837      	bhi.n	8004102 <DMA_CheckFifoParam+0xda>
 8004092:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <DMA_CheckFifoParam+0x70>)
 8004094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004098:	080040a9 	.word	0x080040a9
 800409c:	080040af 	.word	0x080040af
 80040a0:	080040a9 	.word	0x080040a9
 80040a4:	080040c1 	.word	0x080040c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      break;
 80040ac:	e030      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d025      	beq.n	8004106 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040be:	e022      	b.n	8004106 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040c8:	d11f      	bne.n	800410a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040ce:	e01c      	b.n	800410a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d903      	bls.n	80040de <DMA_CheckFifoParam+0xb6>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d003      	beq.n	80040e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040dc:	e018      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
      break;
 80040e2:	e015      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00e      	beq.n	800410e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      break;
 80040f4:	e00b      	b.n	800410e <DMA_CheckFifoParam+0xe6>
      break;
 80040f6:	bf00      	nop
 80040f8:	e00a      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 80040fa:	bf00      	nop
 80040fc:	e008      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 80040fe:	bf00      	nop
 8004100:	e006      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 8004102:	bf00      	nop
 8004104:	e004      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;   
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 800410e:	bf00      	nop
    }
  } 
  
  return status; 
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop

08004120 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e03b      	b.n	80041aa <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fc feec 	bl	8000f24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	f023 0107 	bic.w	r1, r3, #7
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800418a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68d1      	ldr	r1, [r2, #12]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	430b      	orrs	r3, r1
 8004198:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	af02      	add	r7, sp, #8
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_DMA2D_Start+0x1c>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e018      	b.n	8004200 <HAL_DMA2D_Start+0x4e>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fa99 	bl	8004720 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0201 	orr.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d056      	beq.n	80042d2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004224:	f7ff fc8a 	bl	8003b3c <HAL_GetTick>
 8004228:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800422a:	e04b      	b.n	80042c4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800423a:	2b00      	cmp	r3, #0
 800423c:	d023      	beq.n	8004286 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	f043 0202 	orr.w	r2, r3, #2
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	f043 0201 	orr.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2221      	movs	r2, #33	; 0x21
 8004270:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2204      	movs	r2, #4
 8004276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0a5      	b.n	80043d2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d01a      	beq.n	80042c4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800428e:	f7ff fc55 	bl	8003b3c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <HAL_DMA2D_PollForTransfer+0x9c>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10f      	bne.n	80042c4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2203      	movs	r2, #3
 80042b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e086      	b.n	80043d2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ac      	beq.n	800422c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d061      	beq.n	80043b8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80042f4:	f7ff fc22 	bl	8003b3c <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80042fa:	e056      	b.n	80043aa <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800430a:	2b00      	cmp	r3, #0
 800430c:	d02e      	beq.n	800436c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	f043 0204 	orr.w	r2, r3, #4
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	f043 0202 	orr.w	r2, r3, #2
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	f043 0201 	orr.w	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2229      	movs	r2, #41	; 0x29
 8004356:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2204      	movs	r2, #4
 800435c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e032      	b.n	80043d2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d01a      	beq.n	80043aa <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004374:	f7ff fbe2 	bl	8003b3c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d302      	bcc.n	800438a <HAL_DMA2D_PollForTransfer+0x182>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10f      	bne.n	80043aa <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	f043 0220 	orr.w	r2, r3, #32
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2203      	movs	r2, #3
 800439a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e013      	b.n	80043d2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0a1      	beq.n	80042fc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2212      	movs	r2, #18
 80043be:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d026      	beq.n	800444a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d021      	beq.n	800444a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004414:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	f043 0201 	orr.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2201      	movs	r2, #1
 8004428:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2204      	movs	r2, #4
 800442e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d026      	beq.n	80044a2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d021      	beq.n	80044a2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2220      	movs	r2, #32
 8004474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	f043 0202 	orr.w	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d026      	beq.n	80044fa <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d021      	beq.n	80044fa <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2208      	movs	r2, #8
 80044cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	f043 0204 	orr.w	r2, r3, #4
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2204      	movs	r2, #4
 80044de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00e      	beq.n	800452c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2204      	movs	r2, #4
 8004524:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f853 	bl	80045d2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d024      	beq.n	8004580 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01f      	beq.n	8004580 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800454e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2202      	movs	r2, #2
 8004556:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01f      	beq.n	80045ca <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01a      	beq.n	80045ca <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045a2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2210      	movs	r2, #16
 80045aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f80e 	bl	80045e6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_DMA2D_ConfigLayer+0x20>
 8004618:	2302      	movs	r3, #2
 800461a:	e079      	b.n	8004710 <HAL_DMA2D_ConfigLayer+0x114>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	3318      	adds	r3, #24
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004646:	4b35      	ldr	r3, [pc, #212]	; (800471c <HAL_DMA2D_ConfigLayer+0x120>)
 8004648:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b0a      	cmp	r3, #10
 8004650:	d003      	beq.n	800465a <HAL_DMA2D_ConfigLayer+0x5e>
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b09      	cmp	r3, #9
 8004658:	d107      	bne.n	800466a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e005      	b.n	8004676 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	061b      	lsls	r3, r3, #24
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d120      	bne.n	80046be <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	43db      	mvns	r3, r3
 8004686:	ea02 0103 	and.w	r1, r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	430a      	orrs	r2, r1
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b0a      	cmp	r3, #10
 80046a4:	d003      	beq.n	80046ae <HAL_DMA2D_ConfigLayer+0xb2>
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b09      	cmp	r3, #9
 80046ac:	d127      	bne.n	80046fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28
 80046bc:	e01f      	b.n	80046fe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	ea02 0103 	and.w	r1, r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b0a      	cmp	r3, #10
 80046e6:	d003      	beq.n	80046f0 <HAL_DMA2D_ConfigLayer+0xf4>
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b09      	cmp	r3, #9
 80046ee:	d106      	bne.n	80046fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80046fc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	ff03000f 	.word	0xff03000f

08004720 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004720:	b480      	push	{r7}
 8004722:	b08b      	sub	sp, #44	; 0x2c
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004734:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	041a      	lsls	r2, r3, #16
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	431a      	orrs	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004758:	d174      	bne.n	8004844 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004760:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004768:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004770:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d108      	bne.n	8004792 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	431a      	orrs	r2, r3
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	4313      	orrs	r3, r2
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	e053      	b.n	800483a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d106      	bne.n	80047a8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4313      	orrs	r3, r2
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
 80047a6:	e048      	b.n	800483a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d111      	bne.n	80047d4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	0cdb      	lsrs	r3, r3, #19
 80047b4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	0a9b      	lsrs	r3, r3, #10
 80047ba:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	08db      	lsrs	r3, r3, #3
 80047c0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	02db      	lsls	r3, r3, #11
 80047ca:	4313      	orrs	r3, r2
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	e032      	b.n	800483a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d117      	bne.n	800480c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	0fdb      	lsrs	r3, r3, #31
 80047e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	0cdb      	lsrs	r3, r3, #19
 80047e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	0adb      	lsrs	r3, r3, #11
 80047ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	029b      	lsls	r3, r3, #10
 80047fc:	431a      	orrs	r2, r3
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	03db      	lsls	r3, r3, #15
 8004802:	4313      	orrs	r3, r2
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	e016      	b.n	800483a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	0f1b      	lsrs	r3, r3, #28
 8004810:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	0d1b      	lsrs	r3, r3, #20
 8004816:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	0b1b      	lsrs	r3, r3, #12
 800481c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	011a      	lsls	r2, r3, #4
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	431a      	orrs	r2, r3
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	4313      	orrs	r3, r2
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004842:	e003      	b.n	800484c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	60da      	str	r2, [r3, #12]
}
 800484c:	bf00      	nop
 800484e:	372c      	adds	r7, #44	; 0x2c
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	; 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	e177      	b.n	8004b64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004874:	2201      	movs	r2, #1
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4013      	ands	r3, r2
 8004886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	429a      	cmp	r2, r3
 800488e:	f040 8166 	bne.w	8004b5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d00b      	beq.n	80048b2 <HAL_GPIO_Init+0x5a>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d007      	beq.n	80048b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048a6:	2b11      	cmp	r3, #17
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b12      	cmp	r3, #18
 80048b0:	d130      	bne.n	8004914 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	2203      	movs	r2, #3
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048e8:	2201      	movs	r2, #1
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 0201 	and.w	r2, r3, #1
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	2203      	movs	r2, #3
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0xfc>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b12      	cmp	r3, #18
 8004952:	d123      	bne.n	800499c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	08da      	lsrs	r2, r3, #3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3208      	adds	r2, #8
 800495c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	220f      	movs	r2, #15
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	08da      	lsrs	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3208      	adds	r2, #8
 8004996:	69b9      	ldr	r1, [r7, #24]
 8004998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	2203      	movs	r2, #3
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	43db      	mvns	r3, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4013      	ands	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 0203 	and.w	r2, r3, #3
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80c0 	beq.w	8004b5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	4b66      	ldr	r3, [pc, #408]	; (8004b7c <HAL_GPIO_Init+0x324>)
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	4a65      	ldr	r2, [pc, #404]	; (8004b7c <HAL_GPIO_Init+0x324>)
 80049e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049ec:	6453      	str	r3, [r2, #68]	; 0x44
 80049ee:	4b63      	ldr	r3, [pc, #396]	; (8004b7c <HAL_GPIO_Init+0x324>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049fa:	4a61      	ldr	r2, [pc, #388]	; (8004b80 <HAL_GPIO_Init+0x328>)
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	089b      	lsrs	r3, r3, #2
 8004a00:	3302      	adds	r3, #2
 8004a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	220f      	movs	r2, #15
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43db      	mvns	r3, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <HAL_GPIO_Init+0x32c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d037      	beq.n	8004a96 <HAL_GPIO_Init+0x23e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a57      	ldr	r2, [pc, #348]	; (8004b88 <HAL_GPIO_Init+0x330>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d031      	beq.n	8004a92 <HAL_GPIO_Init+0x23a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a56      	ldr	r2, [pc, #344]	; (8004b8c <HAL_GPIO_Init+0x334>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d02b      	beq.n	8004a8e <HAL_GPIO_Init+0x236>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a55      	ldr	r2, [pc, #340]	; (8004b90 <HAL_GPIO_Init+0x338>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d025      	beq.n	8004a8a <HAL_GPIO_Init+0x232>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a54      	ldr	r2, [pc, #336]	; (8004b94 <HAL_GPIO_Init+0x33c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01f      	beq.n	8004a86 <HAL_GPIO_Init+0x22e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a53      	ldr	r2, [pc, #332]	; (8004b98 <HAL_GPIO_Init+0x340>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d019      	beq.n	8004a82 <HAL_GPIO_Init+0x22a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a52      	ldr	r2, [pc, #328]	; (8004b9c <HAL_GPIO_Init+0x344>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <HAL_GPIO_Init+0x226>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a51      	ldr	r2, [pc, #324]	; (8004ba0 <HAL_GPIO_Init+0x348>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00d      	beq.n	8004a7a <HAL_GPIO_Init+0x222>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a50      	ldr	r2, [pc, #320]	; (8004ba4 <HAL_GPIO_Init+0x34c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <HAL_GPIO_Init+0x21e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a4f      	ldr	r2, [pc, #316]	; (8004ba8 <HAL_GPIO_Init+0x350>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d101      	bne.n	8004a72 <HAL_GPIO_Init+0x21a>
 8004a6e:	2309      	movs	r3, #9
 8004a70:	e012      	b.n	8004a98 <HAL_GPIO_Init+0x240>
 8004a72:	230a      	movs	r3, #10
 8004a74:	e010      	b.n	8004a98 <HAL_GPIO_Init+0x240>
 8004a76:	2308      	movs	r3, #8
 8004a78:	e00e      	b.n	8004a98 <HAL_GPIO_Init+0x240>
 8004a7a:	2307      	movs	r3, #7
 8004a7c:	e00c      	b.n	8004a98 <HAL_GPIO_Init+0x240>
 8004a7e:	2306      	movs	r3, #6
 8004a80:	e00a      	b.n	8004a98 <HAL_GPIO_Init+0x240>
 8004a82:	2305      	movs	r3, #5
 8004a84:	e008      	b.n	8004a98 <HAL_GPIO_Init+0x240>
 8004a86:	2304      	movs	r3, #4
 8004a88:	e006      	b.n	8004a98 <HAL_GPIO_Init+0x240>
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e004      	b.n	8004a98 <HAL_GPIO_Init+0x240>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e002      	b.n	8004a98 <HAL_GPIO_Init+0x240>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <HAL_GPIO_Init+0x240>
 8004a96:	2300      	movs	r3, #0
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	f002 0203 	and.w	r2, r2, #3
 8004a9e:	0092      	lsls	r2, r2, #2
 8004aa0:	4093      	lsls	r3, r2
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004aa8:	4935      	ldr	r1, [pc, #212]	; (8004b80 <HAL_GPIO_Init+0x328>)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	3302      	adds	r3, #2
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ab6:	4b3d      	ldr	r3, [pc, #244]	; (8004bac <HAL_GPIO_Init+0x354>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ada:	4a34      	ldr	r2, [pc, #208]	; (8004bac <HAL_GPIO_Init+0x354>)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ae0:	4b32      	ldr	r3, [pc, #200]	; (8004bac <HAL_GPIO_Init+0x354>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b04:	4a29      	ldr	r2, [pc, #164]	; (8004bac <HAL_GPIO_Init+0x354>)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b0a:	4b28      	ldr	r3, [pc, #160]	; (8004bac <HAL_GPIO_Init+0x354>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	43db      	mvns	r3, r3
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4013      	ands	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b2e:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <HAL_GPIO_Init+0x354>)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b34:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <HAL_GPIO_Init+0x354>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4013      	ands	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b58:	4a14      	ldr	r2, [pc, #80]	; (8004bac <HAL_GPIO_Init+0x354>)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	3301      	adds	r3, #1
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b0f      	cmp	r3, #15
 8004b68:	f67f ae84 	bls.w	8004874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	3724      	adds	r7, #36	; 0x24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	40013800 	.word	0x40013800
 8004b84:	40020000 	.word	0x40020000
 8004b88:	40020400 	.word	0x40020400
 8004b8c:	40020800 	.word	0x40020800
 8004b90:	40020c00 	.word	0x40020c00
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40021400 	.word	0x40021400
 8004b9c:	40021800 	.word	0x40021800
 8004ba0:	40021c00 	.word	0x40021c00
 8004ba4:	40022000 	.word	0x40022000
 8004ba8:	40022400 	.word	0x40022400
 8004bac:	40013c00 	.word	0x40013c00

08004bb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	e0d9      	b.n	8004d80 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bcc:	2201      	movs	r2, #1
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	f040 80c9 	bne.w	8004d7a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004be8:	4a6b      	ldr	r2, [pc, #428]	; (8004d98 <HAL_GPIO_DeInit+0x1e8>)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	089b      	lsrs	r3, r3, #2
 8004bee:	3302      	adds	r3, #2
 8004bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	220f      	movs	r2, #15
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	4013      	ands	r3, r2
 8004c08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a63      	ldr	r2, [pc, #396]	; (8004d9c <HAL_GPIO_DeInit+0x1ec>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d037      	beq.n	8004c82 <HAL_GPIO_DeInit+0xd2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a62      	ldr	r2, [pc, #392]	; (8004da0 <HAL_GPIO_DeInit+0x1f0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d031      	beq.n	8004c7e <HAL_GPIO_DeInit+0xce>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a61      	ldr	r2, [pc, #388]	; (8004da4 <HAL_GPIO_DeInit+0x1f4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d02b      	beq.n	8004c7a <HAL_GPIO_DeInit+0xca>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a60      	ldr	r2, [pc, #384]	; (8004da8 <HAL_GPIO_DeInit+0x1f8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d025      	beq.n	8004c76 <HAL_GPIO_DeInit+0xc6>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a5f      	ldr	r2, [pc, #380]	; (8004dac <HAL_GPIO_DeInit+0x1fc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01f      	beq.n	8004c72 <HAL_GPIO_DeInit+0xc2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a5e      	ldr	r2, [pc, #376]	; (8004db0 <HAL_GPIO_DeInit+0x200>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d019      	beq.n	8004c6e <HAL_GPIO_DeInit+0xbe>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a5d      	ldr	r2, [pc, #372]	; (8004db4 <HAL_GPIO_DeInit+0x204>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <HAL_GPIO_DeInit+0xba>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a5c      	ldr	r2, [pc, #368]	; (8004db8 <HAL_GPIO_DeInit+0x208>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00d      	beq.n	8004c66 <HAL_GPIO_DeInit+0xb6>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a5b      	ldr	r2, [pc, #364]	; (8004dbc <HAL_GPIO_DeInit+0x20c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d007      	beq.n	8004c62 <HAL_GPIO_DeInit+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a5a      	ldr	r2, [pc, #360]	; (8004dc0 <HAL_GPIO_DeInit+0x210>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d101      	bne.n	8004c5e <HAL_GPIO_DeInit+0xae>
 8004c5a:	2309      	movs	r3, #9
 8004c5c:	e012      	b.n	8004c84 <HAL_GPIO_DeInit+0xd4>
 8004c5e:	230a      	movs	r3, #10
 8004c60:	e010      	b.n	8004c84 <HAL_GPIO_DeInit+0xd4>
 8004c62:	2308      	movs	r3, #8
 8004c64:	e00e      	b.n	8004c84 <HAL_GPIO_DeInit+0xd4>
 8004c66:	2307      	movs	r3, #7
 8004c68:	e00c      	b.n	8004c84 <HAL_GPIO_DeInit+0xd4>
 8004c6a:	2306      	movs	r3, #6
 8004c6c:	e00a      	b.n	8004c84 <HAL_GPIO_DeInit+0xd4>
 8004c6e:	2305      	movs	r3, #5
 8004c70:	e008      	b.n	8004c84 <HAL_GPIO_DeInit+0xd4>
 8004c72:	2304      	movs	r3, #4
 8004c74:	e006      	b.n	8004c84 <HAL_GPIO_DeInit+0xd4>
 8004c76:	2303      	movs	r3, #3
 8004c78:	e004      	b.n	8004c84 <HAL_GPIO_DeInit+0xd4>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e002      	b.n	8004c84 <HAL_GPIO_DeInit+0xd4>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <HAL_GPIO_DeInit+0xd4>
 8004c82:	2300      	movs	r3, #0
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	f002 0203 	and.w	r2, r2, #3
 8004c8a:	0092      	lsls	r2, r2, #2
 8004c8c:	4093      	lsls	r3, r2
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d132      	bne.n	8004cfa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004c94:	4b4b      	ldr	r3, [pc, #300]	; (8004dc4 <HAL_GPIO_DeInit+0x214>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	4949      	ldr	r1, [pc, #292]	; (8004dc4 <HAL_GPIO_DeInit+0x214>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ca2:	4b48      	ldr	r3, [pc, #288]	; (8004dc4 <HAL_GPIO_DeInit+0x214>)
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	4946      	ldr	r1, [pc, #280]	; (8004dc4 <HAL_GPIO_DeInit+0x214>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004cb0:	4b44      	ldr	r3, [pc, #272]	; (8004dc4 <HAL_GPIO_DeInit+0x214>)
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	4942      	ldr	r1, [pc, #264]	; (8004dc4 <HAL_GPIO_DeInit+0x214>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004cbe:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <HAL_GPIO_DeInit+0x214>)
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	493f      	ldr	r1, [pc, #252]	; (8004dc4 <HAL_GPIO_DeInit+0x214>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004cdc:	4a2e      	ldr	r2, [pc, #184]	; (8004d98 <HAL_GPIO_DeInit+0x1e8>)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	089b      	lsrs	r3, r3, #2
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	43da      	mvns	r2, r3
 8004cec:	482a      	ldr	r0, [pc, #168]	; (8004d98 <HAL_GPIO_DeInit+0x1e8>)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	089b      	lsrs	r3, r3, #2
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	2103      	movs	r1, #3
 8004d04:	fa01 f303 	lsl.w	r3, r1, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	08da      	lsrs	r2, r3, #3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3208      	adds	r2, #8
 8004d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	220f      	movs	r2, #15
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	08d2      	lsrs	r2, r2, #3
 8004d30:	4019      	ands	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3208      	adds	r2, #8
 8004d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	2103      	movs	r1, #3
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	2101      	movs	r1, #1
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	401a      	ands	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	2103      	movs	r1, #3
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	401a      	ands	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2b0f      	cmp	r3, #15
 8004d84:	f67f af22 	bls.w	8004bcc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40013800 	.word	0x40013800
 8004d9c:	40020000 	.word	0x40020000
 8004da0:	40020400 	.word	0x40020400
 8004da4:	40020800 	.word	0x40020800
 8004da8:	40020c00 	.word	0x40020c00
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40021400 	.word	0x40021400
 8004db4:	40021800 	.word	0x40021800
 8004db8:	40021c00 	.word	0x40021c00
 8004dbc:	40022000 	.word	0x40022000
 8004dc0:	40022400 	.word	0x40022400
 8004dc4:	40013c00 	.word	0x40013c00

08004dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	807b      	strh	r3, [r7, #2]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dd8:	787b      	ldrb	r3, [r7, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dde:	887a      	ldrh	r2, [r7, #2]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004de4:	e003      	b.n	8004dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004de6:	887b      	ldrh	r3, [r7, #2]
 8004de8:	041a      	lsls	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	619a      	str	r2, [r3, #24]
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e12b      	b.n	8005066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc fb34 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2224      	movs	r2, #36	; 0x24
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e60:	f002 f95a 	bl	8007118 <HAL_RCC_GetPCLK1Freq>
 8004e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4a81      	ldr	r2, [pc, #516]	; (8005070 <HAL_I2C_Init+0x274>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d807      	bhi.n	8004e80 <HAL_I2C_Init+0x84>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a80      	ldr	r2, [pc, #512]	; (8005074 <HAL_I2C_Init+0x278>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	bf94      	ite	ls
 8004e78:	2301      	movls	r3, #1
 8004e7a:	2300      	movhi	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e006      	b.n	8004e8e <HAL_I2C_Init+0x92>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a7d      	ldr	r2, [pc, #500]	; (8005078 <HAL_I2C_Init+0x27c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	bf94      	ite	ls
 8004e88:	2301      	movls	r3, #1
 8004e8a:	2300      	movhi	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e0e7      	b.n	8005066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a78      	ldr	r2, [pc, #480]	; (800507c <HAL_I2C_Init+0x280>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	0c9b      	lsrs	r3, r3, #18
 8004ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4a6a      	ldr	r2, [pc, #424]	; (8005070 <HAL_I2C_Init+0x274>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d802      	bhi.n	8004ed0 <HAL_I2C_Init+0xd4>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	e009      	b.n	8004ee4 <HAL_I2C_Init+0xe8>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	4a69      	ldr	r2, [pc, #420]	; (8005080 <HAL_I2C_Init+0x284>)
 8004edc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee0:	099b      	lsrs	r3, r3, #6
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ef6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	495c      	ldr	r1, [pc, #368]	; (8005070 <HAL_I2C_Init+0x274>)
 8004f00:	428b      	cmp	r3, r1
 8004f02:	d819      	bhi.n	8004f38 <HAL_I2C_Init+0x13c>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1e59      	subs	r1, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f12:	1c59      	adds	r1, r3, #1
 8004f14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f18:	400b      	ands	r3, r1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <HAL_I2C_Init+0x138>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1e59      	subs	r1, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f32:	e051      	b.n	8004fd8 <HAL_I2C_Init+0x1dc>
 8004f34:	2304      	movs	r3, #4
 8004f36:	e04f      	b.n	8004fd8 <HAL_I2C_Init+0x1dc>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d111      	bne.n	8004f64 <HAL_I2C_Init+0x168>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1e58      	subs	r0, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6859      	ldr	r1, [r3, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	440b      	add	r3, r1
 8004f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f52:	3301      	adds	r3, #1
 8004f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e012      	b.n	8004f8a <HAL_I2C_Init+0x18e>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	1e58      	subs	r0, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6859      	ldr	r1, [r3, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	0099      	lsls	r1, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_I2C_Init+0x196>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e022      	b.n	8004fd8 <HAL_I2C_Init+0x1dc>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10e      	bne.n	8004fb8 <HAL_I2C_Init+0x1bc>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1e58      	subs	r0, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6859      	ldr	r1, [r3, #4]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	440b      	add	r3, r1
 8004fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fac:	3301      	adds	r3, #1
 8004fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb6:	e00f      	b.n	8004fd8 <HAL_I2C_Init+0x1dc>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1e58      	subs	r0, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6859      	ldr	r1, [r3, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	0099      	lsls	r1, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fce:	3301      	adds	r3, #1
 8004fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	6809      	ldr	r1, [r1, #0]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6911      	ldr	r1, [r2, #16]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	68d2      	ldr	r2, [r2, #12]
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	430b      	orrs	r3, r1
 800501a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695a      	ldr	r2, [r3, #20]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	000186a0 	.word	0x000186a0
 8005074:	001e847f 	.word	0x001e847f
 8005078:	003d08ff 	.word	0x003d08ff
 800507c:	431bde83 	.word	0x431bde83
 8005080:	10624dd3 	.word	0x10624dd3

08005084 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	4603      	mov	r3, r0
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	460b      	mov	r3, r1
 8005098:	813b      	strh	r3, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800509e:	f7fe fd4d 	bl	8003b3c <HAL_GetTick>
 80050a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	f040 80d9 	bne.w	8005264 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	2319      	movs	r3, #25
 80050b8:	2201      	movs	r2, #1
 80050ba:	496d      	ldr	r1, [pc, #436]	; (8005270 <HAL_I2C_Mem_Write+0x1ec>)
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fdad 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
 80050ca:	e0cc      	b.n	8005266 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_I2C_Mem_Write+0x56>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e0c5      	b.n	8005266 <HAL_I2C_Mem_Write+0x1e2>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d007      	beq.n	8005100 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800510e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2221      	movs	r2, #33	; 0x21
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2240      	movs	r2, #64	; 0x40
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4a4d      	ldr	r2, [pc, #308]	; (8005274 <HAL_I2C_Mem_Write+0x1f0>)
 8005140:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005142:	88f8      	ldrh	r0, [r7, #6]
 8005144:	893a      	ldrh	r2, [r7, #8]
 8005146:	8979      	ldrh	r1, [r7, #10]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	4603      	mov	r3, r0
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fbe4 	bl	8005920 <I2C_RequestMemoryWrite>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d052      	beq.n	8005204 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e081      	b.n	8005266 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fe2e 	bl	8005dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2b04      	cmp	r3, #4
 8005178:	d107      	bne.n	800518a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005188:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e06b      	b.n	8005266 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	781a      	ldrb	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d11b      	bne.n	8005204 <HAL_I2C_Mem_Write+0x180>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d017      	beq.n	8005204 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1aa      	bne.n	8005162 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fe1a 	bl	8005e4a <I2C_WaitOnBTFFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00d      	beq.n	8005238 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	2b04      	cmp	r3, #4
 8005222:	d107      	bne.n	8005234 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e016      	b.n	8005266 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e000      	b.n	8005266 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005264:	2302      	movs	r3, #2
  }
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	00100002 	.word	0x00100002
 8005274:	ffff0000 	.word	0xffff0000

08005278 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	461a      	mov	r2, r3
 8005286:	4603      	mov	r3, r0
 8005288:	817b      	strh	r3, [r7, #10]
 800528a:	460b      	mov	r3, r1
 800528c:	813b      	strh	r3, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005292:	f7fe fc53 	bl	8003b3c <HAL_GetTick>
 8005296:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	f040 8208 	bne.w	80056b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	2319      	movs	r3, #25
 80052ac:	2201      	movs	r2, #1
 80052ae:	497b      	ldr	r1, [pc, #492]	; (800549c <HAL_I2C_Mem_Read+0x224>)
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fcb3 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
 80052be:	e1fb      	b.n	80056b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_I2C_Mem_Read+0x56>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e1f4      	b.n	80056b8 <HAL_I2C_Mem_Read+0x440>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d007      	beq.n	80052f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2222      	movs	r2, #34	; 0x22
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2240      	movs	r2, #64	; 0x40
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a5b      	ldr	r2, [pc, #364]	; (80054a0 <HAL_I2C_Mem_Read+0x228>)
 8005334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005336:	88f8      	ldrh	r0, [r7, #6]
 8005338:	893a      	ldrh	r2, [r7, #8]
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	4603      	mov	r3, r0
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fb80 	bl	8005a4c <I2C_RequestMemoryRead>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e1b0      	b.n	80056b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	d113      	bne.n	8005386 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535e:	2300      	movs	r3, #0
 8005360:	623b      	str	r3, [r7, #32]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	623b      	str	r3, [r7, #32]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e184      	b.n	8005690 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538a:	2b01      	cmp	r3, #1
 800538c:	d11b      	bne.n	80053c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800539e:	2300      	movs	r3, #0
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e164      	b.n	8005690 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d11b      	bne.n	8005406 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ee:	2300      	movs	r3, #0
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	e144      	b.n	8005690 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800541c:	e138      	b.n	8005690 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005422:	2b03      	cmp	r3, #3
 8005424:	f200 80f1 	bhi.w	800560a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542c:	2b01      	cmp	r3, #1
 800542e:	d123      	bne.n	8005478 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fd49 	bl	8005ecc <I2C_WaitOnRXNEFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e139      	b.n	80056b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005476:	e10b      	b.n	8005690 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547c:	2b02      	cmp	r3, #2
 800547e:	d14e      	bne.n	800551e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	2200      	movs	r2, #0
 8005488:	4906      	ldr	r1, [pc, #24]	; (80054a4 <HAL_I2C_Mem_Read+0x22c>)
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fbc6 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e10e      	b.n	80056b8 <HAL_I2C_Mem_Read+0x440>
 800549a:	bf00      	nop
 800549c:	00100002 	.word	0x00100002
 80054a0:	ffff0000 	.word	0xffff0000
 80054a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800551c:	e0b8      	b.n	8005690 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	2200      	movs	r2, #0
 8005526:	4966      	ldr	r1, [pc, #408]	; (80056c0 <HAL_I2C_Mem_Read+0x448>)
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fb77 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0bf      	b.n	80056b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2200      	movs	r2, #0
 8005582:	494f      	ldr	r1, [pc, #316]	; (80056c0 <HAL_I2C_Mem_Read+0x448>)
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fb49 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e091      	b.n	80056b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005608:	e042      	b.n	8005690 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 fc5c 	bl	8005ecc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e04c      	b.n	80056b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b04      	cmp	r3, #4
 800565c:	d118      	bne.n	8005690 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005694:	2b00      	cmp	r3, #0
 8005696:	f47f aec2 	bne.w	800541e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e000      	b.n	80056b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3728      	adds	r7, #40	; 0x28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	00010004 	.word	0x00010004

080056c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	; 0x28
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	460b      	mov	r3, r1
 80056d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80056d4:	f7fe fa32 	bl	8003b3c <HAL_GetTick>
 80056d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80056da:	2301      	movs	r3, #1
 80056dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	f040 8111 	bne.w	800590e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	2319      	movs	r3, #25
 80056f2:	2201      	movs	r2, #1
 80056f4:	4988      	ldr	r1, [pc, #544]	; (8005918 <HAL_I2C_IsDeviceReady+0x254>)
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fa90 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005702:	2302      	movs	r3, #2
 8005704:	e104      	b.n	8005910 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_I2C_IsDeviceReady+0x50>
 8005710:	2302      	movs	r3, #2
 8005712:	e0fd      	b.n	8005910 <HAL_I2C_IsDeviceReady+0x24c>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d007      	beq.n	800573a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005748:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2224      	movs	r2, #36	; 0x24
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a70      	ldr	r2, [pc, #448]	; (800591c <HAL_I2C_IsDeviceReady+0x258>)
 800575c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800576c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2200      	movs	r2, #0
 8005776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fa4e 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00d      	beq.n	80057a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005794:	d103      	bne.n	800579e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e0b6      	b.n	8005910 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057a2:	897b      	ldrh	r3, [r7, #10]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80057b2:	f7fe f9c3 	bl	8003b3c <HAL_GetTick>
 80057b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057dc:	bf0c      	ite	eq
 80057de:	2301      	moveq	r3, #1
 80057e0:	2300      	movne	r3, #0
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057e6:	e025      	b.n	8005834 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057e8:	f7fe f9a8 	bl	8003b3c <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d302      	bcc.n	80057fe <HAL_I2C_IsDeviceReady+0x13a>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	22a0      	movs	r2, #160	; 0xa0
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b02      	cmp	r3, #2
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582a:	bf0c      	ite	eq
 800582c:	2301      	moveq	r3, #1
 800582e:	2300      	movne	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2ba0      	cmp	r3, #160	; 0xa0
 800583e:	d005      	beq.n	800584c <HAL_I2C_IsDeviceReady+0x188>
 8005840:	7dfb      	ldrb	r3, [r7, #23]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <HAL_I2C_IsDeviceReady+0x188>
 8005846:	7dbb      	ldrb	r3, [r7, #22]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0cd      	beq.n	80057e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b02      	cmp	r3, #2
 8005860:	d129      	bne.n	80058b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005870:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005872:	2300      	movs	r3, #0
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2319      	movs	r3, #25
 800588e:	2201      	movs	r2, #1
 8005890:	4921      	ldr	r1, [pc, #132]	; (8005918 <HAL_I2C_IsDeviceReady+0x254>)
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f9c2 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e036      	b.n	8005910 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e02c      	b.n	8005910 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2319      	movs	r3, #25
 80058d6:	2201      	movs	r2, #1
 80058d8:	490f      	ldr	r1, [pc, #60]	; (8005918 <HAL_I2C_IsDeviceReady+0x254>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f99e 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e012      	b.n	8005910 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	3301      	adds	r3, #1
 80058ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	f4ff af32 	bcc.w	800575e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800590e:	2302      	movs	r3, #2
  }
}
 8005910:	4618      	mov	r0, r3
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	00100002 	.word	0x00100002
 800591c:	ffff0000 	.word	0xffff0000

08005920 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	461a      	mov	r2, r3
 800592e:	4603      	mov	r3, r0
 8005930:	817b      	strh	r3, [r7, #10]
 8005932:	460b      	mov	r3, r1
 8005934:	813b      	strh	r3, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2200      	movs	r2, #0
 8005952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f960 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005970:	d103      	bne.n	800597a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e05f      	b.n	8005a3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800597e:	897b      	ldrh	r3, [r7, #10]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800598c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	6a3a      	ldr	r2, [r7, #32]
 8005992:	492d      	ldr	r1, [pc, #180]	; (8005a48 <I2C_RequestMemoryWrite+0x128>)
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f998 	bl	8005cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e04c      	b.n	8005a3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	6a39      	ldr	r1, [r7, #32]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 fa02 	bl	8005dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d107      	bne.n	80059e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e02b      	b.n	8005a3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d105      	bne.n	80059f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ec:	893b      	ldrh	r3, [r7, #8]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	e021      	b.n	8005a3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059f8:	893b      	ldrh	r3, [r7, #8]
 80059fa:	0a1b      	lsrs	r3, r3, #8
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a08:	6a39      	ldr	r1, [r7, #32]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f9dc 	bl	8005dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00d      	beq.n	8005a32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d107      	bne.n	8005a2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e005      	b.n	8005a3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a32:	893b      	ldrh	r3, [r7, #8]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	00010002 	.word	0x00010002

08005a4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	4608      	mov	r0, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	817b      	strh	r3, [r7, #10]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	813b      	strh	r3, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f8c2 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aac:	d103      	bne.n	8005ab6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e0aa      	b.n	8005c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aba:	897b      	ldrh	r3, [r7, #10]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ac8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	6a3a      	ldr	r2, [r7, #32]
 8005ace:	4952      	ldr	r1, [pc, #328]	; (8005c18 <I2C_RequestMemoryRead+0x1cc>)
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f8fa 	bl	8005cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e097      	b.n	8005c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af8:	6a39      	ldr	r1, [r7, #32]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f964 	bl	8005dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00d      	beq.n	8005b22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d107      	bne.n	8005b1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e076      	b.n	8005c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b28:	893b      	ldrh	r3, [r7, #8]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	611a      	str	r2, [r3, #16]
 8005b32:	e021      	b.n	8005b78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b34:	893b      	ldrh	r3, [r7, #8]
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b44:	6a39      	ldr	r1, [r7, #32]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f93e 	bl	8005dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d107      	bne.n	8005b6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e050      	b.n	8005c10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b6e:	893b      	ldrh	r3, [r7, #8]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7a:	6a39      	ldr	r1, [r7, #32]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f923 	bl	8005dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00d      	beq.n	8005ba4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d107      	bne.n	8005ba0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e035      	b.n	8005c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f82b 	bl	8005c1c <I2C_WaitOnFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00d      	beq.n	8005be8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bda:	d103      	bne.n	8005be4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e013      	b.n	8005c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005be8:	897b      	ldrh	r3, [r7, #10]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	6a3a      	ldr	r2, [r7, #32]
 8005bfc:	4906      	ldr	r1, [pc, #24]	; (8005c18 <I2C_RequestMemoryRead+0x1cc>)
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f863 	bl	8005cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	00010002 	.word	0x00010002

08005c1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c2c:	e025      	b.n	8005c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d021      	beq.n	8005c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c36:	f7fd ff81 	bl	8003b3c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d302      	bcc.n	8005c4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d116      	bne.n	8005c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f043 0220 	orr.w	r2, r3, #32
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e023      	b.n	8005cc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	0c1b      	lsrs	r3, r3, #16
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d10d      	bne.n	8005ca0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	43da      	mvns	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	bf0c      	ite	eq
 8005c96:	2301      	moveq	r3, #1
 8005c98:	2300      	movne	r3, #0
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	e00c      	b.n	8005cba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	43da      	mvns	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4013      	ands	r3, r2
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d0b6      	beq.n	8005c2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cd8:	e051      	b.n	8005d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce8:	d123      	bne.n	8005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f043 0204 	orr.w	r2, r3, #4
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e046      	b.n	8005dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d38:	d021      	beq.n	8005d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d3a:	f7fd feff 	bl	8003b3c <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d302      	bcc.n	8005d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d116      	bne.n	8005d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f043 0220 	orr.w	r2, r3, #32
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e020      	b.n	8005dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	0c1b      	lsrs	r3, r3, #16
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d10c      	bne.n	8005da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	43da      	mvns	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	bf14      	ite	ne
 8005d9a:	2301      	movne	r3, #1
 8005d9c:	2300      	moveq	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	e00b      	b.n	8005dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	43da      	mvns	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4013      	ands	r3, r2
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	bf14      	ite	ne
 8005db4:	2301      	movne	r3, #1
 8005db6:	2300      	moveq	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d18d      	bne.n	8005cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dd4:	e02d      	b.n	8005e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f8ce 	bl	8005f78 <I2C_IsAcknowledgeFailed>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e02d      	b.n	8005e42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d021      	beq.n	8005e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dee:	f7fd fea5 	bl	8003b3c <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d302      	bcc.n	8005e04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d116      	bne.n	8005e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f043 0220 	orr.w	r2, r3, #32
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e007      	b.n	8005e42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3c:	2b80      	cmp	r3, #128	; 0x80
 8005e3e:	d1ca      	bne.n	8005dd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e56:	e02d      	b.n	8005eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f88d 	bl	8005f78 <I2C_IsAcknowledgeFailed>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e02d      	b.n	8005ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d021      	beq.n	8005eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e70:	f7fd fe64 	bl	8003b3c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d302      	bcc.n	8005e86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d116      	bne.n	8005eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e007      	b.n	8005ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d1ca      	bne.n	8005e58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ed8:	e042      	b.n	8005f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d119      	bne.n	8005f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0210 	mvn.w	r2, #16
 8005ef0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e029      	b.n	8005f70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1c:	f7fd fe0e 	bl	8003b3c <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d302      	bcc.n	8005f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d116      	bne.n	8005f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	f043 0220 	orr.w	r2, r3, #32
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e007      	b.n	8005f70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d1b5      	bne.n	8005eda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8e:	d11b      	bne.n	8005fc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	f043 0204 	orr.w	r2, r3, #4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d129      	bne.n	8006040 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2224      	movs	r2, #36	; 0x24
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0210 	bic.w	r2, r2, #16
 8006012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	e000      	b.n	8006042 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006040:	2302      	movs	r3, #2
  }
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b20      	cmp	r3, #32
 8006066:	d12a      	bne.n	80060be <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2224      	movs	r2, #36	; 0x24
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006088:	89fb      	ldrh	r3, [r7, #14]
 800608a:	f023 030f 	bic.w	r3, r3, #15
 800608e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	b29a      	uxth	r2, r3
 8006094:	89fb      	ldrh	r3, [r7, #14]
 8006096:	4313      	orrs	r3, r2
 8006098:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	89fa      	ldrh	r2, [r7, #14]
 80060a0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e000      	b.n	80060c0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80060be:	2302      	movs	r3, #2
  }
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e0bf      	b.n	800625e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fb fab6 	bl	8001664 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800610e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6999      	ldr	r1, [r3, #24]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006124:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4b4a      	ldr	r3, [pc, #296]	; (8006268 <HAL_LTDC_Init+0x19c>)
 8006140:	400b      	ands	r3, r1
 8006142:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6899      	ldr	r1, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68d9      	ldr	r1, [r3, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b3e      	ldr	r3, [pc, #248]	; (8006268 <HAL_LTDC_Init+0x19c>)
 800616e:	400b      	ands	r3, r1
 8006170:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68d9      	ldr	r1, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6919      	ldr	r1, [r3, #16]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	4b33      	ldr	r3, [pc, #204]	; (8006268 <HAL_LTDC_Init+0x19c>)
 800619c:	400b      	ands	r3, r1
 800619e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6919      	ldr	r1, [r3, #16]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6959      	ldr	r1, [r3, #20]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <HAL_LTDC_Init+0x19c>)
 80061ca:	400b      	ands	r3, r1
 80061cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6959      	ldr	r1, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800620e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0206 	orr.w	r2, r2, #6
 800623a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	f000f800 	.word	0xf000f800

0800626c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b00      	cmp	r3, #0
 800628c:	d023      	beq.n	80062d6 <HAL_LTDC_IRQHandler+0x6a>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01e      	beq.n	80062d6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0204 	bic.w	r2, r2, #4
 80062a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2204      	movs	r2, #4
 80062ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062b6:	f043 0201 	orr.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2204      	movs	r2, #4
 80062c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f86f 	bl	80063b4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d023      	beq.n	8006328 <HAL_LTDC_IRQHandler+0xbc>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01e      	beq.n	8006328 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0202 	bic.w	r2, r2, #2
 80062f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2202      	movs	r2, #2
 8006300:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006308:	f043 0202 	orr.w	r2, r3, #2
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2204      	movs	r2, #4
 8006316:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f846 	bl	80063b4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01b      	beq.n	800636a <HAL_LTDC_IRQHandler+0xfe>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d016      	beq.n	800636a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0201 	bic.w	r2, r2, #1
 800634a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2201      	movs	r2, #1
 8006352:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f82f 	bl	80063c8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01b      	beq.n	80063ac <HAL_LTDC_IRQHandler+0x140>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d016      	beq.n	80063ac <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0208 	bic.w	r2, r2, #8
 800638c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2208      	movs	r2, #8
 8006394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f818 	bl	80063dc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063f0:	b5b0      	push	{r4, r5, r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <HAL_LTDC_ConfigLayer+0x1a>
 8006406:	2302      	movs	r3, #2
 8006408:	e02c      	b.n	8006464 <HAL_LTDC_ConfigLayer+0x74>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2134      	movs	r1, #52	; 0x34
 8006420:	fb01 f303 	mul.w	r3, r1, r3
 8006424:	4413      	add	r3, r2
 8006426:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4614      	mov	r4, r2
 800642e:	461d      	mov	r5, r3
 8006430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800643a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f83b 	bl	80064c0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2201      	movs	r2, #1
 8006450:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bdb0      	pop	{r4, r5, r7, pc}

0800646c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_LTDC_EnableDither+0x16>
 800647e:	2302      	movs	r3, #2
 8006480:	e016      	b.n	80064b0 <HAL_LTDC_EnableDither+0x44>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006492:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <HAL_LTDC_EnableDither+0x50>)
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	4a09      	ldr	r2, [pc, #36]	; (80064bc <HAL_LTDC_EnableDither+0x50>)
 8006498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800649c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40016800 	.word	0x40016800

080064c0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b089      	sub	sp, #36	; 0x24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	0c1b      	lsrs	r3, r3, #16
 80064d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064dc:	4413      	add	r3, r2
 80064de:	041b      	lsls	r3, r3, #16
 80064e0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	01db      	lsls	r3, r3, #7
 80064ec:	4413      	add	r3, r2
 80064ee:	3384      	adds	r3, #132	; 0x84
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	4611      	mov	r1, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	01d2      	lsls	r2, r2, #7
 80064fc:	440a      	add	r2, r1
 80064fe:	3284      	adds	r2, #132	; 0x84
 8006500:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006504:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006516:	4413      	add	r3, r2
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4619      	mov	r1, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	01db      	lsls	r3, r3, #7
 8006524:	440b      	add	r3, r1
 8006526:	3384      	adds	r3, #132	; 0x84
 8006528:	4619      	mov	r1, r3
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4313      	orrs	r3, r2
 800652e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800653e:	4413      	add	r3, r2
 8006540:	041b      	lsls	r3, r3, #16
 8006542:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	01db      	lsls	r3, r3, #7
 800654e:	4413      	add	r3, r2
 8006550:	3384      	adds	r3, #132	; 0x84
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	4611      	mov	r1, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	01d2      	lsls	r2, r2, #7
 800655e:	440a      	add	r2, r1
 8006560:	3284      	adds	r2, #132	; 0x84
 8006562:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006566:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006576:	4413      	add	r3, r2
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4619      	mov	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	01db      	lsls	r3, r3, #7
 8006584:	440b      	add	r3, r1
 8006586:	3384      	adds	r3, #132	; 0x84
 8006588:	4619      	mov	r1, r3
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4313      	orrs	r3, r2
 800658e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	01db      	lsls	r3, r3, #7
 800659a:	4413      	add	r3, r2
 800659c:	3384      	adds	r3, #132	; 0x84
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	4611      	mov	r1, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	01d2      	lsls	r2, r2, #7
 80065aa:	440a      	add	r2, r1
 80065ac:	3284      	adds	r2, #132	; 0x84
 80065ae:	f023 0307 	bic.w	r3, r3, #7
 80065b2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	01db      	lsls	r3, r3, #7
 80065be:	4413      	add	r3, r2
 80065c0:	3384      	adds	r3, #132	; 0x84
 80065c2:	461a      	mov	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065da:	041b      	lsls	r3, r3, #16
 80065dc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	061b      	lsls	r3, r3, #24
 80065e4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	01db      	lsls	r3, r3, #7
 80065f0:	4413      	add	r3, r2
 80065f2:	3384      	adds	r3, #132	; 0x84
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	01db      	lsls	r3, r3, #7
 8006600:	4413      	add	r3, r2
 8006602:	3384      	adds	r3, #132	; 0x84
 8006604:	461a      	mov	r2, r3
 8006606:	2300      	movs	r3, #0
 8006608:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006610:	461a      	mov	r2, r3
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	431a      	orrs	r2, r3
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	431a      	orrs	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4619      	mov	r1, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	01db      	lsls	r3, r3, #7
 8006624:	440b      	add	r3, r1
 8006626:	3384      	adds	r3, #132	; 0x84
 8006628:	4619      	mov	r1, r3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	01db      	lsls	r3, r3, #7
 800663a:	4413      	add	r3, r2
 800663c:	3384      	adds	r3, #132	; 0x84
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	4611      	mov	r1, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	01d2      	lsls	r2, r2, #7
 800664a:	440a      	add	r2, r1
 800664c:	3284      	adds	r2, #132	; 0x84
 800664e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006652:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	01db      	lsls	r3, r3, #7
 800665e:	4413      	add	r3, r2
 8006660:	3384      	adds	r3, #132	; 0x84
 8006662:	461a      	mov	r2, r3
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	01db      	lsls	r3, r3, #7
 8006674:	4413      	add	r3, r2
 8006676:	3384      	adds	r3, #132	; 0x84
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	6812      	ldr	r2, [r2, #0]
 800667e:	4611      	mov	r1, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	01d2      	lsls	r2, r2, #7
 8006684:	440a      	add	r2, r1
 8006686:	3284      	adds	r2, #132	; 0x84
 8006688:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800668c:	f023 0307 	bic.w	r3, r3, #7
 8006690:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	69da      	ldr	r2, [r3, #28]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	6809      	ldr	r1, [r1, #0]
 800669e:	4608      	mov	r0, r1
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	01c9      	lsls	r1, r1, #7
 80066a4:	4401      	add	r1, r0
 80066a6:	3184      	adds	r1, #132	; 0x84
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	01db      	lsls	r3, r3, #7
 80066b6:	4413      	add	r3, r2
 80066b8:	3384      	adds	r3, #132	; 0x84
 80066ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	01db      	lsls	r3, r3, #7
 80066c6:	4413      	add	r3, r2
 80066c8:	3384      	adds	r3, #132	; 0x84
 80066ca:	461a      	mov	r2, r3
 80066cc:	2300      	movs	r3, #0
 80066ce:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	01db      	lsls	r3, r3, #7
 80066da:	4413      	add	r3, r2
 80066dc:	3384      	adds	r3, #132	; 0x84
 80066de:	461a      	mov	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80066ee:	2304      	movs	r3, #4
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	e01b      	b.n	800672c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d102      	bne.n	8006702 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80066fc:	2303      	movs	r3, #3
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	e014      	b.n	800672c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b04      	cmp	r3, #4
 8006708:	d00b      	beq.n	8006722 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800670e:	2b02      	cmp	r3, #2
 8006710:	d007      	beq.n	8006722 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006716:	2b03      	cmp	r3, #3
 8006718:	d003      	beq.n	8006722 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800671e:	2b07      	cmp	r3, #7
 8006720:	d102      	bne.n	8006728 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006722:	2302      	movs	r3, #2
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	e001      	b.n	800672c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006728:	2301      	movs	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	01db      	lsls	r3, r3, #7
 8006736:	4413      	add	r3, r2
 8006738:	3384      	adds	r3, #132	; 0x84
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	6812      	ldr	r2, [r2, #0]
 8006740:	4611      	mov	r1, r2
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	01d2      	lsls	r2, r2, #7
 8006746:	440a      	add	r2, r1
 8006748:	3284      	adds	r2, #132	; 0x84
 800674a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800674e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	fb02 f303 	mul.w	r3, r2, r3
 800675a:	041a      	lsls	r2, r3, #16
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6859      	ldr	r1, [r3, #4]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	1acb      	subs	r3, r1, r3
 8006766:	69f9      	ldr	r1, [r7, #28]
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	3303      	adds	r3, #3
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	6809      	ldr	r1, [r1, #0]
 8006772:	4608      	mov	r0, r1
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	01c9      	lsls	r1, r1, #7
 8006778:	4401      	add	r1, r0
 800677a:	3184      	adds	r1, #132	; 0x84
 800677c:	4313      	orrs	r3, r2
 800677e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	01db      	lsls	r3, r3, #7
 800678a:	4413      	add	r3, r2
 800678c:	3384      	adds	r3, #132	; 0x84
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	4611      	mov	r1, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	01d2      	lsls	r2, r2, #7
 800679a:	440a      	add	r2, r1
 800679c:	3284      	adds	r2, #132	; 0x84
 800679e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067a2:	f023 0307 	bic.w	r3, r3, #7
 80067a6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	01db      	lsls	r3, r3, #7
 80067b2:	4413      	add	r3, r2
 80067b4:	3384      	adds	r3, #132	; 0x84
 80067b6:	461a      	mov	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	01db      	lsls	r3, r3, #7
 80067c8:	4413      	add	r3, r2
 80067ca:	3384      	adds	r3, #132	; 0x84
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	6812      	ldr	r2, [r2, #0]
 80067d2:	4611      	mov	r1, r2
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	01d2      	lsls	r2, r2, #7
 80067d8:	440a      	add	r2, r1
 80067da:	3284      	adds	r2, #132	; 0x84
 80067dc:	f043 0301 	orr.w	r3, r3, #1
 80067e0:	6013      	str	r3, [r2, #0]
}
 80067e2:	bf00      	nop
 80067e4:	3724      	adds	r7, #36	; 0x24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
	...

080067f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	603b      	str	r3, [r7, #0]
 80067fe:	4b20      	ldr	r3, [pc, #128]	; (8006880 <HAL_PWREx_EnableOverDrive+0x90>)
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	4a1f      	ldr	r2, [pc, #124]	; (8006880 <HAL_PWREx_EnableOverDrive+0x90>)
 8006804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006808:	6413      	str	r3, [r2, #64]	; 0x40
 800680a:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <HAL_PWREx_EnableOverDrive+0x90>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006816:	4b1b      	ldr	r3, [pc, #108]	; (8006884 <HAL_PWREx_EnableOverDrive+0x94>)
 8006818:	2201      	movs	r2, #1
 800681a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800681c:	f7fd f98e 	bl	8003b3c <HAL_GetTick>
 8006820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006822:	e009      	b.n	8006838 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006824:	f7fd f98a 	bl	8003b3c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006832:	d901      	bls.n	8006838 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e01f      	b.n	8006878 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006838:	4b13      	ldr	r3, [pc, #76]	; (8006888 <HAL_PWREx_EnableOverDrive+0x98>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006844:	d1ee      	bne.n	8006824 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006846:	4b11      	ldr	r3, [pc, #68]	; (800688c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006848:	2201      	movs	r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800684c:	f7fd f976 	bl	8003b3c <HAL_GetTick>
 8006850:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006852:	e009      	b.n	8006868 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006854:	f7fd f972 	bl	8003b3c <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006862:	d901      	bls.n	8006868 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e007      	b.n	8006878 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006868:	4b07      	ldr	r3, [pc, #28]	; (8006888 <HAL_PWREx_EnableOverDrive+0x98>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006874:	d1ee      	bne.n	8006854 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40023800 	.word	0x40023800
 8006884:	420e0040 	.word	0x420e0040
 8006888:	40007000 	.word	0x40007000
 800688c:	420e0044 	.word	0x420e0044

08006890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e25b      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d075      	beq.n	800699a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068ae:	4ba3      	ldr	r3, [pc, #652]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 030c 	and.w	r3, r3, #12
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d00c      	beq.n	80068d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ba:	4ba0      	ldr	r3, [pc, #640]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d112      	bne.n	80068ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068c6:	4b9d      	ldr	r3, [pc, #628]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d2:	d10b      	bne.n	80068ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d4:	4b99      	ldr	r3, [pc, #612]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d05b      	beq.n	8006998 <HAL_RCC_OscConfig+0x108>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d157      	bne.n	8006998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e236      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f4:	d106      	bne.n	8006904 <HAL_RCC_OscConfig+0x74>
 80068f6:	4b91      	ldr	r3, [pc, #580]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a90      	ldr	r2, [pc, #576]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e01d      	b.n	8006940 <HAL_RCC_OscConfig+0xb0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800690c:	d10c      	bne.n	8006928 <HAL_RCC_OscConfig+0x98>
 800690e:	4b8b      	ldr	r3, [pc, #556]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a8a      	ldr	r2, [pc, #552]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	4b88      	ldr	r3, [pc, #544]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a87      	ldr	r2, [pc, #540]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e00b      	b.n	8006940 <HAL_RCC_OscConfig+0xb0>
 8006928:	4b84      	ldr	r3, [pc, #528]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a83      	ldr	r2, [pc, #524]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 800692e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	4b81      	ldr	r3, [pc, #516]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a80      	ldr	r2, [pc, #512]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 800693a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800693e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d013      	beq.n	8006970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006948:	f7fd f8f8 	bl	8003b3c <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006950:	f7fd f8f4 	bl	8003b3c <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	; 0x64
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e1fb      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006962:	4b76      	ldr	r3, [pc, #472]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0f0      	beq.n	8006950 <HAL_RCC_OscConfig+0xc0>
 800696e:	e014      	b.n	800699a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006970:	f7fd f8e4 	bl	8003b3c <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006978:	f7fd f8e0 	bl	8003b3c <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b64      	cmp	r3, #100	; 0x64
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e1e7      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800698a:	4b6c      	ldr	r3, [pc, #432]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f0      	bne.n	8006978 <HAL_RCC_OscConfig+0xe8>
 8006996:	e000      	b.n	800699a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d063      	beq.n	8006a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069a6:	4b65      	ldr	r3, [pc, #404]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 030c 	and.w	r3, r3, #12
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069b2:	4b62      	ldr	r3, [pc, #392]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d11c      	bne.n	80069f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069be:	4b5f      	ldr	r3, [pc, #380]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d116      	bne.n	80069f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ca:	4b5c      	ldr	r3, [pc, #368]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <HAL_RCC_OscConfig+0x152>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d001      	beq.n	80069e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e1bb      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e2:	4b56      	ldr	r3, [pc, #344]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	4952      	ldr	r1, [pc, #328]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f6:	e03a      	b.n	8006a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d020      	beq.n	8006a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a00:	4b4f      	ldr	r3, [pc, #316]	; (8006b40 <HAL_RCC_OscConfig+0x2b0>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a06:	f7fd f899 	bl	8003b3c <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a0e:	f7fd f895 	bl	8003b3c <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e19c      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a20:	4b46      	ldr	r3, [pc, #280]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2c:	4b43      	ldr	r3, [pc, #268]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	4940      	ldr	r1, [pc, #256]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	600b      	str	r3, [r1, #0]
 8006a40:	e015      	b.n	8006a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a42:	4b3f      	ldr	r3, [pc, #252]	; (8006b40 <HAL_RCC_OscConfig+0x2b0>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fd f878 	bl	8003b3c <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a50:	f7fd f874 	bl	8003b3c <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e17b      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a62:	4b36      	ldr	r3, [pc, #216]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f0      	bne.n	8006a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d030      	beq.n	8006adc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d016      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a82:	4b30      	ldr	r3, [pc, #192]	; (8006b44 <HAL_RCC_OscConfig+0x2b4>)
 8006a84:	2201      	movs	r2, #1
 8006a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a88:	f7fd f858 	bl	8003b3c <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a90:	f7fd f854 	bl	8003b3c <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e15b      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aa2:	4b26      	ldr	r3, [pc, #152]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0f0      	beq.n	8006a90 <HAL_RCC_OscConfig+0x200>
 8006aae:	e015      	b.n	8006adc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab0:	4b24      	ldr	r3, [pc, #144]	; (8006b44 <HAL_RCC_OscConfig+0x2b4>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ab6:	f7fd f841 	bl	8003b3c <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006abe:	f7fd f83d 	bl	8003b3c <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e144      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1f0      	bne.n	8006abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80a0 	beq.w	8006c2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aea:	2300      	movs	r3, #0
 8006aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10f      	bne.n	8006b1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006afa:	2300      	movs	r3, #0
 8006afc:	60bb      	str	r3, [r7, #8]
 8006afe:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	4a0e      	ldr	r2, [pc, #56]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b08:	6413      	str	r3, [r2, #64]	; 0x40
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b12:	60bb      	str	r3, [r7, #8]
 8006b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <HAL_RCC_OscConfig+0x2b8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d121      	bne.n	8006b6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b26:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <HAL_RCC_OscConfig+0x2b8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a07      	ldr	r2, [pc, #28]	; (8006b48 <HAL_RCC_OscConfig+0x2b8>)
 8006b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b32:	f7fd f803 	bl	8003b3c <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b38:	e011      	b.n	8006b5e <HAL_RCC_OscConfig+0x2ce>
 8006b3a:	bf00      	nop
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	42470000 	.word	0x42470000
 8006b44:	42470e80 	.word	0x42470e80
 8006b48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4c:	f7fc fff6 	bl	8003b3c <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e0fd      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b5e:	4b81      	ldr	r3, [pc, #516]	; (8006d64 <HAL_RCC_OscConfig+0x4d4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0f0      	beq.n	8006b4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d106      	bne.n	8006b80 <HAL_RCC_OscConfig+0x2f0>
 8006b72:	4b7d      	ldr	r3, [pc, #500]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	4a7c      	ldr	r2, [pc, #496]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b78:	f043 0301 	orr.w	r3, r3, #1
 8006b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b7e:	e01c      	b.n	8006bba <HAL_RCC_OscConfig+0x32a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2b05      	cmp	r3, #5
 8006b86:	d10c      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x312>
 8006b88:	4b77      	ldr	r3, [pc, #476]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8c:	4a76      	ldr	r2, [pc, #472]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	6713      	str	r3, [r2, #112]	; 0x70
 8006b94:	4b74      	ldr	r3, [pc, #464]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b98:	4a73      	ldr	r2, [pc, #460]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba0:	e00b      	b.n	8006bba <HAL_RCC_OscConfig+0x32a>
 8006ba2:	4b71      	ldr	r3, [pc, #452]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	4a70      	ldr	r2, [pc, #448]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	6713      	str	r3, [r2, #112]	; 0x70
 8006bae:	4b6e      	ldr	r3, [pc, #440]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	4a6d      	ldr	r2, [pc, #436]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006bb4:	f023 0304 	bic.w	r3, r3, #4
 8006bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d015      	beq.n	8006bee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc2:	f7fc ffbb 	bl	8003b3c <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc8:	e00a      	b.n	8006be0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bca:	f7fc ffb7 	bl	8003b3c <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e0bc      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be0:	4b61      	ldr	r3, [pc, #388]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0ee      	beq.n	8006bca <HAL_RCC_OscConfig+0x33a>
 8006bec:	e014      	b.n	8006c18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bee:	f7fc ffa5 	bl	8003b3c <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf4:	e00a      	b.n	8006c0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bf6:	f7fc ffa1 	bl	8003b3c <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0a6      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0c:	4b56      	ldr	r3, [pc, #344]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1ee      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d105      	bne.n	8006c2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c1e:	4b52      	ldr	r3, [pc, #328]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	4a51      	ldr	r2, [pc, #324]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8092 	beq.w	8006d58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c34:	4b4c      	ldr	r3, [pc, #304]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d05c      	beq.n	8006cfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d141      	bne.n	8006ccc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c48:	4b48      	ldr	r3, [pc, #288]	; (8006d6c <HAL_RCC_OscConfig+0x4dc>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4e:	f7fc ff75 	bl	8003b3c <HAL_GetTick>
 8006c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c54:	e008      	b.n	8006c68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c56:	f7fc ff71 	bl	8003b3c <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e078      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c68:	4b3f      	ldr	r3, [pc, #252]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f0      	bne.n	8006c56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	019b      	lsls	r3, r3, #6
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	061b      	lsls	r3, r3, #24
 8006c98:	4933      	ldr	r1, [pc, #204]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c9e:	4b33      	ldr	r3, [pc, #204]	; (8006d6c <HAL_RCC_OscConfig+0x4dc>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca4:	f7fc ff4a 	bl	8003b3c <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cac:	f7fc ff46 	bl	8003b3c <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e04d      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cbe:	4b2a      	ldr	r3, [pc, #168]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f0      	beq.n	8006cac <HAL_RCC_OscConfig+0x41c>
 8006cca:	e045      	b.n	8006d58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ccc:	4b27      	ldr	r3, [pc, #156]	; (8006d6c <HAL_RCC_OscConfig+0x4dc>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd2:	f7fc ff33 	bl	8003b3c <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cda:	f7fc ff2f 	bl	8003b3c <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e036      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cec:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1f0      	bne.n	8006cda <HAL_RCC_OscConfig+0x44a>
 8006cf8:	e02e      	b.n	8006d58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e029      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d06:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d11c      	bne.n	8006d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d115      	bne.n	8006d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d2e:	4013      	ands	r3, r2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10d      	bne.n	8006d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d106      	bne.n	8006d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d001      	beq.n	8006d58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e000      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40007000 	.word	0x40007000
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	42470060 	.word	0x42470060

08006d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0cc      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d84:	4b68      	ldr	r3, [pc, #416]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 030f 	and.w	r3, r3, #15
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d90c      	bls.n	8006dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d92:	4b65      	ldr	r3, [pc, #404]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d9a:	4b63      	ldr	r3, [pc, #396]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d001      	beq.n	8006dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0b8      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d020      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dc4:	4b59      	ldr	r3, [pc, #356]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4a58      	ldr	r2, [pc, #352]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ddc:	4b53      	ldr	r3, [pc, #332]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	4a52      	ldr	r2, [pc, #328]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de8:	4b50      	ldr	r3, [pc, #320]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	494d      	ldr	r1, [pc, #308]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d044      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d107      	bne.n	8006e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e0e:	4b47      	ldr	r3, [pc, #284]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d119      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e07f      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d003      	beq.n	8006e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d107      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e2e:	4b3f      	ldr	r3, [pc, #252]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e06f      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e3e:	4b3b      	ldr	r3, [pc, #236]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e067      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e4e:	4b37      	ldr	r3, [pc, #220]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f023 0203 	bic.w	r2, r3, #3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4934      	ldr	r1, [pc, #208]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e60:	f7fc fe6c 	bl	8003b3c <HAL_GetTick>
 8006e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e66:	e00a      	b.n	8006e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e68:	f7fc fe68 	bl	8003b3c <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e04f      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7e:	4b2b      	ldr	r3, [pc, #172]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 020c 	and.w	r2, r3, #12
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d1eb      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e90:	4b25      	ldr	r3, [pc, #148]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d20c      	bcs.n	8006eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e9e:	4b22      	ldr	r3, [pc, #136]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea6:	4b20      	ldr	r3, [pc, #128]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d001      	beq.n	8006eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e032      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d008      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ec4:	4b19      	ldr	r3, [pc, #100]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4916      	ldr	r1, [pc, #88]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d009      	beq.n	8006ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	490e      	ldr	r1, [pc, #56]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ef6:	f000 f821 	bl	8006f3c <HAL_RCC_GetSysClockFreq>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	490a      	ldr	r1, [pc, #40]	; (8006f30 <HAL_RCC_ClockConfig+0x1c0>)
 8006f08:	5ccb      	ldrb	r3, [r1, r3]
 8006f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f12:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <HAL_RCC_ClockConfig+0x1c8>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fa ff36 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40023c00 	.word	0x40023c00
 8006f2c:	40023800 	.word	0x40023800
 8006f30:	0800f9d0 	.word	0x0800f9d0
 8006f34:	20000000 	.word	0x20000000
 8006f38:	2000005c 	.word	0x2000005c

08006f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	607b      	str	r3, [r7, #4]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f54:	4b67      	ldr	r3, [pc, #412]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 030c 	and.w	r3, r3, #12
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d00d      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x40>
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	f200 80bd 	bhi.w	80070e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <HAL_RCC_GetSysClockFreq+0x34>
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d003      	beq.n	8006f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f6e:	e0b7      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f70:	4b61      	ldr	r3, [pc, #388]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f72:	60bb      	str	r3, [r7, #8]
       break;
 8006f74:	e0b7      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f76:	4b61      	ldr	r3, [pc, #388]	; (80070fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006f78:	60bb      	str	r3, [r7, #8]
      break;
 8006f7a:	e0b4      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f7c:	4b5d      	ldr	r3, [pc, #372]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f86:	4b5b      	ldr	r3, [pc, #364]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d04d      	beq.n	800702e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f92:	4b58      	ldr	r3, [pc, #352]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	099b      	lsrs	r3, r3, #6
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006fa2:	f04f 0100 	mov.w	r1, #0
 8006fa6:	ea02 0800 	and.w	r8, r2, r0
 8006faa:	ea03 0901 	and.w	r9, r3, r1
 8006fae:	4640      	mov	r0, r8
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	014b      	lsls	r3, r1, #5
 8006fbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006fc0:	0142      	lsls	r2, r0, #5
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	ebb0 0008 	subs.w	r0, r0, r8
 8006fca:	eb61 0109 	sbc.w	r1, r1, r9
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	018b      	lsls	r3, r1, #6
 8006fd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fdc:	0182      	lsls	r2, r0, #6
 8006fde:	1a12      	subs	r2, r2, r0
 8006fe0:	eb63 0301 	sbc.w	r3, r3, r1
 8006fe4:	f04f 0000 	mov.w	r0, #0
 8006fe8:	f04f 0100 	mov.w	r1, #0
 8006fec:	00d9      	lsls	r1, r3, #3
 8006fee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ff2:	00d0      	lsls	r0, r2, #3
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	eb12 0208 	adds.w	r2, r2, r8
 8006ffc:	eb43 0309 	adc.w	r3, r3, r9
 8007000:	f04f 0000 	mov.w	r0, #0
 8007004:	f04f 0100 	mov.w	r1, #0
 8007008:	0259      	lsls	r1, r3, #9
 800700a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800700e:	0250      	lsls	r0, r2, #9
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4610      	mov	r0, r2
 8007016:	4619      	mov	r1, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	461a      	mov	r2, r3
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	f7f9 fdd2 	bl	8000bc8 <__aeabi_uldivmod>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4613      	mov	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	e04a      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800702e:	4b31      	ldr	r3, [pc, #196]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	099b      	lsrs	r3, r3, #6
 8007034:	461a      	mov	r2, r3
 8007036:	f04f 0300 	mov.w	r3, #0
 800703a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800703e:	f04f 0100 	mov.w	r1, #0
 8007042:	ea02 0400 	and.w	r4, r2, r0
 8007046:	ea03 0501 	and.w	r5, r3, r1
 800704a:	4620      	mov	r0, r4
 800704c:	4629      	mov	r1, r5
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	014b      	lsls	r3, r1, #5
 8007058:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800705c:	0142      	lsls	r2, r0, #5
 800705e:	4610      	mov	r0, r2
 8007060:	4619      	mov	r1, r3
 8007062:	1b00      	subs	r0, r0, r4
 8007064:	eb61 0105 	sbc.w	r1, r1, r5
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	018b      	lsls	r3, r1, #6
 8007072:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007076:	0182      	lsls	r2, r0, #6
 8007078:	1a12      	subs	r2, r2, r0
 800707a:	eb63 0301 	sbc.w	r3, r3, r1
 800707e:	f04f 0000 	mov.w	r0, #0
 8007082:	f04f 0100 	mov.w	r1, #0
 8007086:	00d9      	lsls	r1, r3, #3
 8007088:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800708c:	00d0      	lsls	r0, r2, #3
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	1912      	adds	r2, r2, r4
 8007094:	eb45 0303 	adc.w	r3, r5, r3
 8007098:	f04f 0000 	mov.w	r0, #0
 800709c:	f04f 0100 	mov.w	r1, #0
 80070a0:	0299      	lsls	r1, r3, #10
 80070a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80070a6:	0290      	lsls	r0, r2, #10
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4610      	mov	r0, r2
 80070ae:	4619      	mov	r1, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f04f 0300 	mov.w	r3, #0
 80070b8:	f7f9 fd86 	bl	8000bc8 <__aeabi_uldivmod>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4613      	mov	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	0c1b      	lsrs	r3, r3, #16
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	3301      	adds	r3, #1
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	60bb      	str	r3, [r7, #8]
      break;
 80070de:	e002      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070e0:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070e2:	60bb      	str	r3, [r7, #8]
      break;
 80070e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070e6:	68bb      	ldr	r3, [r7, #8]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80070f2:	bf00      	nop
 80070f4:	40023800 	.word	0x40023800
 80070f8:	00f42400 	.word	0x00f42400
 80070fc:	007a1200 	.word	0x007a1200

08007100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007104:	4b03      	ldr	r3, [pc, #12]	; (8007114 <HAL_RCC_GetHCLKFreq+0x14>)
 8007106:	681b      	ldr	r3, [r3, #0]
}
 8007108:	4618      	mov	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	20000000 	.word	0x20000000

08007118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800711c:	f7ff fff0 	bl	8007100 <HAL_RCC_GetHCLKFreq>
 8007120:	4602      	mov	r2, r0
 8007122:	4b05      	ldr	r3, [pc, #20]	; (8007138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	0a9b      	lsrs	r3, r3, #10
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	4903      	ldr	r1, [pc, #12]	; (800713c <HAL_RCC_GetPCLK1Freq+0x24>)
 800712e:	5ccb      	ldrb	r3, [r1, r3]
 8007130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007134:	4618      	mov	r0, r3
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40023800 	.word	0x40023800
 800713c:	0800f9e0 	.word	0x0800f9e0

08007140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007144:	f7ff ffdc 	bl	8007100 <HAL_RCC_GetHCLKFreq>
 8007148:	4602      	mov	r2, r0
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	0b5b      	lsrs	r3, r3, #13
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	4903      	ldr	r1, [pc, #12]	; (8007164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007156:	5ccb      	ldrb	r3, [r1, r3]
 8007158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800715c:	4618      	mov	r0, r3
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40023800 	.word	0x40023800
 8007164:	0800f9e0 	.word	0x0800f9e0

08007168 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	220f      	movs	r2, #15
 8007176:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007178:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <HAL_RCC_GetClockConfig+0x5c>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 0203 	and.w	r2, r3, #3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <HAL_RCC_GetClockConfig+0x5c>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007190:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <HAL_RCC_GetClockConfig+0x5c>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800719c:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <HAL_RCC_GetClockConfig+0x5c>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	08db      	lsrs	r3, r3, #3
 80071a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80071aa:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <HAL_RCC_GetClockConfig+0x60>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 020f 	and.w	r2, r3, #15
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	601a      	str	r2, [r3, #0]
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40023800 	.word	0x40023800
 80071c8:	40023c00 	.word	0x40023c00

080071cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10b      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d075      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007200:	4bad      	ldr	r3, [pc, #692]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007206:	f7fc fc99 	bl	8003b3c <HAL_GetTick>
 800720a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800720c:	e008      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800720e:	f7fc fc95 	bl	8003b3c <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d901      	bls.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e18b      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007220:	4ba6      	ldr	r3, [pc, #664]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1f0      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	019a      	lsls	r2, r3, #6
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	071b      	lsls	r3, r3, #28
 8007244:	499d      	ldr	r1, [pc, #628]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01f      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007258:	4b98      	ldr	r3, [pc, #608]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800725a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800725e:	0f1b      	lsrs	r3, r3, #28
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	019a      	lsls	r2, r3, #6
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	061b      	lsls	r3, r3, #24
 8007272:	431a      	orrs	r2, r3
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	071b      	lsls	r3, r3, #28
 8007278:	4990      	ldr	r1, [pc, #576]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800727a:	4313      	orrs	r3, r2
 800727c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007280:	4b8e      	ldr	r3, [pc, #568]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007286:	f023 021f 	bic.w	r2, r3, #31
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	3b01      	subs	r3, #1
 8007290:	498a      	ldr	r1, [pc, #552]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00d      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	019a      	lsls	r2, r3, #6
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	061b      	lsls	r3, r3, #24
 80072b0:	431a      	orrs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	071b      	lsls	r3, r3, #28
 80072b8:	4980      	ldr	r1, [pc, #512]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072c0:	4b7d      	ldr	r3, [pc, #500]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072c6:	f7fc fc39 	bl	8003b3c <HAL_GetTick>
 80072ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072cc:	e008      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072ce:	f7fc fc35 	bl	8003b3c <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d901      	bls.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e12b      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072e0:	4b76      	ldr	r3, [pc, #472]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0f0      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d105      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007300:	2b00      	cmp	r3, #0
 8007302:	d079      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007304:	4b6e      	ldr	r3, [pc, #440]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800730a:	f7fc fc17 	bl	8003b3c <HAL_GetTick>
 800730e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007310:	e008      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007312:	f7fc fc13 	bl	8003b3c <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e109      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007324:	4b65      	ldr	r3, [pc, #404]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800732c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007330:	d0ef      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0304 	and.w	r3, r3, #4
 800733a:	2b00      	cmp	r3, #0
 800733c:	d020      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800733e:	4b5f      	ldr	r3, [pc, #380]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007344:	0f1b      	lsrs	r3, r3, #28
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	019a      	lsls	r2, r3, #6
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	061b      	lsls	r3, r3, #24
 8007358:	431a      	orrs	r2, r3
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	071b      	lsls	r3, r3, #28
 800735e:	4957      	ldr	r1, [pc, #348]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007366:	4b55      	ldr	r3, [pc, #340]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	3b01      	subs	r3, #1
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	4950      	ldr	r1, [pc, #320]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0308 	and.w	r3, r3, #8
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01e      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800738c:	4b4b      	ldr	r3, [pc, #300]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800738e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007392:	0e1b      	lsrs	r3, r3, #24
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	019a      	lsls	r2, r3, #6
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	061b      	lsls	r3, r3, #24
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	071b      	lsls	r3, r3, #28
 80073ac:	4943      	ldr	r1, [pc, #268]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80073b4:	4b41      	ldr	r3, [pc, #260]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	493e      	ldr	r1, [pc, #248]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80073ca:	4b3d      	ldr	r3, [pc, #244]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073cc:	2201      	movs	r2, #1
 80073ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073d0:	f7fc fbb4 	bl	8003b3c <HAL_GetTick>
 80073d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073d6:	e008      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80073d8:	f7fc fbb0 	bl	8003b3c <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d901      	bls.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e0a6      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073ea:	4b34      	ldr	r3, [pc, #208]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f6:	d1ef      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0320 	and.w	r3, r3, #32
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 808d 	beq.w	8007520 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	4b2c      	ldr	r3, [pc, #176]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	4a2b      	ldr	r2, [pc, #172]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007414:	6413      	str	r3, [r2, #64]	; 0x40
 8007416:	4b29      	ldr	r3, [pc, #164]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007422:	4b28      	ldr	r3, [pc, #160]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a27      	ldr	r2, [pc, #156]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800742c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800742e:	f7fc fb85 	bl	8003b3c <HAL_GetTick>
 8007432:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007434:	e008      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007436:	f7fc fb81 	bl	8003b3c <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e077      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007448:	4b1e      	ldr	r3, [pc, #120]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0f0      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007454:	4b19      	ldr	r3, [pc, #100]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800745c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d039      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	429a      	cmp	r2, r3
 8007470:	d032      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007472:	4b12      	ldr	r3, [pc, #72]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800747c:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800747e:	2201      	movs	r2, #1
 8007480:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007482:	4b11      	ldr	r3, [pc, #68]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007488:	4a0c      	ldr	r2, [pc, #48]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800748e:	4b0b      	ldr	r3, [pc, #44]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b01      	cmp	r3, #1
 8007498:	d11e      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800749a:	f7fc fb4f 	bl	8003b3c <HAL_GetTick>
 800749e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a0:	e014      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074a2:	f7fc fb4b 	bl	8003b3c <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d90b      	bls.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e03f      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80074b8:	42470068 	.word	0x42470068
 80074bc:	40023800 	.word	0x40023800
 80074c0:	42470070 	.word	0x42470070
 80074c4:	40007000 	.word	0x40007000
 80074c8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074cc:	4b1c      	ldr	r3, [pc, #112]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0e4      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e4:	d10d      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80074e6:	4b16      	ldr	r3, [pc, #88]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074fa:	4911      	ldr	r1, [pc, #68]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	608b      	str	r3, [r1, #8]
 8007500:	e005      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007502:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	4a0e      	ldr	r2, [pc, #56]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007508:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800750c:	6093      	str	r3, [r2, #8]
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800751a:	4909      	ldr	r1, [pc, #36]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800751c:	4313      	orrs	r3, r2
 800751e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b00      	cmp	r3, #0
 800752a:	d004      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007532:	4b04      	ldr	r3, [pc, #16]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007534:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	40023800 	.word	0x40023800
 8007544:	424711e0 	.word	0x424711e0

08007548 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e025      	b.n	80075a8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7f9 fde1 	bl	8001138 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3304      	adds	r3, #4
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f002 f901 	bl	8009790 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	461a      	mov	r2, r3
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	f002 f96c 	bl	8009876 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d101      	bne.n	80075cc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80075c8:	2302      	movs	r3, #2
 80075ca:	e018      	b.n	80075fe <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	68b9      	ldr	r1, [r7, #8]
 80075dc:	4618      	mov	r0, r3
 80075de:	f002 f9c9 	bl	8009974 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d104      	bne.n	80075f4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2205      	movs	r2, #5
 80075ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80075f2:	e003      	b.n	80075fc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b082      	sub	sp, #8
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d101      	bne.n	8007620 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
 800761e:	e00e      	b.n	800763e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f002 f9dc 	bl	80099ec <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e056      	b.n	8007706 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fa faf6 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800768e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	ea42 0103 	orr.w	r1, r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	0c1b      	lsrs	r3, r3, #16
 80076d6:	f003 0104 	and.w	r1, r3, #4
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69da      	ldr	r2, [r3, #28]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e01a      	b.n	8007756 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007736:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7fa fadb 	bl	8001cf4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b088      	sub	sp, #32
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	603b      	str	r3, [r7, #0]
 800776a:	4613      	mov	r3, r2
 800776c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_SPI_Transmit+0x22>
 800777c:	2302      	movs	r3, #2
 800777e:	e11e      	b.n	80079be <HAL_SPI_Transmit+0x260>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007788:	f7fc f9d8 	bl	8003b3c <HAL_GetTick>
 800778c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b01      	cmp	r3, #1
 800779c:	d002      	beq.n	80077a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800779e:	2302      	movs	r3, #2
 80077a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077a2:	e103      	b.n	80079ac <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <HAL_SPI_Transmit+0x52>
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d102      	bne.n	80077b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077b4:	e0fa      	b.n	80079ac <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2203      	movs	r2, #3
 80077ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	88fa      	ldrh	r2, [r7, #6]
 80077ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	88fa      	ldrh	r2, [r7, #6]
 80077d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077fc:	d107      	bne.n	800780e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800780c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007818:	2b40      	cmp	r3, #64	; 0x40
 800781a:	d007      	beq.n	800782c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800782a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007834:	d14b      	bne.n	80078ce <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_SPI_Transmit+0xe6>
 800783e:	8afb      	ldrh	r3, [r7, #22]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d13e      	bne.n	80078c2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	881a      	ldrh	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	1c9a      	adds	r2, r3, #2
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007868:	e02b      	b.n	80078c2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b02      	cmp	r3, #2
 8007876:	d112      	bne.n	800789e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	881a      	ldrh	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	1c9a      	adds	r2, r3, #2
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	86da      	strh	r2, [r3, #54]	; 0x36
 800789c:	e011      	b.n	80078c2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800789e:	f7fc f94d 	bl	8003b3c <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d803      	bhi.n	80078b6 <HAL_SPI_Transmit+0x158>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b4:	d102      	bne.n	80078bc <HAL_SPI_Transmit+0x15e>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078c0:	e074      	b.n	80079ac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1ce      	bne.n	800786a <HAL_SPI_Transmit+0x10c>
 80078cc:	e04c      	b.n	8007968 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <HAL_SPI_Transmit+0x17e>
 80078d6:	8afb      	ldrh	r3, [r7, #22]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d140      	bne.n	800795e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	7812      	ldrb	r2, [r2, #0]
 80078e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007902:	e02c      	b.n	800795e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b02      	cmp	r3, #2
 8007910:	d113      	bne.n	800793a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	330c      	adds	r3, #12
 800791c:	7812      	ldrb	r2, [r2, #0]
 800791e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	86da      	strh	r2, [r3, #54]	; 0x36
 8007938:	e011      	b.n	800795e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800793a:	f7fc f8ff 	bl	8003b3c <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	429a      	cmp	r2, r3
 8007948:	d803      	bhi.n	8007952 <HAL_SPI_Transmit+0x1f4>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007950:	d102      	bne.n	8007958 <HAL_SPI_Transmit+0x1fa>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d102      	bne.n	800795e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800795c:	e026      	b.n	80079ac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007962:	b29b      	uxth	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1cd      	bne.n	8007904 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 fbb3 	bl	80080d8 <SPI_EndRxTxTransaction>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	e000      	b.n	80079ac <HAL_SPI_Transmit+0x24e>
  }

error:
 80079aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3720      	adds	r7, #32
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b088      	sub	sp, #32
 80079ca:	af02      	add	r7, sp, #8
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	603b      	str	r3, [r7, #0]
 80079d2:	4613      	mov	r3, r2
 80079d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079e2:	d112      	bne.n	8007a0a <HAL_SPI_Receive+0x44>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10e      	bne.n	8007a0a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2204      	movs	r2, #4
 80079f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079f4:	88fa      	ldrh	r2, [r7, #6]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	4613      	mov	r3, r2
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	68b9      	ldr	r1, [r7, #8]
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 f8e9 	bl	8007bd8 <HAL_SPI_TransmitReceive>
 8007a06:	4603      	mov	r3, r0
 8007a08:	e0e2      	b.n	8007bd0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_SPI_Receive+0x52>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e0db      	b.n	8007bd0 <HAL_SPI_Receive+0x20a>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a20:	f7fc f88c 	bl	8003b3c <HAL_GetTick>
 8007a24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d002      	beq.n	8007a38 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007a32:	2302      	movs	r3, #2
 8007a34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a36:	e0c2      	b.n	8007bbe <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <HAL_SPI_Receive+0x7e>
 8007a3e:	88fb      	ldrh	r3, [r7, #6]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a48:	e0b9      	b.n	8007bbe <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2204      	movs	r2, #4
 8007a4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	88fa      	ldrh	r2, [r7, #6]
 8007a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	88fa      	ldrh	r2, [r7, #6]
 8007a68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a90:	d107      	bne.n	8007aa2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007aa0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aac:	2b40      	cmp	r3, #64	; 0x40
 8007aae:	d007      	beq.n	8007ac0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007abe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d162      	bne.n	8007b8e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007ac8:	e02e      	b.n	8007b28 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d115      	bne.n	8007b04 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f103 020c 	add.w	r2, r3, #12
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	7812      	ldrb	r2, [r2, #0]
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b02:	e011      	b.n	8007b28 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b04:	f7fc f81a 	bl	8003b3c <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d803      	bhi.n	8007b1c <HAL_SPI_Receive+0x156>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1a:	d102      	bne.n	8007b22 <HAL_SPI_Receive+0x15c>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b26:	e04a      	b.n	8007bbe <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1cb      	bne.n	8007aca <HAL_SPI_Receive+0x104>
 8007b32:	e031      	b.n	8007b98 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d113      	bne.n	8007b6a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	b292      	uxth	r2, r2
 8007b4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	1c9a      	adds	r2, r3, #2
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b68:	e011      	b.n	8007b8e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b6a:	f7fb ffe7 	bl	8003b3c <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d803      	bhi.n	8007b82 <HAL_SPI_Receive+0x1bc>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d102      	bne.n	8007b88 <HAL_SPI_Receive+0x1c2>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b8c:	e017      	b.n	8007bbe <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1cd      	bne.n	8007b34 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 fa35 	bl	800800c <SPI_EndRxTransaction>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	75fb      	strb	r3, [r7, #23]
 8007bba:	e000      	b.n	8007bbe <HAL_SPI_Receive+0x1f8>
  }

error :
 8007bbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08c      	sub	sp, #48	; 0x30
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007be6:	2301      	movs	r3, #1
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_SPI_TransmitReceive+0x26>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e18a      	b.n	8007f14 <HAL_SPI_TransmitReceive+0x33c>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c06:	f7fb ff99 	bl	8003b3c <HAL_GetTick>
 8007c0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007c1c:	887b      	ldrh	r3, [r7, #2]
 8007c1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d00f      	beq.n	8007c48 <HAL_SPI_TransmitReceive+0x70>
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c2e:	d107      	bne.n	8007c40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d103      	bne.n	8007c40 <HAL_SPI_TransmitReceive+0x68>
 8007c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d003      	beq.n	8007c48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007c40:	2302      	movs	r3, #2
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c46:	e15b      	b.n	8007f00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_SPI_TransmitReceive+0x82>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <HAL_SPI_TransmitReceive+0x82>
 8007c54:	887b      	ldrh	r3, [r7, #2]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c60:	e14e      	b.n	8007f00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d003      	beq.n	8007c76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2205      	movs	r2, #5
 8007c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	887a      	ldrh	r2, [r7, #2]
 8007c86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	887a      	ldrh	r2, [r7, #2]
 8007c8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	887a      	ldrh	r2, [r7, #2]
 8007c98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	887a      	ldrh	r2, [r7, #2]
 8007c9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb6:	2b40      	cmp	r3, #64	; 0x40
 8007cb8:	d007      	beq.n	8007cca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cd2:	d178      	bne.n	8007dc6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <HAL_SPI_TransmitReceive+0x10a>
 8007cdc:	8b7b      	ldrh	r3, [r7, #26]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d166      	bne.n	8007db0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce6:	881a      	ldrh	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf2:	1c9a      	adds	r2, r3, #2
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d06:	e053      	b.n	8007db0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d11b      	bne.n	8007d4e <HAL_SPI_TransmitReceive+0x176>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d016      	beq.n	8007d4e <HAL_SPI_TransmitReceive+0x176>
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d113      	bne.n	8007d4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2a:	881a      	ldrh	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	1c9a      	adds	r2, r3, #2
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	3b01      	subs	r3, #1
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d119      	bne.n	8007d90 <HAL_SPI_TransmitReceive+0x1b8>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d014      	beq.n	8007d90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d70:	b292      	uxth	r2, r2
 8007d72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	1c9a      	adds	r2, r3, #2
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d90:	f7fb fed4 	bl	8003b3c <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d807      	bhi.n	8007db0 <HAL_SPI_TransmitReceive+0x1d8>
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da6:	d003      	beq.n	8007db0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007dae:	e0a7      	b.n	8007f00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1a6      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x130>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1a1      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x130>
 8007dc4:	e07c      	b.n	8007ec0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_SPI_TransmitReceive+0x1fc>
 8007dce:	8b7b      	ldrh	r3, [r7, #26]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d16b      	bne.n	8007eac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	7812      	ldrb	r2, [r2, #0]
 8007de0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dfa:	e057      	b.n	8007eac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d11c      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x26c>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d017      	beq.n	8007e44 <HAL_SPI_TransmitReceive+0x26c>
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d114      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	330c      	adds	r3, #12
 8007e24:	7812      	ldrb	r2, [r2, #0]
 8007e26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d119      	bne.n	8007e86 <HAL_SPI_TransmitReceive+0x2ae>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d014      	beq.n	8007e86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e82:	2301      	movs	r3, #1
 8007e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e86:	f7fb fe59 	bl	8003b3c <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d803      	bhi.n	8007e9e <HAL_SPI_TransmitReceive+0x2c6>
 8007e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d102      	bne.n	8007ea4 <HAL_SPI_TransmitReceive+0x2cc>
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007eaa:	e029      	b.n	8007f00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1a2      	bne.n	8007dfc <HAL_SPI_TransmitReceive+0x224>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d19d      	bne.n	8007dfc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f907 	bl	80080d8 <SPI_EndRxTxTransaction>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d006      	beq.n	8007ede <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007edc:	e010      	b.n	8007f00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10b      	bne.n	8007efe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	e000      	b.n	8007f00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007efe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3730      	adds	r7, #48	; 0x30
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f2a:	b2db      	uxtb	r3, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	603b      	str	r3, [r7, #0]
 8007f44:	4613      	mov	r3, r2
 8007f46:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f48:	e04c      	b.n	8007fe4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f50:	d048      	beq.n	8007fe4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007f52:	f7fb fdf3 	bl	8003b3c <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d902      	bls.n	8007f68 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d13d      	bne.n	8007fe4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f80:	d111      	bne.n	8007fa6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f8a:	d004      	beq.n	8007f96 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f94:	d107      	bne.n	8007fa6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fa4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fae:	d10f      	bne.n	8007fd0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e00f      	b.n	8008004 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689a      	ldr	r2, [r3, #8]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	4013      	ands	r3, r2
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	bf0c      	ite	eq
 8007ff4:	2301      	moveq	r3, #1
 8007ff6:	2300      	movne	r3, #0
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d1a3      	bne.n	8007f4a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af02      	add	r7, sp, #8
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008020:	d111      	bne.n	8008046 <SPI_EndRxTransaction+0x3a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800802a:	d004      	beq.n	8008036 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008034:	d107      	bne.n	8008046 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008044:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800804e:	d12a      	bne.n	80080a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008058:	d012      	beq.n	8008080 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2200      	movs	r2, #0
 8008062:	2180      	movs	r1, #128	; 0x80
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7ff ff67 	bl	8007f38 <SPI_WaitFlagStateUntilTimeout>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d02d      	beq.n	80080cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008074:	f043 0220 	orr.w	r2, r3, #32
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e026      	b.n	80080ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2200      	movs	r2, #0
 8008088:	2101      	movs	r1, #1
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f7ff ff54 	bl	8007f38 <SPI_WaitFlagStateUntilTimeout>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01a      	beq.n	80080cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809a:	f043 0220 	orr.w	r2, r3, #32
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e013      	b.n	80080ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2200      	movs	r2, #0
 80080ae:	2101      	movs	r1, #1
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff ff41 	bl	8007f38 <SPI_WaitFlagStateUntilTimeout>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d007      	beq.n	80080cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c0:	f043 0220 	orr.w	r2, r3, #32
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e000      	b.n	80080ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af02      	add	r7, sp, #8
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080e4:	4b1b      	ldr	r3, [pc, #108]	; (8008154 <SPI_EndRxTxTransaction+0x7c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a1b      	ldr	r2, [pc, #108]	; (8008158 <SPI_EndRxTxTransaction+0x80>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	0d5b      	lsrs	r3, r3, #21
 80080f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080f4:	fb02 f303 	mul.w	r3, r2, r3
 80080f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008102:	d112      	bne.n	800812a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2200      	movs	r2, #0
 800810c:	2180      	movs	r1, #128	; 0x80
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff ff12 	bl	8007f38 <SPI_WaitFlagStateUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d016      	beq.n	8008148 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811e:	f043 0220 	orr.w	r2, r3, #32
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e00f      	b.n	800814a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	3b01      	subs	r3, #1
 8008134:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008140:	2b80      	cmp	r3, #128	; 0x80
 8008142:	d0f2      	beq.n	800812a <SPI_EndRxTxTransaction+0x52>
 8008144:	e000      	b.n	8008148 <SPI_EndRxTxTransaction+0x70>
        break;
 8008146:	bf00      	nop
  }

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000000 	.word	0x20000000
 8008158:	165e9f81 	.word	0x165e9f81

0800815c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e01d      	b.n	80081aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fa fa00 	bl	8002588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f000 fa22 	bl	80085e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0201 	orr.w	r2, r2, #1
 80081c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b06      	cmp	r3, #6
 80081da:	d007      	beq.n	80081ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b02      	cmp	r3, #2
 800820e:	d122      	bne.n	8008256 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b02      	cmp	r3, #2
 800821c:	d11b      	bne.n	8008256 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f06f 0202 	mvn.w	r2, #2
 8008226:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f9b2 	bl	80085a6 <HAL_TIM_IC_CaptureCallback>
 8008242:	e005      	b.n	8008250 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f9a4 	bl	8008592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f9b5 	bl	80085ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b04      	cmp	r3, #4
 8008262:	d122      	bne.n	80082aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f003 0304 	and.w	r3, r3, #4
 800826e:	2b04      	cmp	r3, #4
 8008270:	d11b      	bne.n	80082aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f06f 0204 	mvn.w	r2, #4
 800827a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f988 	bl	80085a6 <HAL_TIM_IC_CaptureCallback>
 8008296:	e005      	b.n	80082a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f97a 	bl	8008592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f98b 	bl	80085ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d122      	bne.n	80082fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f003 0308 	and.w	r3, r3, #8
 80082c2:	2b08      	cmp	r3, #8
 80082c4:	d11b      	bne.n	80082fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f06f 0208 	mvn.w	r2, #8
 80082ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2204      	movs	r2, #4
 80082d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f003 0303 	and.w	r3, r3, #3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f95e 	bl	80085a6 <HAL_TIM_IC_CaptureCallback>
 80082ea:	e005      	b.n	80082f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f950 	bl	8008592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f961 	bl	80085ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	f003 0310 	and.w	r3, r3, #16
 8008308:	2b10      	cmp	r3, #16
 800830a:	d122      	bne.n	8008352 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	f003 0310 	and.w	r3, r3, #16
 8008316:	2b10      	cmp	r3, #16
 8008318:	d11b      	bne.n	8008352 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f06f 0210 	mvn.w	r2, #16
 8008322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2208      	movs	r2, #8
 8008328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f934 	bl	80085a6 <HAL_TIM_IC_CaptureCallback>
 800833e:	e005      	b.n	800834c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f926 	bl	8008592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f937 	bl	80085ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b01      	cmp	r3, #1
 800835e:	d10e      	bne.n	800837e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b01      	cmp	r3, #1
 800836c:	d107      	bne.n	800837e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f06f 0201 	mvn.w	r2, #1
 8008376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7f9 fc23 	bl	8001bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008388:	2b80      	cmp	r3, #128	; 0x80
 800838a:	d10e      	bne.n	80083aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008396:	2b80      	cmp	r3, #128	; 0x80
 8008398:	d107      	bne.n	80083aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fadd 	bl	8008964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b40      	cmp	r3, #64	; 0x40
 80083b6:	d10e      	bne.n	80083d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c2:	2b40      	cmp	r3, #64	; 0x40
 80083c4:	d107      	bne.n	80083d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f8fc 	bl	80085ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	f003 0320 	and.w	r3, r3, #32
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	d10e      	bne.n	8008402 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b20      	cmp	r3, #32
 80083f0:	d107      	bne.n	8008402 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f06f 0220 	mvn.w	r2, #32
 80083fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 faa7 	bl	8008950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_TIM_ConfigClockSource+0x18>
 800841e:	2302      	movs	r3, #2
 8008420:	e0b3      	b.n	800858a <HAL_TIM_ConfigClockSource+0x180>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2202      	movs	r2, #2
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008440:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008448:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800845a:	d03e      	beq.n	80084da <HAL_TIM_ConfigClockSource+0xd0>
 800845c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008460:	f200 8087 	bhi.w	8008572 <HAL_TIM_ConfigClockSource+0x168>
 8008464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008468:	f000 8085 	beq.w	8008576 <HAL_TIM_ConfigClockSource+0x16c>
 800846c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008470:	d87f      	bhi.n	8008572 <HAL_TIM_ConfigClockSource+0x168>
 8008472:	2b70      	cmp	r3, #112	; 0x70
 8008474:	d01a      	beq.n	80084ac <HAL_TIM_ConfigClockSource+0xa2>
 8008476:	2b70      	cmp	r3, #112	; 0x70
 8008478:	d87b      	bhi.n	8008572 <HAL_TIM_ConfigClockSource+0x168>
 800847a:	2b60      	cmp	r3, #96	; 0x60
 800847c:	d050      	beq.n	8008520 <HAL_TIM_ConfigClockSource+0x116>
 800847e:	2b60      	cmp	r3, #96	; 0x60
 8008480:	d877      	bhi.n	8008572 <HAL_TIM_ConfigClockSource+0x168>
 8008482:	2b50      	cmp	r3, #80	; 0x50
 8008484:	d03c      	beq.n	8008500 <HAL_TIM_ConfigClockSource+0xf6>
 8008486:	2b50      	cmp	r3, #80	; 0x50
 8008488:	d873      	bhi.n	8008572 <HAL_TIM_ConfigClockSource+0x168>
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d058      	beq.n	8008540 <HAL_TIM_ConfigClockSource+0x136>
 800848e:	2b40      	cmp	r3, #64	; 0x40
 8008490:	d86f      	bhi.n	8008572 <HAL_TIM_ConfigClockSource+0x168>
 8008492:	2b30      	cmp	r3, #48	; 0x30
 8008494:	d064      	beq.n	8008560 <HAL_TIM_ConfigClockSource+0x156>
 8008496:	2b30      	cmp	r3, #48	; 0x30
 8008498:	d86b      	bhi.n	8008572 <HAL_TIM_ConfigClockSource+0x168>
 800849a:	2b20      	cmp	r3, #32
 800849c:	d060      	beq.n	8008560 <HAL_TIM_ConfigClockSource+0x156>
 800849e:	2b20      	cmp	r3, #32
 80084a0:	d867      	bhi.n	8008572 <HAL_TIM_ConfigClockSource+0x168>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d05c      	beq.n	8008560 <HAL_TIM_ConfigClockSource+0x156>
 80084a6:	2b10      	cmp	r3, #16
 80084a8:	d05a      	beq.n	8008560 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80084aa:	e062      	b.n	8008572 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	6899      	ldr	r1, [r3, #8]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f000 f9ac 	bl	8008818 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	609a      	str	r2, [r3, #8]
      break;
 80084d8:	e04e      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	6899      	ldr	r1, [r3, #8]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f000 f995 	bl	8008818 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084fc:	609a      	str	r2, [r3, #8]
      break;
 80084fe:	e03b      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	6859      	ldr	r1, [r3, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	461a      	mov	r2, r3
 800850e:	f000 f909 	bl	8008724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2150      	movs	r1, #80	; 0x50
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f962 	bl	80087e2 <TIM_ITRx_SetConfig>
      break;
 800851e:	e02b      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6818      	ldr	r0, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	6859      	ldr	r1, [r3, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	461a      	mov	r2, r3
 800852e:	f000 f928 	bl	8008782 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2160      	movs	r1, #96	; 0x60
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f952 	bl	80087e2 <TIM_ITRx_SetConfig>
      break;
 800853e:	e01b      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6818      	ldr	r0, [r3, #0]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	6859      	ldr	r1, [r3, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	461a      	mov	r2, r3
 800854e:	f000 f8e9 	bl	8008724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2140      	movs	r1, #64	; 0x40
 8008558:	4618      	mov	r0, r3
 800855a:	f000 f942 	bl	80087e2 <TIM_ITRx_SetConfig>
      break;
 800855e:	e00b      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4619      	mov	r1, r3
 800856a:	4610      	mov	r0, r2
 800856c:	f000 f939 	bl	80087e2 <TIM_ITRx_SetConfig>
      break;
 8008570:	e002      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008572:	bf00      	nop
 8008574:	e000      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a40      	ldr	r2, [pc, #256]	; (80086f8 <TIM_Base_SetConfig+0x114>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d013      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008602:	d00f      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a3d      	ldr	r2, [pc, #244]	; (80086fc <TIM_Base_SetConfig+0x118>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d00b      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a3c      	ldr	r2, [pc, #240]	; (8008700 <TIM_Base_SetConfig+0x11c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d007      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a3b      	ldr	r2, [pc, #236]	; (8008704 <TIM_Base_SetConfig+0x120>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d003      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a3a      	ldr	r2, [pc, #232]	; (8008708 <TIM_Base_SetConfig+0x124>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d108      	bne.n	8008636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a2f      	ldr	r2, [pc, #188]	; (80086f8 <TIM_Base_SetConfig+0x114>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d02b      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008644:	d027      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a2c      	ldr	r2, [pc, #176]	; (80086fc <TIM_Base_SetConfig+0x118>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d023      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a2b      	ldr	r2, [pc, #172]	; (8008700 <TIM_Base_SetConfig+0x11c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01f      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a2a      	ldr	r2, [pc, #168]	; (8008704 <TIM_Base_SetConfig+0x120>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d01b      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a29      	ldr	r2, [pc, #164]	; (8008708 <TIM_Base_SetConfig+0x124>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d017      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a28      	ldr	r2, [pc, #160]	; (800870c <TIM_Base_SetConfig+0x128>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d013      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a27      	ldr	r2, [pc, #156]	; (8008710 <TIM_Base_SetConfig+0x12c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00f      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a26      	ldr	r2, [pc, #152]	; (8008714 <TIM_Base_SetConfig+0x130>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00b      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a25      	ldr	r2, [pc, #148]	; (8008718 <TIM_Base_SetConfig+0x134>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d007      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a24      	ldr	r2, [pc, #144]	; (800871c <TIM_Base_SetConfig+0x138>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d003      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a23      	ldr	r2, [pc, #140]	; (8008720 <TIM_Base_SetConfig+0x13c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d108      	bne.n	80086a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a0a      	ldr	r2, [pc, #40]	; (80086f8 <TIM_Base_SetConfig+0x114>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d003      	beq.n	80086dc <TIM_Base_SetConfig+0xf8>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a0c      	ldr	r2, [pc, #48]	; (8008708 <TIM_Base_SetConfig+0x124>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d103      	bne.n	80086e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	691a      	ldr	r2, [r3, #16]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	615a      	str	r2, [r3, #20]
}
 80086ea:	bf00      	nop
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	40010000 	.word	0x40010000
 80086fc:	40000400 	.word	0x40000400
 8008700:	40000800 	.word	0x40000800
 8008704:	40000c00 	.word	0x40000c00
 8008708:	40010400 	.word	0x40010400
 800870c:	40014000 	.word	0x40014000
 8008710:	40014400 	.word	0x40014400
 8008714:	40014800 	.word	0x40014800
 8008718:	40001800 	.word	0x40001800
 800871c:	40001c00 	.word	0x40001c00
 8008720:	40002000 	.word	0x40002000

08008724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	f023 0201 	bic.w	r2, r3, #1
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800874e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f023 030a 	bic.w	r3, r3, #10
 8008760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4313      	orrs	r3, r2
 8008768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	621a      	str	r2, [r3, #32]
}
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008782:	b480      	push	{r7}
 8008784:	b087      	sub	sp, #28
 8008786:	af00      	add	r7, sp, #0
 8008788:	60f8      	str	r0, [r7, #12]
 800878a:	60b9      	str	r1, [r7, #8]
 800878c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	f023 0210 	bic.w	r2, r3, #16
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	031b      	lsls	r3, r3, #12
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	011b      	lsls	r3, r3, #4
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	621a      	str	r2, [r3, #32]
}
 80087d6:	bf00      	nop
 80087d8:	371c      	adds	r7, #28
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b085      	sub	sp, #20
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4313      	orrs	r3, r2
 8008800:	f043 0307 	orr.w	r3, r3, #7
 8008804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	609a      	str	r2, [r3, #8]
}
 800880c:	bf00      	nop
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	021a      	lsls	r2, r3, #8
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	431a      	orrs	r2, r3
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4313      	orrs	r3, r2
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	609a      	str	r2, [r3, #8]
}
 800884c:	bf00      	nop
 800884e:	371c      	adds	r7, #28
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800886c:	2302      	movs	r3, #2
 800886e:	e05a      	b.n	8008926 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a21      	ldr	r2, [pc, #132]	; (8008934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d022      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088bc:	d01d      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a1d      	ldr	r2, [pc, #116]	; (8008938 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d018      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1b      	ldr	r2, [pc, #108]	; (800893c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d013      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1a      	ldr	r2, [pc, #104]	; (8008940 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d00e      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a18      	ldr	r2, [pc, #96]	; (8008944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d009      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a17      	ldr	r2, [pc, #92]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d004      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a15      	ldr	r2, [pc, #84]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d10c      	bne.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	4313      	orrs	r3, r2
 800890a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	40010000 	.word	0x40010000
 8008938:	40000400 	.word	0x40000400
 800893c:	40000800 	.word	0x40000800
 8008940:	40000c00 	.word	0x40000c00
 8008944:	40010400 	.word	0x40010400
 8008948:	40014000 	.word	0x40014000
 800894c:	40001800 	.word	0x40001800

08008950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e03f      	b.n	8008a0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d106      	bne.n	80089a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7f9 fe78 	bl	8002694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2224      	movs	r2, #36	; 0x24
 80089a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fb4b 	bl	8009058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	691a      	ldr	r2, [r3, #16]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	695a      	ldr	r2, [r3, #20]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68da      	ldr	r2, [r3, #12]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2220      	movs	r2, #32
 8008a04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b088      	sub	sp, #32
 8008a16:	af02      	add	r7, sp, #8
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	603b      	str	r3, [r7, #0]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	f040 8083 	bne.w	8008b3a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <HAL_UART_Transmit+0x2e>
 8008a3a:	88fb      	ldrh	r3, [r7, #6]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e07b      	b.n	8008b3c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <HAL_UART_Transmit+0x40>
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e074      	b.n	8008b3c <HAL_UART_Transmit+0x12a>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2221      	movs	r2, #33	; 0x21
 8008a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008a68:	f7fb f868 	bl	8003b3c <HAL_GetTick>
 8008a6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	88fa      	ldrh	r2, [r7, #6]
 8008a72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	88fa      	ldrh	r2, [r7, #6]
 8008a78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008a82:	e042      	b.n	8008b0a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9a:	d122      	bne.n	8008ae2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2180      	movs	r1, #128	; 0x80
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 f96a 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e042      	b.n	8008b3c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ac8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d103      	bne.n	8008ada <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	3302      	adds	r3, #2
 8008ad6:	60bb      	str	r3, [r7, #8]
 8008ad8:	e017      	b.n	8008b0a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	3301      	adds	r3, #1
 8008ade:	60bb      	str	r3, [r7, #8]
 8008ae0:	e013      	b.n	8008b0a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2180      	movs	r1, #128	; 0x80
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 f947 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e01f      	b.n	8008b3c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	60ba      	str	r2, [r7, #8]
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1b7      	bne.n	8008a84 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2140      	movs	r1, #64	; 0x40
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f92e 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e006      	b.n	8008b3c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e000      	b.n	8008b3c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008b3a:	2302      	movs	r3, #2
  }
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3718      	adds	r7, #24
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f003 030f 	and.w	r3, r3, #15
 8008b72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10d      	bne.n	8008b96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d008      	beq.n	8008b96 <HAL_UART_IRQHandler+0x52>
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	f003 0320 	and.w	r3, r3, #32
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f9e0 	bl	8008f54 <UART_Receive_IT>
      return;
 8008b94:	e0d0      	b.n	8008d38 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 80b0 	beq.w	8008cfe <HAL_UART_IRQHandler+0x1ba>
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <HAL_UART_IRQHandler+0x70>
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 80a5 	beq.w	8008cfe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <HAL_UART_IRQHandler+0x90>
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d005      	beq.n	8008bd4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	f043 0201 	orr.w	r2, r3, #1
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f003 0304 	and.w	r3, r3, #4
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <HAL_UART_IRQHandler+0xb0>
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d005      	beq.n	8008bf4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bec:	f043 0202 	orr.w	r2, r3, #2
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	f003 0302 	and.w	r3, r3, #2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <HAL_UART_IRQHandler+0xd0>
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0c:	f043 0204 	orr.w	r2, r3, #4
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00f      	beq.n	8008c3e <HAL_UART_IRQHandler+0xfa>
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	f003 0320 	and.w	r3, r3, #32
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d104      	bne.n	8008c32 <HAL_UART_IRQHandler+0xee>
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	f043 0208 	orr.w	r2, r3, #8
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d077      	beq.n	8008d36 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	f003 0320 	and.w	r3, r3, #32
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d007      	beq.n	8008c60 <HAL_UART_IRQHandler+0x11c>
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f97a 	bl	8008f54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6a:	2b40      	cmp	r3, #64	; 0x40
 8008c6c:	bf0c      	ite	eq
 8008c6e:	2301      	moveq	r3, #1
 8008c70:	2300      	movne	r3, #0
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7a:	f003 0308 	and.w	r3, r3, #8
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <HAL_UART_IRQHandler+0x144>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d031      	beq.n	8008cec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f8c3 	bl	8008e14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c98:	2b40      	cmp	r3, #64	; 0x40
 8008c9a:	d123      	bne.n	8008ce4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695a      	ldr	r2, [r3, #20]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008caa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d013      	beq.n	8008cdc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb8:	4a21      	ldr	r2, [pc, #132]	; (8008d40 <HAL_UART_IRQHandler+0x1fc>)
 8008cba:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fb f959 	bl	8003f78 <HAL_DMA_Abort_IT>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d016      	beq.n	8008cfa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cda:	e00e      	b.n	8008cfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f845 	bl	8008d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce2:	e00a      	b.n	8008cfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f841 	bl	8008d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cea:	e006      	b.n	8008cfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f83d 	bl	8008d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008cf8:	e01d      	b.n	8008d36 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfa:	bf00      	nop
    return;
 8008cfc:	e01b      	b.n	8008d36 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <HAL_UART_IRQHandler+0x1d6>
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f8b0 	bl	8008e78 <UART_Transmit_IT>
    return;
 8008d18:	e00e      	b.n	8008d38 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d009      	beq.n	8008d38 <HAL_UART_IRQHandler+0x1f4>
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d004      	beq.n	8008d38 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f8f8 	bl	8008f24 <UART_EndTransmit_IT>
    return;
 8008d34:	e000      	b.n	8008d38 <HAL_UART_IRQHandler+0x1f4>
    return;
 8008d36:	bf00      	nop
  }
}
 8008d38:	3720      	adds	r7, #32
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	08008e51 	.word	0x08008e51

08008d44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d90:	e02c      	b.n	8008dec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d98:	d028      	beq.n	8008dec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d007      	beq.n	8008db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008da0:	f7fa fecc 	bl	8003b3c <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d21d      	bcs.n	8008dec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008dbe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	695a      	ldr	r2, [r3, #20]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0201 	bic.w	r2, r2, #1
 8008dce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e00f      	b.n	8008e0c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	4013      	ands	r3, r2
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	bf0c      	ite	eq
 8008dfc:	2301      	moveq	r3, #1
 8008dfe:	2300      	movne	r3, #0
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	461a      	mov	r2, r3
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d0c3      	beq.n	8008d92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	695a      	ldr	r2, [r3, #20]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 0201 	bic.w	r2, r2, #1
 8008e3a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f7ff ff7e 	bl	8008d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e70:	bf00      	nop
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b21      	cmp	r3, #33	; 0x21
 8008e8a:	d144      	bne.n	8008f16 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e94:	d11a      	bne.n	8008ecc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008eaa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d105      	bne.n	8008ec0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	1c9a      	adds	r2, r3, #2
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	621a      	str	r2, [r3, #32]
 8008ebe:	e00e      	b.n	8008ede <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	621a      	str	r2, [r3, #32]
 8008eca:	e008      	b.n	8008ede <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	1c59      	adds	r1, r3, #1
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	6211      	str	r1, [r2, #32]
 8008ed6:	781a      	ldrb	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	4619      	mov	r1, r3
 8008eec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10f      	bne.n	8008f12 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68da      	ldr	r2, [r3, #12]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68da      	ldr	r2, [r3, #12]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	e000      	b.n	8008f18 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008f16:	2302      	movs	r3, #2
  }
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fefd 	bl	8008d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b22      	cmp	r3, #34	; 0x22
 8008f66:	d171      	bne.n	800904c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f70:	d123      	bne.n	8008fba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f76:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10e      	bne.n	8008f9e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f96:	1c9a      	adds	r2, r3, #2
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8008f9c:	e029      	b.n	8008ff2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	629a      	str	r2, [r3, #40]	; 0x28
 8008fb8:	e01b      	b.n	8008ff2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10a      	bne.n	8008fd8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6858      	ldr	r0, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	1c59      	adds	r1, r3, #1
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	6291      	str	r1, [r2, #40]	; 0x28
 8008fd2:	b2c2      	uxtb	r2, r0
 8008fd4:	701a      	strb	r2, [r3, #0]
 8008fd6:	e00c      	b.n	8008ff2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	1c58      	adds	r0, r3, #1
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	6288      	str	r0, [r1, #40]	; 0x28
 8008fea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	4619      	mov	r1, r3
 8009000:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009002:	2b00      	cmp	r3, #0
 8009004:	d120      	bne.n	8009048 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 0220 	bic.w	r2, r2, #32
 8009014:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009024:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	695a      	ldr	r2, [r3, #20]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f022 0201 	bic.w	r2, r2, #1
 8009034:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff fe8a 	bl	8008d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	e002      	b.n	800904e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	e000      	b.n	800904e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800904c:	2302      	movs	r3, #2
  }
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
	...

08009058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	b0bd      	sub	sp, #244	; 0xf4
 800905e:	af00      	add	r7, sp, #0
 8009060:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009074:	68d9      	ldr	r1, [r3, #12]
 8009076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	ea40 0301 	orr.w	r3, r0, r1
 8009080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	431a      	orrs	r2, r3
 8009090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	431a      	orrs	r2, r3
 8009098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	4313      	orrs	r3, r2
 80090a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80090a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80090b0:	f021 010c 	bic.w	r1, r1, #12
 80090b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80090be:	430b      	orrs	r3, r1
 80090c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80090ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d2:	6999      	ldr	r1, [r3, #24]
 80090d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	ea40 0301 	orr.w	r3, r0, r1
 80090de:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ea:	f040 81a5 	bne.w	8009438 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	4bcd      	ldr	r3, [pc, #820]	; (800942c <UART_SetConfig+0x3d4>)
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d006      	beq.n	8009108 <UART_SetConfig+0xb0>
 80090fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4bcb      	ldr	r3, [pc, #812]	; (8009430 <UART_SetConfig+0x3d8>)
 8009102:	429a      	cmp	r2, r3
 8009104:	f040 80cb 	bne.w	800929e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009108:	f7fe f81a 	bl	8007140 <HAL_RCC_GetPCLK2Freq>
 800910c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009110:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009114:	461c      	mov	r4, r3
 8009116:	f04f 0500 	mov.w	r5, #0
 800911a:	4622      	mov	r2, r4
 800911c:	462b      	mov	r3, r5
 800911e:	1891      	adds	r1, r2, r2
 8009120:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009124:	415b      	adcs	r3, r3
 8009126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800912a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800912e:	1912      	adds	r2, r2, r4
 8009130:	eb45 0303 	adc.w	r3, r5, r3
 8009134:	f04f 0000 	mov.w	r0, #0
 8009138:	f04f 0100 	mov.w	r1, #0
 800913c:	00d9      	lsls	r1, r3, #3
 800913e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009142:	00d0      	lsls	r0, r2, #3
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	1911      	adds	r1, r2, r4
 800914a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800914e:	416b      	adcs	r3, r5
 8009150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	461a      	mov	r2, r3
 800915c:	f04f 0300 	mov.w	r3, #0
 8009160:	1891      	adds	r1, r2, r2
 8009162:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009166:	415b      	adcs	r3, r3
 8009168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800916c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009170:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009174:	f7f7 fd28 	bl	8000bc8 <__aeabi_uldivmod>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4bad      	ldr	r3, [pc, #692]	; (8009434 <UART_SetConfig+0x3dc>)
 800917e:	fba3 2302 	umull	r2, r3, r3, r2
 8009182:	095b      	lsrs	r3, r3, #5
 8009184:	011e      	lsls	r6, r3, #4
 8009186:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800918a:	461c      	mov	r4, r3
 800918c:	f04f 0500 	mov.w	r5, #0
 8009190:	4622      	mov	r2, r4
 8009192:	462b      	mov	r3, r5
 8009194:	1891      	adds	r1, r2, r2
 8009196:	67b9      	str	r1, [r7, #120]	; 0x78
 8009198:	415b      	adcs	r3, r3
 800919a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800919c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80091a0:	1912      	adds	r2, r2, r4
 80091a2:	eb45 0303 	adc.w	r3, r5, r3
 80091a6:	f04f 0000 	mov.w	r0, #0
 80091aa:	f04f 0100 	mov.w	r1, #0
 80091ae:	00d9      	lsls	r1, r3, #3
 80091b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091b4:	00d0      	lsls	r0, r2, #3
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	1911      	adds	r1, r2, r4
 80091bc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80091c0:	416b      	adcs	r3, r5
 80091c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80091c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	461a      	mov	r2, r3
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	1891      	adds	r1, r2, r2
 80091d4:	6739      	str	r1, [r7, #112]	; 0x70
 80091d6:	415b      	adcs	r3, r3
 80091d8:	677b      	str	r3, [r7, #116]	; 0x74
 80091da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80091de:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80091e2:	f7f7 fcf1 	bl	8000bc8 <__aeabi_uldivmod>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4b92      	ldr	r3, [pc, #584]	; (8009434 <UART_SetConfig+0x3dc>)
 80091ec:	fba3 1302 	umull	r1, r3, r3, r2
 80091f0:	095b      	lsrs	r3, r3, #5
 80091f2:	2164      	movs	r1, #100	; 0x64
 80091f4:	fb01 f303 	mul.w	r3, r1, r3
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	3332      	adds	r3, #50	; 0x32
 80091fe:	4a8d      	ldr	r2, [pc, #564]	; (8009434 <UART_SetConfig+0x3dc>)
 8009200:	fba2 2303 	umull	r2, r3, r2, r3
 8009204:	095b      	lsrs	r3, r3, #5
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800920c:	441e      	add	r6, r3
 800920e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009212:	4618      	mov	r0, r3
 8009214:	f04f 0100 	mov.w	r1, #0
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	1894      	adds	r4, r2, r2
 800921e:	66bc      	str	r4, [r7, #104]	; 0x68
 8009220:	415b      	adcs	r3, r3
 8009222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009224:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009228:	1812      	adds	r2, r2, r0
 800922a:	eb41 0303 	adc.w	r3, r1, r3
 800922e:	f04f 0400 	mov.w	r4, #0
 8009232:	f04f 0500 	mov.w	r5, #0
 8009236:	00dd      	lsls	r5, r3, #3
 8009238:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800923c:	00d4      	lsls	r4, r2, #3
 800923e:	4622      	mov	r2, r4
 8009240:	462b      	mov	r3, r5
 8009242:	1814      	adds	r4, r2, r0
 8009244:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009248:	414b      	adcs	r3, r1
 800924a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800924e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	461a      	mov	r2, r3
 8009256:	f04f 0300 	mov.w	r3, #0
 800925a:	1891      	adds	r1, r2, r2
 800925c:	6639      	str	r1, [r7, #96]	; 0x60
 800925e:	415b      	adcs	r3, r3
 8009260:	667b      	str	r3, [r7, #100]	; 0x64
 8009262:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800926a:	f7f7 fcad 	bl	8000bc8 <__aeabi_uldivmod>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4b70      	ldr	r3, [pc, #448]	; (8009434 <UART_SetConfig+0x3dc>)
 8009274:	fba3 1302 	umull	r1, r3, r3, r2
 8009278:	095b      	lsrs	r3, r3, #5
 800927a:	2164      	movs	r1, #100	; 0x64
 800927c:	fb01 f303 	mul.w	r3, r1, r3
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	3332      	adds	r3, #50	; 0x32
 8009286:	4a6b      	ldr	r2, [pc, #428]	; (8009434 <UART_SetConfig+0x3dc>)
 8009288:	fba2 2303 	umull	r2, r3, r2, r3
 800928c:	095b      	lsrs	r3, r3, #5
 800928e:	f003 0207 	and.w	r2, r3, #7
 8009292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4432      	add	r2, r6
 800929a:	609a      	str	r2, [r3, #8]
 800929c:	e26d      	b.n	800977a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800929e:	f7fd ff3b 	bl	8007118 <HAL_RCC_GetPCLK1Freq>
 80092a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092aa:	461c      	mov	r4, r3
 80092ac:	f04f 0500 	mov.w	r5, #0
 80092b0:	4622      	mov	r2, r4
 80092b2:	462b      	mov	r3, r5
 80092b4:	1891      	adds	r1, r2, r2
 80092b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80092b8:	415b      	adcs	r3, r3
 80092ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80092c0:	1912      	adds	r2, r2, r4
 80092c2:	eb45 0303 	adc.w	r3, r5, r3
 80092c6:	f04f 0000 	mov.w	r0, #0
 80092ca:	f04f 0100 	mov.w	r1, #0
 80092ce:	00d9      	lsls	r1, r3, #3
 80092d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092d4:	00d0      	lsls	r0, r2, #3
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	1911      	adds	r1, r2, r4
 80092dc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80092e0:	416b      	adcs	r3, r5
 80092e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	461a      	mov	r2, r3
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	1891      	adds	r1, r2, r2
 80092f4:	6539      	str	r1, [r7, #80]	; 0x50
 80092f6:	415b      	adcs	r3, r3
 80092f8:	657b      	str	r3, [r7, #84]	; 0x54
 80092fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80092fe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009302:	f7f7 fc61 	bl	8000bc8 <__aeabi_uldivmod>
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4b4a      	ldr	r3, [pc, #296]	; (8009434 <UART_SetConfig+0x3dc>)
 800930c:	fba3 2302 	umull	r2, r3, r3, r2
 8009310:	095b      	lsrs	r3, r3, #5
 8009312:	011e      	lsls	r6, r3, #4
 8009314:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009318:	461c      	mov	r4, r3
 800931a:	f04f 0500 	mov.w	r5, #0
 800931e:	4622      	mov	r2, r4
 8009320:	462b      	mov	r3, r5
 8009322:	1891      	adds	r1, r2, r2
 8009324:	64b9      	str	r1, [r7, #72]	; 0x48
 8009326:	415b      	adcs	r3, r3
 8009328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800932a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800932e:	1912      	adds	r2, r2, r4
 8009330:	eb45 0303 	adc.w	r3, r5, r3
 8009334:	f04f 0000 	mov.w	r0, #0
 8009338:	f04f 0100 	mov.w	r1, #0
 800933c:	00d9      	lsls	r1, r3, #3
 800933e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009342:	00d0      	lsls	r0, r2, #3
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	1911      	adds	r1, r2, r4
 800934a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800934e:	416b      	adcs	r3, r5
 8009350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	461a      	mov	r2, r3
 800935c:	f04f 0300 	mov.w	r3, #0
 8009360:	1891      	adds	r1, r2, r2
 8009362:	6439      	str	r1, [r7, #64]	; 0x40
 8009364:	415b      	adcs	r3, r3
 8009366:	647b      	str	r3, [r7, #68]	; 0x44
 8009368:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800936c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009370:	f7f7 fc2a 	bl	8000bc8 <__aeabi_uldivmod>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4b2e      	ldr	r3, [pc, #184]	; (8009434 <UART_SetConfig+0x3dc>)
 800937a:	fba3 1302 	umull	r1, r3, r3, r2
 800937e:	095b      	lsrs	r3, r3, #5
 8009380:	2164      	movs	r1, #100	; 0x64
 8009382:	fb01 f303 	mul.w	r3, r1, r3
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	00db      	lsls	r3, r3, #3
 800938a:	3332      	adds	r3, #50	; 0x32
 800938c:	4a29      	ldr	r2, [pc, #164]	; (8009434 <UART_SetConfig+0x3dc>)
 800938e:	fba2 2303 	umull	r2, r3, r2, r3
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	005b      	lsls	r3, r3, #1
 8009396:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800939a:	441e      	add	r6, r3
 800939c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093a0:	4618      	mov	r0, r3
 80093a2:	f04f 0100 	mov.w	r1, #0
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	1894      	adds	r4, r2, r2
 80093ac:	63bc      	str	r4, [r7, #56]	; 0x38
 80093ae:	415b      	adcs	r3, r3
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093b6:	1812      	adds	r2, r2, r0
 80093b8:	eb41 0303 	adc.w	r3, r1, r3
 80093bc:	f04f 0400 	mov.w	r4, #0
 80093c0:	f04f 0500 	mov.w	r5, #0
 80093c4:	00dd      	lsls	r5, r3, #3
 80093c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80093ca:	00d4      	lsls	r4, r2, #3
 80093cc:	4622      	mov	r2, r4
 80093ce:	462b      	mov	r3, r5
 80093d0:	1814      	adds	r4, r2, r0
 80093d2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80093d6:	414b      	adcs	r3, r1
 80093d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	461a      	mov	r2, r3
 80093e4:	f04f 0300 	mov.w	r3, #0
 80093e8:	1891      	adds	r1, r2, r2
 80093ea:	6339      	str	r1, [r7, #48]	; 0x30
 80093ec:	415b      	adcs	r3, r3
 80093ee:	637b      	str	r3, [r7, #52]	; 0x34
 80093f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80093f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093f8:	f7f7 fbe6 	bl	8000bc8 <__aeabi_uldivmod>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <UART_SetConfig+0x3dc>)
 8009402:	fba3 1302 	umull	r1, r3, r3, r2
 8009406:	095b      	lsrs	r3, r3, #5
 8009408:	2164      	movs	r1, #100	; 0x64
 800940a:	fb01 f303 	mul.w	r3, r1, r3
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	3332      	adds	r3, #50	; 0x32
 8009414:	4a07      	ldr	r2, [pc, #28]	; (8009434 <UART_SetConfig+0x3dc>)
 8009416:	fba2 2303 	umull	r2, r3, r2, r3
 800941a:	095b      	lsrs	r3, r3, #5
 800941c:	f003 0207 	and.w	r2, r3, #7
 8009420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4432      	add	r2, r6
 8009428:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800942a:	e1a6      	b.n	800977a <UART_SetConfig+0x722>
 800942c:	40011000 	.word	0x40011000
 8009430:	40011400 	.word	0x40011400
 8009434:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	4bd1      	ldr	r3, [pc, #836]	; (8009784 <UART_SetConfig+0x72c>)
 8009440:	429a      	cmp	r2, r3
 8009442:	d006      	beq.n	8009452 <UART_SetConfig+0x3fa>
 8009444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	4bcf      	ldr	r3, [pc, #828]	; (8009788 <UART_SetConfig+0x730>)
 800944c:	429a      	cmp	r2, r3
 800944e:	f040 80ca 	bne.w	80095e6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009452:	f7fd fe75 	bl	8007140 <HAL_RCC_GetPCLK2Freq>
 8009456:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800945a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800945e:	461c      	mov	r4, r3
 8009460:	f04f 0500 	mov.w	r5, #0
 8009464:	4622      	mov	r2, r4
 8009466:	462b      	mov	r3, r5
 8009468:	1891      	adds	r1, r2, r2
 800946a:	62b9      	str	r1, [r7, #40]	; 0x28
 800946c:	415b      	adcs	r3, r3
 800946e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009474:	1912      	adds	r2, r2, r4
 8009476:	eb45 0303 	adc.w	r3, r5, r3
 800947a:	f04f 0000 	mov.w	r0, #0
 800947e:	f04f 0100 	mov.w	r1, #0
 8009482:	00d9      	lsls	r1, r3, #3
 8009484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009488:	00d0      	lsls	r0, r2, #3
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	eb12 0a04 	adds.w	sl, r2, r4
 8009492:	eb43 0b05 	adc.w	fp, r3, r5
 8009496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	4618      	mov	r0, r3
 800949e:	f04f 0100 	mov.w	r1, #0
 80094a2:	f04f 0200 	mov.w	r2, #0
 80094a6:	f04f 0300 	mov.w	r3, #0
 80094aa:	008b      	lsls	r3, r1, #2
 80094ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094b0:	0082      	lsls	r2, r0, #2
 80094b2:	4650      	mov	r0, sl
 80094b4:	4659      	mov	r1, fp
 80094b6:	f7f7 fb87 	bl	8000bc8 <__aeabi_uldivmod>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4bb3      	ldr	r3, [pc, #716]	; (800978c <UART_SetConfig+0x734>)
 80094c0:	fba3 2302 	umull	r2, r3, r3, r2
 80094c4:	095b      	lsrs	r3, r3, #5
 80094c6:	011e      	lsls	r6, r3, #4
 80094c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094cc:	4618      	mov	r0, r3
 80094ce:	f04f 0100 	mov.w	r1, #0
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	1894      	adds	r4, r2, r2
 80094d8:	623c      	str	r4, [r7, #32]
 80094da:	415b      	adcs	r3, r3
 80094dc:	627b      	str	r3, [r7, #36]	; 0x24
 80094de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094e2:	1812      	adds	r2, r2, r0
 80094e4:	eb41 0303 	adc.w	r3, r1, r3
 80094e8:	f04f 0400 	mov.w	r4, #0
 80094ec:	f04f 0500 	mov.w	r5, #0
 80094f0:	00dd      	lsls	r5, r3, #3
 80094f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094f6:	00d4      	lsls	r4, r2, #3
 80094f8:	4622      	mov	r2, r4
 80094fa:	462b      	mov	r3, r5
 80094fc:	1814      	adds	r4, r2, r0
 80094fe:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009502:	414b      	adcs	r3, r1
 8009504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	4618      	mov	r0, r3
 8009510:	f04f 0100 	mov.w	r1, #0
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	f04f 0300 	mov.w	r3, #0
 800951c:	008b      	lsls	r3, r1, #2
 800951e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009522:	0082      	lsls	r2, r0, #2
 8009524:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009528:	f7f7 fb4e 	bl	8000bc8 <__aeabi_uldivmod>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4b96      	ldr	r3, [pc, #600]	; (800978c <UART_SetConfig+0x734>)
 8009532:	fba3 1302 	umull	r1, r3, r3, r2
 8009536:	095b      	lsrs	r3, r3, #5
 8009538:	2164      	movs	r1, #100	; 0x64
 800953a:	fb01 f303 	mul.w	r3, r1, r3
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	011b      	lsls	r3, r3, #4
 8009542:	3332      	adds	r3, #50	; 0x32
 8009544:	4a91      	ldr	r2, [pc, #580]	; (800978c <UART_SetConfig+0x734>)
 8009546:	fba2 2303 	umull	r2, r3, r2, r3
 800954a:	095b      	lsrs	r3, r3, #5
 800954c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009550:	441e      	add	r6, r3
 8009552:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009556:	4618      	mov	r0, r3
 8009558:	f04f 0100 	mov.w	r1, #0
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	1894      	adds	r4, r2, r2
 8009562:	61bc      	str	r4, [r7, #24]
 8009564:	415b      	adcs	r3, r3
 8009566:	61fb      	str	r3, [r7, #28]
 8009568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800956c:	1812      	adds	r2, r2, r0
 800956e:	eb41 0303 	adc.w	r3, r1, r3
 8009572:	f04f 0400 	mov.w	r4, #0
 8009576:	f04f 0500 	mov.w	r5, #0
 800957a:	00dd      	lsls	r5, r3, #3
 800957c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009580:	00d4      	lsls	r4, r2, #3
 8009582:	4622      	mov	r2, r4
 8009584:	462b      	mov	r3, r5
 8009586:	1814      	adds	r4, r2, r0
 8009588:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800958c:	414b      	adcs	r3, r1
 800958e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	4618      	mov	r0, r3
 800959a:	f04f 0100 	mov.w	r1, #0
 800959e:	f04f 0200 	mov.w	r2, #0
 80095a2:	f04f 0300 	mov.w	r3, #0
 80095a6:	008b      	lsls	r3, r1, #2
 80095a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095ac:	0082      	lsls	r2, r0, #2
 80095ae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80095b2:	f7f7 fb09 	bl	8000bc8 <__aeabi_uldivmod>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4b74      	ldr	r3, [pc, #464]	; (800978c <UART_SetConfig+0x734>)
 80095bc:	fba3 1302 	umull	r1, r3, r3, r2
 80095c0:	095b      	lsrs	r3, r3, #5
 80095c2:	2164      	movs	r1, #100	; 0x64
 80095c4:	fb01 f303 	mul.w	r3, r1, r3
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	011b      	lsls	r3, r3, #4
 80095cc:	3332      	adds	r3, #50	; 0x32
 80095ce:	4a6f      	ldr	r2, [pc, #444]	; (800978c <UART_SetConfig+0x734>)
 80095d0:	fba2 2303 	umull	r2, r3, r2, r3
 80095d4:	095b      	lsrs	r3, r3, #5
 80095d6:	f003 020f 	and.w	r2, r3, #15
 80095da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4432      	add	r2, r6
 80095e2:	609a      	str	r2, [r3, #8]
 80095e4:	e0c9      	b.n	800977a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80095e6:	f7fd fd97 	bl	8007118 <HAL_RCC_GetPCLK1Freq>
 80095ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095f2:	461c      	mov	r4, r3
 80095f4:	f04f 0500 	mov.w	r5, #0
 80095f8:	4622      	mov	r2, r4
 80095fa:	462b      	mov	r3, r5
 80095fc:	1891      	adds	r1, r2, r2
 80095fe:	6139      	str	r1, [r7, #16]
 8009600:	415b      	adcs	r3, r3
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009608:	1912      	adds	r2, r2, r4
 800960a:	eb45 0303 	adc.w	r3, r5, r3
 800960e:	f04f 0000 	mov.w	r0, #0
 8009612:	f04f 0100 	mov.w	r1, #0
 8009616:	00d9      	lsls	r1, r3, #3
 8009618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800961c:	00d0      	lsls	r0, r2, #3
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	eb12 0804 	adds.w	r8, r2, r4
 8009626:	eb43 0905 	adc.w	r9, r3, r5
 800962a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	4618      	mov	r0, r3
 8009632:	f04f 0100 	mov.w	r1, #0
 8009636:	f04f 0200 	mov.w	r2, #0
 800963a:	f04f 0300 	mov.w	r3, #0
 800963e:	008b      	lsls	r3, r1, #2
 8009640:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009644:	0082      	lsls	r2, r0, #2
 8009646:	4640      	mov	r0, r8
 8009648:	4649      	mov	r1, r9
 800964a:	f7f7 fabd 	bl	8000bc8 <__aeabi_uldivmod>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	4b4e      	ldr	r3, [pc, #312]	; (800978c <UART_SetConfig+0x734>)
 8009654:	fba3 2302 	umull	r2, r3, r3, r2
 8009658:	095b      	lsrs	r3, r3, #5
 800965a:	011e      	lsls	r6, r3, #4
 800965c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009660:	4618      	mov	r0, r3
 8009662:	f04f 0100 	mov.w	r1, #0
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	1894      	adds	r4, r2, r2
 800966c:	60bc      	str	r4, [r7, #8]
 800966e:	415b      	adcs	r3, r3
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009676:	1812      	adds	r2, r2, r0
 8009678:	eb41 0303 	adc.w	r3, r1, r3
 800967c:	f04f 0400 	mov.w	r4, #0
 8009680:	f04f 0500 	mov.w	r5, #0
 8009684:	00dd      	lsls	r5, r3, #3
 8009686:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800968a:	00d4      	lsls	r4, r2, #3
 800968c:	4622      	mov	r2, r4
 800968e:	462b      	mov	r3, r5
 8009690:	1814      	adds	r4, r2, r0
 8009692:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009696:	414b      	adcs	r3, r1
 8009698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800969c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f04f 0100 	mov.w	r1, #0
 80096a8:	f04f 0200 	mov.w	r2, #0
 80096ac:	f04f 0300 	mov.w	r3, #0
 80096b0:	008b      	lsls	r3, r1, #2
 80096b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096b6:	0082      	lsls	r2, r0, #2
 80096b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80096bc:	f7f7 fa84 	bl	8000bc8 <__aeabi_uldivmod>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4b31      	ldr	r3, [pc, #196]	; (800978c <UART_SetConfig+0x734>)
 80096c6:	fba3 1302 	umull	r1, r3, r3, r2
 80096ca:	095b      	lsrs	r3, r3, #5
 80096cc:	2164      	movs	r1, #100	; 0x64
 80096ce:	fb01 f303 	mul.w	r3, r1, r3
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	011b      	lsls	r3, r3, #4
 80096d6:	3332      	adds	r3, #50	; 0x32
 80096d8:	4a2c      	ldr	r2, [pc, #176]	; (800978c <UART_SetConfig+0x734>)
 80096da:	fba2 2303 	umull	r2, r3, r2, r3
 80096de:	095b      	lsrs	r3, r3, #5
 80096e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096e4:	441e      	add	r6, r3
 80096e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096ea:	4618      	mov	r0, r3
 80096ec:	f04f 0100 	mov.w	r1, #0
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	1894      	adds	r4, r2, r2
 80096f6:	603c      	str	r4, [r7, #0]
 80096f8:	415b      	adcs	r3, r3
 80096fa:	607b      	str	r3, [r7, #4]
 80096fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009700:	1812      	adds	r2, r2, r0
 8009702:	eb41 0303 	adc.w	r3, r1, r3
 8009706:	f04f 0400 	mov.w	r4, #0
 800970a:	f04f 0500 	mov.w	r5, #0
 800970e:	00dd      	lsls	r5, r3, #3
 8009710:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009714:	00d4      	lsls	r4, r2, #3
 8009716:	4622      	mov	r2, r4
 8009718:	462b      	mov	r3, r5
 800971a:	1814      	adds	r4, r2, r0
 800971c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009720:	414b      	adcs	r3, r1
 8009722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	4618      	mov	r0, r3
 800972e:	f04f 0100 	mov.w	r1, #0
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	f04f 0300 	mov.w	r3, #0
 800973a:	008b      	lsls	r3, r1, #2
 800973c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009740:	0082      	lsls	r2, r0, #2
 8009742:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009746:	f7f7 fa3f 	bl	8000bc8 <__aeabi_uldivmod>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4b0f      	ldr	r3, [pc, #60]	; (800978c <UART_SetConfig+0x734>)
 8009750:	fba3 1302 	umull	r1, r3, r3, r2
 8009754:	095b      	lsrs	r3, r3, #5
 8009756:	2164      	movs	r1, #100	; 0x64
 8009758:	fb01 f303 	mul.w	r3, r1, r3
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	011b      	lsls	r3, r3, #4
 8009760:	3332      	adds	r3, #50	; 0x32
 8009762:	4a0a      	ldr	r2, [pc, #40]	; (800978c <UART_SetConfig+0x734>)
 8009764:	fba2 2303 	umull	r2, r3, r2, r3
 8009768:	095b      	lsrs	r3, r3, #5
 800976a:	f003 020f 	and.w	r2, r3, #15
 800976e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4432      	add	r2, r6
 8009776:	609a      	str	r2, [r3, #8]
}
 8009778:	e7ff      	b.n	800977a <UART_SetConfig+0x722>
 800977a:	bf00      	nop
 800977c:	37f4      	adds	r7, #244	; 0xf4
 800977e:	46bd      	mov	sp, r7
 8009780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009784:	40011000 	.word	0x40011000
 8009788:	40011400 	.word	0x40011400
 800978c:	51eb851f 	.word	0x51eb851f

08009790 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d029      	beq.n	80097fe <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80097b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097ba:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80097c4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80097ca:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80097d0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80097d6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80097dc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80097e2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80097e8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80097ee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	e034      	b.n	8009868 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800980a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009814:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800981a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	4313      	orrs	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800982e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009832:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800983c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009842:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009848:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800984e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009854:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	4313      	orrs	r3, r2
 800985a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009876:	b480      	push	{r7}
 8009878:	b087      	sub	sp, #28
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d02e      	beq.n	80098ee <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800989c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80098ac:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80098b6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	3b01      	subs	r3, #1
 80098be:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80098c0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80098ca:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	695b      	ldr	r3, [r3, #20]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80098d4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	3b01      	subs	r3, #1
 80098dc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80098de:	4313      	orrs	r3, r2
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	609a      	str	r2, [r3, #8]
 80098ec:	e03b      	b.n	8009966 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098fe:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	3b01      	subs	r3, #1
 8009906:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	3b01      	subs	r3, #1
 800990e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009910:	4313      	orrs	r3, r2
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009924:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	3b01      	subs	r3, #1
 8009932:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009934:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	3b01      	subs	r3, #1
 800993c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800993e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	3b01      	subs	r3, #1
 8009946:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009948:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	3b01      	subs	r3, #1
 8009950:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009952:	4313      	orrs	r3, r2
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4313      	orrs	r3, r2
 8009958:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	371c      	adds	r7, #28
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009980:	2300      	movs	r3, #0
 8009982:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009990:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	3b01      	subs	r3, #1
 8009998:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800999a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80099a2:	4313      	orrs	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80099ac:	f7fa f8c6 	bl	8003b3c <HAL_GetTick>
 80099b0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80099b2:	e010      	b.n	80099d6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ba:	d00c      	beq.n	80099d6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d007      	beq.n	80099d2 <FMC_SDRAM_SendCommand+0x5e>
 80099c2:	f7fa f8bb 	bl	8003b3c <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d201      	bcs.n	80099d6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e006      	b.n	80099e4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	f003 0320 	and.w	r3, r3, #32
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d0e8      	beq.n	80099b4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3718      	adds	r7, #24
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	695a      	ldr	r2, [r3, #20]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	005b      	lsls	r3, r3, #1
 80099fe:	431a      	orrs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a12:	b480      	push	{r7}
 8009a14:	b083      	sub	sp, #12
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f103 0208 	add.w	r2, r3, #8
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f103 0208 	add.w	r2, r3, #8
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f103 0208 	add.w	r2, r3, #8
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	689a      	ldr	r2, [r3, #8]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	1c5a      	adds	r2, r3, #1
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	601a      	str	r2, [r3, #0]
}
 8009aa8:	bf00      	nop
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aca:	d103      	bne.n	8009ad4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	e00c      	b.n	8009aee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3308      	adds	r3, #8
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	e002      	b.n	8009ae2 <vListInsert+0x2e>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d2f6      	bcs.n	8009adc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	601a      	str	r2, [r3, #0]
}
 8009b1a:	bf00      	nop
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b26:	b480      	push	{r7}
 8009b28:	b085      	sub	sp, #20
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6892      	ldr	r2, [r2, #8]
 8009b3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	6852      	ldr	r2, [r2, #4]
 8009b46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d103      	bne.n	8009b5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689a      	ldr	r2, [r3, #8]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	1e5a      	subs	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
	...

08009b7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ba6:	f002 fbbd 	bl	800c324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb2:	68f9      	ldr	r1, [r7, #12]
 8009bb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bb6:	fb01 f303 	mul.w	r3, r1, r3
 8009bba:	441a      	add	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	68f9      	ldr	r1, [r7, #12]
 8009bda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bdc:	fb01 f303 	mul.w	r3, r1, r3
 8009be0:	441a      	add	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	22ff      	movs	r2, #255	; 0xff
 8009bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	22ff      	movs	r2, #255	; 0xff
 8009bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d114      	bne.n	8009c26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d01a      	beq.n	8009c3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3310      	adds	r3, #16
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f001 fad9 	bl	800b1c0 <xTaskRemoveFromEventList>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d012      	beq.n	8009c3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c14:	4b0c      	ldr	r3, [pc, #48]	; (8009c48 <xQueueGenericReset+0xcc>)
 8009c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	e009      	b.n	8009c3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3310      	adds	r3, #16
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7ff fef1 	bl	8009a12 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3324      	adds	r3, #36	; 0x24
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff feec 	bl	8009a12 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c3a:	f002 fba3 	bl	800c384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c3e:	2301      	movs	r3, #1
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08e      	sub	sp, #56	; 0x38
 8009c50:	af02      	add	r7, sp, #8
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10a      	bne.n	8009c76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <xQueueGenericCreateStatic+0x52>
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <xQueueGenericCreateStatic+0x56>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <xQueueGenericCreateStatic+0x58>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	623b      	str	r3, [r7, #32]
}
 8009cba:	bf00      	nop
 8009cbc:	e7fe      	b.n	8009cbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d102      	bne.n	8009cca <xQueueGenericCreateStatic+0x7e>
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <xQueueGenericCreateStatic+0x82>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e000      	b.n	8009cd0 <xQueueGenericCreateStatic+0x84>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	61fb      	str	r3, [r7, #28]
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cea:	2350      	movs	r3, #80	; 0x50
 8009cec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b50      	cmp	r3, #80	; 0x50
 8009cf2:	d00a      	beq.n	8009d0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	61bb      	str	r3, [r7, #24]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00d      	beq.n	8009d32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	4613      	mov	r3, r2
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	68b9      	ldr	r1, [r7, #8]
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 f845 	bl	8009dbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3730      	adds	r7, #48	; 0x30
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	; 0x28
 8009d40:	af02      	add	r7, sp, #8
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	4613      	mov	r3, r2
 8009d48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	613b      	str	r3, [r7, #16]
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d102      	bne.n	8009d72 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	61fb      	str	r3, [r7, #28]
 8009d70:	e004      	b.n	8009d7c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	fb02 f303 	mul.w	r3, r2, r3
 8009d7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	3350      	adds	r3, #80	; 0x50
 8009d80:	4618      	mov	r0, r3
 8009d82:	f002 fbf1 	bl	800c568 <pvPortMalloc>
 8009d86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d011      	beq.n	8009db2 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	3350      	adds	r3, #80	; 0x50
 8009d96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009da0:	79fa      	ldrb	r2, [r7, #7]
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	4613      	mov	r3, r2
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 f805 	bl	8009dbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009db2:	69bb      	ldr	r3, [r7, #24]
	}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3720      	adds	r7, #32
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d103      	bne.n	8009dd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	69ba      	ldr	r2, [r7, #24]
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	e002      	b.n	8009dde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009dea:	2101      	movs	r1, #1
 8009dec:	69b8      	ldr	r0, [r7, #24]
 8009dee:	f7ff fec5 	bl	8009b7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009dfa:	bf00      	nop
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08e      	sub	sp, #56	; 0x38
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e12:	2300      	movs	r3, #0
 8009e14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <xQueueGenericSend+0x32>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <xQueueGenericSend+0x40>
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <xQueueGenericSend+0x44>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e000      	b.n	8009e4a <xQueueGenericSend+0x46>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10a      	bne.n	8009e64 <xQueueGenericSend+0x60>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e60:	bf00      	nop
 8009e62:	e7fe      	b.n	8009e62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d103      	bne.n	8009e72 <xQueueGenericSend+0x6e>
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <xQueueGenericSend+0x72>
 8009e72:	2301      	movs	r3, #1
 8009e74:	e000      	b.n	8009e78 <xQueueGenericSend+0x74>
 8009e76:	2300      	movs	r3, #0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10a      	bne.n	8009e92 <xQueueGenericSend+0x8e>
	__asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	623b      	str	r3, [r7, #32]
}
 8009e8e:	bf00      	nop
 8009e90:	e7fe      	b.n	8009e90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e92:	f001 fb51 	bl	800b538 <xTaskGetSchedulerState>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <xQueueGenericSend+0x9e>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <xQueueGenericSend+0xa2>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e000      	b.n	8009ea8 <xQueueGenericSend+0xa4>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10a      	bne.n	8009ec2 <xQueueGenericSend+0xbe>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	61fb      	str	r3, [r7, #28]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ec2:	f002 fa2f 	bl	800c324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d302      	bcc.n	8009ed8 <xQueueGenericSend+0xd4>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d129      	bne.n	8009f2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ede:	f000 fb2b 	bl	800a538 <prvCopyDataToQueue>
 8009ee2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d010      	beq.n	8009f0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	3324      	adds	r3, #36	; 0x24
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f001 f965 	bl	800b1c0 <xTaskRemoveFromEventList>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d013      	beq.n	8009f24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009efc:	4b3f      	ldr	r3, [pc, #252]	; (8009ffc <xQueueGenericSend+0x1f8>)
 8009efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	e00a      	b.n	8009f24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d007      	beq.n	8009f24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f14:	4b39      	ldr	r3, [pc, #228]	; (8009ffc <xQueueGenericSend+0x1f8>)
 8009f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f24:	f002 fa2e 	bl	800c384 <vPortExitCritical>
				return pdPASS;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e063      	b.n	8009ff4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f32:	f002 fa27 	bl	800c384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	e05c      	b.n	8009ff4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f40:	f107 0314 	add.w	r3, r7, #20
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 f99d 	bl	800b284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f4e:	f002 fa19 	bl	800c384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f52:	f000 fefd 	bl	800ad50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f56:	f002 f9e5 	bl	800c324 <vPortEnterCritical>
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f60:	b25b      	sxtb	r3, r3
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f66:	d103      	bne.n	8009f70 <xQueueGenericSend+0x16c>
 8009f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f76:	b25b      	sxtb	r3, r3
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7c:	d103      	bne.n	8009f86 <xQueueGenericSend+0x182>
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f86:	f002 f9fd 	bl	800c384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f8a:	1d3a      	adds	r2, r7, #4
 8009f8c:	f107 0314 	add.w	r3, r7, #20
 8009f90:	4611      	mov	r1, r2
 8009f92:	4618      	mov	r0, r3
 8009f94:	f001 f98c 	bl	800b2b0 <xTaskCheckForTimeOut>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d124      	bne.n	8009fe8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fa0:	f000 fbc2 	bl	800a728 <prvIsQueueFull>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d018      	beq.n	8009fdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	3310      	adds	r3, #16
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 f8b4 	bl	800b120 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fba:	f000 fb4d 	bl	800a658 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fbe:	f000 fed5 	bl	800ad6c <xTaskResumeAll>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f47f af7c 	bne.w	8009ec2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009fca:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <xQueueGenericSend+0x1f8>)
 8009fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	e772      	b.n	8009ec2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fde:	f000 fb3b 	bl	800a658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fe2:	f000 fec3 	bl	800ad6c <xTaskResumeAll>
 8009fe6:	e76c      	b.n	8009ec2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fea:	f000 fb35 	bl	800a658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fee:	f000 febd 	bl	800ad6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ff2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3738      	adds	r7, #56	; 0x38
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	e000ed04 	.word	0xe000ed04

0800a000 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	; 0x38
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d103      	bne.n	800a03c <xQueueGenericSendFromISR+0x3c>
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <xQueueGenericSendFromISR+0x40>
 800a03c:	2301      	movs	r3, #1
 800a03e:	e000      	b.n	800a042 <xQueueGenericSendFromISR+0x42>
 800a040:	2300      	movs	r3, #0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10a      	bne.n	800a05c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	623b      	str	r3, [r7, #32]
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d103      	bne.n	800a06a <xQueueGenericSendFromISR+0x6a>
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a066:	2b01      	cmp	r3, #1
 800a068:	d101      	bne.n	800a06e <xQueueGenericSendFromISR+0x6e>
 800a06a:	2301      	movs	r3, #1
 800a06c:	e000      	b.n	800a070 <xQueueGenericSendFromISR+0x70>
 800a06e:	2300      	movs	r3, #0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	61fb      	str	r3, [r7, #28]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a08a:	f002 fa2d 	bl	800c4e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a08e:	f3ef 8211 	mrs	r2, BASEPRI
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	61ba      	str	r2, [r7, #24]
 800a0a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a0a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d302      	bcc.n	800a0bc <xQueueGenericSendFromISR+0xbc>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d12c      	bne.n	800a116 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0cc:	f000 fa34 	bl	800a538 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d8:	d112      	bne.n	800a100 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d016      	beq.n	800a110 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	3324      	adds	r3, #36	; 0x24
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 f86a 	bl	800b1c0 <xTaskRemoveFromEventList>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00e      	beq.n	800a110 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	e007      	b.n	800a110 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a104:	3301      	adds	r3, #1
 800a106:	b2db      	uxtb	r3, r3
 800a108:	b25a      	sxtb	r2, r3
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a110:	2301      	movs	r3, #1
 800a112:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a114:	e001      	b.n	800a11a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a116:	2300      	movs	r3, #0
 800a118:	637b      	str	r3, [r7, #52]	; 0x34
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a124:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3738      	adds	r7, #56	; 0x38
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08c      	sub	sp, #48	; 0x30
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10a      	bne.n	800a160 <xQueueReceive+0x30>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	623b      	str	r3, [r7, #32]
}
 800a15c:	bf00      	nop
 800a15e:	e7fe      	b.n	800a15e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d103      	bne.n	800a16e <xQueueReceive+0x3e>
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <xQueueReceive+0x42>
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <xQueueReceive+0x44>
 800a172:	2300      	movs	r3, #0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10a      	bne.n	800a18e <xQueueReceive+0x5e>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	61fb      	str	r3, [r7, #28]
}
 800a18a:	bf00      	nop
 800a18c:	e7fe      	b.n	800a18c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a18e:	f001 f9d3 	bl	800b538 <xTaskGetSchedulerState>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d102      	bne.n	800a19e <xQueueReceive+0x6e>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <xQueueReceive+0x72>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e000      	b.n	800a1a4 <xQueueReceive+0x74>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <xQueueReceive+0x8e>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	61bb      	str	r3, [r7, #24]
}
 800a1ba:	bf00      	nop
 800a1bc:	e7fe      	b.n	800a1bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1be:	f002 f8b1 	bl	800c324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d01f      	beq.n	800a20e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1ce:	68b9      	ldr	r1, [r7, #8]
 800a1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1d2:	f000 fa1b 	bl	800a60c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	1e5a      	subs	r2, r3, #1
 800a1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00f      	beq.n	800a206 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	3310      	adds	r3, #16
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 ffe8 	bl	800b1c0 <xTaskRemoveFromEventList>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d007      	beq.n	800a206 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1f6:	4b3d      	ldr	r3, [pc, #244]	; (800a2ec <xQueueReceive+0x1bc>)
 800a1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a206:	f002 f8bd 	bl	800c384 <vPortExitCritical>
				return pdPASS;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e069      	b.n	800a2e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d103      	bne.n	800a21c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a214:	f002 f8b6 	bl	800c384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a218:	2300      	movs	r3, #0
 800a21a:	e062      	b.n	800a2e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d106      	bne.n	800a230 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a222:	f107 0310 	add.w	r3, r7, #16
 800a226:	4618      	mov	r0, r3
 800a228:	f001 f82c 	bl	800b284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a22c:	2301      	movs	r3, #1
 800a22e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a230:	f002 f8a8 	bl	800c384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a234:	f000 fd8c 	bl	800ad50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a238:	f002 f874 	bl	800c324 <vPortEnterCritical>
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a242:	b25b      	sxtb	r3, r3
 800a244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a248:	d103      	bne.n	800a252 <xQueueReceive+0x122>
 800a24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a258:	b25b      	sxtb	r3, r3
 800a25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25e:	d103      	bne.n	800a268 <xQueueReceive+0x138>
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a268:	f002 f88c 	bl	800c384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a26c:	1d3a      	adds	r2, r7, #4
 800a26e:	f107 0310 	add.w	r3, r7, #16
 800a272:	4611      	mov	r1, r2
 800a274:	4618      	mov	r0, r3
 800a276:	f001 f81b 	bl	800b2b0 <xTaskCheckForTimeOut>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d123      	bne.n	800a2c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a282:	f000 fa3b 	bl	800a6fc <prvIsQueueEmpty>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d017      	beq.n	800a2bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	3324      	adds	r3, #36	; 0x24
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	4611      	mov	r1, r2
 800a294:	4618      	mov	r0, r3
 800a296:	f000 ff43 	bl	800b120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a29a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a29c:	f000 f9dc 	bl	800a658 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2a0:	f000 fd64 	bl	800ad6c <xTaskResumeAll>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d189      	bne.n	800a1be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a2aa:	4b10      	ldr	r3, [pc, #64]	; (800a2ec <xQueueReceive+0x1bc>)
 800a2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b0:	601a      	str	r2, [r3, #0]
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	e780      	b.n	800a1be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2be:	f000 f9cb 	bl	800a658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2c2:	f000 fd53 	bl	800ad6c <xTaskResumeAll>
 800a2c6:	e77a      	b.n	800a1be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2ca:	f000 f9c5 	bl	800a658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2ce:	f000 fd4d 	bl	800ad6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d4:	f000 fa12 	bl	800a6fc <prvIsQueueEmpty>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f43f af6f 	beq.w	800a1be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3730      	adds	r7, #48	; 0x30
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	e000ed04 	.word	0xe000ed04

0800a2f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08e      	sub	sp, #56	; 0x38
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a302:	2300      	movs	r3, #0
 800a304:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	623b      	str	r3, [r7, #32]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00a      	beq.n	800a340 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	61fb      	str	r3, [r7, #28]
}
 800a33c:	bf00      	nop
 800a33e:	e7fe      	b.n	800a33e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a340:	f001 f8fa 	bl	800b538 <xTaskGetSchedulerState>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d102      	bne.n	800a350 <xQueueSemaphoreTake+0x60>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <xQueueSemaphoreTake+0x64>
 800a350:	2301      	movs	r3, #1
 800a352:	e000      	b.n	800a356 <xQueueSemaphoreTake+0x66>
 800a354:	2300      	movs	r3, #0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10a      	bne.n	800a370 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	61bb      	str	r3, [r7, #24]
}
 800a36c:	bf00      	nop
 800a36e:	e7fe      	b.n	800a36e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a370:	f001 ffd8 	bl	800c324 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a378:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d024      	beq.n	800a3ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	1e5a      	subs	r2, r3, #1
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d104      	bne.n	800a39a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a390:	f001 fa90 	bl	800b8b4 <pvTaskIncrementMutexHeldCount>
 800a394:	4602      	mov	r2, r0
 800a396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a398:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00f      	beq.n	800a3c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	3310      	adds	r3, #16
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 ff0a 	bl	800b1c0 <xTaskRemoveFromEventList>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d007      	beq.n	800a3c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3b2:	4b54      	ldr	r3, [pc, #336]	; (800a504 <xQueueSemaphoreTake+0x214>)
 800a3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3c2:	f001 ffdf 	bl	800c384 <vPortExitCritical>
				return pdPASS;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e097      	b.n	800a4fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d111      	bne.n	800a3f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00a      	beq.n	800a3ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	617b      	str	r3, [r7, #20]
}
 800a3e8:	bf00      	nop
 800a3ea:	e7fe      	b.n	800a3ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a3ec:	f001 ffca 	bl	800c384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e082      	b.n	800a4fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d106      	bne.n	800a408 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3fa:	f107 030c 	add.w	r3, r7, #12
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 ff40 	bl	800b284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a404:	2301      	movs	r3, #1
 800a406:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a408:	f001 ffbc 	bl	800c384 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a40c:	f000 fca0 	bl	800ad50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a410:	f001 ff88 	bl	800c324 <vPortEnterCritical>
 800a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a41a:	b25b      	sxtb	r3, r3
 800a41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a420:	d103      	bne.n	800a42a <xQueueSemaphoreTake+0x13a>
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a430:	b25b      	sxtb	r3, r3
 800a432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a436:	d103      	bne.n	800a440 <xQueueSemaphoreTake+0x150>
 800a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a440:	f001 ffa0 	bl	800c384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a444:	463a      	mov	r2, r7
 800a446:	f107 030c 	add.w	r3, r7, #12
 800a44a:	4611      	mov	r1, r2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 ff2f 	bl	800b2b0 <xTaskCheckForTimeOut>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d132      	bne.n	800a4be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a45a:	f000 f94f 	bl	800a6fc <prvIsQueueEmpty>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d026      	beq.n	800a4b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d109      	bne.n	800a480 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a46c:	f001 ff5a 	bl	800c324 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	4618      	mov	r0, r3
 800a476:	f001 f87d 	bl	800b574 <xTaskPriorityInherit>
 800a47a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a47c:	f001 ff82 	bl	800c384 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a482:	3324      	adds	r3, #36	; 0x24
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	4611      	mov	r1, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 fe49 	bl	800b120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a48e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a490:	f000 f8e2 	bl	800a658 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a494:	f000 fc6a 	bl	800ad6c <xTaskResumeAll>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f47f af68 	bne.w	800a370 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a4a0:	4b18      	ldr	r3, [pc, #96]	; (800a504 <xQueueSemaphoreTake+0x214>)
 800a4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a6:	601a      	str	r2, [r3, #0]
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	e75e      	b.n	800a370 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a4b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4b4:	f000 f8d0 	bl	800a658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4b8:	f000 fc58 	bl	800ad6c <xTaskResumeAll>
 800a4bc:	e758      	b.n	800a370 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a4be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4c0:	f000 f8ca 	bl	800a658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4c4:	f000 fc52 	bl	800ad6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4ca:	f000 f917 	bl	800a6fc <prvIsQueueEmpty>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f43f af4d 	beq.w	800a370 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00d      	beq.n	800a4f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a4dc:	f001 ff22 	bl	800c324 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a4e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4e2:	f000 f811 	bl	800a508 <prvGetDisinheritPriorityAfterTimeout>
 800a4e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f001 f946 	bl	800b780 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a4f4:	f001 ff46 	bl	800c384 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3738      	adds	r7, #56	; 0x38
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	e000ed04 	.word	0xe000ed04

0800a508 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	d006      	beq.n	800a526 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f1c3 0307 	rsb	r3, r3, #7
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	e001      	b.n	800a52a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a526:	2300      	movs	r3, #0
 800a528:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a52a:	68fb      	ldr	r3, [r7, #12]
	}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a544:	2300      	movs	r3, #0
 800a546:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10d      	bne.n	800a572 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d14d      	bne.n	800a5fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	4618      	mov	r0, r3
 800a564:	f001 f886 	bl	800b674 <xTaskPriorityDisinherit>
 800a568:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	609a      	str	r2, [r3, #8]
 800a570:	e043      	b.n	800a5fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d119      	bne.n	800a5ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6858      	ldr	r0, [r3, #4]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a580:	461a      	mov	r2, r3
 800a582:	68b9      	ldr	r1, [r7, #8]
 800a584:	f002 fc0a 	bl	800cd9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a590:	441a      	add	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d32b      	bcc.n	800a5fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	605a      	str	r2, [r3, #4]
 800a5aa:	e026      	b.n	800a5fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	68d8      	ldr	r0, [r3, #12]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	68b9      	ldr	r1, [r7, #8]
 800a5b8:	f002 fbf0 	bl	800cd9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	68da      	ldr	r2, [r3, #12]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c4:	425b      	negs	r3, r3
 800a5c6:	441a      	add	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	68da      	ldr	r2, [r3, #12]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d207      	bcs.n	800a5e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	689a      	ldr	r2, [r3, #8]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e0:	425b      	negs	r3, r3
 800a5e2:	441a      	add	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d105      	bne.n	800a5fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a602:	697b      	ldr	r3, [r7, #20]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d018      	beq.n	800a650 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68da      	ldr	r2, [r3, #12]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a626:	441a      	add	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	429a      	cmp	r2, r3
 800a636:	d303      	bcc.n	800a640 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	68d9      	ldr	r1, [r3, #12]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a648:	461a      	mov	r2, r3
 800a64a:	6838      	ldr	r0, [r7, #0]
 800a64c:	f002 fba6 	bl	800cd9c <memcpy>
	}
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a660:	f001 fe60 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a66a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a66c:	e011      	b.n	800a692 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a672:	2b00      	cmp	r3, #0
 800a674:	d012      	beq.n	800a69c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3324      	adds	r3, #36	; 0x24
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 fda0 	bl	800b1c0 <xTaskRemoveFromEventList>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a686:	f000 fe75 	bl	800b374 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a696:	2b00      	cmp	r3, #0
 800a698:	dce9      	bgt.n	800a66e <prvUnlockQueue+0x16>
 800a69a:	e000      	b.n	800a69e <prvUnlockQueue+0x46>
					break;
 800a69c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	22ff      	movs	r2, #255	; 0xff
 800a6a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6a6:	f001 fe6d 	bl	800c384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6aa:	f001 fe3b 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6b6:	e011      	b.n	800a6dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d012      	beq.n	800a6e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3310      	adds	r3, #16
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 fd7b 	bl	800b1c0 <xTaskRemoveFromEventList>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6d0:	f000 fe50 	bl	800b374 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	dce9      	bgt.n	800a6b8 <prvUnlockQueue+0x60>
 800a6e4:	e000      	b.n	800a6e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	22ff      	movs	r2, #255	; 0xff
 800a6ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a6f0:	f001 fe48 	bl	800c384 <vPortExitCritical>
}
 800a6f4:	bf00      	nop
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a704:	f001 fe0e 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d102      	bne.n	800a716 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a710:	2301      	movs	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	e001      	b.n	800a71a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a71a:	f001 fe33 	bl	800c384 <vPortExitCritical>

	return xReturn;
 800a71e:	68fb      	ldr	r3, [r7, #12]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a730:	f001 fdf8 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d102      	bne.n	800a746 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a740:	2301      	movs	r3, #1
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	e001      	b.n	800a74a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a746:	2300      	movs	r3, #0
 800a748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a74a:	f001 fe1b 	bl	800c384 <vPortExitCritical>

	return xReturn;
 800a74e:	68fb      	ldr	r3, [r7, #12]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a762:	2300      	movs	r3, #0
 800a764:	60fb      	str	r3, [r7, #12]
 800a766:	e014      	b.n	800a792 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a768:	4a0f      	ldr	r2, [pc, #60]	; (800a7a8 <vQueueAddToRegistry+0x50>)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10b      	bne.n	800a78c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a774:	490c      	ldr	r1, [pc, #48]	; (800a7a8 <vQueueAddToRegistry+0x50>)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a77e:	4a0a      	ldr	r2, [pc, #40]	; (800a7a8 <vQueueAddToRegistry+0x50>)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	4413      	add	r3, r2
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a78a:	e006      	b.n	800a79a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	3301      	adds	r3, #1
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b0b      	cmp	r3, #11
 800a796:	d9e7      	bls.n	800a768 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a798:	bf00      	nop
 800a79a:	bf00      	nop
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	200220b0 	.word	0x200220b0

0800a7ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7bc:	f001 fdb2 	bl	800c324 <vPortEnterCritical>
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7c6:	b25b      	sxtb	r3, r3
 800a7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7cc:	d103      	bne.n	800a7d6 <vQueueWaitForMessageRestricted+0x2a>
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7dc:	b25b      	sxtb	r3, r3
 800a7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e2:	d103      	bne.n	800a7ec <vQueueWaitForMessageRestricted+0x40>
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7ec:	f001 fdca 	bl	800c384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d106      	bne.n	800a806 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	3324      	adds	r3, #36	; 0x24
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	68b9      	ldr	r1, [r7, #8]
 800a800:	4618      	mov	r0, r3
 800a802:	f000 fcb1 	bl	800b168 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a806:	6978      	ldr	r0, [r7, #20]
 800a808:	f7ff ff26 	bl	800a658 <prvUnlockQueue>
	}
 800a80c:	bf00      	nop
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08e      	sub	sp, #56	; 0x38
 800a818:	af04      	add	r7, sp, #16
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10a      	bne.n	800a83e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	623b      	str	r3, [r7, #32]
}
 800a83a:	bf00      	nop
 800a83c:	e7fe      	b.n	800a83c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10a      	bne.n	800a85a <xTaskCreateStatic+0x46>
	__asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	61fb      	str	r3, [r7, #28]
}
 800a856:	bf00      	nop
 800a858:	e7fe      	b.n	800a858 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a85a:	2364      	movs	r3, #100	; 0x64
 800a85c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	2b64      	cmp	r3, #100	; 0x64
 800a862:	d00a      	beq.n	800a87a <xTaskCreateStatic+0x66>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	61bb      	str	r3, [r7, #24]
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a87a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d01e      	beq.n	800a8c0 <xTaskCreateStatic+0xac>
 800a882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a884:	2b00      	cmp	r3, #0
 800a886:	d01b      	beq.n	800a8c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a890:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	2202      	movs	r2, #2
 800a896:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a89a:	2300      	movs	r3, #0
 800a89c:	9303      	str	r3, [sp, #12]
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	9302      	str	r3, [sp, #8]
 800a8a2:	f107 0314 	add.w	r3, r7, #20
 800a8a6:	9301      	str	r3, [sp, #4]
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	68b9      	ldr	r1, [r7, #8]
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f000 f850 	bl	800a958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8ba:	f000 f8e3 	bl	800aa84 <prvAddNewTaskToReadyList>
 800a8be:	e001      	b.n	800a8c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8c4:	697b      	ldr	r3, [r7, #20]
	}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3728      	adds	r7, #40	; 0x28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b08c      	sub	sp, #48	; 0x30
 800a8d2:	af04      	add	r7, sp, #16
 800a8d4:	60f8      	str	r0, [r7, #12]
 800a8d6:	60b9      	str	r1, [r7, #8]
 800a8d8:	603b      	str	r3, [r7, #0]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8de:	88fb      	ldrh	r3, [r7, #6]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f001 fe40 	bl	800c568 <pvPortMalloc>
 800a8e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00e      	beq.n	800a90e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a8f0:	2064      	movs	r0, #100	; 0x64
 800a8f2:	f001 fe39 	bl	800c568 <pvPortMalloc>
 800a8f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	631a      	str	r2, [r3, #48]	; 0x30
 800a904:	e005      	b.n	800a912 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a906:	6978      	ldr	r0, [r7, #20]
 800a908:	f001 fef2 	bl	800c6f0 <vPortFree>
 800a90c:	e001      	b.n	800a912 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d017      	beq.n	800a948 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a920:	88fa      	ldrh	r2, [r7, #6]
 800a922:	2300      	movs	r3, #0
 800a924:	9303      	str	r3, [sp, #12]
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	9302      	str	r3, [sp, #8]
 800a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92c:	9301      	str	r3, [sp, #4]
 800a92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	68b9      	ldr	r1, [r7, #8]
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 f80e 	bl	800a958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a93c:	69f8      	ldr	r0, [r7, #28]
 800a93e:	f000 f8a1 	bl	800aa84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a942:	2301      	movs	r3, #1
 800a944:	61bb      	str	r3, [r7, #24]
 800a946:	e002      	b.n	800a94e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a948:	f04f 33ff 	mov.w	r3, #4294967295
 800a94c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a94e:	69bb      	ldr	r3, [r7, #24]
	}
 800a950:	4618      	mov	r0, r3
 800a952:	3720      	adds	r7, #32
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	461a      	mov	r2, r3
 800a970:	21a5      	movs	r1, #165	; 0xa5
 800a972:	f002 fa21 	bl	800cdb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a980:	3b01      	subs	r3, #1
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	f023 0307 	bic.w	r3, r3, #7
 800a98e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	f003 0307 	and.w	r3, r3, #7
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	617b      	str	r3, [r7, #20]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d01f      	beq.n	800a9fc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9bc:	2300      	movs	r3, #0
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	e012      	b.n	800a9e8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	7819      	ldrb	r1, [r3, #0]
 800a9ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	3334      	adds	r3, #52	; 0x34
 800a9d2:	460a      	mov	r2, r1
 800a9d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	4413      	add	r3, r2
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d006      	beq.n	800a9f0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	61fb      	str	r3, [r7, #28]
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	2b0f      	cmp	r3, #15
 800a9ec:	d9e9      	bls.n	800a9c2 <prvInitialiseNewTask+0x6a>
 800a9ee:	e000      	b.n	800a9f2 <prvInitialiseNewTask+0x9a>
			{
				break;
 800a9f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9fa:	e003      	b.n	800aa04 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	2b06      	cmp	r3, #6
 800aa08:	d901      	bls.n	800aa0e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa0a:	2306      	movs	r3, #6
 800aa0c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa18:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	3304      	adds	r3, #4
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7ff f814 	bl	8009a52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	3318      	adds	r3, #24
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff f80f 	bl	8009a52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3c:	f1c3 0207 	rsb	r2, r3, #7
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa52:	2200      	movs	r2, #0
 800aa54:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	68f9      	ldr	r1, [r7, #12]
 800aa62:	69b8      	ldr	r0, [r7, #24]
 800aa64:	f001 fb2e 	bl	800c0c4 <pxPortInitialiseStack>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa7a:	bf00      	nop
 800aa7c:	3720      	adds	r7, #32
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
	...

0800aa84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa8c:	f001 fc4a 	bl	800c324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa90:	4b2c      	ldr	r3, [pc, #176]	; (800ab44 <prvAddNewTaskToReadyList+0xc0>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3301      	adds	r3, #1
 800aa96:	4a2b      	ldr	r2, [pc, #172]	; (800ab44 <prvAddNewTaskToReadyList+0xc0>)
 800aa98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aa9a:	4b2b      	ldr	r3, [pc, #172]	; (800ab48 <prvAddNewTaskToReadyList+0xc4>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d109      	bne.n	800aab6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aaa2:	4a29      	ldr	r2, [pc, #164]	; (800ab48 <prvAddNewTaskToReadyList+0xc4>)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aaa8:	4b26      	ldr	r3, [pc, #152]	; (800ab44 <prvAddNewTaskToReadyList+0xc0>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d110      	bne.n	800aad2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aab0:	f000 fc84 	bl	800b3bc <prvInitialiseTaskLists>
 800aab4:	e00d      	b.n	800aad2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aab6:	4b25      	ldr	r3, [pc, #148]	; (800ab4c <prvAddNewTaskToReadyList+0xc8>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d109      	bne.n	800aad2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aabe:	4b22      	ldr	r3, [pc, #136]	; (800ab48 <prvAddNewTaskToReadyList+0xc4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d802      	bhi.n	800aad2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aacc:	4a1e      	ldr	r2, [pc, #120]	; (800ab48 <prvAddNewTaskToReadyList+0xc4>)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aad2:	4b1f      	ldr	r3, [pc, #124]	; (800ab50 <prvAddNewTaskToReadyList+0xcc>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3301      	adds	r3, #1
 800aad8:	4a1d      	ldr	r2, [pc, #116]	; (800ab50 <prvAddNewTaskToReadyList+0xcc>)
 800aada:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aadc:	4b1c      	ldr	r3, [pc, #112]	; (800ab50 <prvAddNewTaskToReadyList+0xcc>)
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	2201      	movs	r2, #1
 800aaea:	409a      	lsls	r2, r3
 800aaec:	4b19      	ldr	r3, [pc, #100]	; (800ab54 <prvAddNewTaskToReadyList+0xd0>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	4a18      	ldr	r2, [pc, #96]	; (800ab54 <prvAddNewTaskToReadyList+0xd0>)
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4a15      	ldr	r2, [pc, #84]	; (800ab58 <prvAddNewTaskToReadyList+0xd4>)
 800ab04:	441a      	add	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	f7fe ffad 	bl	8009a6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab12:	f001 fc37 	bl	800c384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab16:	4b0d      	ldr	r3, [pc, #52]	; (800ab4c <prvAddNewTaskToReadyList+0xc8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00e      	beq.n	800ab3c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab1e:	4b0a      	ldr	r3, [pc, #40]	; (800ab48 <prvAddNewTaskToReadyList+0xc4>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d207      	bcs.n	800ab3c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab2c:	4b0b      	ldr	r3, [pc, #44]	; (800ab5c <prvAddNewTaskToReadyList+0xd8>)
 800ab2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab3c:	bf00      	nop
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	2000270c 	.word	0x2000270c
 800ab48:	2000260c 	.word	0x2000260c
 800ab4c:	20002718 	.word	0x20002718
 800ab50:	20002728 	.word	0x20002728
 800ab54:	20002714 	.word	0x20002714
 800ab58:	20002610 	.word	0x20002610
 800ab5c:	e000ed04 	.word	0xe000ed04

0800ab60 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ab68:	f001 fbdc 	bl	800c324 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d102      	bne.n	800ab78 <vTaskDelete+0x18>
 800ab72:	4b39      	ldr	r3, [pc, #228]	; (800ac58 <vTaskDelete+0xf8>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	e000      	b.n	800ab7a <vTaskDelete+0x1a>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	3304      	adds	r3, #4
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7fe ffd0 	bl	8009b26 <uxListRemove>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d115      	bne.n	800abb8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab90:	4932      	ldr	r1, [pc, #200]	; (800ac5c <vTaskDelete+0xfc>)
 800ab92:	4613      	mov	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	440b      	add	r3, r1
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10a      	bne.n	800abb8 <vTaskDelete+0x58>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba6:	2201      	movs	r2, #1
 800aba8:	fa02 f303 	lsl.w	r3, r2, r3
 800abac:	43da      	mvns	r2, r3
 800abae:	4b2c      	ldr	r3, [pc, #176]	; (800ac60 <vTaskDelete+0x100>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4013      	ands	r3, r2
 800abb4:	4a2a      	ldr	r2, [pc, #168]	; (800ac60 <vTaskDelete+0x100>)
 800abb6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d004      	beq.n	800abca <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3318      	adds	r3, #24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fe ffae 	bl	8009b26 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800abca:	4b26      	ldr	r3, [pc, #152]	; (800ac64 <vTaskDelete+0x104>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3301      	adds	r3, #1
 800abd0:	4a24      	ldr	r2, [pc, #144]	; (800ac64 <vTaskDelete+0x104>)
 800abd2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800abd4:	4b20      	ldr	r3, [pc, #128]	; (800ac58 <vTaskDelete+0xf8>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d10b      	bne.n	800abf6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3304      	adds	r3, #4
 800abe2:	4619      	mov	r1, r3
 800abe4:	4820      	ldr	r0, [pc, #128]	; (800ac68 <vTaskDelete+0x108>)
 800abe6:	f7fe ff41 	bl	8009a6c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800abea:	4b20      	ldr	r3, [pc, #128]	; (800ac6c <vTaskDelete+0x10c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3301      	adds	r3, #1
 800abf0:	4a1e      	ldr	r2, [pc, #120]	; (800ac6c <vTaskDelete+0x10c>)
 800abf2:	6013      	str	r3, [r2, #0]
 800abf4:	e009      	b.n	800ac0a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800abf6:	4b1e      	ldr	r3, [pc, #120]	; (800ac70 <vTaskDelete+0x110>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3b01      	subs	r3, #1
 800abfc:	4a1c      	ldr	r2, [pc, #112]	; (800ac70 <vTaskDelete+0x110>)
 800abfe:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 fc49 	bl	800b498 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ac06:	f000 fc77 	bl	800b4f8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800ac0a:	f001 fbbb 	bl	800c384 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ac0e:	4b19      	ldr	r3, [pc, #100]	; (800ac74 <vTaskDelete+0x114>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d01b      	beq.n	800ac4e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800ac16:	4b10      	ldr	r3, [pc, #64]	; (800ac58 <vTaskDelete+0xf8>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d116      	bne.n	800ac4e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ac20:	4b15      	ldr	r3, [pc, #84]	; (800ac78 <vTaskDelete+0x118>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00a      	beq.n	800ac3e <vTaskDelete+0xde>
	__asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	60bb      	str	r3, [r7, #8]
}
 800ac3a:	bf00      	nop
 800ac3c:	e7fe      	b.n	800ac3c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800ac3e:	4b0f      	ldr	r3, [pc, #60]	; (800ac7c <vTaskDelete+0x11c>)
 800ac40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac4e:	bf00      	nop
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	2000260c 	.word	0x2000260c
 800ac5c:	20002610 	.word	0x20002610
 800ac60:	20002714 	.word	0x20002714
 800ac64:	20002728 	.word	0x20002728
 800ac68:	200026e0 	.word	0x200026e0
 800ac6c:	200026f4 	.word	0x200026f4
 800ac70:	2000270c 	.word	0x2000270c
 800ac74:	20002718 	.word	0x20002718
 800ac78:	20002734 	.word	0x20002734
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08a      	sub	sp, #40	; 0x28
 800ac84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac8e:	463a      	mov	r2, r7
 800ac90:	1d39      	adds	r1, r7, #4
 800ac92:	f107 0308 	add.w	r3, r7, #8
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7f6 fa72 	bl	8001180 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	9202      	str	r2, [sp, #8]
 800aca4:	9301      	str	r3, [sp, #4]
 800aca6:	2300      	movs	r3, #0
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	2300      	movs	r3, #0
 800acac:	460a      	mov	r2, r1
 800acae:	4922      	ldr	r1, [pc, #136]	; (800ad38 <vTaskStartScheduler+0xb8>)
 800acb0:	4822      	ldr	r0, [pc, #136]	; (800ad3c <vTaskStartScheduler+0xbc>)
 800acb2:	f7ff fdaf 	bl	800a814 <xTaskCreateStatic>
 800acb6:	4603      	mov	r3, r0
 800acb8:	4a21      	ldr	r2, [pc, #132]	; (800ad40 <vTaskStartScheduler+0xc0>)
 800acba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800acbc:	4b20      	ldr	r3, [pc, #128]	; (800ad40 <vTaskStartScheduler+0xc0>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800acc4:	2301      	movs	r3, #1
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	e001      	b.n	800acce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acca:	2300      	movs	r3, #0
 800accc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d102      	bne.n	800acda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800acd4:	f000 fe68 	bl	800b9a8 <xTimerCreateTimerTask>
 800acd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d118      	bne.n	800ad12 <vTaskStartScheduler+0x92>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	613b      	str	r3, [r7, #16]
}
 800acf2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800acf4:	4b13      	ldr	r3, [pc, #76]	; (800ad44 <vTaskStartScheduler+0xc4>)
 800acf6:	f04f 32ff 	mov.w	r2, #4294967295
 800acfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acfc:	4b12      	ldr	r3, [pc, #72]	; (800ad48 <vTaskStartScheduler+0xc8>)
 800acfe:	2201      	movs	r2, #1
 800ad00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad02:	4b12      	ldr	r3, [pc, #72]	; (800ad4c <vTaskStartScheduler+0xcc>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ad08:	f7f6 fdc2 	bl	8001890 <RTOS_AppConfigureTimerForRuntimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad0c:	f001 fa68 	bl	800c1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad10:	e00e      	b.n	800ad30 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad18:	d10a      	bne.n	800ad30 <vTaskStartScheduler+0xb0>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	60fb      	str	r3, [r7, #12]
}
 800ad2c:	bf00      	nop
 800ad2e:	e7fe      	b.n	800ad2e <vTaskStartScheduler+0xae>
}
 800ad30:	bf00      	nop
 800ad32:	3718      	adds	r7, #24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	0800f980 	.word	0x0800f980
 800ad3c:	0800b38d 	.word	0x0800b38d
 800ad40:	20002730 	.word	0x20002730
 800ad44:	2000272c 	.word	0x2000272c
 800ad48:	20002718 	.word	0x20002718
 800ad4c:	20002710 	.word	0x20002710

0800ad50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad50:	b480      	push	{r7}
 800ad52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ad54:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <vTaskSuspendAll+0x18>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	4a03      	ldr	r2, [pc, #12]	; (800ad68 <vTaskSuspendAll+0x18>)
 800ad5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ad5e:	bf00      	nop
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	20002734 	.word	0x20002734

0800ad6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad76:	2300      	movs	r3, #0
 800ad78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad7a:	4b41      	ldr	r3, [pc, #260]	; (800ae80 <xTaskResumeAll+0x114>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <xTaskResumeAll+0x2c>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	603b      	str	r3, [r7, #0]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad98:	f001 fac4 	bl	800c324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad9c:	4b38      	ldr	r3, [pc, #224]	; (800ae80 <xTaskResumeAll+0x114>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	4a37      	ldr	r2, [pc, #220]	; (800ae80 <xTaskResumeAll+0x114>)
 800ada4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ada6:	4b36      	ldr	r3, [pc, #216]	; (800ae80 <xTaskResumeAll+0x114>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d161      	bne.n	800ae72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800adae:	4b35      	ldr	r3, [pc, #212]	; (800ae84 <xTaskResumeAll+0x118>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d05d      	beq.n	800ae72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adb6:	e02e      	b.n	800ae16 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adb8:	4b33      	ldr	r3, [pc, #204]	; (800ae88 <xTaskResumeAll+0x11c>)
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3318      	adds	r3, #24
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fe feae 	bl	8009b26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3304      	adds	r3, #4
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe fea9 	bl	8009b26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add8:	2201      	movs	r2, #1
 800adda:	409a      	lsls	r2, r3
 800addc:	4b2b      	ldr	r3, [pc, #172]	; (800ae8c <xTaskResumeAll+0x120>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	4a2a      	ldr	r2, [pc, #168]	; (800ae8c <xTaskResumeAll+0x120>)
 800ade4:	6013      	str	r3, [r2, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4a27      	ldr	r2, [pc, #156]	; (800ae90 <xTaskResumeAll+0x124>)
 800adf4:	441a      	add	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4619      	mov	r1, r3
 800adfc:	4610      	mov	r0, r2
 800adfe:	f7fe fe35 	bl	8009a6c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae06:	4b23      	ldr	r3, [pc, #140]	; (800ae94 <xTaskResumeAll+0x128>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d302      	bcc.n	800ae16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ae10:	4b21      	ldr	r3, [pc, #132]	; (800ae98 <xTaskResumeAll+0x12c>)
 800ae12:	2201      	movs	r2, #1
 800ae14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae16:	4b1c      	ldr	r3, [pc, #112]	; (800ae88 <xTaskResumeAll+0x11c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1cc      	bne.n	800adb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae24:	f000 fb68 	bl	800b4f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ae28:	4b1c      	ldr	r3, [pc, #112]	; (800ae9c <xTaskResumeAll+0x130>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d010      	beq.n	800ae56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae34:	f000 f846 	bl	800aec4 <xTaskIncrementTick>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ae3e:	4b16      	ldr	r3, [pc, #88]	; (800ae98 <xTaskResumeAll+0x12c>)
 800ae40:	2201      	movs	r2, #1
 800ae42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1f1      	bne.n	800ae34 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800ae50:	4b12      	ldr	r3, [pc, #72]	; (800ae9c <xTaskResumeAll+0x130>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae56:	4b10      	ldr	r3, [pc, #64]	; (800ae98 <xTaskResumeAll+0x12c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d009      	beq.n	800ae72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae62:	4b0f      	ldr	r3, [pc, #60]	; (800aea0 <xTaskResumeAll+0x134>)
 800ae64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae72:	f001 fa87 	bl	800c384 <vPortExitCritical>

	return xAlreadyYielded;
 800ae76:	68bb      	ldr	r3, [r7, #8]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20002734 	.word	0x20002734
 800ae84:	2000270c 	.word	0x2000270c
 800ae88:	200026cc 	.word	0x200026cc
 800ae8c:	20002714 	.word	0x20002714
 800ae90:	20002610 	.word	0x20002610
 800ae94:	2000260c 	.word	0x2000260c
 800ae98:	20002720 	.word	0x20002720
 800ae9c:	2000271c 	.word	0x2000271c
 800aea0:	e000ed04 	.word	0xe000ed04

0800aea4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aeaa:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <xTaskGetTickCount+0x1c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aeb0:	687b      	ldr	r3, [r7, #4]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	20002710 	.word	0x20002710

0800aec4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aeca:	2300      	movs	r3, #0
 800aecc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aece:	4b4e      	ldr	r3, [pc, #312]	; (800b008 <xTaskIncrementTick+0x144>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f040 8088 	bne.w	800afe8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aed8:	4b4c      	ldr	r3, [pc, #304]	; (800b00c <xTaskIncrementTick+0x148>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3301      	adds	r3, #1
 800aede:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aee0:	4a4a      	ldr	r2, [pc, #296]	; (800b00c <xTaskIncrementTick+0x148>)
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d120      	bne.n	800af2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aeec:	4b48      	ldr	r3, [pc, #288]	; (800b010 <xTaskIncrementTick+0x14c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <xTaskIncrementTick+0x48>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	603b      	str	r3, [r7, #0]
}
 800af08:	bf00      	nop
 800af0a:	e7fe      	b.n	800af0a <xTaskIncrementTick+0x46>
 800af0c:	4b40      	ldr	r3, [pc, #256]	; (800b010 <xTaskIncrementTick+0x14c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	60fb      	str	r3, [r7, #12]
 800af12:	4b40      	ldr	r3, [pc, #256]	; (800b014 <xTaskIncrementTick+0x150>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a3e      	ldr	r2, [pc, #248]	; (800b010 <xTaskIncrementTick+0x14c>)
 800af18:	6013      	str	r3, [r2, #0]
 800af1a:	4a3e      	ldr	r2, [pc, #248]	; (800b014 <xTaskIncrementTick+0x150>)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	4b3d      	ldr	r3, [pc, #244]	; (800b018 <xTaskIncrementTick+0x154>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3301      	adds	r3, #1
 800af26:	4a3c      	ldr	r2, [pc, #240]	; (800b018 <xTaskIncrementTick+0x154>)
 800af28:	6013      	str	r3, [r2, #0]
 800af2a:	f000 fae5 	bl	800b4f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af2e:	4b3b      	ldr	r3, [pc, #236]	; (800b01c <xTaskIncrementTick+0x158>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	429a      	cmp	r2, r3
 800af36:	d348      	bcc.n	800afca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af38:	4b35      	ldr	r3, [pc, #212]	; (800b010 <xTaskIncrementTick+0x14c>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d104      	bne.n	800af4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af42:	4b36      	ldr	r3, [pc, #216]	; (800b01c <xTaskIncrementTick+0x158>)
 800af44:	f04f 32ff 	mov.w	r2, #4294967295
 800af48:	601a      	str	r2, [r3, #0]
					break;
 800af4a:	e03e      	b.n	800afca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af4c:	4b30      	ldr	r3, [pc, #192]	; (800b010 <xTaskIncrementTick+0x14c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af5c:	693a      	ldr	r2, [r7, #16]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	429a      	cmp	r2, r3
 800af62:	d203      	bcs.n	800af6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af64:	4a2d      	ldr	r2, [pc, #180]	; (800b01c <xTaskIncrementTick+0x158>)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af6a:	e02e      	b.n	800afca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	3304      	adds	r3, #4
 800af70:	4618      	mov	r0, r3
 800af72:	f7fe fdd8 	bl	8009b26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d004      	beq.n	800af88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	3318      	adds	r3, #24
 800af82:	4618      	mov	r0, r3
 800af84:	f7fe fdcf 	bl	8009b26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8c:	2201      	movs	r2, #1
 800af8e:	409a      	lsls	r2, r3
 800af90:	4b23      	ldr	r3, [pc, #140]	; (800b020 <xTaskIncrementTick+0x15c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4313      	orrs	r3, r2
 800af96:	4a22      	ldr	r2, [pc, #136]	; (800b020 <xTaskIncrementTick+0x15c>)
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9e:	4613      	mov	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4a1f      	ldr	r2, [pc, #124]	; (800b024 <xTaskIncrementTick+0x160>)
 800afa8:	441a      	add	r2, r3
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	3304      	adds	r3, #4
 800afae:	4619      	mov	r1, r3
 800afb0:	4610      	mov	r0, r2
 800afb2:	f7fe fd5b 	bl	8009a6c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afba:	4b1b      	ldr	r3, [pc, #108]	; (800b028 <xTaskIncrementTick+0x164>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d3b9      	bcc.n	800af38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800afc4:	2301      	movs	r3, #1
 800afc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afc8:	e7b6      	b.n	800af38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afca:	4b17      	ldr	r3, [pc, #92]	; (800b028 <xTaskIncrementTick+0x164>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd0:	4914      	ldr	r1, [pc, #80]	; (800b024 <xTaskIncrementTick+0x160>)
 800afd2:	4613      	mov	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	440b      	add	r3, r1
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d907      	bls.n	800aff2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800afe2:	2301      	movs	r3, #1
 800afe4:	617b      	str	r3, [r7, #20]
 800afe6:	e004      	b.n	800aff2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800afe8:	4b10      	ldr	r3, [pc, #64]	; (800b02c <xTaskIncrementTick+0x168>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3301      	adds	r3, #1
 800afee:	4a0f      	ldr	r2, [pc, #60]	; (800b02c <xTaskIncrementTick+0x168>)
 800aff0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aff2:	4b0f      	ldr	r3, [pc, #60]	; (800b030 <xTaskIncrementTick+0x16c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800affa:	2301      	movs	r3, #1
 800affc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800affe:	697b      	ldr	r3, [r7, #20]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	20002734 	.word	0x20002734
 800b00c:	20002710 	.word	0x20002710
 800b010:	200026c4 	.word	0x200026c4
 800b014:	200026c8 	.word	0x200026c8
 800b018:	20002724 	.word	0x20002724
 800b01c:	2000272c 	.word	0x2000272c
 800b020:	20002714 	.word	0x20002714
 800b024:	20002610 	.word	0x20002610
 800b028:	2000260c 	.word	0x2000260c
 800b02c:	2000271c 	.word	0x2000271c
 800b030:	20002720 	.word	0x20002720

0800b034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b03a:	4b32      	ldr	r3, [pc, #200]	; (800b104 <vTaskSwitchContext+0xd0>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b042:	4b31      	ldr	r3, [pc, #196]	; (800b108 <vTaskSwitchContext+0xd4>)
 800b044:	2201      	movs	r2, #1
 800b046:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b048:	e058      	b.n	800b0fc <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800b04a:	4b2f      	ldr	r3, [pc, #188]	; (800b108 <vTaskSwitchContext+0xd4>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b050:	f7f6 fc2c 	bl	80018ac <RTOS_AppGetRuntimeCounterValueFromISR>
 800b054:	4603      	mov	r3, r0
 800b056:	4a2d      	ldr	r2, [pc, #180]	; (800b10c <vTaskSwitchContext+0xd8>)
 800b058:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b05a:	4b2c      	ldr	r3, [pc, #176]	; (800b10c <vTaskSwitchContext+0xd8>)
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	4b2c      	ldr	r3, [pc, #176]	; (800b110 <vTaskSwitchContext+0xdc>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	429a      	cmp	r2, r3
 800b064:	d909      	bls.n	800b07a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b066:	4b2b      	ldr	r3, [pc, #172]	; (800b114 <vTaskSwitchContext+0xe0>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800b06c:	4a27      	ldr	r2, [pc, #156]	; (800b10c <vTaskSwitchContext+0xd8>)
 800b06e:	6810      	ldr	r0, [r2, #0]
 800b070:	4a27      	ldr	r2, [pc, #156]	; (800b110 <vTaskSwitchContext+0xdc>)
 800b072:	6812      	ldr	r2, [r2, #0]
 800b074:	1a82      	subs	r2, r0, r2
 800b076:	440a      	add	r2, r1
 800b078:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b07a:	4b24      	ldr	r3, [pc, #144]	; (800b10c <vTaskSwitchContext+0xd8>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a24      	ldr	r2, [pc, #144]	; (800b110 <vTaskSwitchContext+0xdc>)
 800b080:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b082:	4b25      	ldr	r3, [pc, #148]	; (800b118 <vTaskSwitchContext+0xe4>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	fab3 f383 	clz	r3, r3
 800b08e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b090:	7afb      	ldrb	r3, [r7, #11]
 800b092:	f1c3 031f 	rsb	r3, r3, #31
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	4920      	ldr	r1, [pc, #128]	; (800b11c <vTaskSwitchContext+0xe8>)
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	4613      	mov	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4413      	add	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	440b      	add	r3, r1
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d10a      	bne.n	800b0c2 <vTaskSwitchContext+0x8e>
	__asm volatile
 800b0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	607b      	str	r3, [r7, #4]
}
 800b0be:	bf00      	nop
 800b0c0:	e7fe      	b.n	800b0c0 <vTaskSwitchContext+0x8c>
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4a13      	ldr	r2, [pc, #76]	; (800b11c <vTaskSwitchContext+0xe8>)
 800b0ce:	4413      	add	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	685a      	ldr	r2, [r3, #4]
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	605a      	str	r2, [r3, #4]
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	685a      	ldr	r2, [r3, #4]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d104      	bne.n	800b0f2 <vTaskSwitchContext+0xbe>
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	605a      	str	r2, [r3, #4]
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	4a06      	ldr	r2, [pc, #24]	; (800b114 <vTaskSwitchContext+0xe0>)
 800b0fa:	6013      	str	r3, [r2, #0]
}
 800b0fc:	bf00      	nop
 800b0fe:	3718      	adds	r7, #24
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	20002734 	.word	0x20002734
 800b108:	20002720 	.word	0x20002720
 800b10c:	2000273c 	.word	0x2000273c
 800b110:	20002738 	.word	0x20002738
 800b114:	2000260c 	.word	0x2000260c
 800b118:	20002714 	.word	0x20002714
 800b11c:	20002610 	.word	0x20002610

0800b120 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10a      	bne.n	800b146 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	60fb      	str	r3, [r7, #12]
}
 800b142:	bf00      	nop
 800b144:	e7fe      	b.n	800b144 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b146:	4b07      	ldr	r3, [pc, #28]	; (800b164 <vTaskPlaceOnEventList+0x44>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3318      	adds	r3, #24
 800b14c:	4619      	mov	r1, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7fe fcb0 	bl	8009ab4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b154:	2101      	movs	r1, #1
 800b156:	6838      	ldr	r0, [r7, #0]
 800b158:	f000 fbc0 	bl	800b8dc <prvAddCurrentTaskToDelayedList>
}
 800b15c:	bf00      	nop
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	2000260c 	.word	0x2000260c

0800b168 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10a      	bne.n	800b190 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	617b      	str	r3, [r7, #20]
}
 800b18c:	bf00      	nop
 800b18e:	e7fe      	b.n	800b18e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b190:	4b0a      	ldr	r3, [pc, #40]	; (800b1bc <vTaskPlaceOnEventListRestricted+0x54>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3318      	adds	r3, #24
 800b196:	4619      	mov	r1, r3
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7fe fc67 	bl	8009a6c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b1aa:	6879      	ldr	r1, [r7, #4]
 800b1ac:	68b8      	ldr	r0, [r7, #8]
 800b1ae:	f000 fb95 	bl	800b8dc <prvAddCurrentTaskToDelayedList>
	}
 800b1b2:	bf00      	nop
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	2000260c 	.word	0x2000260c

0800b1c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10a      	bne.n	800b1ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	60fb      	str	r3, [r7, #12]
}
 800b1e8:	bf00      	nop
 800b1ea:	e7fe      	b.n	800b1ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	3318      	adds	r3, #24
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fe fc98 	bl	8009b26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1f6:	4b1d      	ldr	r3, [pc, #116]	; (800b26c <xTaskRemoveFromEventList+0xac>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d11c      	bne.n	800b238 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	3304      	adds	r3, #4
 800b202:	4618      	mov	r0, r3
 800b204:	f7fe fc8f 	bl	8009b26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20c:	2201      	movs	r2, #1
 800b20e:	409a      	lsls	r2, r3
 800b210:	4b17      	ldr	r3, [pc, #92]	; (800b270 <xTaskRemoveFromEventList+0xb0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4313      	orrs	r3, r2
 800b216:	4a16      	ldr	r2, [pc, #88]	; (800b270 <xTaskRemoveFromEventList+0xb0>)
 800b218:	6013      	str	r3, [r2, #0]
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21e:	4613      	mov	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4a13      	ldr	r2, [pc, #76]	; (800b274 <xTaskRemoveFromEventList+0xb4>)
 800b228:	441a      	add	r2, r3
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	3304      	adds	r3, #4
 800b22e:	4619      	mov	r1, r3
 800b230:	4610      	mov	r0, r2
 800b232:	f7fe fc1b 	bl	8009a6c <vListInsertEnd>
 800b236:	e005      	b.n	800b244 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	3318      	adds	r3, #24
 800b23c:	4619      	mov	r1, r3
 800b23e:	480e      	ldr	r0, [pc, #56]	; (800b278 <xTaskRemoveFromEventList+0xb8>)
 800b240:	f7fe fc14 	bl	8009a6c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b248:	4b0c      	ldr	r3, [pc, #48]	; (800b27c <xTaskRemoveFromEventList+0xbc>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24e:	429a      	cmp	r2, r3
 800b250:	d905      	bls.n	800b25e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b252:	2301      	movs	r3, #1
 800b254:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b256:	4b0a      	ldr	r3, [pc, #40]	; (800b280 <xTaskRemoveFromEventList+0xc0>)
 800b258:	2201      	movs	r2, #1
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	e001      	b.n	800b262 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b25e:	2300      	movs	r3, #0
 800b260:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b262:	697b      	ldr	r3, [r7, #20]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3718      	adds	r7, #24
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	20002734 	.word	0x20002734
 800b270:	20002714 	.word	0x20002714
 800b274:	20002610 	.word	0x20002610
 800b278:	200026cc 	.word	0x200026cc
 800b27c:	2000260c 	.word	0x2000260c
 800b280:	20002720 	.word	0x20002720

0800b284 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b28c:	4b06      	ldr	r3, [pc, #24]	; (800b2a8 <vTaskInternalSetTimeOutState+0x24>)
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b294:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <vTaskInternalSetTimeOutState+0x28>)
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	605a      	str	r2, [r3, #4]
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr
 800b2a8:	20002724 	.word	0x20002724
 800b2ac:	20002710 	.word	0x20002710

0800b2b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10a      	bne.n	800b2d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	613b      	str	r3, [r7, #16]
}
 800b2d2:	bf00      	nop
 800b2d4:	e7fe      	b.n	800b2d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10a      	bne.n	800b2f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	60fb      	str	r3, [r7, #12]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b2f2:	f001 f817 	bl	800c324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2f6:	4b1d      	ldr	r3, [pc, #116]	; (800b36c <xTaskCheckForTimeOut+0xbc>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30e:	d102      	bne.n	800b316 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b310:	2300      	movs	r3, #0
 800b312:	61fb      	str	r3, [r7, #28]
 800b314:	e023      	b.n	800b35e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	4b15      	ldr	r3, [pc, #84]	; (800b370 <xTaskCheckForTimeOut+0xc0>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d007      	beq.n	800b332 <xTaskCheckForTimeOut+0x82>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	69ba      	ldr	r2, [r7, #24]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d302      	bcc.n	800b332 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	61fb      	str	r3, [r7, #28]
 800b330:	e015      	b.n	800b35e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d20b      	bcs.n	800b354 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	1ad2      	subs	r2, r2, r3
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f7ff ff9b 	bl	800b284 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b34e:	2300      	movs	r3, #0
 800b350:	61fb      	str	r3, [r7, #28]
 800b352:	e004      	b.n	800b35e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	2200      	movs	r2, #0
 800b358:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b35a:	2301      	movs	r3, #1
 800b35c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b35e:	f001 f811 	bl	800c384 <vPortExitCritical>

	return xReturn;
 800b362:	69fb      	ldr	r3, [r7, #28]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3720      	adds	r7, #32
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20002710 	.word	0x20002710
 800b370:	20002724 	.word	0x20002724

0800b374 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b374:	b480      	push	{r7}
 800b376:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b378:	4b03      	ldr	r3, [pc, #12]	; (800b388 <vTaskMissedYield+0x14>)
 800b37a:	2201      	movs	r2, #1
 800b37c:	601a      	str	r2, [r3, #0]
}
 800b37e:	bf00      	nop
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	20002720 	.word	0x20002720

0800b38c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b394:	f000 f852 	bl	800b43c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b398:	4b06      	ldr	r3, [pc, #24]	; (800b3b4 <prvIdleTask+0x28>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d9f9      	bls.n	800b394 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b3a0:	4b05      	ldr	r3, [pc, #20]	; (800b3b8 <prvIdleTask+0x2c>)
 800b3a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b3b0:	e7f0      	b.n	800b394 <prvIdleTask+0x8>
 800b3b2:	bf00      	nop
 800b3b4:	20002610 	.word	0x20002610
 800b3b8:	e000ed04 	.word	0xe000ed04

0800b3bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	607b      	str	r3, [r7, #4]
 800b3c6:	e00c      	b.n	800b3e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4a12      	ldr	r2, [pc, #72]	; (800b41c <prvInitialiseTaskLists+0x60>)
 800b3d4:	4413      	add	r3, r2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7fe fb1b 	bl	8009a12 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	607b      	str	r3, [r7, #4]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b06      	cmp	r3, #6
 800b3e6:	d9ef      	bls.n	800b3c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3e8:	480d      	ldr	r0, [pc, #52]	; (800b420 <prvInitialiseTaskLists+0x64>)
 800b3ea:	f7fe fb12 	bl	8009a12 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3ee:	480d      	ldr	r0, [pc, #52]	; (800b424 <prvInitialiseTaskLists+0x68>)
 800b3f0:	f7fe fb0f 	bl	8009a12 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3f4:	480c      	ldr	r0, [pc, #48]	; (800b428 <prvInitialiseTaskLists+0x6c>)
 800b3f6:	f7fe fb0c 	bl	8009a12 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3fa:	480c      	ldr	r0, [pc, #48]	; (800b42c <prvInitialiseTaskLists+0x70>)
 800b3fc:	f7fe fb09 	bl	8009a12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b400:	480b      	ldr	r0, [pc, #44]	; (800b430 <prvInitialiseTaskLists+0x74>)
 800b402:	f7fe fb06 	bl	8009a12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b406:	4b0b      	ldr	r3, [pc, #44]	; (800b434 <prvInitialiseTaskLists+0x78>)
 800b408:	4a05      	ldr	r2, [pc, #20]	; (800b420 <prvInitialiseTaskLists+0x64>)
 800b40a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b40c:	4b0a      	ldr	r3, [pc, #40]	; (800b438 <prvInitialiseTaskLists+0x7c>)
 800b40e:	4a05      	ldr	r2, [pc, #20]	; (800b424 <prvInitialiseTaskLists+0x68>)
 800b410:	601a      	str	r2, [r3, #0]
}
 800b412:	bf00      	nop
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	20002610 	.word	0x20002610
 800b420:	2000269c 	.word	0x2000269c
 800b424:	200026b0 	.word	0x200026b0
 800b428:	200026cc 	.word	0x200026cc
 800b42c:	200026e0 	.word	0x200026e0
 800b430:	200026f8 	.word	0x200026f8
 800b434:	200026c4 	.word	0x200026c4
 800b438:	200026c8 	.word	0x200026c8

0800b43c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b442:	e019      	b.n	800b478 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b444:	f000 ff6e 	bl	800c324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b448:	4b10      	ldr	r3, [pc, #64]	; (800b48c <prvCheckTasksWaitingTermination+0x50>)
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3304      	adds	r3, #4
 800b454:	4618      	mov	r0, r3
 800b456:	f7fe fb66 	bl	8009b26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b45a:	4b0d      	ldr	r3, [pc, #52]	; (800b490 <prvCheckTasksWaitingTermination+0x54>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3b01      	subs	r3, #1
 800b460:	4a0b      	ldr	r2, [pc, #44]	; (800b490 <prvCheckTasksWaitingTermination+0x54>)
 800b462:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b464:	4b0b      	ldr	r3, [pc, #44]	; (800b494 <prvCheckTasksWaitingTermination+0x58>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3b01      	subs	r3, #1
 800b46a:	4a0a      	ldr	r2, [pc, #40]	; (800b494 <prvCheckTasksWaitingTermination+0x58>)
 800b46c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b46e:	f000 ff89 	bl	800c384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f810 	bl	800b498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b478:	4b06      	ldr	r3, [pc, #24]	; (800b494 <prvCheckTasksWaitingTermination+0x58>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1e1      	bne.n	800b444 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b480:	bf00      	nop
 800b482:	bf00      	nop
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	200026e0 	.word	0x200026e0
 800b490:	2000270c 	.word	0x2000270c
 800b494:	200026f4 	.word	0x200026f4

0800b498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d108      	bne.n	800b4bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f001 f91e 	bl	800c6f0 <vPortFree>
				vPortFree( pxTCB );
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f001 f91b 	bl	800c6f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b4ba:	e018      	b.n	800b4ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d103      	bne.n	800b4ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f001 f912 	bl	800c6f0 <vPortFree>
	}
 800b4cc:	e00f      	b.n	800b4ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d00a      	beq.n	800b4ee <prvDeleteTCB+0x56>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	60fb      	str	r3, [r7, #12]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <prvDeleteTCB+0x54>
	}
 800b4ee:	bf00      	nop
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4fe:	4b0c      	ldr	r3, [pc, #48]	; (800b530 <prvResetNextTaskUnblockTime+0x38>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d104      	bne.n	800b512 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b508:	4b0a      	ldr	r3, [pc, #40]	; (800b534 <prvResetNextTaskUnblockTime+0x3c>)
 800b50a:	f04f 32ff 	mov.w	r2, #4294967295
 800b50e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b510:	e008      	b.n	800b524 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b512:	4b07      	ldr	r3, [pc, #28]	; (800b530 <prvResetNextTaskUnblockTime+0x38>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	4a04      	ldr	r2, [pc, #16]	; (800b534 <prvResetNextTaskUnblockTime+0x3c>)
 800b522:	6013      	str	r3, [r2, #0]
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	200026c4 	.word	0x200026c4
 800b534:	2000272c 	.word	0x2000272c

0800b538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b53e:	4b0b      	ldr	r3, [pc, #44]	; (800b56c <xTaskGetSchedulerState+0x34>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d102      	bne.n	800b54c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b546:	2301      	movs	r3, #1
 800b548:	607b      	str	r3, [r7, #4]
 800b54a:	e008      	b.n	800b55e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b54c:	4b08      	ldr	r3, [pc, #32]	; (800b570 <xTaskGetSchedulerState+0x38>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d102      	bne.n	800b55a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b554:	2302      	movs	r3, #2
 800b556:	607b      	str	r3, [r7, #4]
 800b558:	e001      	b.n	800b55e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b55a:	2300      	movs	r3, #0
 800b55c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b55e:	687b      	ldr	r3, [r7, #4]
	}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr
 800b56c:	20002718 	.word	0x20002718
 800b570:	20002734 	.word	0x20002734

0800b574 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b580:	2300      	movs	r3, #0
 800b582:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d069      	beq.n	800b65e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b58e:	4b36      	ldr	r3, [pc, #216]	; (800b668 <xTaskPriorityInherit+0xf4>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b594:	429a      	cmp	r2, r3
 800b596:	d259      	bcs.n	800b64c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	db06      	blt.n	800b5ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5a0:	4b31      	ldr	r3, [pc, #196]	; (800b668 <xTaskPriorityInherit+0xf4>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a6:	f1c3 0207 	rsb	r2, r3, #7
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	6959      	ldr	r1, [r3, #20]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4a2b      	ldr	r2, [pc, #172]	; (800b66c <xTaskPriorityInherit+0xf8>)
 800b5c0:	4413      	add	r3, r2
 800b5c2:	4299      	cmp	r1, r3
 800b5c4:	d13a      	bne.n	800b63c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe faab 	bl	8009b26 <uxListRemove>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d115      	bne.n	800b602 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5da:	4924      	ldr	r1, [pc, #144]	; (800b66c <xTaskPriorityInherit+0xf8>)
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	440b      	add	r3, r1
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10a      	bne.n	800b602 <xTaskPriorityInherit+0x8e>
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f6:	43da      	mvns	r2, r3
 800b5f8:	4b1d      	ldr	r3, [pc, #116]	; (800b670 <xTaskPriorityInherit+0xfc>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	4a1c      	ldr	r2, [pc, #112]	; (800b670 <xTaskPriorityInherit+0xfc>)
 800b600:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b602:	4b19      	ldr	r3, [pc, #100]	; (800b668 <xTaskPriorityInherit+0xf4>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	2201      	movs	r2, #1
 800b612:	409a      	lsls	r2, r3
 800b614:	4b16      	ldr	r3, [pc, #88]	; (800b670 <xTaskPriorityInherit+0xfc>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4313      	orrs	r3, r2
 800b61a:	4a15      	ldr	r2, [pc, #84]	; (800b670 <xTaskPriorityInherit+0xfc>)
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4a10      	ldr	r2, [pc, #64]	; (800b66c <xTaskPriorityInherit+0xf8>)
 800b62c:	441a      	add	r2, r3
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	3304      	adds	r3, #4
 800b632:	4619      	mov	r1, r3
 800b634:	4610      	mov	r0, r2
 800b636:	f7fe fa19 	bl	8009a6c <vListInsertEnd>
 800b63a:	e004      	b.n	800b646 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b63c:	4b0a      	ldr	r3, [pc, #40]	; (800b668 <xTaskPriorityInherit+0xf4>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b646:	2301      	movs	r3, #1
 800b648:	60fb      	str	r3, [r7, #12]
 800b64a:	e008      	b.n	800b65e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b650:	4b05      	ldr	r3, [pc, #20]	; (800b668 <xTaskPriorityInherit+0xf4>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b656:	429a      	cmp	r2, r3
 800b658:	d201      	bcs.n	800b65e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b65a:	2301      	movs	r3, #1
 800b65c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b65e:	68fb      	ldr	r3, [r7, #12]
	}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	2000260c 	.word	0x2000260c
 800b66c:	20002610 	.word	0x20002610
 800b670:	20002714 	.word	0x20002714

0800b674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d06e      	beq.n	800b768 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b68a:	4b3a      	ldr	r3, [pc, #232]	; (800b774 <xTaskPriorityDisinherit+0x100>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	429a      	cmp	r2, r3
 800b692:	d00a      	beq.n	800b6aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	60fb      	str	r3, [r7, #12]
}
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	60bb      	str	r3, [r7, #8]
}
 800b6c4:	bf00      	nop
 800b6c6:	e7fe      	b.n	800b6c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6cc:	1e5a      	subs	r2, r3, #1
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d044      	beq.n	800b768 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d140      	bne.n	800b768 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fe fa1b 	bl	8009b26 <uxListRemove>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d115      	bne.n	800b722 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fa:	491f      	ldr	r1, [pc, #124]	; (800b778 <xTaskPriorityDisinherit+0x104>)
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4413      	add	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	440b      	add	r3, r1
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <xTaskPriorityDisinherit+0xae>
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b710:	2201      	movs	r2, #1
 800b712:	fa02 f303 	lsl.w	r3, r2, r3
 800b716:	43da      	mvns	r2, r3
 800b718:	4b18      	ldr	r3, [pc, #96]	; (800b77c <xTaskPriorityDisinherit+0x108>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4013      	ands	r3, r2
 800b71e:	4a17      	ldr	r2, [pc, #92]	; (800b77c <xTaskPriorityDisinherit+0x108>)
 800b720:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72e:	f1c3 0207 	rsb	r2, r3, #7
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73a:	2201      	movs	r2, #1
 800b73c:	409a      	lsls	r2, r3
 800b73e:	4b0f      	ldr	r3, [pc, #60]	; (800b77c <xTaskPriorityDisinherit+0x108>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4313      	orrs	r3, r2
 800b744:	4a0d      	ldr	r2, [pc, #52]	; (800b77c <xTaskPriorityDisinherit+0x108>)
 800b746:	6013      	str	r3, [r2, #0]
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74c:	4613      	mov	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	4413      	add	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4a08      	ldr	r2, [pc, #32]	; (800b778 <xTaskPriorityDisinherit+0x104>)
 800b756:	441a      	add	r2, r3
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	3304      	adds	r3, #4
 800b75c:	4619      	mov	r1, r3
 800b75e:	4610      	mov	r0, r2
 800b760:	f7fe f984 	bl	8009a6c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b764:	2301      	movs	r3, #1
 800b766:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b768:	697b      	ldr	r3, [r7, #20]
	}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	2000260c 	.word	0x2000260c
 800b778:	20002610 	.word	0x20002610
 800b77c:	20002714 	.word	0x20002714

0800b780 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b780:	b580      	push	{r7, lr}
 800b782:	b088      	sub	sp, #32
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b78e:	2301      	movs	r3, #1
 800b790:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 8083 	beq.w	800b8a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10a      	bne.n	800b7b8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a6:	f383 8811 	msr	BASEPRI, r3
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	60fb      	str	r3, [r7, #12]
}
 800b7b4:	bf00      	nop
 800b7b6:	e7fe      	b.n	800b7b6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d902      	bls.n	800b7c8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	61fb      	str	r3, [r7, #28]
 800b7c6:	e002      	b.n	800b7ce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7cc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d2:	69fa      	ldr	r2, [r7, #28]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d063      	beq.n	800b8a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7dc:	697a      	ldr	r2, [r7, #20]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d15e      	bne.n	800b8a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b7e2:	4b31      	ldr	r3, [pc, #196]	; (800b8a8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	69ba      	ldr	r2, [r7, #24]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d10a      	bne.n	800b802 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	60bb      	str	r3, [r7, #8]
}
 800b7fe:	bf00      	nop
 800b800:	e7fe      	b.n	800b800 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b806:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	69fa      	ldr	r2, [r7, #28]
 800b80c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	2b00      	cmp	r3, #0
 800b814:	db04      	blt.n	800b820 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	f1c3 0207 	rsb	r2, r3, #7
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	6959      	ldr	r1, [r3, #20]
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	4613      	mov	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4413      	add	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4a1f      	ldr	r2, [pc, #124]	; (800b8ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b830:	4413      	add	r3, r2
 800b832:	4299      	cmp	r1, r3
 800b834:	d134      	bne.n	800b8a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	3304      	adds	r3, #4
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe f973 	bl	8009b26 <uxListRemove>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d115      	bne.n	800b872 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84a:	4918      	ldr	r1, [pc, #96]	; (800b8ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b84c:	4613      	mov	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	440b      	add	r3, r1
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10a      	bne.n	800b872 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b860:	2201      	movs	r2, #1
 800b862:	fa02 f303 	lsl.w	r3, r2, r3
 800b866:	43da      	mvns	r2, r3
 800b868:	4b11      	ldr	r3, [pc, #68]	; (800b8b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4013      	ands	r3, r2
 800b86e:	4a10      	ldr	r2, [pc, #64]	; (800b8b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b870:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b876:	2201      	movs	r2, #1
 800b878:	409a      	lsls	r2, r3
 800b87a:	4b0d      	ldr	r3, [pc, #52]	; (800b8b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4313      	orrs	r3, r2
 800b880:	4a0b      	ldr	r2, [pc, #44]	; (800b8b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b888:	4613      	mov	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4413      	add	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4a06      	ldr	r2, [pc, #24]	; (800b8ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b892:	441a      	add	r2, r3
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	3304      	adds	r3, #4
 800b898:	4619      	mov	r1, r3
 800b89a:	4610      	mov	r0, r2
 800b89c:	f7fe f8e6 	bl	8009a6c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8a0:	bf00      	nop
 800b8a2:	3720      	adds	r7, #32
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	2000260c 	.word	0x2000260c
 800b8ac:	20002610 	.word	0x20002610
 800b8b0:	20002714 	.word	0x20002714

0800b8b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b8b4:	b480      	push	{r7}
 800b8b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b8b8:	4b07      	ldr	r3, [pc, #28]	; (800b8d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d004      	beq.n	800b8ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b8c0:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8c6:	3201      	adds	r2, #1
 800b8c8:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800b8ca:	4b03      	ldr	r3, [pc, #12]	; (800b8d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
	}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	2000260c 	.word	0x2000260c

0800b8dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8e6:	4b29      	ldr	r3, [pc, #164]	; (800b98c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8ec:	4b28      	ldr	r3, [pc, #160]	; (800b990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe f917 	bl	8009b26 <uxListRemove>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10b      	bne.n	800b916 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b8fe:	4b24      	ldr	r3, [pc, #144]	; (800b990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b904:	2201      	movs	r2, #1
 800b906:	fa02 f303 	lsl.w	r3, r2, r3
 800b90a:	43da      	mvns	r2, r3
 800b90c:	4b21      	ldr	r3, [pc, #132]	; (800b994 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4013      	ands	r3, r2
 800b912:	4a20      	ldr	r2, [pc, #128]	; (800b994 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b914:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91c:	d10a      	bne.n	800b934 <prvAddCurrentTaskToDelayedList+0x58>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d007      	beq.n	800b934 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b924:	4b1a      	ldr	r3, [pc, #104]	; (800b990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3304      	adds	r3, #4
 800b92a:	4619      	mov	r1, r3
 800b92c:	481a      	ldr	r0, [pc, #104]	; (800b998 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b92e:	f7fe f89d 	bl	8009a6c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b932:	e026      	b.n	800b982 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	4413      	add	r3, r2
 800b93a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b93c:	4b14      	ldr	r3, [pc, #80]	; (800b990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d209      	bcs.n	800b960 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b94c:	4b13      	ldr	r3, [pc, #76]	; (800b99c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	4b0f      	ldr	r3, [pc, #60]	; (800b990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	3304      	adds	r3, #4
 800b956:	4619      	mov	r1, r3
 800b958:	4610      	mov	r0, r2
 800b95a:	f7fe f8ab 	bl	8009ab4 <vListInsert>
}
 800b95e:	e010      	b.n	800b982 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b960:	4b0f      	ldr	r3, [pc, #60]	; (800b9a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	4b0a      	ldr	r3, [pc, #40]	; (800b990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3304      	adds	r3, #4
 800b96a:	4619      	mov	r1, r3
 800b96c:	4610      	mov	r0, r2
 800b96e:	f7fe f8a1 	bl	8009ab4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b972:	4b0c      	ldr	r3, [pc, #48]	; (800b9a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d202      	bcs.n	800b982 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b97c:	4a09      	ldr	r2, [pc, #36]	; (800b9a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6013      	str	r3, [r2, #0]
}
 800b982:	bf00      	nop
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	20002710 	.word	0x20002710
 800b990:	2000260c 	.word	0x2000260c
 800b994:	20002714 	.word	0x20002714
 800b998:	200026f8 	.word	0x200026f8
 800b99c:	200026c8 	.word	0x200026c8
 800b9a0:	200026c4 	.word	0x200026c4
 800b9a4:	2000272c 	.word	0x2000272c

0800b9a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08a      	sub	sp, #40	; 0x28
 800b9ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9b2:	f000 fb47 	bl	800c044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9b6:	4b1c      	ldr	r3, [pc, #112]	; (800ba28 <xTimerCreateTimerTask+0x80>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d021      	beq.n	800ba02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9c6:	1d3a      	adds	r2, r7, #4
 800b9c8:	f107 0108 	add.w	r1, r7, #8
 800b9cc:	f107 030c 	add.w	r3, r7, #12
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7f5 fbbb 	bl	800114c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	9202      	str	r2, [sp, #8]
 800b9de:	9301      	str	r3, [sp, #4]
 800b9e0:	2307      	movs	r3, #7
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	460a      	mov	r2, r1
 800b9e8:	4910      	ldr	r1, [pc, #64]	; (800ba2c <xTimerCreateTimerTask+0x84>)
 800b9ea:	4811      	ldr	r0, [pc, #68]	; (800ba30 <xTimerCreateTimerTask+0x88>)
 800b9ec:	f7fe ff12 	bl	800a814 <xTaskCreateStatic>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	4a10      	ldr	r2, [pc, #64]	; (800ba34 <xTimerCreateTimerTask+0x8c>)
 800b9f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b9f6:	4b0f      	ldr	r3, [pc, #60]	; (800ba34 <xTimerCreateTimerTask+0x8c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10a      	bne.n	800ba1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	613b      	str	r3, [r7, #16]
}
 800ba1a:	bf00      	nop
 800ba1c:	e7fe      	b.n	800ba1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba1e:	697b      	ldr	r3, [r7, #20]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	20002770 	.word	0x20002770
 800ba2c:	0800f9c0 	.word	0x0800f9c0
 800ba30:	0800bc25 	.word	0x0800bc25
 800ba34:	20002774 	.word	0x20002774

0800ba38 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af02      	add	r7, sp, #8
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ba46:	202c      	movs	r0, #44	; 0x2c
 800ba48:	f000 fd8e 	bl	800c568 <pvPortMalloc>
 800ba4c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00d      	beq.n	800ba70 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	68b9      	ldr	r1, [r7, #8]
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f000 f805 	bl	800ba7a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ba70:	697b      	ldr	r3, [r7, #20]
	}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3718      	adds	r7, #24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b086      	sub	sp, #24
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	60f8      	str	r0, [r7, #12]
 800ba82:	60b9      	str	r1, [r7, #8]
 800ba84:	607a      	str	r2, [r7, #4]
 800ba86:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10a      	bne.n	800baa4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	617b      	str	r3, [r7, #20]
}
 800baa0:	bf00      	nop
 800baa2:	e7fe      	b.n	800baa2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800baa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d01e      	beq.n	800bae8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800baaa:	f000 facb 	bl	800c044 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac2:	6a3a      	ldr	r2, [r7, #32]
 800bac4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	3304      	adds	r3, #4
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fd ffc1 	bl	8009a52 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d008      	beq.n	800bae8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800badc:	f043 0304 	orr.w	r3, r3, #4
 800bae0:	b2da      	uxtb	r2, r3
 800bae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800bae8:	bf00      	nop
 800baea:	3718      	adds	r7, #24
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08a      	sub	sp, #40	; 0x28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10a      	bne.n	800bb1e <xTimerGenericCommand+0x2e>
	__asm volatile
 800bb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0c:	f383 8811 	msr	BASEPRI, r3
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	623b      	str	r3, [r7, #32]
}
 800bb1a:	bf00      	nop
 800bb1c:	e7fe      	b.n	800bb1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb1e:	4b1a      	ldr	r3, [pc, #104]	; (800bb88 <xTimerGenericCommand+0x98>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d02a      	beq.n	800bb7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b05      	cmp	r3, #5
 800bb36:	dc18      	bgt.n	800bb6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb38:	f7ff fcfe 	bl	800b538 <xTaskGetSchedulerState>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d109      	bne.n	800bb56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb42:	4b11      	ldr	r3, [pc, #68]	; (800bb88 <xTimerGenericCommand+0x98>)
 800bb44:	6818      	ldr	r0, [r3, #0]
 800bb46:	f107 0114 	add.w	r1, r7, #20
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb4e:	f7fe f959 	bl	8009e04 <xQueueGenericSend>
 800bb52:	6278      	str	r0, [r7, #36]	; 0x24
 800bb54:	e012      	b.n	800bb7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb56:	4b0c      	ldr	r3, [pc, #48]	; (800bb88 <xTimerGenericCommand+0x98>)
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	f107 0114 	add.w	r1, r7, #20
 800bb5e:	2300      	movs	r3, #0
 800bb60:	2200      	movs	r2, #0
 800bb62:	f7fe f94f 	bl	8009e04 <xQueueGenericSend>
 800bb66:	6278      	str	r0, [r7, #36]	; 0x24
 800bb68:	e008      	b.n	800bb7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb6a:	4b07      	ldr	r3, [pc, #28]	; (800bb88 <xTimerGenericCommand+0x98>)
 800bb6c:	6818      	ldr	r0, [r3, #0]
 800bb6e:	f107 0114 	add.w	r1, r7, #20
 800bb72:	2300      	movs	r3, #0
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	f7fe fa43 	bl	800a000 <xQueueGenericSendFromISR>
 800bb7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3728      	adds	r7, #40	; 0x28
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	20002770 	.word	0x20002770

0800bb8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af02      	add	r7, sp, #8
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb96:	4b22      	ldr	r3, [pc, #136]	; (800bc20 <prvProcessExpiredTimer+0x94>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	3304      	adds	r3, #4
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fd ffbe 	bl	8009b26 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d022      	beq.n	800bbfe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	699a      	ldr	r2, [r3, #24]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	18d1      	adds	r1, r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	6978      	ldr	r0, [r7, #20]
 800bbc6:	f000 f8d1 	bl	800bd6c <prvInsertTimerInActiveList>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d01f      	beq.n	800bc10 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	2100      	movs	r1, #0
 800bbda:	6978      	ldr	r0, [r7, #20]
 800bbdc:	f7ff ff88 	bl	800baf0 <xTimerGenericCommand>
 800bbe0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d113      	bne.n	800bc10 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	60fb      	str	r3, [r7, #12]
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc04:	f023 0301 	bic.w	r3, r3, #1
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	6a1b      	ldr	r3, [r3, #32]
 800bc14:	6978      	ldr	r0, [r7, #20]
 800bc16:	4798      	blx	r3
}
 800bc18:	bf00      	nop
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20002768 	.word	0x20002768

0800bc24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc2c:	f107 0308 	add.w	r3, r7, #8
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 f857 	bl	800bce4 <prvGetNextExpireTime>
 800bc36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 f803 	bl	800bc48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc42:	f000 f8d5 	bl	800bdf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc46:	e7f1      	b.n	800bc2c <prvTimerTask+0x8>

0800bc48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc52:	f7ff f87d 	bl	800ad50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc56:	f107 0308 	add.w	r3, r7, #8
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f000 f866 	bl	800bd2c <prvSampleTimeNow>
 800bc60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d130      	bne.n	800bcca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10a      	bne.n	800bc84 <prvProcessTimerOrBlockTask+0x3c>
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d806      	bhi.n	800bc84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc76:	f7ff f879 	bl	800ad6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc7a:	68f9      	ldr	r1, [r7, #12]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff ff85 	bl	800bb8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc82:	e024      	b.n	800bcce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d008      	beq.n	800bc9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc8a:	4b13      	ldr	r3, [pc, #76]	; (800bcd8 <prvProcessTimerOrBlockTask+0x90>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <prvProcessTimerOrBlockTask+0x50>
 800bc94:	2301      	movs	r3, #1
 800bc96:	e000      	b.n	800bc9a <prvProcessTimerOrBlockTask+0x52>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc9c:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <prvProcessTimerOrBlockTask+0x94>)
 800bc9e:	6818      	ldr	r0, [r3, #0]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	f7fe fd7f 	bl	800a7ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bcae:	f7ff f85d 	bl	800ad6c <xTaskResumeAll>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10a      	bne.n	800bcce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bcb8:	4b09      	ldr	r3, [pc, #36]	; (800bce0 <prvProcessTimerOrBlockTask+0x98>)
 800bcba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcbe:	601a      	str	r2, [r3, #0]
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	f3bf 8f6f 	isb	sy
}
 800bcc8:	e001      	b.n	800bcce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bcca:	f7ff f84f 	bl	800ad6c <xTaskResumeAll>
}
 800bcce:	bf00      	nop
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	2000276c 	.word	0x2000276c
 800bcdc:	20002770 	.word	0x20002770
 800bce0:	e000ed04 	.word	0xe000ed04

0800bce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bcec:	4b0e      	ldr	r3, [pc, #56]	; (800bd28 <prvGetNextExpireTime+0x44>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <prvGetNextExpireTime+0x16>
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	e000      	b.n	800bcfc <prvGetNextExpireTime+0x18>
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d105      	bne.n	800bd14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd08:	4b07      	ldr	r3, [pc, #28]	; (800bd28 <prvGetNextExpireTime+0x44>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	60fb      	str	r3, [r7, #12]
 800bd12:	e001      	b.n	800bd18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd14:	2300      	movs	r3, #0
 800bd16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd18:	68fb      	ldr	r3, [r7, #12]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	20002768 	.word	0x20002768

0800bd2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd34:	f7ff f8b6 	bl	800aea4 <xTaskGetTickCount>
 800bd38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd3a:	4b0b      	ldr	r3, [pc, #44]	; (800bd68 <prvSampleTimeNow+0x3c>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d205      	bcs.n	800bd50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd44:	f000 f91a 	bl	800bf7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	e002      	b.n	800bd56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd56:	4a04      	ldr	r2, [pc, #16]	; (800bd68 <prvSampleTimeNow+0x3c>)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20002778 	.word	0x20002778

0800bd6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d812      	bhi.n	800bdb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	1ad2      	subs	r2, r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	699b      	ldr	r3, [r3, #24]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d302      	bcc.n	800bda6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bda0:	2301      	movs	r3, #1
 800bda2:	617b      	str	r3, [r7, #20]
 800bda4:	e01b      	b.n	800bdde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bda6:	4b10      	ldr	r3, [pc, #64]	; (800bde8 <prvInsertTimerInActiveList+0x7c>)
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3304      	adds	r3, #4
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	f7fd fe7f 	bl	8009ab4 <vListInsert>
 800bdb6:	e012      	b.n	800bdde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d206      	bcs.n	800bdce <prvInsertTimerInActiveList+0x62>
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d302      	bcc.n	800bdce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	617b      	str	r3, [r7, #20]
 800bdcc:	e007      	b.n	800bdde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdce:	4b07      	ldr	r3, [pc, #28]	; (800bdec <prvInsertTimerInActiveList+0x80>)
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4610      	mov	r0, r2
 800bdda:	f7fd fe6b 	bl	8009ab4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bdde:	697b      	ldr	r3, [r7, #20]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	2000276c 	.word	0x2000276c
 800bdec:	20002768 	.word	0x20002768

0800bdf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08c      	sub	sp, #48	; 0x30
 800bdf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdf6:	e0ae      	b.n	800bf56 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f2c0 80aa 	blt.w	800bf54 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d004      	beq.n	800be16 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	3304      	adds	r3, #4
 800be10:	4618      	mov	r0, r3
 800be12:	f7fd fe88 	bl	8009b26 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be16:	1d3b      	adds	r3, r7, #4
 800be18:	4618      	mov	r0, r3
 800be1a:	f7ff ff87 	bl	800bd2c <prvSampleTimeNow>
 800be1e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	2b09      	cmp	r3, #9
 800be24:	f200 8097 	bhi.w	800bf56 <prvProcessReceivedCommands+0x166>
 800be28:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <prvProcessReceivedCommands+0x40>)
 800be2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2e:	bf00      	nop
 800be30:	0800be59 	.word	0x0800be59
 800be34:	0800be59 	.word	0x0800be59
 800be38:	0800be59 	.word	0x0800be59
 800be3c:	0800becd 	.word	0x0800becd
 800be40:	0800bee1 	.word	0x0800bee1
 800be44:	0800bf2b 	.word	0x0800bf2b
 800be48:	0800be59 	.word	0x0800be59
 800be4c:	0800be59 	.word	0x0800be59
 800be50:	0800becd 	.word	0x0800becd
 800be54:	0800bee1 	.word	0x0800bee1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be5e:	f043 0301 	orr.w	r3, r3, #1
 800be62:	b2da      	uxtb	r2, r3
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	699b      	ldr	r3, [r3, #24]
 800be70:	18d1      	adds	r1, r2, r3
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6a3a      	ldr	r2, [r7, #32]
 800be76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be78:	f7ff ff78 	bl	800bd6c <prvInsertTimerInActiveList>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d069      	beq.n	800bf56 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be84:	6a1b      	ldr	r3, [r3, #32]
 800be86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be90:	f003 0304 	and.w	r3, r3, #4
 800be94:	2b00      	cmp	r3, #0
 800be96:	d05e      	beq.n	800bf56 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	699b      	ldr	r3, [r3, #24]
 800be9e:	441a      	add	r2, r3
 800bea0:	2300      	movs	r3, #0
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	2300      	movs	r3, #0
 800bea6:	2100      	movs	r1, #0
 800bea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800beaa:	f7ff fe21 	bl	800baf0 <xTimerGenericCommand>
 800beae:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d14f      	bne.n	800bf56 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	61bb      	str	r3, [r7, #24]
}
 800bec8:	bf00      	nop
 800beca:	e7fe      	b.n	800beca <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bed2:	f023 0301 	bic.w	r3, r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bede:	e03a      	b.n	800bf56 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bee6:	f043 0301 	orr.w	r3, r3, #1
 800beea:	b2da      	uxtb	r2, r3
 800beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10a      	bne.n	800bf16 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	617b      	str	r3, [r7, #20]
}
 800bf12:	bf00      	nop
 800bf14:	e7fe      	b.n	800bf14 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	699a      	ldr	r2, [r3, #24]
 800bf1a:	6a3b      	ldr	r3, [r7, #32]
 800bf1c:	18d1      	adds	r1, r2, r3
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	6a3a      	ldr	r2, [r7, #32]
 800bf22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf24:	f7ff ff22 	bl	800bd6c <prvInsertTimerInActiveList>
					break;
 800bf28:	e015      	b.n	800bf56 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf30:	f003 0302 	and.w	r3, r3, #2
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d103      	bne.n	800bf40 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800bf38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf3a:	f000 fbd9 	bl	800c6f0 <vPortFree>
 800bf3e:	e00a      	b.n	800bf56 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf46:	f023 0301 	bic.w	r3, r3, #1
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf52:	e000      	b.n	800bf56 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bf54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf56:	4b08      	ldr	r3, [pc, #32]	; (800bf78 <prvProcessReceivedCommands+0x188>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f107 0108 	add.w	r1, r7, #8
 800bf5e:	2200      	movs	r2, #0
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7fe f8e5 	bl	800a130 <xQueueReceive>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f47f af45 	bne.w	800bdf8 <prvProcessReceivedCommands+0x8>
	}
}
 800bf6e:	bf00      	nop
 800bf70:	bf00      	nop
 800bf72:	3728      	adds	r7, #40	; 0x28
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	20002770 	.word	0x20002770

0800bf7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf82:	e048      	b.n	800c016 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf84:	4b2d      	ldr	r3, [pc, #180]	; (800c03c <prvSwitchTimerLists+0xc0>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf8e:	4b2b      	ldr	r3, [pc, #172]	; (800c03c <prvSwitchTimerLists+0xc0>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fd fdc2 	bl	8009b26 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfb0:	f003 0304 	and.w	r3, r3, #4
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d02e      	beq.n	800c016 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d90e      	bls.n	800bfe8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfd6:	4b19      	ldr	r3, [pc, #100]	; (800c03c <prvSwitchTimerLists+0xc0>)
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	4619      	mov	r1, r3
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	f7fd fd67 	bl	8009ab4 <vListInsert>
 800bfe6:	e016      	b.n	800c016 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfe8:	2300      	movs	r3, #0
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	2300      	movs	r3, #0
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	2100      	movs	r1, #0
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f7ff fd7c 	bl	800baf0 <xTimerGenericCommand>
 800bff8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10a      	bne.n	800c016 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	603b      	str	r3, [r7, #0]
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c016:	4b09      	ldr	r3, [pc, #36]	; (800c03c <prvSwitchTimerLists+0xc0>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1b1      	bne.n	800bf84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c020:	4b06      	ldr	r3, [pc, #24]	; (800c03c <prvSwitchTimerLists+0xc0>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c026:	4b06      	ldr	r3, [pc, #24]	; (800c040 <prvSwitchTimerLists+0xc4>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a04      	ldr	r2, [pc, #16]	; (800c03c <prvSwitchTimerLists+0xc0>)
 800c02c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c02e:	4a04      	ldr	r2, [pc, #16]	; (800c040 <prvSwitchTimerLists+0xc4>)
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	6013      	str	r3, [r2, #0]
}
 800c034:	bf00      	nop
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20002768 	.word	0x20002768
 800c040:	2000276c 	.word	0x2000276c

0800c044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c04a:	f000 f96b 	bl	800c324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c04e:	4b15      	ldr	r3, [pc, #84]	; (800c0a4 <prvCheckForValidListAndQueue+0x60>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d120      	bne.n	800c098 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c056:	4814      	ldr	r0, [pc, #80]	; (800c0a8 <prvCheckForValidListAndQueue+0x64>)
 800c058:	f7fd fcdb 	bl	8009a12 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c05c:	4813      	ldr	r0, [pc, #76]	; (800c0ac <prvCheckForValidListAndQueue+0x68>)
 800c05e:	f7fd fcd8 	bl	8009a12 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c062:	4b13      	ldr	r3, [pc, #76]	; (800c0b0 <prvCheckForValidListAndQueue+0x6c>)
 800c064:	4a10      	ldr	r2, [pc, #64]	; (800c0a8 <prvCheckForValidListAndQueue+0x64>)
 800c066:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c068:	4b12      	ldr	r3, [pc, #72]	; (800c0b4 <prvCheckForValidListAndQueue+0x70>)
 800c06a:	4a10      	ldr	r2, [pc, #64]	; (800c0ac <prvCheckForValidListAndQueue+0x68>)
 800c06c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c06e:	2300      	movs	r3, #0
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	4b11      	ldr	r3, [pc, #68]	; (800c0b8 <prvCheckForValidListAndQueue+0x74>)
 800c074:	4a11      	ldr	r2, [pc, #68]	; (800c0bc <prvCheckForValidListAndQueue+0x78>)
 800c076:	210c      	movs	r1, #12
 800c078:	200a      	movs	r0, #10
 800c07a:	f7fd fde7 	bl	8009c4c <xQueueGenericCreateStatic>
 800c07e:	4603      	mov	r3, r0
 800c080:	4a08      	ldr	r2, [pc, #32]	; (800c0a4 <prvCheckForValidListAndQueue+0x60>)
 800c082:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c084:	4b07      	ldr	r3, [pc, #28]	; (800c0a4 <prvCheckForValidListAndQueue+0x60>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d005      	beq.n	800c098 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c08c:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <prvCheckForValidListAndQueue+0x60>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	490b      	ldr	r1, [pc, #44]	; (800c0c0 <prvCheckForValidListAndQueue+0x7c>)
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fb60 	bl	800a758 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c098:	f000 f974 	bl	800c384 <vPortExitCritical>
}
 800c09c:	bf00      	nop
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20002770 	.word	0x20002770
 800c0a8:	20002740 	.word	0x20002740
 800c0ac:	20002754 	.word	0x20002754
 800c0b0:	20002768 	.word	0x20002768
 800c0b4:	2000276c 	.word	0x2000276c
 800c0b8:	200027f4 	.word	0x200027f4
 800c0bc:	2000277c 	.word	0x2000277c
 800c0c0:	0800f9c8 	.word	0x0800f9c8

0800c0c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3b04      	subs	r3, #4
 800c0d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3b04      	subs	r3, #4
 800c0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	f023 0201 	bic.w	r2, r3, #1
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	3b04      	subs	r3, #4
 800c0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0f4:	4a0c      	ldr	r2, [pc, #48]	; (800c128 <pxPortInitialiseStack+0x64>)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	3b14      	subs	r3, #20
 800c0fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	3b04      	subs	r3, #4
 800c10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f06f 0202 	mvn.w	r2, #2
 800c112:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3b20      	subs	r3, #32
 800c118:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c11a:	68fb      	ldr	r3, [r7, #12]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	0800c12d 	.word	0x0800c12d

0800c12c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c132:	2300      	movs	r3, #0
 800c134:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c136:	4b12      	ldr	r3, [pc, #72]	; (800c180 <prvTaskExitError+0x54>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13e:	d00a      	beq.n	800c156 <prvTaskExitError+0x2a>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	60fb      	str	r3, [r7, #12]
}
 800c152:	bf00      	nop
 800c154:	e7fe      	b.n	800c154 <prvTaskExitError+0x28>
	__asm volatile
 800c156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	60bb      	str	r3, [r7, #8]
}
 800c168:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c16a:	bf00      	nop
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d0fc      	beq.n	800c16c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c172:	bf00      	nop
 800c174:	bf00      	nop
 800c176:	3714      	adds	r7, #20
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr
 800c180:	20000064 	.word	0x20000064
	...

0800c190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c190:	4b07      	ldr	r3, [pc, #28]	; (800c1b0 <pxCurrentTCBConst2>)
 800c192:	6819      	ldr	r1, [r3, #0]
 800c194:	6808      	ldr	r0, [r1, #0]
 800c196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19a:	f380 8809 	msr	PSP, r0
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f04f 0000 	mov.w	r0, #0
 800c1a6:	f380 8811 	msr	BASEPRI, r0
 800c1aa:	4770      	bx	lr
 800c1ac:	f3af 8000 	nop.w

0800c1b0 <pxCurrentTCBConst2>:
 800c1b0:	2000260c 	.word	0x2000260c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1b4:	bf00      	nop
 800c1b6:	bf00      	nop

0800c1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1b8:	4808      	ldr	r0, [pc, #32]	; (800c1dc <prvPortStartFirstTask+0x24>)
 800c1ba:	6800      	ldr	r0, [r0, #0]
 800c1bc:	6800      	ldr	r0, [r0, #0]
 800c1be:	f380 8808 	msr	MSP, r0
 800c1c2:	f04f 0000 	mov.w	r0, #0
 800c1c6:	f380 8814 	msr	CONTROL, r0
 800c1ca:	b662      	cpsie	i
 800c1cc:	b661      	cpsie	f
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	df00      	svc	0
 800c1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1da:	bf00      	nop
 800c1dc:	e000ed08 	.word	0xe000ed08

0800c1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1e6:	4b46      	ldr	r3, [pc, #280]	; (800c300 <xPortStartScheduler+0x120>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a46      	ldr	r2, [pc, #280]	; (800c304 <xPortStartScheduler+0x124>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d10a      	bne.n	800c206 <xPortStartScheduler+0x26>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	613b      	str	r3, [r7, #16]
}
 800c202:	bf00      	nop
 800c204:	e7fe      	b.n	800c204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c206:	4b3e      	ldr	r3, [pc, #248]	; (800c300 <xPortStartScheduler+0x120>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a3f      	ldr	r2, [pc, #252]	; (800c308 <xPortStartScheduler+0x128>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d10a      	bne.n	800c226 <xPortStartScheduler+0x46>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	60fb      	str	r3, [r7, #12]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c226:	4b39      	ldr	r3, [pc, #228]	; (800c30c <xPortStartScheduler+0x12c>)
 800c228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	22ff      	movs	r2, #255	; 0xff
 800c236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c240:	78fb      	ldrb	r3, [r7, #3]
 800c242:	b2db      	uxtb	r3, r3
 800c244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	4b31      	ldr	r3, [pc, #196]	; (800c310 <xPortStartScheduler+0x130>)
 800c24c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c24e:	4b31      	ldr	r3, [pc, #196]	; (800c314 <xPortStartScheduler+0x134>)
 800c250:	2207      	movs	r2, #7
 800c252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c254:	e009      	b.n	800c26a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c256:	4b2f      	ldr	r3, [pc, #188]	; (800c314 <xPortStartScheduler+0x134>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3b01      	subs	r3, #1
 800c25c:	4a2d      	ldr	r2, [pc, #180]	; (800c314 <xPortStartScheduler+0x134>)
 800c25e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	b2db      	uxtb	r3, r3
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	b2db      	uxtb	r3, r3
 800c268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c26a:	78fb      	ldrb	r3, [r7, #3]
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c272:	2b80      	cmp	r3, #128	; 0x80
 800c274:	d0ef      	beq.n	800c256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c276:	4b27      	ldr	r3, [pc, #156]	; (800c314 <xPortStartScheduler+0x134>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f1c3 0307 	rsb	r3, r3, #7
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d00a      	beq.n	800c298 <xPortStartScheduler+0xb8>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	60bb      	str	r3, [r7, #8]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c298:	4b1e      	ldr	r3, [pc, #120]	; (800c314 <xPortStartScheduler+0x134>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	021b      	lsls	r3, r3, #8
 800c29e:	4a1d      	ldr	r2, [pc, #116]	; (800c314 <xPortStartScheduler+0x134>)
 800c2a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c2a2:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <xPortStartScheduler+0x134>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c2aa:	4a1a      	ldr	r2, [pc, #104]	; (800c314 <xPortStartScheduler+0x134>)
 800c2ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2b6:	4b18      	ldr	r3, [pc, #96]	; (800c318 <xPortStartScheduler+0x138>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a17      	ldr	r2, [pc, #92]	; (800c318 <xPortStartScheduler+0x138>)
 800c2bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c2c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2c2:	4b15      	ldr	r3, [pc, #84]	; (800c318 <xPortStartScheduler+0x138>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a14      	ldr	r2, [pc, #80]	; (800c318 <xPortStartScheduler+0x138>)
 800c2c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c2cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2ce:	f000 f8dd 	bl	800c48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2d2:	4b12      	ldr	r3, [pc, #72]	; (800c31c <xPortStartScheduler+0x13c>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2d8:	f000 f8fc 	bl	800c4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2dc:	4b10      	ldr	r3, [pc, #64]	; (800c320 <xPortStartScheduler+0x140>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a0f      	ldr	r2, [pc, #60]	; (800c320 <xPortStartScheduler+0x140>)
 800c2e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c2e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2e8:	f7ff ff66 	bl	800c1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2ec:	f7fe fea2 	bl	800b034 <vTaskSwitchContext>
	prvTaskExitError();
 800c2f0:	f7ff ff1c 	bl	800c12c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3718      	adds	r7, #24
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	e000ed00 	.word	0xe000ed00
 800c304:	410fc271 	.word	0x410fc271
 800c308:	410fc270 	.word	0x410fc270
 800c30c:	e000e400 	.word	0xe000e400
 800c310:	20002844 	.word	0x20002844
 800c314:	20002848 	.word	0x20002848
 800c318:	e000ed20 	.word	0xe000ed20
 800c31c:	20000064 	.word	0x20000064
 800c320:	e000ef34 	.word	0xe000ef34

0800c324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	607b      	str	r3, [r7, #4]
}
 800c33c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c33e:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <vPortEnterCritical+0x58>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3301      	adds	r3, #1
 800c344:	4a0d      	ldr	r2, [pc, #52]	; (800c37c <vPortEnterCritical+0x58>)
 800c346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c348:	4b0c      	ldr	r3, [pc, #48]	; (800c37c <vPortEnterCritical+0x58>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d10f      	bne.n	800c370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c350:	4b0b      	ldr	r3, [pc, #44]	; (800c380 <vPortEnterCritical+0x5c>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00a      	beq.n	800c370 <vPortEnterCritical+0x4c>
	__asm volatile
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	603b      	str	r3, [r7, #0]
}
 800c36c:	bf00      	nop
 800c36e:	e7fe      	b.n	800c36e <vPortEnterCritical+0x4a>
	}
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	20000064 	.word	0x20000064
 800c380:	e000ed04 	.word	0xe000ed04

0800c384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c38a:	4b12      	ldr	r3, [pc, #72]	; (800c3d4 <vPortExitCritical+0x50>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10a      	bne.n	800c3a8 <vPortExitCritical+0x24>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	607b      	str	r3, [r7, #4]
}
 800c3a4:	bf00      	nop
 800c3a6:	e7fe      	b.n	800c3a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c3a8:	4b0a      	ldr	r3, [pc, #40]	; (800c3d4 <vPortExitCritical+0x50>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	4a09      	ldr	r2, [pc, #36]	; (800c3d4 <vPortExitCritical+0x50>)
 800c3b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3b2:	4b08      	ldr	r3, [pc, #32]	; (800c3d4 <vPortExitCritical+0x50>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <vPortExitCritical+0x42>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	f383 8811 	msr	BASEPRI, r3
}
 800c3c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3c6:	bf00      	nop
 800c3c8:	370c      	adds	r7, #12
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	20000064 	.word	0x20000064
	...

0800c3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3e0:	f3ef 8009 	mrs	r0, PSP
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	4b15      	ldr	r3, [pc, #84]	; (800c440 <pxCurrentTCBConst>)
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	f01e 0f10 	tst.w	lr, #16
 800c3f0:	bf08      	it	eq
 800c3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fa:	6010      	str	r0, [r2, #0]
 800c3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c404:	f380 8811 	msr	BASEPRI, r0
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f7fe fe10 	bl	800b034 <vTaskSwitchContext>
 800c414:	f04f 0000 	mov.w	r0, #0
 800c418:	f380 8811 	msr	BASEPRI, r0
 800c41c:	bc09      	pop	{r0, r3}
 800c41e:	6819      	ldr	r1, [r3, #0]
 800c420:	6808      	ldr	r0, [r1, #0]
 800c422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c426:	f01e 0f10 	tst.w	lr, #16
 800c42a:	bf08      	it	eq
 800c42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c430:	f380 8809 	msr	PSP, r0
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w

0800c440 <pxCurrentTCBConst>:
 800c440:	2000260c 	.word	0x2000260c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop

0800c448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	607b      	str	r3, [r7, #4]
}
 800c460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c462:	f7fe fd2f 	bl	800aec4 <xTaskIncrementTick>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d003      	beq.n	800c474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c46c:	4b06      	ldr	r3, [pc, #24]	; (800c488 <SysTick_Handler+0x40>)
 800c46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	2300      	movs	r3, #0
 800c476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	f383 8811 	msr	BASEPRI, r3
}
 800c47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c480:	bf00      	nop
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	e000ed04 	.word	0xe000ed04

0800c48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c48c:	b480      	push	{r7}
 800c48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c490:	4b0b      	ldr	r3, [pc, #44]	; (800c4c0 <vPortSetupTimerInterrupt+0x34>)
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c496:	4b0b      	ldr	r3, [pc, #44]	; (800c4c4 <vPortSetupTimerInterrupt+0x38>)
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c49c:	4b0a      	ldr	r3, [pc, #40]	; (800c4c8 <vPortSetupTimerInterrupt+0x3c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a0a      	ldr	r2, [pc, #40]	; (800c4cc <vPortSetupTimerInterrupt+0x40>)
 800c4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a6:	099b      	lsrs	r3, r3, #6
 800c4a8:	4a09      	ldr	r2, [pc, #36]	; (800c4d0 <vPortSetupTimerInterrupt+0x44>)
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c4ae:	4b04      	ldr	r3, [pc, #16]	; (800c4c0 <vPortSetupTimerInterrupt+0x34>)
 800c4b0:	2207      	movs	r2, #7
 800c4b2:	601a      	str	r2, [r3, #0]
}
 800c4b4:	bf00      	nop
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	e000e010 	.word	0xe000e010
 800c4c4:	e000e018 	.word	0xe000e018
 800c4c8:	20000000 	.word	0x20000000
 800c4cc:	10624dd3 	.word	0x10624dd3
 800c4d0:	e000e014 	.word	0xe000e014

0800c4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c4e4 <vPortEnableVFP+0x10>
 800c4d8:	6801      	ldr	r1, [r0, #0]
 800c4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c4de:	6001      	str	r1, [r0, #0]
 800c4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4e2:	bf00      	nop
 800c4e4:	e000ed88 	.word	0xe000ed88

0800c4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4ee:	f3ef 8305 	mrs	r3, IPSR
 800c4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b0f      	cmp	r3, #15
 800c4f8:	d914      	bls.n	800c524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4fa:	4a17      	ldr	r2, [pc, #92]	; (800c558 <vPortValidateInterruptPriority+0x70>)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	4413      	add	r3, r2
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c504:	4b15      	ldr	r3, [pc, #84]	; (800c55c <vPortValidateInterruptPriority+0x74>)
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	7afa      	ldrb	r2, [r7, #11]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d20a      	bcs.n	800c524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	607b      	str	r3, [r7, #4]
}
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c524:	4b0e      	ldr	r3, [pc, #56]	; (800c560 <vPortValidateInterruptPriority+0x78>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c52c:	4b0d      	ldr	r3, [pc, #52]	; (800c564 <vPortValidateInterruptPriority+0x7c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	429a      	cmp	r2, r3
 800c532:	d90a      	bls.n	800c54a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	603b      	str	r3, [r7, #0]
}
 800c546:	bf00      	nop
 800c548:	e7fe      	b.n	800c548 <vPortValidateInterruptPriority+0x60>
	}
 800c54a:	bf00      	nop
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	e000e3f0 	.word	0xe000e3f0
 800c55c:	20002844 	.word	0x20002844
 800c560:	e000ed0c 	.word	0xe000ed0c
 800c564:	20002848 	.word	0x20002848

0800c568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08a      	sub	sp, #40	; 0x28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c570:	2300      	movs	r3, #0
 800c572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c574:	f7fe fbec 	bl	800ad50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c578:	4b58      	ldr	r3, [pc, #352]	; (800c6dc <pvPortMalloc+0x174>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c580:	f000 f910 	bl	800c7a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c584:	4b56      	ldr	r3, [pc, #344]	; (800c6e0 <pvPortMalloc+0x178>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 808e 	bne.w	800c6ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01d      	beq.n	800c5d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c598:	2208      	movs	r2, #8
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4413      	add	r3, r2
 800c59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f003 0307 	and.w	r3, r3, #7
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d014      	beq.n	800c5d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f023 0307 	bic.w	r3, r3, #7
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00a      	beq.n	800c5d4 <pvPortMalloc+0x6c>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	617b      	str	r3, [r7, #20]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d069      	beq.n	800c6ae <pvPortMalloc+0x146>
 800c5da:	4b42      	ldr	r3, [pc, #264]	; (800c6e4 <pvPortMalloc+0x17c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d864      	bhi.n	800c6ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5e4:	4b40      	ldr	r3, [pc, #256]	; (800c6e8 <pvPortMalloc+0x180>)
 800c5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5e8:	4b3f      	ldr	r3, [pc, #252]	; (800c6e8 <pvPortMalloc+0x180>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5ee:	e004      	b.n	800c5fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	429a      	cmp	r2, r3
 800c602:	d903      	bls.n	800c60c <pvPortMalloc+0xa4>
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1f1      	bne.n	800c5f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c60c:	4b33      	ldr	r3, [pc, #204]	; (800c6dc <pvPortMalloc+0x174>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c612:	429a      	cmp	r2, r3
 800c614:	d04b      	beq.n	800c6ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2208      	movs	r2, #8
 800c61c:	4413      	add	r3, r2
 800c61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	6a3b      	ldr	r3, [r7, #32]
 800c626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	1ad2      	subs	r2, r2, r3
 800c630:	2308      	movs	r3, #8
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	429a      	cmp	r2, r3
 800c636:	d91f      	bls.n	800c678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4413      	add	r3, r2
 800c63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	f003 0307 	and.w	r3, r3, #7
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <pvPortMalloc+0xf8>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	613b      	str	r3, [r7, #16]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c662:	685a      	ldr	r2, [r3, #4]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	1ad2      	subs	r2, r2, r3
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c672:	69b8      	ldr	r0, [r7, #24]
 800c674:	f000 f8f8 	bl	800c868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c678:	4b1a      	ldr	r3, [pc, #104]	; (800c6e4 <pvPortMalloc+0x17c>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	4a18      	ldr	r2, [pc, #96]	; (800c6e4 <pvPortMalloc+0x17c>)
 800c684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c686:	4b17      	ldr	r3, [pc, #92]	; (800c6e4 <pvPortMalloc+0x17c>)
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	4b18      	ldr	r3, [pc, #96]	; (800c6ec <pvPortMalloc+0x184>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d203      	bcs.n	800c69a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c692:	4b14      	ldr	r3, [pc, #80]	; (800c6e4 <pvPortMalloc+0x17c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a15      	ldr	r2, [pc, #84]	; (800c6ec <pvPortMalloc+0x184>)
 800c698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	4b10      	ldr	r3, [pc, #64]	; (800c6e0 <pvPortMalloc+0x178>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6ae:	f7fe fb5d 	bl	800ad6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	f003 0307 	and.w	r3, r3, #7
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00a      	beq.n	800c6d2 <pvPortMalloc+0x16a>
	__asm volatile
 800c6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	60fb      	str	r3, [r7, #12]
}
 800c6ce:	bf00      	nop
 800c6d0:	e7fe      	b.n	800c6d0 <pvPortMalloc+0x168>
	return pvReturn;
 800c6d2:	69fb      	ldr	r3, [r7, #28]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3728      	adds	r7, #40	; 0x28
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	20021c54 	.word	0x20021c54
 800c6e0:	20021c60 	.word	0x20021c60
 800c6e4:	20021c58 	.word	0x20021c58
 800c6e8:	20021c4c 	.word	0x20021c4c
 800c6ec:	20021c5c 	.word	0x20021c5c

0800c6f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d048      	beq.n	800c794 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c702:	2308      	movs	r3, #8
 800c704:	425b      	negs	r3, r3
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	4413      	add	r3, r2
 800c70a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	4b21      	ldr	r3, [pc, #132]	; (800c79c <vPortFree+0xac>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4013      	ands	r3, r2
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10a      	bne.n	800c734 <vPortFree+0x44>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	60fb      	str	r3, [r7, #12]
}
 800c730:	bf00      	nop
 800c732:	e7fe      	b.n	800c732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00a      	beq.n	800c752 <vPortFree+0x62>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	60bb      	str	r3, [r7, #8]
}
 800c74e:	bf00      	nop
 800c750:	e7fe      	b.n	800c750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	4b11      	ldr	r3, [pc, #68]	; (800c79c <vPortFree+0xac>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4013      	ands	r3, r2
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d019      	beq.n	800c794 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d115      	bne.n	800c794 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	4b0b      	ldr	r3, [pc, #44]	; (800c79c <vPortFree+0xac>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	43db      	mvns	r3, r3
 800c772:	401a      	ands	r2, r3
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c778:	f7fe faea 	bl	800ad50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <vPortFree+0xb0>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4413      	add	r3, r2
 800c786:	4a06      	ldr	r2, [pc, #24]	; (800c7a0 <vPortFree+0xb0>)
 800c788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c78a:	6938      	ldr	r0, [r7, #16]
 800c78c:	f000 f86c 	bl	800c868 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c790:	f7fe faec 	bl	800ad6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c794:	bf00      	nop
 800c796:	3718      	adds	r7, #24
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	20021c60 	.word	0x20021c60
 800c7a0:	20021c58 	.word	0x20021c58

0800c7a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7aa:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800c7ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7b0:	4b27      	ldr	r3, [pc, #156]	; (800c850 <prvHeapInit+0xac>)
 800c7b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f003 0307 	and.w	r3, r3, #7
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00c      	beq.n	800c7d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	3307      	adds	r3, #7
 800c7c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f023 0307 	bic.w	r3, r3, #7
 800c7ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	4a1f      	ldr	r2, [pc, #124]	; (800c850 <prvHeapInit+0xac>)
 800c7d4:	4413      	add	r3, r2
 800c7d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7dc:	4a1d      	ldr	r2, [pc, #116]	; (800c854 <prvHeapInit+0xb0>)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7e2:	4b1c      	ldr	r3, [pc, #112]	; (800c854 <prvHeapInit+0xb0>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7f0:	2208      	movs	r2, #8
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	1a9b      	subs	r3, r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f023 0307 	bic.w	r3, r3, #7
 800c7fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	4a15      	ldr	r2, [pc, #84]	; (800c858 <prvHeapInit+0xb4>)
 800c804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c806:	4b14      	ldr	r3, [pc, #80]	; (800c858 <prvHeapInit+0xb4>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2200      	movs	r2, #0
 800c80c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c80e:	4b12      	ldr	r3, [pc, #72]	; (800c858 <prvHeapInit+0xb4>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2200      	movs	r2, #0
 800c814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	1ad2      	subs	r2, r2, r3
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c824:	4b0c      	ldr	r3, [pc, #48]	; (800c858 <prvHeapInit+0xb4>)
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	4a0a      	ldr	r2, [pc, #40]	; (800c85c <prvHeapInit+0xb8>)
 800c832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	4a09      	ldr	r2, [pc, #36]	; (800c860 <prvHeapInit+0xbc>)
 800c83a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c83c:	4b09      	ldr	r3, [pc, #36]	; (800c864 <prvHeapInit+0xc0>)
 800c83e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c842:	601a      	str	r2, [r3, #0]
}
 800c844:	bf00      	nop
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr
 800c850:	2000284c 	.word	0x2000284c
 800c854:	20021c4c 	.word	0x20021c4c
 800c858:	20021c54 	.word	0x20021c54
 800c85c:	20021c5c 	.word	0x20021c5c
 800c860:	20021c58 	.word	0x20021c58
 800c864:	20021c60 	.word	0x20021c60

0800c868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c870:	4b28      	ldr	r3, [pc, #160]	; (800c914 <prvInsertBlockIntoFreeList+0xac>)
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	e002      	b.n	800c87c <prvInsertBlockIntoFreeList+0x14>
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	429a      	cmp	r2, r3
 800c884:	d8f7      	bhi.n	800c876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	4413      	add	r3, r2
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	429a      	cmp	r2, r3
 800c896:	d108      	bne.n	800c8aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	441a      	add	r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	441a      	add	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d118      	bne.n	800c8f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	4b15      	ldr	r3, [pc, #84]	; (800c918 <prvInsertBlockIntoFreeList+0xb0>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d00d      	beq.n	800c8e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	441a      	add	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	601a      	str	r2, [r3, #0]
 800c8e4:	e008      	b.n	800c8f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8e6:	4b0c      	ldr	r3, [pc, #48]	; (800c918 <prvInsertBlockIntoFreeList+0xb0>)
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	e003      	b.n	800c8f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d002      	beq.n	800c906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c906:	bf00      	nop
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	20021c4c 	.word	0x20021c4c
 800c918:	20021c54 	.word	0x20021c54

0800c91c <I2C_Scan>:
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
 800c926:	2300      	movs	r3, #0
 800c928:	81fb      	strh	r3, [r7, #14]
 800c92a:	2300      	movs	r3, #0
 800c92c:	737b      	strb	r3, [r7, #13]
 800c92e:	2300      	movs	r3, #0
 800c930:	81fb      	strh	r3, [r7, #14]
 800c932:	e014      	b.n	800c95e <I2C_Scan+0x42>
 800c934:	89f9      	ldrh	r1, [r7, #14]
 800c936:	2314      	movs	r3, #20
 800c938:	2201      	movs	r2, #1
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7f8 fec2 	bl	80056c4 <HAL_I2C_IsDeviceReady>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d108      	bne.n	800c958 <I2C_Scan+0x3c>
 800c946:	7b7b      	ldrb	r3, [r7, #13]
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	4413      	add	r3, r2
 800c94c:	89fa      	ldrh	r2, [r7, #14]
 800c94e:	b2d2      	uxtb	r2, r2
 800c950:	701a      	strb	r2, [r3, #0]
 800c952:	7b7b      	ldrb	r3, [r7, #13]
 800c954:	3301      	adds	r3, #1
 800c956:	737b      	strb	r3, [r7, #13]
 800c958:	89fb      	ldrh	r3, [r7, #14]
 800c95a:	3301      	adds	r3, #1
 800c95c:	81fb      	strh	r3, [r7, #14]
 800c95e:	89fb      	ldrh	r3, [r7, #14]
 800c960:	2bff      	cmp	r3, #255	; 0xff
 800c962:	d9e7      	bls.n	800c934 <I2C_Scan+0x18>
 800c964:	bf00      	nop
 800c966:	bf00      	nop
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <Init>:
 800c96e:	b580      	push	{r7, lr}
 800c970:	b088      	sub	sp, #32
 800c972:	af04      	add	r7, sp, #16
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	2380      	movs	r3, #128	; 0x80
 800c978:	733b      	strb	r3, [r7, #12]
 800c97a:	2332      	movs	r3, #50	; 0x32
 800c97c:	9302      	str	r3, [sp, #8]
 800c97e:	2301      	movs	r3, #1
 800c980:	9301      	str	r3, [sp, #4]
 800c982:	f107 030c 	add.w	r3, r7, #12
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	2301      	movs	r3, #1
 800c98a:	226b      	movs	r2, #107	; 0x6b
 800c98c:	21d0      	movs	r1, #208	; 0xd0
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7f8 fb78 	bl	8005084 <HAL_I2C_Mem_Write>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d001      	beq.n	800c99e <Init+0x30>
 800c99a:	f7f5 f925 	bl	8001be8 <Error_Handler>
 800c99e:	2064      	movs	r0, #100	; 0x64
 800c9a0:	f7f7 f8d8 	bl	8003b54 <HAL_Delay>
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	733b      	strb	r3, [r7, #12]
 800c9a8:	2332      	movs	r3, #50	; 0x32
 800c9aa:	9302      	str	r3, [sp, #8]
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	9301      	str	r3, [sp, #4]
 800c9b0:	f107 030c 	add.w	r3, r7, #12
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	226b      	movs	r2, #107	; 0x6b
 800c9ba:	21d0      	movs	r1, #208	; 0xd0
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7f8 fb61 	bl	8005084 <HAL_I2C_Mem_Write>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <Init+0x5e>
 800c9c8:	f7f5 f90e 	bl	8001be8 <Error_Handler>
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	733b      	strb	r3, [r7, #12]
 800c9d0:	2332      	movs	r3, #50	; 0x32
 800c9d2:	9302      	str	r3, [sp, #8]
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	9301      	str	r3, [sp, #4]
 800c9d8:	f107 030c 	add.w	r3, r7, #12
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	2301      	movs	r3, #1
 800c9e0:	2237      	movs	r2, #55	; 0x37
 800c9e2:	21d0      	movs	r1, #208	; 0xd0
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7f8 fb4d 	bl	8005084 <HAL_I2C_Mem_Write>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <Init+0x86>
 800c9f0:	f7f5 f8fa 	bl	8001be8 <Error_Handler>
 800c9f4:	2316      	movs	r3, #22
 800c9f6:	733b      	strb	r3, [r7, #12]
 800c9f8:	2332      	movs	r3, #50	; 0x32
 800c9fa:	9302      	str	r3, [sp, #8]
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	9301      	str	r3, [sp, #4]
 800ca00:	f107 030c 	add.w	r3, r7, #12
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	2301      	movs	r3, #1
 800ca08:	220a      	movs	r2, #10
 800ca0a:	2118      	movs	r1, #24
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f7f8 fb39 	bl	8005084 <HAL_I2C_Mem_Write>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <Init+0xae>
 800ca18:	f7f5 f8e6 	bl	8001be8 <Error_Handler>
 800ca1c:	bf00      	nop
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <Init_BMP280>:
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b088      	sub	sp, #32
 800ca28:	af04      	add	r7, sp, #16
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	23b6      	movs	r3, #182	; 0xb6
 800ca2e:	733b      	strb	r3, [r7, #12]
 800ca30:	2332      	movs	r3, #50	; 0x32
 800ca32:	9302      	str	r3, [sp, #8]
 800ca34:	2301      	movs	r3, #1
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	f107 030c 	add.w	r3, r7, #12
 800ca3c:	9300      	str	r3, [sp, #0]
 800ca3e:	2301      	movs	r3, #1
 800ca40:	22e0      	movs	r2, #224	; 0xe0
 800ca42:	21ee      	movs	r1, #238	; 0xee
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7f8 fb1d 	bl	8005084 <HAL_I2C_Mem_Write>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d001      	beq.n	800ca54 <Init_BMP280+0x30>
 800ca50:	f7f5 f8ca 	bl	8001be8 <Error_Handler>
 800ca54:	20fa      	movs	r0, #250	; 0xfa
 800ca56:	f7f7 f87d 	bl	8003b54 <HAL_Delay>
 800ca5a:	232f      	movs	r3, #47	; 0x2f
 800ca5c:	733b      	strb	r3, [r7, #12]
 800ca5e:	2332      	movs	r3, #50	; 0x32
 800ca60:	9302      	str	r3, [sp, #8]
 800ca62:	2301      	movs	r3, #1
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	f107 030c 	add.w	r3, r7, #12
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	22f4      	movs	r2, #244	; 0xf4
 800ca70:	21ee      	movs	r1, #238	; 0xee
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7f8 fb06 	bl	8005084 <HAL_I2C_Mem_Write>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d001      	beq.n	800ca82 <Init_BMP280+0x5e>
 800ca7e:	f7f5 f8b3 	bl	8001be8 <Error_Handler>
 800ca82:	bf00      	nop
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	0000      	movs	r0, r0
 800ca8c:	0000      	movs	r0, r0
	...

0800ca90 <MeasureA>:
 800ca90:	b5b0      	push	{r4, r5, r7, lr}
 800ca92:	b08a      	sub	sp, #40	; 0x28
 800ca94:	af04      	add	r7, sp, #16
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	75fb      	strb	r3, [r7, #23]
 800ca9e:	2300      	movs	r3, #0
 800caa0:	82bb      	strh	r3, [r7, #20]
 800caa2:	2301      	movs	r3, #1
 800caa4:	75bb      	strb	r3, [r7, #22]
 800caa6:	2332      	movs	r3, #50	; 0x32
 800caa8:	9302      	str	r3, [sp, #8]
 800caaa:	2301      	movs	r3, #1
 800caac:	9301      	str	r3, [sp, #4]
 800caae:	f107 030c 	add.w	r3, r7, #12
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	2301      	movs	r3, #1
 800cab6:	221c      	movs	r2, #28
 800cab8:	21d0      	movs	r1, #208	; 0xd0
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7f8 fbdc 	bl	8005278 <HAL_I2C_Mem_Read>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d001      	beq.n	800caca <MeasureA+0x3a>
 800cac6:	f7f5 f88f 	bl	8001be8 <Error_Handler>
 800caca:	7b3b      	ldrb	r3, [r7, #12]
 800cacc:	10db      	asrs	r3, r3, #3
 800cace:	b29b      	uxth	r3, r3
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	3301      	adds	r3, #1
 800cad8:	b29b      	uxth	r3, r3
 800cada:	82bb      	strh	r3, [r7, #20]
 800cadc:	2300      	movs	r3, #0
 800cade:	75fb      	strb	r3, [r7, #23]
 800cae0:	e005      	b.n	800caee <MeasureA+0x5e>
 800cae2:	7dbb      	ldrb	r3, [r7, #22]
 800cae4:	005b      	lsls	r3, r3, #1
 800cae6:	75bb      	strb	r3, [r7, #22]
 800cae8:	7dfb      	ldrb	r3, [r7, #23]
 800caea:	3301      	adds	r3, #1
 800caec:	75fb      	strb	r3, [r7, #23]
 800caee:	7dfa      	ldrb	r2, [r7, #23]
 800caf0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	dbf4      	blt.n	800cae2 <MeasureA+0x52>
 800caf8:	2332      	movs	r3, #50	; 0x32
 800cafa:	9302      	str	r3, [sp, #8]
 800cafc:	2306      	movs	r3, #6
 800cafe:	9301      	str	r3, [sp, #4]
 800cb00:	f107 030c 	add.w	r3, r7, #12
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	2301      	movs	r3, #1
 800cb08:	223b      	movs	r2, #59	; 0x3b
 800cb0a:	21d0      	movs	r1, #208	; 0xd0
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7f8 fbb3 	bl	8005278 <HAL_I2C_Mem_Read>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d001      	beq.n	800cb1c <MeasureA+0x8c>
 800cb18:	f7f5 f866 	bl	8001be8 <Error_Handler>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	75fb      	strb	r3, [r7, #23]
 800cb20:	e03a      	b.n	800cb98 <MeasureA+0x108>
 800cb22:	7dfb      	ldrb	r3, [r7, #23]
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	f107 0218 	add.w	r2, r7, #24
 800cb2a:	4413      	add	r3, r2
 800cb2c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	021b      	lsls	r3, r3, #8
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	7dfb      	ldrb	r3, [r7, #23]
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	f107 0118 	add.w	r1, r7, #24
 800cb40:	440b      	add	r3, r1
 800cb42:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	4413      	add	r3, r2
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	82bb      	strh	r3, [r7, #20]
 800cb4e:	7dbb      	ldrb	r3, [r7, #22]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7f3 fcf7 	bl	8000544 <__aeabi_i2d>
 800cb56:	4604      	mov	r4, r0
 800cb58:	460d      	mov	r5, r1
 800cb5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f3 fcf0 	bl	8000544 <__aeabi_i2d>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4620      	mov	r0, r4
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	f7f3 fd54 	bl	8000618 <__aeabi_dmul>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4610      	mov	r0, r2
 800cb76:	4619      	mov	r1, r3
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	18d4      	adds	r4, r2, r3
 800cb80:	a309      	add	r3, pc, #36	; (adr r3, 800cba8 <MeasureA+0x118>)
 800cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb86:	f7f3 fe71 	bl	800086c <__aeabi_ddiv>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	e9c4 2300 	strd	r2, r3, [r4]
 800cb92:	7dfb      	ldrb	r3, [r7, #23]
 800cb94:	3301      	adds	r3, #1
 800cb96:	75fb      	strb	r3, [r7, #23]
 800cb98:	7dfb      	ldrb	r3, [r7, #23]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d9c1      	bls.n	800cb22 <MeasureA+0x92>
 800cb9e:	bf00      	nop
 800cba0:	bf00      	nop
 800cba2:	3718      	adds	r7, #24
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bdb0      	pop	{r4, r5, r7, pc}
 800cba8:	00000000 	.word	0x00000000
 800cbac:	40dfffc0 	.word	0x40dfffc0

0800cbb0 <MeasureG>:
 800cbb0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800cbb4:	b08b      	sub	sp, #44	; 0x2c
 800cbb6:	af04      	add	r7, sp, #16
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	6039      	str	r1, [r7, #0]
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	75fb      	strb	r3, [r7, #23]
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	82bb      	strh	r3, [r7, #20]
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	75bb      	strb	r3, [r7, #22]
 800cbc8:	2332      	movs	r3, #50	; 0x32
 800cbca:	9302      	str	r3, [sp, #8]
 800cbcc:	2301      	movs	r3, #1
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	f107 030c 	add.w	r3, r7, #12
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	221b      	movs	r2, #27
 800cbda:	21d0      	movs	r1, #208	; 0xd0
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7f8 fb4b 	bl	8005278 <HAL_I2C_Mem_Read>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <MeasureG+0x3c>
 800cbe8:	f7f4 fffe 	bl	8001be8 <Error_Handler>
 800cbec:	7b3b      	ldrb	r3, [r7, #12]
 800cbee:	10db      	asrs	r3, r3, #3
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	82bb      	strh	r3, [r7, #20]
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	75fb      	strb	r3, [r7, #23]
 800cc00:	e008      	b.n	800cc14 <MeasureG+0x64>
 800cc02:	7dbb      	ldrb	r3, [r7, #22]
 800cc04:	461a      	mov	r2, r3
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	005b      	lsls	r3, r3, #1
 800cc0c:	75bb      	strb	r3, [r7, #22]
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	3301      	adds	r3, #1
 800cc12:	75fb      	strb	r3, [r7, #23]
 800cc14:	7dfb      	ldrb	r3, [r7, #23]
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	8aba      	ldrh	r2, [r7, #20]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d8f1      	bhi.n	800cc02 <MeasureG+0x52>
 800cc1e:	2332      	movs	r3, #50	; 0x32
 800cc20:	9302      	str	r3, [sp, #8]
 800cc22:	2306      	movs	r3, #6
 800cc24:	9301      	str	r3, [sp, #4]
 800cc26:	f107 030c 	add.w	r3, r7, #12
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	2243      	movs	r2, #67	; 0x43
 800cc30:	21d0      	movs	r1, #208	; 0xd0
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7f8 fb20 	bl	8005278 <HAL_I2C_Mem_Read>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d001      	beq.n	800cc42 <MeasureG+0x92>
 800cc3e:	f7f4 ffd3 	bl	8001be8 <Error_Handler>
 800cc42:	2300      	movs	r3, #0
 800cc44:	75fb      	strb	r3, [r7, #23]
 800cc46:	e05d      	b.n	800cd04 <MeasureG+0x154>
 800cc48:	7dfb      	ldrb	r3, [r7, #23]
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	f107 0218 	add.w	r2, r7, #24
 800cc50:	4413      	add	r3, r2
 800cc52:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	021b      	lsls	r3, r3, #8
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	3301      	adds	r3, #1
 800cc62:	f107 0118 	add.w	r1, r7, #24
 800cc66:	440b      	add	r3, r1
 800cc68:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	4413      	add	r3, r2
 800cc70:	82bb      	strh	r3, [r7, #20]
 800cc72:	7dfb      	ldrb	r3, [r7, #23]
 800cc74:	00db      	lsls	r3, r3, #3
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	18d4      	adds	r4, r2, r3
 800cc7a:	8abb      	ldrh	r3, [r7, #20]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7f3 fc51 	bl	8000524 <__aeabi_ui2d>
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	e9c4 2300 	strd	r2, r3, [r4]
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	005b      	lsls	r3, r3, #1
 800cc8e:	f107 0218 	add.w	r2, r7, #24
 800cc92:	4413      	add	r3, r2
 800cc94:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cc98:	09db      	lsrs	r3, r3, #7
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d10f      	bne.n	800ccc0 <MeasureG+0x110>
 800cca0:	8abb      	ldrh	r3, [r7, #20]
 800cca2:	425b      	negs	r3, r3
 800cca4:	82bb      	strh	r3, [r7, #20]
 800cca6:	8abb      	ldrh	r3, [r7, #20]
 800cca8:	4259      	negs	r1, r3
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
 800ccac:	00db      	lsls	r3, r3, #3
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	18d4      	adds	r4, r2, r3
 800ccb2:	4608      	mov	r0, r1
 800ccb4:	f7f3 fc46 	bl	8000544 <__aeabi_i2d>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	460b      	mov	r3, r1
 800ccbc:	e9c4 2300 	strd	r2, r3, [r4]
 800ccc0:	7dbb      	ldrb	r3, [r7, #22]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7f3 fc2e 	bl	8000524 <__aeabi_ui2d>
 800ccc8:	a313      	add	r3, pc, #76	; (adr r3, 800cd18 <MeasureG+0x168>)
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	f7f3 fdcd 	bl	800086c <__aeabi_ddiv>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	4690      	mov	r8, r2
 800ccd8:	4699      	mov	r9, r3
 800ccda:	7dfb      	ldrb	r3, [r7, #23]
 800ccdc:	00db      	lsls	r3, r3, #3
 800ccde:	683a      	ldr	r2, [r7, #0]
 800cce0:	4413      	add	r3, r2
 800cce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce6:	7df9      	ldrb	r1, [r7, #23]
 800cce8:	00c9      	lsls	r1, r1, #3
 800ccea:	6838      	ldr	r0, [r7, #0]
 800ccec:	1844      	adds	r4, r0, r1
 800ccee:	4640      	mov	r0, r8
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	f7f3 fc91 	bl	8000618 <__aeabi_dmul>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	e9c4 2300 	strd	r2, r3, [r4]
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	3301      	adds	r3, #1
 800cd02:	75fb      	strb	r3, [r7, #23]
 800cd04:	7dfb      	ldrb	r3, [r7, #23]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d99e      	bls.n	800cc48 <MeasureG+0x98>
 800cd0a:	bf00      	nop
 800cd0c:	bf00      	nop
 800cd0e:	371c      	adds	r7, #28
 800cd10:	46bd      	mov	sp, r7
 800cd12:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800cd16:	bf00      	nop
 800cd18:	00000000 	.word	0x00000000
 800cd1c:	40dfffc0 	.word	0x40dfffc0

0800cd20 <__errno>:
 800cd20:	4b01      	ldr	r3, [pc, #4]	; (800cd28 <__errno+0x8>)
 800cd22:	6818      	ldr	r0, [r3, #0]
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	20000068 	.word	0x20000068

0800cd2c <exit>:
 800cd2c:	b508      	push	{r3, lr}
 800cd2e:	4b07      	ldr	r3, [pc, #28]	; (800cd4c <exit+0x20>)
 800cd30:	4604      	mov	r4, r0
 800cd32:	b113      	cbz	r3, 800cd3a <exit+0xe>
 800cd34:	2100      	movs	r1, #0
 800cd36:	f3af 8000 	nop.w
 800cd3a:	4b05      	ldr	r3, [pc, #20]	; (800cd50 <exit+0x24>)
 800cd3c:	6818      	ldr	r0, [r3, #0]
 800cd3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cd40:	b103      	cbz	r3, 800cd44 <exit+0x18>
 800cd42:	4798      	blx	r3
 800cd44:	4620      	mov	r0, r4
 800cd46:	f7f5 f8ed 	bl	8001f24 <_exit>
 800cd4a:	bf00      	nop
 800cd4c:	00000000 	.word	0x00000000
 800cd50:	080124fc 	.word	0x080124fc

0800cd54 <__libc_init_array>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	4d0d      	ldr	r5, [pc, #52]	; (800cd8c <__libc_init_array+0x38>)
 800cd58:	4c0d      	ldr	r4, [pc, #52]	; (800cd90 <__libc_init_array+0x3c>)
 800cd5a:	1b64      	subs	r4, r4, r5
 800cd5c:	10a4      	asrs	r4, r4, #2
 800cd5e:	2600      	movs	r6, #0
 800cd60:	42a6      	cmp	r6, r4
 800cd62:	d109      	bne.n	800cd78 <__libc_init_array+0x24>
 800cd64:	4d0b      	ldr	r5, [pc, #44]	; (800cd94 <__libc_init_array+0x40>)
 800cd66:	4c0c      	ldr	r4, [pc, #48]	; (800cd98 <__libc_init_array+0x44>)
 800cd68:	f002 fd7e 	bl	800f868 <_init>
 800cd6c:	1b64      	subs	r4, r4, r5
 800cd6e:	10a4      	asrs	r4, r4, #2
 800cd70:	2600      	movs	r6, #0
 800cd72:	42a6      	cmp	r6, r4
 800cd74:	d105      	bne.n	800cd82 <__libc_init_array+0x2e>
 800cd76:	bd70      	pop	{r4, r5, r6, pc}
 800cd78:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd7c:	4798      	blx	r3
 800cd7e:	3601      	adds	r6, #1
 800cd80:	e7ee      	b.n	800cd60 <__libc_init_array+0xc>
 800cd82:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd86:	4798      	blx	r3
 800cd88:	3601      	adds	r6, #1
 800cd8a:	e7f2      	b.n	800cd72 <__libc_init_array+0x1e>
 800cd8c:	080128e4 	.word	0x080128e4
 800cd90:	080128e4 	.word	0x080128e4
 800cd94:	080128e4 	.word	0x080128e4
 800cd98:	080128e8 	.word	0x080128e8

0800cd9c <memcpy>:
 800cd9c:	440a      	add	r2, r1
 800cd9e:	4291      	cmp	r1, r2
 800cda0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cda4:	d100      	bne.n	800cda8 <memcpy+0xc>
 800cda6:	4770      	bx	lr
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdb2:	4291      	cmp	r1, r2
 800cdb4:	d1f9      	bne.n	800cdaa <memcpy+0xe>
 800cdb6:	bd10      	pop	{r4, pc}

0800cdb8 <memset>:
 800cdb8:	4402      	add	r2, r0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d100      	bne.n	800cdc2 <memset+0xa>
 800cdc0:	4770      	bx	lr
 800cdc2:	f803 1b01 	strb.w	r1, [r3], #1
 800cdc6:	e7f9      	b.n	800cdbc <memset+0x4>

0800cdc8 <__cvt>:
 800cdc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdcc:	ec55 4b10 	vmov	r4, r5, d0
 800cdd0:	2d00      	cmp	r5, #0
 800cdd2:	460e      	mov	r6, r1
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	462b      	mov	r3, r5
 800cdd8:	bfbb      	ittet	lt
 800cdda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cdde:	461d      	movlt	r5, r3
 800cde0:	2300      	movge	r3, #0
 800cde2:	232d      	movlt	r3, #45	; 0x2d
 800cde4:	700b      	strb	r3, [r1, #0]
 800cde6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cde8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cdec:	4691      	mov	r9, r2
 800cdee:	f023 0820 	bic.w	r8, r3, #32
 800cdf2:	bfbc      	itt	lt
 800cdf4:	4622      	movlt	r2, r4
 800cdf6:	4614      	movlt	r4, r2
 800cdf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cdfc:	d005      	beq.n	800ce0a <__cvt+0x42>
 800cdfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ce02:	d100      	bne.n	800ce06 <__cvt+0x3e>
 800ce04:	3601      	adds	r6, #1
 800ce06:	2102      	movs	r1, #2
 800ce08:	e000      	b.n	800ce0c <__cvt+0x44>
 800ce0a:	2103      	movs	r1, #3
 800ce0c:	ab03      	add	r3, sp, #12
 800ce0e:	9301      	str	r3, [sp, #4]
 800ce10:	ab02      	add	r3, sp, #8
 800ce12:	9300      	str	r3, [sp, #0]
 800ce14:	ec45 4b10 	vmov	d0, r4, r5
 800ce18:	4653      	mov	r3, sl
 800ce1a:	4632      	mov	r2, r6
 800ce1c:	f000 fe18 	bl	800da50 <_dtoa_r>
 800ce20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ce24:	4607      	mov	r7, r0
 800ce26:	d102      	bne.n	800ce2e <__cvt+0x66>
 800ce28:	f019 0f01 	tst.w	r9, #1
 800ce2c:	d022      	beq.n	800ce74 <__cvt+0xac>
 800ce2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce32:	eb07 0906 	add.w	r9, r7, r6
 800ce36:	d110      	bne.n	800ce5a <__cvt+0x92>
 800ce38:	783b      	ldrb	r3, [r7, #0]
 800ce3a:	2b30      	cmp	r3, #48	; 0x30
 800ce3c:	d10a      	bne.n	800ce54 <__cvt+0x8c>
 800ce3e:	2200      	movs	r2, #0
 800ce40:	2300      	movs	r3, #0
 800ce42:	4620      	mov	r0, r4
 800ce44:	4629      	mov	r1, r5
 800ce46:	f7f3 fe4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce4a:	b918      	cbnz	r0, 800ce54 <__cvt+0x8c>
 800ce4c:	f1c6 0601 	rsb	r6, r6, #1
 800ce50:	f8ca 6000 	str.w	r6, [sl]
 800ce54:	f8da 3000 	ldr.w	r3, [sl]
 800ce58:	4499      	add	r9, r3
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	4620      	mov	r0, r4
 800ce60:	4629      	mov	r1, r5
 800ce62:	f7f3 fe41 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce66:	b108      	cbz	r0, 800ce6c <__cvt+0xa4>
 800ce68:	f8cd 900c 	str.w	r9, [sp, #12]
 800ce6c:	2230      	movs	r2, #48	; 0x30
 800ce6e:	9b03      	ldr	r3, [sp, #12]
 800ce70:	454b      	cmp	r3, r9
 800ce72:	d307      	bcc.n	800ce84 <__cvt+0xbc>
 800ce74:	9b03      	ldr	r3, [sp, #12]
 800ce76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce78:	1bdb      	subs	r3, r3, r7
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	b004      	add	sp, #16
 800ce80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce84:	1c59      	adds	r1, r3, #1
 800ce86:	9103      	str	r1, [sp, #12]
 800ce88:	701a      	strb	r2, [r3, #0]
 800ce8a:	e7f0      	b.n	800ce6e <__cvt+0xa6>

0800ce8c <__exponent>:
 800ce8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2900      	cmp	r1, #0
 800ce92:	bfb8      	it	lt
 800ce94:	4249      	neglt	r1, r1
 800ce96:	f803 2b02 	strb.w	r2, [r3], #2
 800ce9a:	bfb4      	ite	lt
 800ce9c:	222d      	movlt	r2, #45	; 0x2d
 800ce9e:	222b      	movge	r2, #43	; 0x2b
 800cea0:	2909      	cmp	r1, #9
 800cea2:	7042      	strb	r2, [r0, #1]
 800cea4:	dd2a      	ble.n	800cefc <__exponent+0x70>
 800cea6:	f10d 0407 	add.w	r4, sp, #7
 800ceaa:	46a4      	mov	ip, r4
 800ceac:	270a      	movs	r7, #10
 800ceae:	46a6      	mov	lr, r4
 800ceb0:	460a      	mov	r2, r1
 800ceb2:	fb91 f6f7 	sdiv	r6, r1, r7
 800ceb6:	fb07 1516 	mls	r5, r7, r6, r1
 800ceba:	3530      	adds	r5, #48	; 0x30
 800cebc:	2a63      	cmp	r2, #99	; 0x63
 800cebe:	f104 34ff 	add.w	r4, r4, #4294967295
 800cec2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cec6:	4631      	mov	r1, r6
 800cec8:	dcf1      	bgt.n	800ceae <__exponent+0x22>
 800ceca:	3130      	adds	r1, #48	; 0x30
 800cecc:	f1ae 0502 	sub.w	r5, lr, #2
 800ced0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ced4:	1c44      	adds	r4, r0, #1
 800ced6:	4629      	mov	r1, r5
 800ced8:	4561      	cmp	r1, ip
 800ceda:	d30a      	bcc.n	800cef2 <__exponent+0x66>
 800cedc:	f10d 0209 	add.w	r2, sp, #9
 800cee0:	eba2 020e 	sub.w	r2, r2, lr
 800cee4:	4565      	cmp	r5, ip
 800cee6:	bf88      	it	hi
 800cee8:	2200      	movhi	r2, #0
 800ceea:	4413      	add	r3, r2
 800ceec:	1a18      	subs	r0, r3, r0
 800ceee:	b003      	add	sp, #12
 800cef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cef6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cefa:	e7ed      	b.n	800ced8 <__exponent+0x4c>
 800cefc:	2330      	movs	r3, #48	; 0x30
 800cefe:	3130      	adds	r1, #48	; 0x30
 800cf00:	7083      	strb	r3, [r0, #2]
 800cf02:	70c1      	strb	r1, [r0, #3]
 800cf04:	1d03      	adds	r3, r0, #4
 800cf06:	e7f1      	b.n	800ceec <__exponent+0x60>

0800cf08 <_printf_float>:
 800cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	ed2d 8b02 	vpush	{d8}
 800cf10:	b08d      	sub	sp, #52	; 0x34
 800cf12:	460c      	mov	r4, r1
 800cf14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf18:	4616      	mov	r6, r2
 800cf1a:	461f      	mov	r7, r3
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	f001 fd3b 	bl	800e998 <_localeconv_r>
 800cf22:	f8d0 a000 	ldr.w	sl, [r0]
 800cf26:	4650      	mov	r0, sl
 800cf28:	f7f3 f962 	bl	80001f0 <strlen>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf30:	6823      	ldr	r3, [r4, #0]
 800cf32:	9305      	str	r3, [sp, #20]
 800cf34:	f8d8 3000 	ldr.w	r3, [r8]
 800cf38:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cf3c:	3307      	adds	r3, #7
 800cf3e:	f023 0307 	bic.w	r3, r3, #7
 800cf42:	f103 0208 	add.w	r2, r3, #8
 800cf46:	f8c8 2000 	str.w	r2, [r8]
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cf52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cf56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cf5a:	9307      	str	r3, [sp, #28]
 800cf5c:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf60:	ee08 0a10 	vmov	s16, r0
 800cf64:	4b9f      	ldr	r3, [pc, #636]	; (800d1e4 <_printf_float+0x2dc>)
 800cf66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf6a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6e:	f7f3 fded 	bl	8000b4c <__aeabi_dcmpun>
 800cf72:	bb88      	cbnz	r0, 800cfd8 <_printf_float+0xd0>
 800cf74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf78:	4b9a      	ldr	r3, [pc, #616]	; (800d1e4 <_printf_float+0x2dc>)
 800cf7a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf7e:	f7f3 fdc7 	bl	8000b10 <__aeabi_dcmple>
 800cf82:	bb48      	cbnz	r0, 800cfd8 <_printf_float+0xd0>
 800cf84:	2200      	movs	r2, #0
 800cf86:	2300      	movs	r3, #0
 800cf88:	4640      	mov	r0, r8
 800cf8a:	4649      	mov	r1, r9
 800cf8c:	f7f3 fdb6 	bl	8000afc <__aeabi_dcmplt>
 800cf90:	b110      	cbz	r0, 800cf98 <_printf_float+0x90>
 800cf92:	232d      	movs	r3, #45	; 0x2d
 800cf94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf98:	4b93      	ldr	r3, [pc, #588]	; (800d1e8 <_printf_float+0x2e0>)
 800cf9a:	4894      	ldr	r0, [pc, #592]	; (800d1ec <_printf_float+0x2e4>)
 800cf9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cfa0:	bf94      	ite	ls
 800cfa2:	4698      	movls	r8, r3
 800cfa4:	4680      	movhi	r8, r0
 800cfa6:	2303      	movs	r3, #3
 800cfa8:	6123      	str	r3, [r4, #16]
 800cfaa:	9b05      	ldr	r3, [sp, #20]
 800cfac:	f023 0204 	bic.w	r2, r3, #4
 800cfb0:	6022      	str	r2, [r4, #0]
 800cfb2:	f04f 0900 	mov.w	r9, #0
 800cfb6:	9700      	str	r7, [sp, #0]
 800cfb8:	4633      	mov	r3, r6
 800cfba:	aa0b      	add	r2, sp, #44	; 0x2c
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f000 f9d8 	bl	800d374 <_printf_common>
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	f040 8090 	bne.w	800d0ea <_printf_float+0x1e2>
 800cfca:	f04f 30ff 	mov.w	r0, #4294967295
 800cfce:	b00d      	add	sp, #52	; 0x34
 800cfd0:	ecbd 8b02 	vpop	{d8}
 800cfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd8:	4642      	mov	r2, r8
 800cfda:	464b      	mov	r3, r9
 800cfdc:	4640      	mov	r0, r8
 800cfde:	4649      	mov	r1, r9
 800cfe0:	f7f3 fdb4 	bl	8000b4c <__aeabi_dcmpun>
 800cfe4:	b140      	cbz	r0, 800cff8 <_printf_float+0xf0>
 800cfe6:	464b      	mov	r3, r9
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	bfbc      	itt	lt
 800cfec:	232d      	movlt	r3, #45	; 0x2d
 800cfee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cff2:	487f      	ldr	r0, [pc, #508]	; (800d1f0 <_printf_float+0x2e8>)
 800cff4:	4b7f      	ldr	r3, [pc, #508]	; (800d1f4 <_printf_float+0x2ec>)
 800cff6:	e7d1      	b.n	800cf9c <_printf_float+0x94>
 800cff8:	6863      	ldr	r3, [r4, #4]
 800cffa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cffe:	9206      	str	r2, [sp, #24]
 800d000:	1c5a      	adds	r2, r3, #1
 800d002:	d13f      	bne.n	800d084 <_printf_float+0x17c>
 800d004:	2306      	movs	r3, #6
 800d006:	6063      	str	r3, [r4, #4]
 800d008:	9b05      	ldr	r3, [sp, #20]
 800d00a:	6861      	ldr	r1, [r4, #4]
 800d00c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d010:	2300      	movs	r3, #0
 800d012:	9303      	str	r3, [sp, #12]
 800d014:	ab0a      	add	r3, sp, #40	; 0x28
 800d016:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d01a:	ab09      	add	r3, sp, #36	; 0x24
 800d01c:	ec49 8b10 	vmov	d0, r8, r9
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	6022      	str	r2, [r4, #0]
 800d024:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d028:	4628      	mov	r0, r5
 800d02a:	f7ff fecd 	bl	800cdc8 <__cvt>
 800d02e:	9b06      	ldr	r3, [sp, #24]
 800d030:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d032:	2b47      	cmp	r3, #71	; 0x47
 800d034:	4680      	mov	r8, r0
 800d036:	d108      	bne.n	800d04a <_printf_float+0x142>
 800d038:	1cc8      	adds	r0, r1, #3
 800d03a:	db02      	blt.n	800d042 <_printf_float+0x13a>
 800d03c:	6863      	ldr	r3, [r4, #4]
 800d03e:	4299      	cmp	r1, r3
 800d040:	dd41      	ble.n	800d0c6 <_printf_float+0x1be>
 800d042:	f1ab 0b02 	sub.w	fp, fp, #2
 800d046:	fa5f fb8b 	uxtb.w	fp, fp
 800d04a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d04e:	d820      	bhi.n	800d092 <_printf_float+0x18a>
 800d050:	3901      	subs	r1, #1
 800d052:	465a      	mov	r2, fp
 800d054:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d058:	9109      	str	r1, [sp, #36]	; 0x24
 800d05a:	f7ff ff17 	bl	800ce8c <__exponent>
 800d05e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d060:	1813      	adds	r3, r2, r0
 800d062:	2a01      	cmp	r2, #1
 800d064:	4681      	mov	r9, r0
 800d066:	6123      	str	r3, [r4, #16]
 800d068:	dc02      	bgt.n	800d070 <_printf_float+0x168>
 800d06a:	6822      	ldr	r2, [r4, #0]
 800d06c:	07d2      	lsls	r2, r2, #31
 800d06e:	d501      	bpl.n	800d074 <_printf_float+0x16c>
 800d070:	3301      	adds	r3, #1
 800d072:	6123      	str	r3, [r4, #16]
 800d074:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d09c      	beq.n	800cfb6 <_printf_float+0xae>
 800d07c:	232d      	movs	r3, #45	; 0x2d
 800d07e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d082:	e798      	b.n	800cfb6 <_printf_float+0xae>
 800d084:	9a06      	ldr	r2, [sp, #24]
 800d086:	2a47      	cmp	r2, #71	; 0x47
 800d088:	d1be      	bne.n	800d008 <_printf_float+0x100>
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1bc      	bne.n	800d008 <_printf_float+0x100>
 800d08e:	2301      	movs	r3, #1
 800d090:	e7b9      	b.n	800d006 <_printf_float+0xfe>
 800d092:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d096:	d118      	bne.n	800d0ca <_printf_float+0x1c2>
 800d098:	2900      	cmp	r1, #0
 800d09a:	6863      	ldr	r3, [r4, #4]
 800d09c:	dd0b      	ble.n	800d0b6 <_printf_float+0x1ae>
 800d09e:	6121      	str	r1, [r4, #16]
 800d0a0:	b913      	cbnz	r3, 800d0a8 <_printf_float+0x1a0>
 800d0a2:	6822      	ldr	r2, [r4, #0]
 800d0a4:	07d0      	lsls	r0, r2, #31
 800d0a6:	d502      	bpl.n	800d0ae <_printf_float+0x1a6>
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	440b      	add	r3, r1
 800d0ac:	6123      	str	r3, [r4, #16]
 800d0ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800d0b0:	f04f 0900 	mov.w	r9, #0
 800d0b4:	e7de      	b.n	800d074 <_printf_float+0x16c>
 800d0b6:	b913      	cbnz	r3, 800d0be <_printf_float+0x1b6>
 800d0b8:	6822      	ldr	r2, [r4, #0]
 800d0ba:	07d2      	lsls	r2, r2, #31
 800d0bc:	d501      	bpl.n	800d0c2 <_printf_float+0x1ba>
 800d0be:	3302      	adds	r3, #2
 800d0c0:	e7f4      	b.n	800d0ac <_printf_float+0x1a4>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e7f2      	b.n	800d0ac <_printf_float+0x1a4>
 800d0c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d0ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0cc:	4299      	cmp	r1, r3
 800d0ce:	db05      	blt.n	800d0dc <_printf_float+0x1d4>
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	6121      	str	r1, [r4, #16]
 800d0d4:	07d8      	lsls	r0, r3, #31
 800d0d6:	d5ea      	bpl.n	800d0ae <_printf_float+0x1a6>
 800d0d8:	1c4b      	adds	r3, r1, #1
 800d0da:	e7e7      	b.n	800d0ac <_printf_float+0x1a4>
 800d0dc:	2900      	cmp	r1, #0
 800d0de:	bfd4      	ite	le
 800d0e0:	f1c1 0202 	rsble	r2, r1, #2
 800d0e4:	2201      	movgt	r2, #1
 800d0e6:	4413      	add	r3, r2
 800d0e8:	e7e0      	b.n	800d0ac <_printf_float+0x1a4>
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	055a      	lsls	r2, r3, #21
 800d0ee:	d407      	bmi.n	800d100 <_printf_float+0x1f8>
 800d0f0:	6923      	ldr	r3, [r4, #16]
 800d0f2:	4642      	mov	r2, r8
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	47b8      	blx	r7
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	d12c      	bne.n	800d158 <_printf_float+0x250>
 800d0fe:	e764      	b.n	800cfca <_printf_float+0xc2>
 800d100:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d104:	f240 80e0 	bls.w	800d2c8 <_printf_float+0x3c0>
 800d108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d10c:	2200      	movs	r2, #0
 800d10e:	2300      	movs	r3, #0
 800d110:	f7f3 fcea 	bl	8000ae8 <__aeabi_dcmpeq>
 800d114:	2800      	cmp	r0, #0
 800d116:	d034      	beq.n	800d182 <_printf_float+0x27a>
 800d118:	4a37      	ldr	r2, [pc, #220]	; (800d1f8 <_printf_float+0x2f0>)
 800d11a:	2301      	movs	r3, #1
 800d11c:	4631      	mov	r1, r6
 800d11e:	4628      	mov	r0, r5
 800d120:	47b8      	blx	r7
 800d122:	3001      	adds	r0, #1
 800d124:	f43f af51 	beq.w	800cfca <_printf_float+0xc2>
 800d128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d12c:	429a      	cmp	r2, r3
 800d12e:	db02      	blt.n	800d136 <_printf_float+0x22e>
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	07d8      	lsls	r0, r3, #31
 800d134:	d510      	bpl.n	800d158 <_printf_float+0x250>
 800d136:	ee18 3a10 	vmov	r3, s16
 800d13a:	4652      	mov	r2, sl
 800d13c:	4631      	mov	r1, r6
 800d13e:	4628      	mov	r0, r5
 800d140:	47b8      	blx	r7
 800d142:	3001      	adds	r0, #1
 800d144:	f43f af41 	beq.w	800cfca <_printf_float+0xc2>
 800d148:	f04f 0800 	mov.w	r8, #0
 800d14c:	f104 091a 	add.w	r9, r4, #26
 800d150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d152:	3b01      	subs	r3, #1
 800d154:	4543      	cmp	r3, r8
 800d156:	dc09      	bgt.n	800d16c <_printf_float+0x264>
 800d158:	6823      	ldr	r3, [r4, #0]
 800d15a:	079b      	lsls	r3, r3, #30
 800d15c:	f100 8105 	bmi.w	800d36a <_printf_float+0x462>
 800d160:	68e0      	ldr	r0, [r4, #12]
 800d162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d164:	4298      	cmp	r0, r3
 800d166:	bfb8      	it	lt
 800d168:	4618      	movlt	r0, r3
 800d16a:	e730      	b.n	800cfce <_printf_float+0xc6>
 800d16c:	2301      	movs	r3, #1
 800d16e:	464a      	mov	r2, r9
 800d170:	4631      	mov	r1, r6
 800d172:	4628      	mov	r0, r5
 800d174:	47b8      	blx	r7
 800d176:	3001      	adds	r0, #1
 800d178:	f43f af27 	beq.w	800cfca <_printf_float+0xc2>
 800d17c:	f108 0801 	add.w	r8, r8, #1
 800d180:	e7e6      	b.n	800d150 <_printf_float+0x248>
 800d182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d184:	2b00      	cmp	r3, #0
 800d186:	dc39      	bgt.n	800d1fc <_printf_float+0x2f4>
 800d188:	4a1b      	ldr	r2, [pc, #108]	; (800d1f8 <_printf_float+0x2f0>)
 800d18a:	2301      	movs	r3, #1
 800d18c:	4631      	mov	r1, r6
 800d18e:	4628      	mov	r0, r5
 800d190:	47b8      	blx	r7
 800d192:	3001      	adds	r0, #1
 800d194:	f43f af19 	beq.w	800cfca <_printf_float+0xc2>
 800d198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d19c:	4313      	orrs	r3, r2
 800d19e:	d102      	bne.n	800d1a6 <_printf_float+0x29e>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	07d9      	lsls	r1, r3, #31
 800d1a4:	d5d8      	bpl.n	800d158 <_printf_float+0x250>
 800d1a6:	ee18 3a10 	vmov	r3, s16
 800d1aa:	4652      	mov	r2, sl
 800d1ac:	4631      	mov	r1, r6
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	47b8      	blx	r7
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	f43f af09 	beq.w	800cfca <_printf_float+0xc2>
 800d1b8:	f04f 0900 	mov.w	r9, #0
 800d1bc:	f104 0a1a 	add.w	sl, r4, #26
 800d1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c2:	425b      	negs	r3, r3
 800d1c4:	454b      	cmp	r3, r9
 800d1c6:	dc01      	bgt.n	800d1cc <_printf_float+0x2c4>
 800d1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1ca:	e792      	b.n	800d0f2 <_printf_float+0x1ea>
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	4652      	mov	r2, sl
 800d1d0:	4631      	mov	r1, r6
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	47b8      	blx	r7
 800d1d6:	3001      	adds	r0, #1
 800d1d8:	f43f aef7 	beq.w	800cfca <_printf_float+0xc2>
 800d1dc:	f109 0901 	add.w	r9, r9, #1
 800d1e0:	e7ee      	b.n	800d1c0 <_printf_float+0x2b8>
 800d1e2:	bf00      	nop
 800d1e4:	7fefffff 	.word	0x7fefffff
 800d1e8:	08012500 	.word	0x08012500
 800d1ec:	08012504 	.word	0x08012504
 800d1f0:	0801250c 	.word	0x0801250c
 800d1f4:	08012508 	.word	0x08012508
 800d1f8:	08012510 	.word	0x08012510
 800d1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d200:	429a      	cmp	r2, r3
 800d202:	bfa8      	it	ge
 800d204:	461a      	movge	r2, r3
 800d206:	2a00      	cmp	r2, #0
 800d208:	4691      	mov	r9, r2
 800d20a:	dc37      	bgt.n	800d27c <_printf_float+0x374>
 800d20c:	f04f 0b00 	mov.w	fp, #0
 800d210:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d214:	f104 021a 	add.w	r2, r4, #26
 800d218:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d21a:	9305      	str	r3, [sp, #20]
 800d21c:	eba3 0309 	sub.w	r3, r3, r9
 800d220:	455b      	cmp	r3, fp
 800d222:	dc33      	bgt.n	800d28c <_printf_float+0x384>
 800d224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d228:	429a      	cmp	r2, r3
 800d22a:	db3b      	blt.n	800d2a4 <_printf_float+0x39c>
 800d22c:	6823      	ldr	r3, [r4, #0]
 800d22e:	07da      	lsls	r2, r3, #31
 800d230:	d438      	bmi.n	800d2a4 <_printf_float+0x39c>
 800d232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d234:	9b05      	ldr	r3, [sp, #20]
 800d236:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	eba2 0901 	sub.w	r9, r2, r1
 800d23e:	4599      	cmp	r9, r3
 800d240:	bfa8      	it	ge
 800d242:	4699      	movge	r9, r3
 800d244:	f1b9 0f00 	cmp.w	r9, #0
 800d248:	dc35      	bgt.n	800d2b6 <_printf_float+0x3ae>
 800d24a:	f04f 0800 	mov.w	r8, #0
 800d24e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d252:	f104 0a1a 	add.w	sl, r4, #26
 800d256:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d25a:	1a9b      	subs	r3, r3, r2
 800d25c:	eba3 0309 	sub.w	r3, r3, r9
 800d260:	4543      	cmp	r3, r8
 800d262:	f77f af79 	ble.w	800d158 <_printf_float+0x250>
 800d266:	2301      	movs	r3, #1
 800d268:	4652      	mov	r2, sl
 800d26a:	4631      	mov	r1, r6
 800d26c:	4628      	mov	r0, r5
 800d26e:	47b8      	blx	r7
 800d270:	3001      	adds	r0, #1
 800d272:	f43f aeaa 	beq.w	800cfca <_printf_float+0xc2>
 800d276:	f108 0801 	add.w	r8, r8, #1
 800d27a:	e7ec      	b.n	800d256 <_printf_float+0x34e>
 800d27c:	4613      	mov	r3, r2
 800d27e:	4631      	mov	r1, r6
 800d280:	4642      	mov	r2, r8
 800d282:	4628      	mov	r0, r5
 800d284:	47b8      	blx	r7
 800d286:	3001      	adds	r0, #1
 800d288:	d1c0      	bne.n	800d20c <_printf_float+0x304>
 800d28a:	e69e      	b.n	800cfca <_printf_float+0xc2>
 800d28c:	2301      	movs	r3, #1
 800d28e:	4631      	mov	r1, r6
 800d290:	4628      	mov	r0, r5
 800d292:	9205      	str	r2, [sp, #20]
 800d294:	47b8      	blx	r7
 800d296:	3001      	adds	r0, #1
 800d298:	f43f ae97 	beq.w	800cfca <_printf_float+0xc2>
 800d29c:	9a05      	ldr	r2, [sp, #20]
 800d29e:	f10b 0b01 	add.w	fp, fp, #1
 800d2a2:	e7b9      	b.n	800d218 <_printf_float+0x310>
 800d2a4:	ee18 3a10 	vmov	r3, s16
 800d2a8:	4652      	mov	r2, sl
 800d2aa:	4631      	mov	r1, r6
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	47b8      	blx	r7
 800d2b0:	3001      	adds	r0, #1
 800d2b2:	d1be      	bne.n	800d232 <_printf_float+0x32a>
 800d2b4:	e689      	b.n	800cfca <_printf_float+0xc2>
 800d2b6:	9a05      	ldr	r2, [sp, #20]
 800d2b8:	464b      	mov	r3, r9
 800d2ba:	4442      	add	r2, r8
 800d2bc:	4631      	mov	r1, r6
 800d2be:	4628      	mov	r0, r5
 800d2c0:	47b8      	blx	r7
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	d1c1      	bne.n	800d24a <_printf_float+0x342>
 800d2c6:	e680      	b.n	800cfca <_printf_float+0xc2>
 800d2c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2ca:	2a01      	cmp	r2, #1
 800d2cc:	dc01      	bgt.n	800d2d2 <_printf_float+0x3ca>
 800d2ce:	07db      	lsls	r3, r3, #31
 800d2d0:	d538      	bpl.n	800d344 <_printf_float+0x43c>
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	4642      	mov	r2, r8
 800d2d6:	4631      	mov	r1, r6
 800d2d8:	4628      	mov	r0, r5
 800d2da:	47b8      	blx	r7
 800d2dc:	3001      	adds	r0, #1
 800d2de:	f43f ae74 	beq.w	800cfca <_printf_float+0xc2>
 800d2e2:	ee18 3a10 	vmov	r3, s16
 800d2e6:	4652      	mov	r2, sl
 800d2e8:	4631      	mov	r1, r6
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	47b8      	blx	r7
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	f43f ae6b 	beq.w	800cfca <_printf_float+0xc2>
 800d2f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f7f3 fbf4 	bl	8000ae8 <__aeabi_dcmpeq>
 800d300:	b9d8      	cbnz	r0, 800d33a <_printf_float+0x432>
 800d302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d304:	f108 0201 	add.w	r2, r8, #1
 800d308:	3b01      	subs	r3, #1
 800d30a:	4631      	mov	r1, r6
 800d30c:	4628      	mov	r0, r5
 800d30e:	47b8      	blx	r7
 800d310:	3001      	adds	r0, #1
 800d312:	d10e      	bne.n	800d332 <_printf_float+0x42a>
 800d314:	e659      	b.n	800cfca <_printf_float+0xc2>
 800d316:	2301      	movs	r3, #1
 800d318:	4652      	mov	r2, sl
 800d31a:	4631      	mov	r1, r6
 800d31c:	4628      	mov	r0, r5
 800d31e:	47b8      	blx	r7
 800d320:	3001      	adds	r0, #1
 800d322:	f43f ae52 	beq.w	800cfca <_printf_float+0xc2>
 800d326:	f108 0801 	add.w	r8, r8, #1
 800d32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d32c:	3b01      	subs	r3, #1
 800d32e:	4543      	cmp	r3, r8
 800d330:	dcf1      	bgt.n	800d316 <_printf_float+0x40e>
 800d332:	464b      	mov	r3, r9
 800d334:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d338:	e6dc      	b.n	800d0f4 <_printf_float+0x1ec>
 800d33a:	f04f 0800 	mov.w	r8, #0
 800d33e:	f104 0a1a 	add.w	sl, r4, #26
 800d342:	e7f2      	b.n	800d32a <_printf_float+0x422>
 800d344:	2301      	movs	r3, #1
 800d346:	4642      	mov	r2, r8
 800d348:	e7df      	b.n	800d30a <_printf_float+0x402>
 800d34a:	2301      	movs	r3, #1
 800d34c:	464a      	mov	r2, r9
 800d34e:	4631      	mov	r1, r6
 800d350:	4628      	mov	r0, r5
 800d352:	47b8      	blx	r7
 800d354:	3001      	adds	r0, #1
 800d356:	f43f ae38 	beq.w	800cfca <_printf_float+0xc2>
 800d35a:	f108 0801 	add.w	r8, r8, #1
 800d35e:	68e3      	ldr	r3, [r4, #12]
 800d360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d362:	1a5b      	subs	r3, r3, r1
 800d364:	4543      	cmp	r3, r8
 800d366:	dcf0      	bgt.n	800d34a <_printf_float+0x442>
 800d368:	e6fa      	b.n	800d160 <_printf_float+0x258>
 800d36a:	f04f 0800 	mov.w	r8, #0
 800d36e:	f104 0919 	add.w	r9, r4, #25
 800d372:	e7f4      	b.n	800d35e <_printf_float+0x456>

0800d374 <_printf_common>:
 800d374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d378:	4616      	mov	r6, r2
 800d37a:	4699      	mov	r9, r3
 800d37c:	688a      	ldr	r2, [r1, #8]
 800d37e:	690b      	ldr	r3, [r1, #16]
 800d380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d384:	4293      	cmp	r3, r2
 800d386:	bfb8      	it	lt
 800d388:	4613      	movlt	r3, r2
 800d38a:	6033      	str	r3, [r6, #0]
 800d38c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d390:	4607      	mov	r7, r0
 800d392:	460c      	mov	r4, r1
 800d394:	b10a      	cbz	r2, 800d39a <_printf_common+0x26>
 800d396:	3301      	adds	r3, #1
 800d398:	6033      	str	r3, [r6, #0]
 800d39a:	6823      	ldr	r3, [r4, #0]
 800d39c:	0699      	lsls	r1, r3, #26
 800d39e:	bf42      	ittt	mi
 800d3a0:	6833      	ldrmi	r3, [r6, #0]
 800d3a2:	3302      	addmi	r3, #2
 800d3a4:	6033      	strmi	r3, [r6, #0]
 800d3a6:	6825      	ldr	r5, [r4, #0]
 800d3a8:	f015 0506 	ands.w	r5, r5, #6
 800d3ac:	d106      	bne.n	800d3bc <_printf_common+0x48>
 800d3ae:	f104 0a19 	add.w	sl, r4, #25
 800d3b2:	68e3      	ldr	r3, [r4, #12]
 800d3b4:	6832      	ldr	r2, [r6, #0]
 800d3b6:	1a9b      	subs	r3, r3, r2
 800d3b8:	42ab      	cmp	r3, r5
 800d3ba:	dc26      	bgt.n	800d40a <_printf_common+0x96>
 800d3bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3c0:	1e13      	subs	r3, r2, #0
 800d3c2:	6822      	ldr	r2, [r4, #0]
 800d3c4:	bf18      	it	ne
 800d3c6:	2301      	movne	r3, #1
 800d3c8:	0692      	lsls	r2, r2, #26
 800d3ca:	d42b      	bmi.n	800d424 <_printf_common+0xb0>
 800d3cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3d0:	4649      	mov	r1, r9
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	47c0      	blx	r8
 800d3d6:	3001      	adds	r0, #1
 800d3d8:	d01e      	beq.n	800d418 <_printf_common+0xa4>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	68e5      	ldr	r5, [r4, #12]
 800d3de:	6832      	ldr	r2, [r6, #0]
 800d3e0:	f003 0306 	and.w	r3, r3, #6
 800d3e4:	2b04      	cmp	r3, #4
 800d3e6:	bf08      	it	eq
 800d3e8:	1aad      	subeq	r5, r5, r2
 800d3ea:	68a3      	ldr	r3, [r4, #8]
 800d3ec:	6922      	ldr	r2, [r4, #16]
 800d3ee:	bf0c      	ite	eq
 800d3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3f4:	2500      	movne	r5, #0
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	bfc4      	itt	gt
 800d3fa:	1a9b      	subgt	r3, r3, r2
 800d3fc:	18ed      	addgt	r5, r5, r3
 800d3fe:	2600      	movs	r6, #0
 800d400:	341a      	adds	r4, #26
 800d402:	42b5      	cmp	r5, r6
 800d404:	d11a      	bne.n	800d43c <_printf_common+0xc8>
 800d406:	2000      	movs	r0, #0
 800d408:	e008      	b.n	800d41c <_printf_common+0xa8>
 800d40a:	2301      	movs	r3, #1
 800d40c:	4652      	mov	r2, sl
 800d40e:	4649      	mov	r1, r9
 800d410:	4638      	mov	r0, r7
 800d412:	47c0      	blx	r8
 800d414:	3001      	adds	r0, #1
 800d416:	d103      	bne.n	800d420 <_printf_common+0xac>
 800d418:	f04f 30ff 	mov.w	r0, #4294967295
 800d41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d420:	3501      	adds	r5, #1
 800d422:	e7c6      	b.n	800d3b2 <_printf_common+0x3e>
 800d424:	18e1      	adds	r1, r4, r3
 800d426:	1c5a      	adds	r2, r3, #1
 800d428:	2030      	movs	r0, #48	; 0x30
 800d42a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d42e:	4422      	add	r2, r4
 800d430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d438:	3302      	adds	r3, #2
 800d43a:	e7c7      	b.n	800d3cc <_printf_common+0x58>
 800d43c:	2301      	movs	r3, #1
 800d43e:	4622      	mov	r2, r4
 800d440:	4649      	mov	r1, r9
 800d442:	4638      	mov	r0, r7
 800d444:	47c0      	blx	r8
 800d446:	3001      	adds	r0, #1
 800d448:	d0e6      	beq.n	800d418 <_printf_common+0xa4>
 800d44a:	3601      	adds	r6, #1
 800d44c:	e7d9      	b.n	800d402 <_printf_common+0x8e>
	...

0800d450 <_printf_i>:
 800d450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d454:	460c      	mov	r4, r1
 800d456:	4691      	mov	r9, r2
 800d458:	7e27      	ldrb	r7, [r4, #24]
 800d45a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d45c:	2f78      	cmp	r7, #120	; 0x78
 800d45e:	4680      	mov	r8, r0
 800d460:	469a      	mov	sl, r3
 800d462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d466:	d807      	bhi.n	800d478 <_printf_i+0x28>
 800d468:	2f62      	cmp	r7, #98	; 0x62
 800d46a:	d80a      	bhi.n	800d482 <_printf_i+0x32>
 800d46c:	2f00      	cmp	r7, #0
 800d46e:	f000 80d8 	beq.w	800d622 <_printf_i+0x1d2>
 800d472:	2f58      	cmp	r7, #88	; 0x58
 800d474:	f000 80a3 	beq.w	800d5be <_printf_i+0x16e>
 800d478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d47c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d480:	e03a      	b.n	800d4f8 <_printf_i+0xa8>
 800d482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d486:	2b15      	cmp	r3, #21
 800d488:	d8f6      	bhi.n	800d478 <_printf_i+0x28>
 800d48a:	a001      	add	r0, pc, #4	; (adr r0, 800d490 <_printf_i+0x40>)
 800d48c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d490:	0800d4e9 	.word	0x0800d4e9
 800d494:	0800d4fd 	.word	0x0800d4fd
 800d498:	0800d479 	.word	0x0800d479
 800d49c:	0800d479 	.word	0x0800d479
 800d4a0:	0800d479 	.word	0x0800d479
 800d4a4:	0800d479 	.word	0x0800d479
 800d4a8:	0800d4fd 	.word	0x0800d4fd
 800d4ac:	0800d479 	.word	0x0800d479
 800d4b0:	0800d479 	.word	0x0800d479
 800d4b4:	0800d479 	.word	0x0800d479
 800d4b8:	0800d479 	.word	0x0800d479
 800d4bc:	0800d609 	.word	0x0800d609
 800d4c0:	0800d52d 	.word	0x0800d52d
 800d4c4:	0800d5eb 	.word	0x0800d5eb
 800d4c8:	0800d479 	.word	0x0800d479
 800d4cc:	0800d479 	.word	0x0800d479
 800d4d0:	0800d62b 	.word	0x0800d62b
 800d4d4:	0800d479 	.word	0x0800d479
 800d4d8:	0800d52d 	.word	0x0800d52d
 800d4dc:	0800d479 	.word	0x0800d479
 800d4e0:	0800d479 	.word	0x0800d479
 800d4e4:	0800d5f3 	.word	0x0800d5f3
 800d4e8:	680b      	ldr	r3, [r1, #0]
 800d4ea:	1d1a      	adds	r2, r3, #4
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	600a      	str	r2, [r1, #0]
 800d4f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e0a3      	b.n	800d644 <_printf_i+0x1f4>
 800d4fc:	6825      	ldr	r5, [r4, #0]
 800d4fe:	6808      	ldr	r0, [r1, #0]
 800d500:	062e      	lsls	r6, r5, #24
 800d502:	f100 0304 	add.w	r3, r0, #4
 800d506:	d50a      	bpl.n	800d51e <_printf_i+0xce>
 800d508:	6805      	ldr	r5, [r0, #0]
 800d50a:	600b      	str	r3, [r1, #0]
 800d50c:	2d00      	cmp	r5, #0
 800d50e:	da03      	bge.n	800d518 <_printf_i+0xc8>
 800d510:	232d      	movs	r3, #45	; 0x2d
 800d512:	426d      	negs	r5, r5
 800d514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d518:	485e      	ldr	r0, [pc, #376]	; (800d694 <_printf_i+0x244>)
 800d51a:	230a      	movs	r3, #10
 800d51c:	e019      	b.n	800d552 <_printf_i+0x102>
 800d51e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d522:	6805      	ldr	r5, [r0, #0]
 800d524:	600b      	str	r3, [r1, #0]
 800d526:	bf18      	it	ne
 800d528:	b22d      	sxthne	r5, r5
 800d52a:	e7ef      	b.n	800d50c <_printf_i+0xbc>
 800d52c:	680b      	ldr	r3, [r1, #0]
 800d52e:	6825      	ldr	r5, [r4, #0]
 800d530:	1d18      	adds	r0, r3, #4
 800d532:	6008      	str	r0, [r1, #0]
 800d534:	0628      	lsls	r0, r5, #24
 800d536:	d501      	bpl.n	800d53c <_printf_i+0xec>
 800d538:	681d      	ldr	r5, [r3, #0]
 800d53a:	e002      	b.n	800d542 <_printf_i+0xf2>
 800d53c:	0669      	lsls	r1, r5, #25
 800d53e:	d5fb      	bpl.n	800d538 <_printf_i+0xe8>
 800d540:	881d      	ldrh	r5, [r3, #0]
 800d542:	4854      	ldr	r0, [pc, #336]	; (800d694 <_printf_i+0x244>)
 800d544:	2f6f      	cmp	r7, #111	; 0x6f
 800d546:	bf0c      	ite	eq
 800d548:	2308      	moveq	r3, #8
 800d54a:	230a      	movne	r3, #10
 800d54c:	2100      	movs	r1, #0
 800d54e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d552:	6866      	ldr	r6, [r4, #4]
 800d554:	60a6      	str	r6, [r4, #8]
 800d556:	2e00      	cmp	r6, #0
 800d558:	bfa2      	ittt	ge
 800d55a:	6821      	ldrge	r1, [r4, #0]
 800d55c:	f021 0104 	bicge.w	r1, r1, #4
 800d560:	6021      	strge	r1, [r4, #0]
 800d562:	b90d      	cbnz	r5, 800d568 <_printf_i+0x118>
 800d564:	2e00      	cmp	r6, #0
 800d566:	d04d      	beq.n	800d604 <_printf_i+0x1b4>
 800d568:	4616      	mov	r6, r2
 800d56a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d56e:	fb03 5711 	mls	r7, r3, r1, r5
 800d572:	5dc7      	ldrb	r7, [r0, r7]
 800d574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d578:	462f      	mov	r7, r5
 800d57a:	42bb      	cmp	r3, r7
 800d57c:	460d      	mov	r5, r1
 800d57e:	d9f4      	bls.n	800d56a <_printf_i+0x11a>
 800d580:	2b08      	cmp	r3, #8
 800d582:	d10b      	bne.n	800d59c <_printf_i+0x14c>
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	07df      	lsls	r7, r3, #31
 800d588:	d508      	bpl.n	800d59c <_printf_i+0x14c>
 800d58a:	6923      	ldr	r3, [r4, #16]
 800d58c:	6861      	ldr	r1, [r4, #4]
 800d58e:	4299      	cmp	r1, r3
 800d590:	bfde      	ittt	le
 800d592:	2330      	movle	r3, #48	; 0x30
 800d594:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d59c:	1b92      	subs	r2, r2, r6
 800d59e:	6122      	str	r2, [r4, #16]
 800d5a0:	f8cd a000 	str.w	sl, [sp]
 800d5a4:	464b      	mov	r3, r9
 800d5a6:	aa03      	add	r2, sp, #12
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	4640      	mov	r0, r8
 800d5ac:	f7ff fee2 	bl	800d374 <_printf_common>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d14c      	bne.n	800d64e <_printf_i+0x1fe>
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	b004      	add	sp, #16
 800d5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5be:	4835      	ldr	r0, [pc, #212]	; (800d694 <_printf_i+0x244>)
 800d5c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d5c4:	6823      	ldr	r3, [r4, #0]
 800d5c6:	680e      	ldr	r6, [r1, #0]
 800d5c8:	061f      	lsls	r7, r3, #24
 800d5ca:	f856 5b04 	ldr.w	r5, [r6], #4
 800d5ce:	600e      	str	r6, [r1, #0]
 800d5d0:	d514      	bpl.n	800d5fc <_printf_i+0x1ac>
 800d5d2:	07d9      	lsls	r1, r3, #31
 800d5d4:	bf44      	itt	mi
 800d5d6:	f043 0320 	orrmi.w	r3, r3, #32
 800d5da:	6023      	strmi	r3, [r4, #0]
 800d5dc:	b91d      	cbnz	r5, 800d5e6 <_printf_i+0x196>
 800d5de:	6823      	ldr	r3, [r4, #0]
 800d5e0:	f023 0320 	bic.w	r3, r3, #32
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	2310      	movs	r3, #16
 800d5e8:	e7b0      	b.n	800d54c <_printf_i+0xfc>
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	f043 0320 	orr.w	r3, r3, #32
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	2378      	movs	r3, #120	; 0x78
 800d5f4:	4828      	ldr	r0, [pc, #160]	; (800d698 <_printf_i+0x248>)
 800d5f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5fa:	e7e3      	b.n	800d5c4 <_printf_i+0x174>
 800d5fc:	065e      	lsls	r6, r3, #25
 800d5fe:	bf48      	it	mi
 800d600:	b2ad      	uxthmi	r5, r5
 800d602:	e7e6      	b.n	800d5d2 <_printf_i+0x182>
 800d604:	4616      	mov	r6, r2
 800d606:	e7bb      	b.n	800d580 <_printf_i+0x130>
 800d608:	680b      	ldr	r3, [r1, #0]
 800d60a:	6826      	ldr	r6, [r4, #0]
 800d60c:	6960      	ldr	r0, [r4, #20]
 800d60e:	1d1d      	adds	r5, r3, #4
 800d610:	600d      	str	r5, [r1, #0]
 800d612:	0635      	lsls	r5, r6, #24
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	d501      	bpl.n	800d61c <_printf_i+0x1cc>
 800d618:	6018      	str	r0, [r3, #0]
 800d61a:	e002      	b.n	800d622 <_printf_i+0x1d2>
 800d61c:	0671      	lsls	r1, r6, #25
 800d61e:	d5fb      	bpl.n	800d618 <_printf_i+0x1c8>
 800d620:	8018      	strh	r0, [r3, #0]
 800d622:	2300      	movs	r3, #0
 800d624:	6123      	str	r3, [r4, #16]
 800d626:	4616      	mov	r6, r2
 800d628:	e7ba      	b.n	800d5a0 <_printf_i+0x150>
 800d62a:	680b      	ldr	r3, [r1, #0]
 800d62c:	1d1a      	adds	r2, r3, #4
 800d62e:	600a      	str	r2, [r1, #0]
 800d630:	681e      	ldr	r6, [r3, #0]
 800d632:	6862      	ldr	r2, [r4, #4]
 800d634:	2100      	movs	r1, #0
 800d636:	4630      	mov	r0, r6
 800d638:	f7f2 fde2 	bl	8000200 <memchr>
 800d63c:	b108      	cbz	r0, 800d642 <_printf_i+0x1f2>
 800d63e:	1b80      	subs	r0, r0, r6
 800d640:	6060      	str	r0, [r4, #4]
 800d642:	6863      	ldr	r3, [r4, #4]
 800d644:	6123      	str	r3, [r4, #16]
 800d646:	2300      	movs	r3, #0
 800d648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d64c:	e7a8      	b.n	800d5a0 <_printf_i+0x150>
 800d64e:	6923      	ldr	r3, [r4, #16]
 800d650:	4632      	mov	r2, r6
 800d652:	4649      	mov	r1, r9
 800d654:	4640      	mov	r0, r8
 800d656:	47d0      	blx	sl
 800d658:	3001      	adds	r0, #1
 800d65a:	d0ab      	beq.n	800d5b4 <_printf_i+0x164>
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	079b      	lsls	r3, r3, #30
 800d660:	d413      	bmi.n	800d68a <_printf_i+0x23a>
 800d662:	68e0      	ldr	r0, [r4, #12]
 800d664:	9b03      	ldr	r3, [sp, #12]
 800d666:	4298      	cmp	r0, r3
 800d668:	bfb8      	it	lt
 800d66a:	4618      	movlt	r0, r3
 800d66c:	e7a4      	b.n	800d5b8 <_printf_i+0x168>
 800d66e:	2301      	movs	r3, #1
 800d670:	4632      	mov	r2, r6
 800d672:	4649      	mov	r1, r9
 800d674:	4640      	mov	r0, r8
 800d676:	47d0      	blx	sl
 800d678:	3001      	adds	r0, #1
 800d67a:	d09b      	beq.n	800d5b4 <_printf_i+0x164>
 800d67c:	3501      	adds	r5, #1
 800d67e:	68e3      	ldr	r3, [r4, #12]
 800d680:	9903      	ldr	r1, [sp, #12]
 800d682:	1a5b      	subs	r3, r3, r1
 800d684:	42ab      	cmp	r3, r5
 800d686:	dcf2      	bgt.n	800d66e <_printf_i+0x21e>
 800d688:	e7eb      	b.n	800d662 <_printf_i+0x212>
 800d68a:	2500      	movs	r5, #0
 800d68c:	f104 0619 	add.w	r6, r4, #25
 800d690:	e7f5      	b.n	800d67e <_printf_i+0x22e>
 800d692:	bf00      	nop
 800d694:	08012512 	.word	0x08012512
 800d698:	08012523 	.word	0x08012523

0800d69c <iprintf>:
 800d69c:	b40f      	push	{r0, r1, r2, r3}
 800d69e:	4b0a      	ldr	r3, [pc, #40]	; (800d6c8 <iprintf+0x2c>)
 800d6a0:	b513      	push	{r0, r1, r4, lr}
 800d6a2:	681c      	ldr	r4, [r3, #0]
 800d6a4:	b124      	cbz	r4, 800d6b0 <iprintf+0x14>
 800d6a6:	69a3      	ldr	r3, [r4, #24]
 800d6a8:	b913      	cbnz	r3, 800d6b0 <iprintf+0x14>
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f001 f8d6 	bl	800e85c <__sinit>
 800d6b0:	ab05      	add	r3, sp, #20
 800d6b2:	9a04      	ldr	r2, [sp, #16]
 800d6b4:	68a1      	ldr	r1, [r4, #8]
 800d6b6:	9301      	str	r3, [sp, #4]
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f001 fe43 	bl	800f344 <_vfiprintf_r>
 800d6be:	b002      	add	sp, #8
 800d6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6c4:	b004      	add	sp, #16
 800d6c6:	4770      	bx	lr
 800d6c8:	20000068 	.word	0x20000068

0800d6cc <_puts_r>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	460e      	mov	r6, r1
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	b118      	cbz	r0, 800d6dc <_puts_r+0x10>
 800d6d4:	6983      	ldr	r3, [r0, #24]
 800d6d6:	b90b      	cbnz	r3, 800d6dc <_puts_r+0x10>
 800d6d8:	f001 f8c0 	bl	800e85c <__sinit>
 800d6dc:	69ab      	ldr	r3, [r5, #24]
 800d6de:	68ac      	ldr	r4, [r5, #8]
 800d6e0:	b913      	cbnz	r3, 800d6e8 <_puts_r+0x1c>
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	f001 f8ba 	bl	800e85c <__sinit>
 800d6e8:	4b2c      	ldr	r3, [pc, #176]	; (800d79c <_puts_r+0xd0>)
 800d6ea:	429c      	cmp	r4, r3
 800d6ec:	d120      	bne.n	800d730 <_puts_r+0x64>
 800d6ee:	686c      	ldr	r4, [r5, #4]
 800d6f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6f2:	07db      	lsls	r3, r3, #31
 800d6f4:	d405      	bmi.n	800d702 <_puts_r+0x36>
 800d6f6:	89a3      	ldrh	r3, [r4, #12]
 800d6f8:	0598      	lsls	r0, r3, #22
 800d6fa:	d402      	bmi.n	800d702 <_puts_r+0x36>
 800d6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6fe:	f001 f950 	bl	800e9a2 <__retarget_lock_acquire_recursive>
 800d702:	89a3      	ldrh	r3, [r4, #12]
 800d704:	0719      	lsls	r1, r3, #28
 800d706:	d51d      	bpl.n	800d744 <_puts_r+0x78>
 800d708:	6923      	ldr	r3, [r4, #16]
 800d70a:	b1db      	cbz	r3, 800d744 <_puts_r+0x78>
 800d70c:	3e01      	subs	r6, #1
 800d70e:	68a3      	ldr	r3, [r4, #8]
 800d710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d714:	3b01      	subs	r3, #1
 800d716:	60a3      	str	r3, [r4, #8]
 800d718:	bb39      	cbnz	r1, 800d76a <_puts_r+0x9e>
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	da38      	bge.n	800d790 <_puts_r+0xc4>
 800d71e:	4622      	mov	r2, r4
 800d720:	210a      	movs	r1, #10
 800d722:	4628      	mov	r0, r5
 800d724:	f000 f848 	bl	800d7b8 <__swbuf_r>
 800d728:	3001      	adds	r0, #1
 800d72a:	d011      	beq.n	800d750 <_puts_r+0x84>
 800d72c:	250a      	movs	r5, #10
 800d72e:	e011      	b.n	800d754 <_puts_r+0x88>
 800d730:	4b1b      	ldr	r3, [pc, #108]	; (800d7a0 <_puts_r+0xd4>)
 800d732:	429c      	cmp	r4, r3
 800d734:	d101      	bne.n	800d73a <_puts_r+0x6e>
 800d736:	68ac      	ldr	r4, [r5, #8]
 800d738:	e7da      	b.n	800d6f0 <_puts_r+0x24>
 800d73a:	4b1a      	ldr	r3, [pc, #104]	; (800d7a4 <_puts_r+0xd8>)
 800d73c:	429c      	cmp	r4, r3
 800d73e:	bf08      	it	eq
 800d740:	68ec      	ldreq	r4, [r5, #12]
 800d742:	e7d5      	b.n	800d6f0 <_puts_r+0x24>
 800d744:	4621      	mov	r1, r4
 800d746:	4628      	mov	r0, r5
 800d748:	f000 f888 	bl	800d85c <__swsetup_r>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d0dd      	beq.n	800d70c <_puts_r+0x40>
 800d750:	f04f 35ff 	mov.w	r5, #4294967295
 800d754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d756:	07da      	lsls	r2, r3, #31
 800d758:	d405      	bmi.n	800d766 <_puts_r+0x9a>
 800d75a:	89a3      	ldrh	r3, [r4, #12]
 800d75c:	059b      	lsls	r3, r3, #22
 800d75e:	d402      	bmi.n	800d766 <_puts_r+0x9a>
 800d760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d762:	f001 f91f 	bl	800e9a4 <__retarget_lock_release_recursive>
 800d766:	4628      	mov	r0, r5
 800d768:	bd70      	pop	{r4, r5, r6, pc}
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	da04      	bge.n	800d778 <_puts_r+0xac>
 800d76e:	69a2      	ldr	r2, [r4, #24]
 800d770:	429a      	cmp	r2, r3
 800d772:	dc06      	bgt.n	800d782 <_puts_r+0xb6>
 800d774:	290a      	cmp	r1, #10
 800d776:	d004      	beq.n	800d782 <_puts_r+0xb6>
 800d778:	6823      	ldr	r3, [r4, #0]
 800d77a:	1c5a      	adds	r2, r3, #1
 800d77c:	6022      	str	r2, [r4, #0]
 800d77e:	7019      	strb	r1, [r3, #0]
 800d780:	e7c5      	b.n	800d70e <_puts_r+0x42>
 800d782:	4622      	mov	r2, r4
 800d784:	4628      	mov	r0, r5
 800d786:	f000 f817 	bl	800d7b8 <__swbuf_r>
 800d78a:	3001      	adds	r0, #1
 800d78c:	d1bf      	bne.n	800d70e <_puts_r+0x42>
 800d78e:	e7df      	b.n	800d750 <_puts_r+0x84>
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	250a      	movs	r5, #10
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	6022      	str	r2, [r4, #0]
 800d798:	701d      	strb	r5, [r3, #0]
 800d79a:	e7db      	b.n	800d754 <_puts_r+0x88>
 800d79c:	080125e8 	.word	0x080125e8
 800d7a0:	08012608 	.word	0x08012608
 800d7a4:	080125c8 	.word	0x080125c8

0800d7a8 <puts>:
 800d7a8:	4b02      	ldr	r3, [pc, #8]	; (800d7b4 <puts+0xc>)
 800d7aa:	4601      	mov	r1, r0
 800d7ac:	6818      	ldr	r0, [r3, #0]
 800d7ae:	f7ff bf8d 	b.w	800d6cc <_puts_r>
 800d7b2:	bf00      	nop
 800d7b4:	20000068 	.word	0x20000068

0800d7b8 <__swbuf_r>:
 800d7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ba:	460e      	mov	r6, r1
 800d7bc:	4614      	mov	r4, r2
 800d7be:	4605      	mov	r5, r0
 800d7c0:	b118      	cbz	r0, 800d7ca <__swbuf_r+0x12>
 800d7c2:	6983      	ldr	r3, [r0, #24]
 800d7c4:	b90b      	cbnz	r3, 800d7ca <__swbuf_r+0x12>
 800d7c6:	f001 f849 	bl	800e85c <__sinit>
 800d7ca:	4b21      	ldr	r3, [pc, #132]	; (800d850 <__swbuf_r+0x98>)
 800d7cc:	429c      	cmp	r4, r3
 800d7ce:	d12b      	bne.n	800d828 <__swbuf_r+0x70>
 800d7d0:	686c      	ldr	r4, [r5, #4]
 800d7d2:	69a3      	ldr	r3, [r4, #24]
 800d7d4:	60a3      	str	r3, [r4, #8]
 800d7d6:	89a3      	ldrh	r3, [r4, #12]
 800d7d8:	071a      	lsls	r2, r3, #28
 800d7da:	d52f      	bpl.n	800d83c <__swbuf_r+0x84>
 800d7dc:	6923      	ldr	r3, [r4, #16]
 800d7de:	b36b      	cbz	r3, 800d83c <__swbuf_r+0x84>
 800d7e0:	6923      	ldr	r3, [r4, #16]
 800d7e2:	6820      	ldr	r0, [r4, #0]
 800d7e4:	1ac0      	subs	r0, r0, r3
 800d7e6:	6963      	ldr	r3, [r4, #20]
 800d7e8:	b2f6      	uxtb	r6, r6
 800d7ea:	4283      	cmp	r3, r0
 800d7ec:	4637      	mov	r7, r6
 800d7ee:	dc04      	bgt.n	800d7fa <__swbuf_r+0x42>
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	f000 ff9e 	bl	800e734 <_fflush_r>
 800d7f8:	bb30      	cbnz	r0, 800d848 <__swbuf_r+0x90>
 800d7fa:	68a3      	ldr	r3, [r4, #8]
 800d7fc:	3b01      	subs	r3, #1
 800d7fe:	60a3      	str	r3, [r4, #8]
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	6022      	str	r2, [r4, #0]
 800d806:	701e      	strb	r6, [r3, #0]
 800d808:	6963      	ldr	r3, [r4, #20]
 800d80a:	3001      	adds	r0, #1
 800d80c:	4283      	cmp	r3, r0
 800d80e:	d004      	beq.n	800d81a <__swbuf_r+0x62>
 800d810:	89a3      	ldrh	r3, [r4, #12]
 800d812:	07db      	lsls	r3, r3, #31
 800d814:	d506      	bpl.n	800d824 <__swbuf_r+0x6c>
 800d816:	2e0a      	cmp	r6, #10
 800d818:	d104      	bne.n	800d824 <__swbuf_r+0x6c>
 800d81a:	4621      	mov	r1, r4
 800d81c:	4628      	mov	r0, r5
 800d81e:	f000 ff89 	bl	800e734 <_fflush_r>
 800d822:	b988      	cbnz	r0, 800d848 <__swbuf_r+0x90>
 800d824:	4638      	mov	r0, r7
 800d826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d828:	4b0a      	ldr	r3, [pc, #40]	; (800d854 <__swbuf_r+0x9c>)
 800d82a:	429c      	cmp	r4, r3
 800d82c:	d101      	bne.n	800d832 <__swbuf_r+0x7a>
 800d82e:	68ac      	ldr	r4, [r5, #8]
 800d830:	e7cf      	b.n	800d7d2 <__swbuf_r+0x1a>
 800d832:	4b09      	ldr	r3, [pc, #36]	; (800d858 <__swbuf_r+0xa0>)
 800d834:	429c      	cmp	r4, r3
 800d836:	bf08      	it	eq
 800d838:	68ec      	ldreq	r4, [r5, #12]
 800d83a:	e7ca      	b.n	800d7d2 <__swbuf_r+0x1a>
 800d83c:	4621      	mov	r1, r4
 800d83e:	4628      	mov	r0, r5
 800d840:	f000 f80c 	bl	800d85c <__swsetup_r>
 800d844:	2800      	cmp	r0, #0
 800d846:	d0cb      	beq.n	800d7e0 <__swbuf_r+0x28>
 800d848:	f04f 37ff 	mov.w	r7, #4294967295
 800d84c:	e7ea      	b.n	800d824 <__swbuf_r+0x6c>
 800d84e:	bf00      	nop
 800d850:	080125e8 	.word	0x080125e8
 800d854:	08012608 	.word	0x08012608
 800d858:	080125c8 	.word	0x080125c8

0800d85c <__swsetup_r>:
 800d85c:	4b32      	ldr	r3, [pc, #200]	; (800d928 <__swsetup_r+0xcc>)
 800d85e:	b570      	push	{r4, r5, r6, lr}
 800d860:	681d      	ldr	r5, [r3, #0]
 800d862:	4606      	mov	r6, r0
 800d864:	460c      	mov	r4, r1
 800d866:	b125      	cbz	r5, 800d872 <__swsetup_r+0x16>
 800d868:	69ab      	ldr	r3, [r5, #24]
 800d86a:	b913      	cbnz	r3, 800d872 <__swsetup_r+0x16>
 800d86c:	4628      	mov	r0, r5
 800d86e:	f000 fff5 	bl	800e85c <__sinit>
 800d872:	4b2e      	ldr	r3, [pc, #184]	; (800d92c <__swsetup_r+0xd0>)
 800d874:	429c      	cmp	r4, r3
 800d876:	d10f      	bne.n	800d898 <__swsetup_r+0x3c>
 800d878:	686c      	ldr	r4, [r5, #4]
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d880:	0719      	lsls	r1, r3, #28
 800d882:	d42c      	bmi.n	800d8de <__swsetup_r+0x82>
 800d884:	06dd      	lsls	r5, r3, #27
 800d886:	d411      	bmi.n	800d8ac <__swsetup_r+0x50>
 800d888:	2309      	movs	r3, #9
 800d88a:	6033      	str	r3, [r6, #0]
 800d88c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d890:	81a3      	strh	r3, [r4, #12]
 800d892:	f04f 30ff 	mov.w	r0, #4294967295
 800d896:	e03e      	b.n	800d916 <__swsetup_r+0xba>
 800d898:	4b25      	ldr	r3, [pc, #148]	; (800d930 <__swsetup_r+0xd4>)
 800d89a:	429c      	cmp	r4, r3
 800d89c:	d101      	bne.n	800d8a2 <__swsetup_r+0x46>
 800d89e:	68ac      	ldr	r4, [r5, #8]
 800d8a0:	e7eb      	b.n	800d87a <__swsetup_r+0x1e>
 800d8a2:	4b24      	ldr	r3, [pc, #144]	; (800d934 <__swsetup_r+0xd8>)
 800d8a4:	429c      	cmp	r4, r3
 800d8a6:	bf08      	it	eq
 800d8a8:	68ec      	ldreq	r4, [r5, #12]
 800d8aa:	e7e6      	b.n	800d87a <__swsetup_r+0x1e>
 800d8ac:	0758      	lsls	r0, r3, #29
 800d8ae:	d512      	bpl.n	800d8d6 <__swsetup_r+0x7a>
 800d8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8b2:	b141      	cbz	r1, 800d8c6 <__swsetup_r+0x6a>
 800d8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8b8:	4299      	cmp	r1, r3
 800d8ba:	d002      	beq.n	800d8c2 <__swsetup_r+0x66>
 800d8bc:	4630      	mov	r0, r6
 800d8be:	f001 fc6d 	bl	800f19c <_free_r>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d8cc:	81a3      	strh	r3, [r4, #12]
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	6063      	str	r3, [r4, #4]
 800d8d2:	6923      	ldr	r3, [r4, #16]
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	89a3      	ldrh	r3, [r4, #12]
 800d8d8:	f043 0308 	orr.w	r3, r3, #8
 800d8dc:	81a3      	strh	r3, [r4, #12]
 800d8de:	6923      	ldr	r3, [r4, #16]
 800d8e0:	b94b      	cbnz	r3, 800d8f6 <__swsetup_r+0x9a>
 800d8e2:	89a3      	ldrh	r3, [r4, #12]
 800d8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8ec:	d003      	beq.n	800d8f6 <__swsetup_r+0x9a>
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f001 f87d 	bl	800e9f0 <__smakebuf_r>
 800d8f6:	89a0      	ldrh	r0, [r4, #12]
 800d8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8fc:	f010 0301 	ands.w	r3, r0, #1
 800d900:	d00a      	beq.n	800d918 <__swsetup_r+0xbc>
 800d902:	2300      	movs	r3, #0
 800d904:	60a3      	str	r3, [r4, #8]
 800d906:	6963      	ldr	r3, [r4, #20]
 800d908:	425b      	negs	r3, r3
 800d90a:	61a3      	str	r3, [r4, #24]
 800d90c:	6923      	ldr	r3, [r4, #16]
 800d90e:	b943      	cbnz	r3, 800d922 <__swsetup_r+0xc6>
 800d910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d914:	d1ba      	bne.n	800d88c <__swsetup_r+0x30>
 800d916:	bd70      	pop	{r4, r5, r6, pc}
 800d918:	0781      	lsls	r1, r0, #30
 800d91a:	bf58      	it	pl
 800d91c:	6963      	ldrpl	r3, [r4, #20]
 800d91e:	60a3      	str	r3, [r4, #8]
 800d920:	e7f4      	b.n	800d90c <__swsetup_r+0xb0>
 800d922:	2000      	movs	r0, #0
 800d924:	e7f7      	b.n	800d916 <__swsetup_r+0xba>
 800d926:	bf00      	nop
 800d928:	20000068 	.word	0x20000068
 800d92c:	080125e8 	.word	0x080125e8
 800d930:	08012608 	.word	0x08012608
 800d934:	080125c8 	.word	0x080125c8

0800d938 <quorem>:
 800d938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93c:	6903      	ldr	r3, [r0, #16]
 800d93e:	690c      	ldr	r4, [r1, #16]
 800d940:	42a3      	cmp	r3, r4
 800d942:	4607      	mov	r7, r0
 800d944:	f2c0 8081 	blt.w	800da4a <quorem+0x112>
 800d948:	3c01      	subs	r4, #1
 800d94a:	f101 0814 	add.w	r8, r1, #20
 800d94e:	f100 0514 	add.w	r5, r0, #20
 800d952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d956:	9301      	str	r3, [sp, #4]
 800d958:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d95c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d960:	3301      	adds	r3, #1
 800d962:	429a      	cmp	r2, r3
 800d964:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d968:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d96c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d970:	d331      	bcc.n	800d9d6 <quorem+0x9e>
 800d972:	f04f 0e00 	mov.w	lr, #0
 800d976:	4640      	mov	r0, r8
 800d978:	46ac      	mov	ip, r5
 800d97a:	46f2      	mov	sl, lr
 800d97c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d980:	b293      	uxth	r3, r2
 800d982:	fb06 e303 	mla	r3, r6, r3, lr
 800d986:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	ebaa 0303 	sub.w	r3, sl, r3
 800d990:	0c12      	lsrs	r2, r2, #16
 800d992:	f8dc a000 	ldr.w	sl, [ip]
 800d996:	fb06 e202 	mla	r2, r6, r2, lr
 800d99a:	fa13 f38a 	uxtah	r3, r3, sl
 800d99e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d9a2:	fa1f fa82 	uxth.w	sl, r2
 800d9a6:	f8dc 2000 	ldr.w	r2, [ip]
 800d9aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d9ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9b8:	4581      	cmp	r9, r0
 800d9ba:	f84c 3b04 	str.w	r3, [ip], #4
 800d9be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d9c2:	d2db      	bcs.n	800d97c <quorem+0x44>
 800d9c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d9c8:	b92b      	cbnz	r3, 800d9d6 <quorem+0x9e>
 800d9ca:	9b01      	ldr	r3, [sp, #4]
 800d9cc:	3b04      	subs	r3, #4
 800d9ce:	429d      	cmp	r5, r3
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	d32e      	bcc.n	800da32 <quorem+0xfa>
 800d9d4:	613c      	str	r4, [r7, #16]
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	f001 fad0 	bl	800ef7c <__mcmp>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	db24      	blt.n	800da2a <quorem+0xf2>
 800d9e0:	3601      	adds	r6, #1
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	f04f 0c00 	mov.w	ip, #0
 800d9e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d9ec:	f8d0 e000 	ldr.w	lr, [r0]
 800d9f0:	b293      	uxth	r3, r2
 800d9f2:	ebac 0303 	sub.w	r3, ip, r3
 800d9f6:	0c12      	lsrs	r2, r2, #16
 800d9f8:	fa13 f38e 	uxtah	r3, r3, lr
 800d9fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da04:	b29b      	uxth	r3, r3
 800da06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da0a:	45c1      	cmp	r9, r8
 800da0c:	f840 3b04 	str.w	r3, [r0], #4
 800da10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da14:	d2e8      	bcs.n	800d9e8 <quorem+0xb0>
 800da16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da1e:	b922      	cbnz	r2, 800da2a <quorem+0xf2>
 800da20:	3b04      	subs	r3, #4
 800da22:	429d      	cmp	r5, r3
 800da24:	461a      	mov	r2, r3
 800da26:	d30a      	bcc.n	800da3e <quorem+0x106>
 800da28:	613c      	str	r4, [r7, #16]
 800da2a:	4630      	mov	r0, r6
 800da2c:	b003      	add	sp, #12
 800da2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da32:	6812      	ldr	r2, [r2, #0]
 800da34:	3b04      	subs	r3, #4
 800da36:	2a00      	cmp	r2, #0
 800da38:	d1cc      	bne.n	800d9d4 <quorem+0x9c>
 800da3a:	3c01      	subs	r4, #1
 800da3c:	e7c7      	b.n	800d9ce <quorem+0x96>
 800da3e:	6812      	ldr	r2, [r2, #0]
 800da40:	3b04      	subs	r3, #4
 800da42:	2a00      	cmp	r2, #0
 800da44:	d1f0      	bne.n	800da28 <quorem+0xf0>
 800da46:	3c01      	subs	r4, #1
 800da48:	e7eb      	b.n	800da22 <quorem+0xea>
 800da4a:	2000      	movs	r0, #0
 800da4c:	e7ee      	b.n	800da2c <quorem+0xf4>
	...

0800da50 <_dtoa_r>:
 800da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da54:	ed2d 8b02 	vpush	{d8}
 800da58:	ec57 6b10 	vmov	r6, r7, d0
 800da5c:	b095      	sub	sp, #84	; 0x54
 800da5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800da60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da64:	9105      	str	r1, [sp, #20]
 800da66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800da6a:	4604      	mov	r4, r0
 800da6c:	9209      	str	r2, [sp, #36]	; 0x24
 800da6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da70:	b975      	cbnz	r5, 800da90 <_dtoa_r+0x40>
 800da72:	2010      	movs	r0, #16
 800da74:	f000 fffc 	bl	800ea70 <malloc>
 800da78:	4602      	mov	r2, r0
 800da7a:	6260      	str	r0, [r4, #36]	; 0x24
 800da7c:	b920      	cbnz	r0, 800da88 <_dtoa_r+0x38>
 800da7e:	4bb2      	ldr	r3, [pc, #712]	; (800dd48 <_dtoa_r+0x2f8>)
 800da80:	21ea      	movs	r1, #234	; 0xea
 800da82:	48b2      	ldr	r0, [pc, #712]	; (800dd4c <_dtoa_r+0x2fc>)
 800da84:	f001 fdf4 	bl	800f670 <__assert_func>
 800da88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da8c:	6005      	str	r5, [r0, #0]
 800da8e:	60c5      	str	r5, [r0, #12]
 800da90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da92:	6819      	ldr	r1, [r3, #0]
 800da94:	b151      	cbz	r1, 800daac <_dtoa_r+0x5c>
 800da96:	685a      	ldr	r2, [r3, #4]
 800da98:	604a      	str	r2, [r1, #4]
 800da9a:	2301      	movs	r3, #1
 800da9c:	4093      	lsls	r3, r2
 800da9e:	608b      	str	r3, [r1, #8]
 800daa0:	4620      	mov	r0, r4
 800daa2:	f001 f82d 	bl	800eb00 <_Bfree>
 800daa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daa8:	2200      	movs	r2, #0
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	1e3b      	subs	r3, r7, #0
 800daae:	bfb9      	ittee	lt
 800dab0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dab4:	9303      	strlt	r3, [sp, #12]
 800dab6:	2300      	movge	r3, #0
 800dab8:	f8c8 3000 	strge.w	r3, [r8]
 800dabc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dac0:	4ba3      	ldr	r3, [pc, #652]	; (800dd50 <_dtoa_r+0x300>)
 800dac2:	bfbc      	itt	lt
 800dac4:	2201      	movlt	r2, #1
 800dac6:	f8c8 2000 	strlt.w	r2, [r8]
 800daca:	ea33 0309 	bics.w	r3, r3, r9
 800dace:	d11b      	bne.n	800db08 <_dtoa_r+0xb8>
 800dad0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dad2:	f242 730f 	movw	r3, #9999	; 0x270f
 800dad6:	6013      	str	r3, [r2, #0]
 800dad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dadc:	4333      	orrs	r3, r6
 800dade:	f000 857a 	beq.w	800e5d6 <_dtoa_r+0xb86>
 800dae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dae4:	b963      	cbnz	r3, 800db00 <_dtoa_r+0xb0>
 800dae6:	4b9b      	ldr	r3, [pc, #620]	; (800dd54 <_dtoa_r+0x304>)
 800dae8:	e024      	b.n	800db34 <_dtoa_r+0xe4>
 800daea:	4b9b      	ldr	r3, [pc, #620]	; (800dd58 <_dtoa_r+0x308>)
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	3308      	adds	r3, #8
 800daf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800daf2:	6013      	str	r3, [r2, #0]
 800daf4:	9800      	ldr	r0, [sp, #0]
 800daf6:	b015      	add	sp, #84	; 0x54
 800daf8:	ecbd 8b02 	vpop	{d8}
 800dafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db00:	4b94      	ldr	r3, [pc, #592]	; (800dd54 <_dtoa_r+0x304>)
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	3303      	adds	r3, #3
 800db06:	e7f3      	b.n	800daf0 <_dtoa_r+0xa0>
 800db08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db0c:	2200      	movs	r2, #0
 800db0e:	ec51 0b17 	vmov	r0, r1, d7
 800db12:	2300      	movs	r3, #0
 800db14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800db18:	f7f2 ffe6 	bl	8000ae8 <__aeabi_dcmpeq>
 800db1c:	4680      	mov	r8, r0
 800db1e:	b158      	cbz	r0, 800db38 <_dtoa_r+0xe8>
 800db20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db22:	2301      	movs	r3, #1
 800db24:	6013      	str	r3, [r2, #0]
 800db26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f000 8551 	beq.w	800e5d0 <_dtoa_r+0xb80>
 800db2e:	488b      	ldr	r0, [pc, #556]	; (800dd5c <_dtoa_r+0x30c>)
 800db30:	6018      	str	r0, [r3, #0]
 800db32:	1e43      	subs	r3, r0, #1
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	e7dd      	b.n	800daf4 <_dtoa_r+0xa4>
 800db38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800db3c:	aa12      	add	r2, sp, #72	; 0x48
 800db3e:	a913      	add	r1, sp, #76	; 0x4c
 800db40:	4620      	mov	r0, r4
 800db42:	f001 fabf 	bl	800f0c4 <__d2b>
 800db46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db4a:	4683      	mov	fp, r0
 800db4c:	2d00      	cmp	r5, #0
 800db4e:	d07c      	beq.n	800dc4a <_dtoa_r+0x1fa>
 800db50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800db56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800db5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800db62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800db66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db6a:	4b7d      	ldr	r3, [pc, #500]	; (800dd60 <_dtoa_r+0x310>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	4630      	mov	r0, r6
 800db70:	4639      	mov	r1, r7
 800db72:	f7f2 fb99 	bl	80002a8 <__aeabi_dsub>
 800db76:	a36e      	add	r3, pc, #440	; (adr r3, 800dd30 <_dtoa_r+0x2e0>)
 800db78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7c:	f7f2 fd4c 	bl	8000618 <__aeabi_dmul>
 800db80:	a36d      	add	r3, pc, #436	; (adr r3, 800dd38 <_dtoa_r+0x2e8>)
 800db82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db86:	f7f2 fb91 	bl	80002ac <__adddf3>
 800db8a:	4606      	mov	r6, r0
 800db8c:	4628      	mov	r0, r5
 800db8e:	460f      	mov	r7, r1
 800db90:	f7f2 fcd8 	bl	8000544 <__aeabi_i2d>
 800db94:	a36a      	add	r3, pc, #424	; (adr r3, 800dd40 <_dtoa_r+0x2f0>)
 800db96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9a:	f7f2 fd3d 	bl	8000618 <__aeabi_dmul>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	4630      	mov	r0, r6
 800dba4:	4639      	mov	r1, r7
 800dba6:	f7f2 fb81 	bl	80002ac <__adddf3>
 800dbaa:	4606      	mov	r6, r0
 800dbac:	460f      	mov	r7, r1
 800dbae:	f7f2 ffe3 	bl	8000b78 <__aeabi_d2iz>
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	4682      	mov	sl, r0
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	4630      	mov	r0, r6
 800dbba:	4639      	mov	r1, r7
 800dbbc:	f7f2 ff9e 	bl	8000afc <__aeabi_dcmplt>
 800dbc0:	b148      	cbz	r0, 800dbd6 <_dtoa_r+0x186>
 800dbc2:	4650      	mov	r0, sl
 800dbc4:	f7f2 fcbe 	bl	8000544 <__aeabi_i2d>
 800dbc8:	4632      	mov	r2, r6
 800dbca:	463b      	mov	r3, r7
 800dbcc:	f7f2 ff8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800dbd0:	b908      	cbnz	r0, 800dbd6 <_dtoa_r+0x186>
 800dbd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbd6:	f1ba 0f16 	cmp.w	sl, #22
 800dbda:	d854      	bhi.n	800dc86 <_dtoa_r+0x236>
 800dbdc:	4b61      	ldr	r3, [pc, #388]	; (800dd64 <_dtoa_r+0x314>)
 800dbde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dbea:	f7f2 ff87 	bl	8000afc <__aeabi_dcmplt>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d04b      	beq.n	800dc8a <_dtoa_r+0x23a>
 800dbf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	930e      	str	r3, [sp, #56]	; 0x38
 800dbfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbfc:	1b5d      	subs	r5, r3, r5
 800dbfe:	1e6b      	subs	r3, r5, #1
 800dc00:	9304      	str	r3, [sp, #16]
 800dc02:	bf43      	ittte	mi
 800dc04:	2300      	movmi	r3, #0
 800dc06:	f1c5 0801 	rsbmi	r8, r5, #1
 800dc0a:	9304      	strmi	r3, [sp, #16]
 800dc0c:	f04f 0800 	movpl.w	r8, #0
 800dc10:	f1ba 0f00 	cmp.w	sl, #0
 800dc14:	db3b      	blt.n	800dc8e <_dtoa_r+0x23e>
 800dc16:	9b04      	ldr	r3, [sp, #16]
 800dc18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dc1c:	4453      	add	r3, sl
 800dc1e:	9304      	str	r3, [sp, #16]
 800dc20:	2300      	movs	r3, #0
 800dc22:	9306      	str	r3, [sp, #24]
 800dc24:	9b05      	ldr	r3, [sp, #20]
 800dc26:	2b09      	cmp	r3, #9
 800dc28:	d869      	bhi.n	800dcfe <_dtoa_r+0x2ae>
 800dc2a:	2b05      	cmp	r3, #5
 800dc2c:	bfc4      	itt	gt
 800dc2e:	3b04      	subgt	r3, #4
 800dc30:	9305      	strgt	r3, [sp, #20]
 800dc32:	9b05      	ldr	r3, [sp, #20]
 800dc34:	f1a3 0302 	sub.w	r3, r3, #2
 800dc38:	bfcc      	ite	gt
 800dc3a:	2500      	movgt	r5, #0
 800dc3c:	2501      	movle	r5, #1
 800dc3e:	2b03      	cmp	r3, #3
 800dc40:	d869      	bhi.n	800dd16 <_dtoa_r+0x2c6>
 800dc42:	e8df f003 	tbb	[pc, r3]
 800dc46:	4e2c      	.short	0x4e2c
 800dc48:	5a4c      	.short	0x5a4c
 800dc4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dc4e:	441d      	add	r5, r3
 800dc50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc54:	2b20      	cmp	r3, #32
 800dc56:	bfc1      	itttt	gt
 800dc58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dc60:	fa09 f303 	lslgt.w	r3, r9, r3
 800dc64:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dc68:	bfda      	itte	le
 800dc6a:	f1c3 0320 	rsble	r3, r3, #32
 800dc6e:	fa06 f003 	lslle.w	r0, r6, r3
 800dc72:	4318      	orrgt	r0, r3
 800dc74:	f7f2 fc56 	bl	8000524 <__aeabi_ui2d>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	4606      	mov	r6, r0
 800dc7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dc80:	3d01      	subs	r5, #1
 800dc82:	9310      	str	r3, [sp, #64]	; 0x40
 800dc84:	e771      	b.n	800db6a <_dtoa_r+0x11a>
 800dc86:	2301      	movs	r3, #1
 800dc88:	e7b6      	b.n	800dbf8 <_dtoa_r+0x1a8>
 800dc8a:	900e      	str	r0, [sp, #56]	; 0x38
 800dc8c:	e7b5      	b.n	800dbfa <_dtoa_r+0x1aa>
 800dc8e:	f1ca 0300 	rsb	r3, sl, #0
 800dc92:	9306      	str	r3, [sp, #24]
 800dc94:	2300      	movs	r3, #0
 800dc96:	eba8 080a 	sub.w	r8, r8, sl
 800dc9a:	930d      	str	r3, [sp, #52]	; 0x34
 800dc9c:	e7c2      	b.n	800dc24 <_dtoa_r+0x1d4>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	9308      	str	r3, [sp, #32]
 800dca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	dc39      	bgt.n	800dd1c <_dtoa_r+0x2cc>
 800dca8:	f04f 0901 	mov.w	r9, #1
 800dcac:	f8cd 9004 	str.w	r9, [sp, #4]
 800dcb0:	464b      	mov	r3, r9
 800dcb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dcb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dcb8:	2200      	movs	r2, #0
 800dcba:	6042      	str	r2, [r0, #4]
 800dcbc:	2204      	movs	r2, #4
 800dcbe:	f102 0614 	add.w	r6, r2, #20
 800dcc2:	429e      	cmp	r6, r3
 800dcc4:	6841      	ldr	r1, [r0, #4]
 800dcc6:	d92f      	bls.n	800dd28 <_dtoa_r+0x2d8>
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f000 fed9 	bl	800ea80 <_Balloc>
 800dcce:	9000      	str	r0, [sp, #0]
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	d14b      	bne.n	800dd6c <_dtoa_r+0x31c>
 800dcd4:	4b24      	ldr	r3, [pc, #144]	; (800dd68 <_dtoa_r+0x318>)
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dcdc:	e6d1      	b.n	800da82 <_dtoa_r+0x32>
 800dcde:	2301      	movs	r3, #1
 800dce0:	e7de      	b.n	800dca0 <_dtoa_r+0x250>
 800dce2:	2300      	movs	r3, #0
 800dce4:	9308      	str	r3, [sp, #32]
 800dce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce8:	eb0a 0903 	add.w	r9, sl, r3
 800dcec:	f109 0301 	add.w	r3, r9, #1
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	9301      	str	r3, [sp, #4]
 800dcf4:	bfb8      	it	lt
 800dcf6:	2301      	movlt	r3, #1
 800dcf8:	e7dd      	b.n	800dcb6 <_dtoa_r+0x266>
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e7f2      	b.n	800dce4 <_dtoa_r+0x294>
 800dcfe:	2501      	movs	r5, #1
 800dd00:	2300      	movs	r3, #0
 800dd02:	9305      	str	r3, [sp, #20]
 800dd04:	9508      	str	r5, [sp, #32]
 800dd06:	f04f 39ff 	mov.w	r9, #4294967295
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800dd10:	2312      	movs	r3, #18
 800dd12:	9209      	str	r2, [sp, #36]	; 0x24
 800dd14:	e7cf      	b.n	800dcb6 <_dtoa_r+0x266>
 800dd16:	2301      	movs	r3, #1
 800dd18:	9308      	str	r3, [sp, #32]
 800dd1a:	e7f4      	b.n	800dd06 <_dtoa_r+0x2b6>
 800dd1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dd20:	f8cd 9004 	str.w	r9, [sp, #4]
 800dd24:	464b      	mov	r3, r9
 800dd26:	e7c6      	b.n	800dcb6 <_dtoa_r+0x266>
 800dd28:	3101      	adds	r1, #1
 800dd2a:	6041      	str	r1, [r0, #4]
 800dd2c:	0052      	lsls	r2, r2, #1
 800dd2e:	e7c6      	b.n	800dcbe <_dtoa_r+0x26e>
 800dd30:	636f4361 	.word	0x636f4361
 800dd34:	3fd287a7 	.word	0x3fd287a7
 800dd38:	8b60c8b3 	.word	0x8b60c8b3
 800dd3c:	3fc68a28 	.word	0x3fc68a28
 800dd40:	509f79fb 	.word	0x509f79fb
 800dd44:	3fd34413 	.word	0x3fd34413
 800dd48:	08012541 	.word	0x08012541
 800dd4c:	08012558 	.word	0x08012558
 800dd50:	7ff00000 	.word	0x7ff00000
 800dd54:	0801253d 	.word	0x0801253d
 800dd58:	08012534 	.word	0x08012534
 800dd5c:	08012511 	.word	0x08012511
 800dd60:	3ff80000 	.word	0x3ff80000
 800dd64:	080126b0 	.word	0x080126b0
 800dd68:	080125b7 	.word	0x080125b7
 800dd6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd6e:	9a00      	ldr	r2, [sp, #0]
 800dd70:	601a      	str	r2, [r3, #0]
 800dd72:	9b01      	ldr	r3, [sp, #4]
 800dd74:	2b0e      	cmp	r3, #14
 800dd76:	f200 80ad 	bhi.w	800ded4 <_dtoa_r+0x484>
 800dd7a:	2d00      	cmp	r5, #0
 800dd7c:	f000 80aa 	beq.w	800ded4 <_dtoa_r+0x484>
 800dd80:	f1ba 0f00 	cmp.w	sl, #0
 800dd84:	dd36      	ble.n	800ddf4 <_dtoa_r+0x3a4>
 800dd86:	4ac3      	ldr	r2, [pc, #780]	; (800e094 <_dtoa_r+0x644>)
 800dd88:	f00a 030f 	and.w	r3, sl, #15
 800dd8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd90:	ed93 7b00 	vldr	d7, [r3]
 800dd94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800dd98:	ea4f 172a 	mov.w	r7, sl, asr #4
 800dd9c:	eeb0 8a47 	vmov.f32	s16, s14
 800dda0:	eef0 8a67 	vmov.f32	s17, s15
 800dda4:	d016      	beq.n	800ddd4 <_dtoa_r+0x384>
 800dda6:	4bbc      	ldr	r3, [pc, #752]	; (800e098 <_dtoa_r+0x648>)
 800dda8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ddac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddb0:	f7f2 fd5c 	bl	800086c <__aeabi_ddiv>
 800ddb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddb8:	f007 070f 	and.w	r7, r7, #15
 800ddbc:	2503      	movs	r5, #3
 800ddbe:	4eb6      	ldr	r6, [pc, #728]	; (800e098 <_dtoa_r+0x648>)
 800ddc0:	b957      	cbnz	r7, 800ddd8 <_dtoa_r+0x388>
 800ddc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddc6:	ec53 2b18 	vmov	r2, r3, d8
 800ddca:	f7f2 fd4f 	bl	800086c <__aeabi_ddiv>
 800ddce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddd2:	e029      	b.n	800de28 <_dtoa_r+0x3d8>
 800ddd4:	2502      	movs	r5, #2
 800ddd6:	e7f2      	b.n	800ddbe <_dtoa_r+0x36e>
 800ddd8:	07f9      	lsls	r1, r7, #31
 800ddda:	d508      	bpl.n	800ddee <_dtoa_r+0x39e>
 800dddc:	ec51 0b18 	vmov	r0, r1, d8
 800dde0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dde4:	f7f2 fc18 	bl	8000618 <__aeabi_dmul>
 800dde8:	ec41 0b18 	vmov	d8, r0, r1
 800ddec:	3501      	adds	r5, #1
 800ddee:	107f      	asrs	r7, r7, #1
 800ddf0:	3608      	adds	r6, #8
 800ddf2:	e7e5      	b.n	800ddc0 <_dtoa_r+0x370>
 800ddf4:	f000 80a6 	beq.w	800df44 <_dtoa_r+0x4f4>
 800ddf8:	f1ca 0600 	rsb	r6, sl, #0
 800ddfc:	4ba5      	ldr	r3, [pc, #660]	; (800e094 <_dtoa_r+0x644>)
 800ddfe:	4fa6      	ldr	r7, [pc, #664]	; (800e098 <_dtoa_r+0x648>)
 800de00:	f006 020f 	and.w	r2, r6, #15
 800de04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de10:	f7f2 fc02 	bl	8000618 <__aeabi_dmul>
 800de14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de18:	1136      	asrs	r6, r6, #4
 800de1a:	2300      	movs	r3, #0
 800de1c:	2502      	movs	r5, #2
 800de1e:	2e00      	cmp	r6, #0
 800de20:	f040 8085 	bne.w	800df2e <_dtoa_r+0x4de>
 800de24:	2b00      	cmp	r3, #0
 800de26:	d1d2      	bne.n	800ddce <_dtoa_r+0x37e>
 800de28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f000 808c 	beq.w	800df48 <_dtoa_r+0x4f8>
 800de30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800de34:	4b99      	ldr	r3, [pc, #612]	; (800e09c <_dtoa_r+0x64c>)
 800de36:	2200      	movs	r2, #0
 800de38:	4630      	mov	r0, r6
 800de3a:	4639      	mov	r1, r7
 800de3c:	f7f2 fe5e 	bl	8000afc <__aeabi_dcmplt>
 800de40:	2800      	cmp	r0, #0
 800de42:	f000 8081 	beq.w	800df48 <_dtoa_r+0x4f8>
 800de46:	9b01      	ldr	r3, [sp, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d07d      	beq.n	800df48 <_dtoa_r+0x4f8>
 800de4c:	f1b9 0f00 	cmp.w	r9, #0
 800de50:	dd3c      	ble.n	800decc <_dtoa_r+0x47c>
 800de52:	f10a 33ff 	add.w	r3, sl, #4294967295
 800de56:	9307      	str	r3, [sp, #28]
 800de58:	2200      	movs	r2, #0
 800de5a:	4b91      	ldr	r3, [pc, #580]	; (800e0a0 <_dtoa_r+0x650>)
 800de5c:	4630      	mov	r0, r6
 800de5e:	4639      	mov	r1, r7
 800de60:	f7f2 fbda 	bl	8000618 <__aeabi_dmul>
 800de64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de68:	3501      	adds	r5, #1
 800de6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800de6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800de72:	4628      	mov	r0, r5
 800de74:	f7f2 fb66 	bl	8000544 <__aeabi_i2d>
 800de78:	4632      	mov	r2, r6
 800de7a:	463b      	mov	r3, r7
 800de7c:	f7f2 fbcc 	bl	8000618 <__aeabi_dmul>
 800de80:	4b88      	ldr	r3, [pc, #544]	; (800e0a4 <_dtoa_r+0x654>)
 800de82:	2200      	movs	r2, #0
 800de84:	f7f2 fa12 	bl	80002ac <__adddf3>
 800de88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800de8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de90:	9303      	str	r3, [sp, #12]
 800de92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de94:	2b00      	cmp	r3, #0
 800de96:	d15c      	bne.n	800df52 <_dtoa_r+0x502>
 800de98:	4b83      	ldr	r3, [pc, #524]	; (800e0a8 <_dtoa_r+0x658>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	4630      	mov	r0, r6
 800de9e:	4639      	mov	r1, r7
 800dea0:	f7f2 fa02 	bl	80002a8 <__aeabi_dsub>
 800dea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dea8:	4606      	mov	r6, r0
 800deaa:	460f      	mov	r7, r1
 800deac:	f7f2 fe44 	bl	8000b38 <__aeabi_dcmpgt>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	f040 8296 	bne.w	800e3e2 <_dtoa_r+0x992>
 800deb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800deba:	4630      	mov	r0, r6
 800debc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dec0:	4639      	mov	r1, r7
 800dec2:	f7f2 fe1b 	bl	8000afc <__aeabi_dcmplt>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	f040 8288 	bne.w	800e3dc <_dtoa_r+0x98c>
 800decc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ded0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ded4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f2c0 8158 	blt.w	800e18c <_dtoa_r+0x73c>
 800dedc:	f1ba 0f0e 	cmp.w	sl, #14
 800dee0:	f300 8154 	bgt.w	800e18c <_dtoa_r+0x73c>
 800dee4:	4b6b      	ldr	r3, [pc, #428]	; (800e094 <_dtoa_r+0x644>)
 800dee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800deea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800deee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def0:	2b00      	cmp	r3, #0
 800def2:	f280 80e3 	bge.w	800e0bc <_dtoa_r+0x66c>
 800def6:	9b01      	ldr	r3, [sp, #4]
 800def8:	2b00      	cmp	r3, #0
 800defa:	f300 80df 	bgt.w	800e0bc <_dtoa_r+0x66c>
 800defe:	f040 826d 	bne.w	800e3dc <_dtoa_r+0x98c>
 800df02:	4b69      	ldr	r3, [pc, #420]	; (800e0a8 <_dtoa_r+0x658>)
 800df04:	2200      	movs	r2, #0
 800df06:	4640      	mov	r0, r8
 800df08:	4649      	mov	r1, r9
 800df0a:	f7f2 fb85 	bl	8000618 <__aeabi_dmul>
 800df0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df12:	f7f2 fe07 	bl	8000b24 <__aeabi_dcmpge>
 800df16:	9e01      	ldr	r6, [sp, #4]
 800df18:	4637      	mov	r7, r6
 800df1a:	2800      	cmp	r0, #0
 800df1c:	f040 8243 	bne.w	800e3a6 <_dtoa_r+0x956>
 800df20:	9d00      	ldr	r5, [sp, #0]
 800df22:	2331      	movs	r3, #49	; 0x31
 800df24:	f805 3b01 	strb.w	r3, [r5], #1
 800df28:	f10a 0a01 	add.w	sl, sl, #1
 800df2c:	e23f      	b.n	800e3ae <_dtoa_r+0x95e>
 800df2e:	07f2      	lsls	r2, r6, #31
 800df30:	d505      	bpl.n	800df3e <_dtoa_r+0x4ee>
 800df32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df36:	f7f2 fb6f 	bl	8000618 <__aeabi_dmul>
 800df3a:	3501      	adds	r5, #1
 800df3c:	2301      	movs	r3, #1
 800df3e:	1076      	asrs	r6, r6, #1
 800df40:	3708      	adds	r7, #8
 800df42:	e76c      	b.n	800de1e <_dtoa_r+0x3ce>
 800df44:	2502      	movs	r5, #2
 800df46:	e76f      	b.n	800de28 <_dtoa_r+0x3d8>
 800df48:	9b01      	ldr	r3, [sp, #4]
 800df4a:	f8cd a01c 	str.w	sl, [sp, #28]
 800df4e:	930c      	str	r3, [sp, #48]	; 0x30
 800df50:	e78d      	b.n	800de6e <_dtoa_r+0x41e>
 800df52:	9900      	ldr	r1, [sp, #0]
 800df54:	980c      	ldr	r0, [sp, #48]	; 0x30
 800df56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df58:	4b4e      	ldr	r3, [pc, #312]	; (800e094 <_dtoa_r+0x644>)
 800df5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df5e:	4401      	add	r1, r0
 800df60:	9102      	str	r1, [sp, #8]
 800df62:	9908      	ldr	r1, [sp, #32]
 800df64:	eeb0 8a47 	vmov.f32	s16, s14
 800df68:	eef0 8a67 	vmov.f32	s17, s15
 800df6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df74:	2900      	cmp	r1, #0
 800df76:	d045      	beq.n	800e004 <_dtoa_r+0x5b4>
 800df78:	494c      	ldr	r1, [pc, #304]	; (800e0ac <_dtoa_r+0x65c>)
 800df7a:	2000      	movs	r0, #0
 800df7c:	f7f2 fc76 	bl	800086c <__aeabi_ddiv>
 800df80:	ec53 2b18 	vmov	r2, r3, d8
 800df84:	f7f2 f990 	bl	80002a8 <__aeabi_dsub>
 800df88:	9d00      	ldr	r5, [sp, #0]
 800df8a:	ec41 0b18 	vmov	d8, r0, r1
 800df8e:	4639      	mov	r1, r7
 800df90:	4630      	mov	r0, r6
 800df92:	f7f2 fdf1 	bl	8000b78 <__aeabi_d2iz>
 800df96:	900c      	str	r0, [sp, #48]	; 0x30
 800df98:	f7f2 fad4 	bl	8000544 <__aeabi_i2d>
 800df9c:	4602      	mov	r2, r0
 800df9e:	460b      	mov	r3, r1
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	4639      	mov	r1, r7
 800dfa4:	f7f2 f980 	bl	80002a8 <__aeabi_dsub>
 800dfa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfaa:	3330      	adds	r3, #48	; 0x30
 800dfac:	f805 3b01 	strb.w	r3, [r5], #1
 800dfb0:	ec53 2b18 	vmov	r2, r3, d8
 800dfb4:	4606      	mov	r6, r0
 800dfb6:	460f      	mov	r7, r1
 800dfb8:	f7f2 fda0 	bl	8000afc <__aeabi_dcmplt>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d165      	bne.n	800e08c <_dtoa_r+0x63c>
 800dfc0:	4632      	mov	r2, r6
 800dfc2:	463b      	mov	r3, r7
 800dfc4:	4935      	ldr	r1, [pc, #212]	; (800e09c <_dtoa_r+0x64c>)
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	f7f2 f96e 	bl	80002a8 <__aeabi_dsub>
 800dfcc:	ec53 2b18 	vmov	r2, r3, d8
 800dfd0:	f7f2 fd94 	bl	8000afc <__aeabi_dcmplt>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	f040 80b9 	bne.w	800e14c <_dtoa_r+0x6fc>
 800dfda:	9b02      	ldr	r3, [sp, #8]
 800dfdc:	429d      	cmp	r5, r3
 800dfde:	f43f af75 	beq.w	800decc <_dtoa_r+0x47c>
 800dfe2:	4b2f      	ldr	r3, [pc, #188]	; (800e0a0 <_dtoa_r+0x650>)
 800dfe4:	ec51 0b18 	vmov	r0, r1, d8
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f7f2 fb15 	bl	8000618 <__aeabi_dmul>
 800dfee:	4b2c      	ldr	r3, [pc, #176]	; (800e0a0 <_dtoa_r+0x650>)
 800dff0:	ec41 0b18 	vmov	d8, r0, r1
 800dff4:	2200      	movs	r2, #0
 800dff6:	4630      	mov	r0, r6
 800dff8:	4639      	mov	r1, r7
 800dffa:	f7f2 fb0d 	bl	8000618 <__aeabi_dmul>
 800dffe:	4606      	mov	r6, r0
 800e000:	460f      	mov	r7, r1
 800e002:	e7c4      	b.n	800df8e <_dtoa_r+0x53e>
 800e004:	ec51 0b17 	vmov	r0, r1, d7
 800e008:	f7f2 fb06 	bl	8000618 <__aeabi_dmul>
 800e00c:	9b02      	ldr	r3, [sp, #8]
 800e00e:	9d00      	ldr	r5, [sp, #0]
 800e010:	930c      	str	r3, [sp, #48]	; 0x30
 800e012:	ec41 0b18 	vmov	d8, r0, r1
 800e016:	4639      	mov	r1, r7
 800e018:	4630      	mov	r0, r6
 800e01a:	f7f2 fdad 	bl	8000b78 <__aeabi_d2iz>
 800e01e:	9011      	str	r0, [sp, #68]	; 0x44
 800e020:	f7f2 fa90 	bl	8000544 <__aeabi_i2d>
 800e024:	4602      	mov	r2, r0
 800e026:	460b      	mov	r3, r1
 800e028:	4630      	mov	r0, r6
 800e02a:	4639      	mov	r1, r7
 800e02c:	f7f2 f93c 	bl	80002a8 <__aeabi_dsub>
 800e030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e032:	3330      	adds	r3, #48	; 0x30
 800e034:	f805 3b01 	strb.w	r3, [r5], #1
 800e038:	9b02      	ldr	r3, [sp, #8]
 800e03a:	429d      	cmp	r5, r3
 800e03c:	4606      	mov	r6, r0
 800e03e:	460f      	mov	r7, r1
 800e040:	f04f 0200 	mov.w	r2, #0
 800e044:	d134      	bne.n	800e0b0 <_dtoa_r+0x660>
 800e046:	4b19      	ldr	r3, [pc, #100]	; (800e0ac <_dtoa_r+0x65c>)
 800e048:	ec51 0b18 	vmov	r0, r1, d8
 800e04c:	f7f2 f92e 	bl	80002ac <__adddf3>
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	4630      	mov	r0, r6
 800e056:	4639      	mov	r1, r7
 800e058:	f7f2 fd6e 	bl	8000b38 <__aeabi_dcmpgt>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d175      	bne.n	800e14c <_dtoa_r+0x6fc>
 800e060:	ec53 2b18 	vmov	r2, r3, d8
 800e064:	4911      	ldr	r1, [pc, #68]	; (800e0ac <_dtoa_r+0x65c>)
 800e066:	2000      	movs	r0, #0
 800e068:	f7f2 f91e 	bl	80002a8 <__aeabi_dsub>
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	4630      	mov	r0, r6
 800e072:	4639      	mov	r1, r7
 800e074:	f7f2 fd42 	bl	8000afc <__aeabi_dcmplt>
 800e078:	2800      	cmp	r0, #0
 800e07a:	f43f af27 	beq.w	800decc <_dtoa_r+0x47c>
 800e07e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e080:	1e6b      	subs	r3, r5, #1
 800e082:	930c      	str	r3, [sp, #48]	; 0x30
 800e084:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e088:	2b30      	cmp	r3, #48	; 0x30
 800e08a:	d0f8      	beq.n	800e07e <_dtoa_r+0x62e>
 800e08c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e090:	e04a      	b.n	800e128 <_dtoa_r+0x6d8>
 800e092:	bf00      	nop
 800e094:	080126b0 	.word	0x080126b0
 800e098:	08012688 	.word	0x08012688
 800e09c:	3ff00000 	.word	0x3ff00000
 800e0a0:	40240000 	.word	0x40240000
 800e0a4:	401c0000 	.word	0x401c0000
 800e0a8:	40140000 	.word	0x40140000
 800e0ac:	3fe00000 	.word	0x3fe00000
 800e0b0:	4baf      	ldr	r3, [pc, #700]	; (800e370 <_dtoa_r+0x920>)
 800e0b2:	f7f2 fab1 	bl	8000618 <__aeabi_dmul>
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	460f      	mov	r7, r1
 800e0ba:	e7ac      	b.n	800e016 <_dtoa_r+0x5c6>
 800e0bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e0c0:	9d00      	ldr	r5, [sp, #0]
 800e0c2:	4642      	mov	r2, r8
 800e0c4:	464b      	mov	r3, r9
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	4639      	mov	r1, r7
 800e0ca:	f7f2 fbcf 	bl	800086c <__aeabi_ddiv>
 800e0ce:	f7f2 fd53 	bl	8000b78 <__aeabi_d2iz>
 800e0d2:	9002      	str	r0, [sp, #8]
 800e0d4:	f7f2 fa36 	bl	8000544 <__aeabi_i2d>
 800e0d8:	4642      	mov	r2, r8
 800e0da:	464b      	mov	r3, r9
 800e0dc:	f7f2 fa9c 	bl	8000618 <__aeabi_dmul>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	4639      	mov	r1, r7
 800e0e8:	f7f2 f8de 	bl	80002a8 <__aeabi_dsub>
 800e0ec:	9e02      	ldr	r6, [sp, #8]
 800e0ee:	9f01      	ldr	r7, [sp, #4]
 800e0f0:	3630      	adds	r6, #48	; 0x30
 800e0f2:	f805 6b01 	strb.w	r6, [r5], #1
 800e0f6:	9e00      	ldr	r6, [sp, #0]
 800e0f8:	1bae      	subs	r6, r5, r6
 800e0fa:	42b7      	cmp	r7, r6
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	460b      	mov	r3, r1
 800e100:	d137      	bne.n	800e172 <_dtoa_r+0x722>
 800e102:	f7f2 f8d3 	bl	80002ac <__adddf3>
 800e106:	4642      	mov	r2, r8
 800e108:	464b      	mov	r3, r9
 800e10a:	4606      	mov	r6, r0
 800e10c:	460f      	mov	r7, r1
 800e10e:	f7f2 fd13 	bl	8000b38 <__aeabi_dcmpgt>
 800e112:	b9c8      	cbnz	r0, 800e148 <_dtoa_r+0x6f8>
 800e114:	4642      	mov	r2, r8
 800e116:	464b      	mov	r3, r9
 800e118:	4630      	mov	r0, r6
 800e11a:	4639      	mov	r1, r7
 800e11c:	f7f2 fce4 	bl	8000ae8 <__aeabi_dcmpeq>
 800e120:	b110      	cbz	r0, 800e128 <_dtoa_r+0x6d8>
 800e122:	9b02      	ldr	r3, [sp, #8]
 800e124:	07d9      	lsls	r1, r3, #31
 800e126:	d40f      	bmi.n	800e148 <_dtoa_r+0x6f8>
 800e128:	4620      	mov	r0, r4
 800e12a:	4659      	mov	r1, fp
 800e12c:	f000 fce8 	bl	800eb00 <_Bfree>
 800e130:	2300      	movs	r3, #0
 800e132:	702b      	strb	r3, [r5, #0]
 800e134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e136:	f10a 0001 	add.w	r0, sl, #1
 800e13a:	6018      	str	r0, [r3, #0]
 800e13c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f43f acd8 	beq.w	800daf4 <_dtoa_r+0xa4>
 800e144:	601d      	str	r5, [r3, #0]
 800e146:	e4d5      	b.n	800daf4 <_dtoa_r+0xa4>
 800e148:	f8cd a01c 	str.w	sl, [sp, #28]
 800e14c:	462b      	mov	r3, r5
 800e14e:	461d      	mov	r5, r3
 800e150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e154:	2a39      	cmp	r2, #57	; 0x39
 800e156:	d108      	bne.n	800e16a <_dtoa_r+0x71a>
 800e158:	9a00      	ldr	r2, [sp, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d1f7      	bne.n	800e14e <_dtoa_r+0x6fe>
 800e15e:	9a07      	ldr	r2, [sp, #28]
 800e160:	9900      	ldr	r1, [sp, #0]
 800e162:	3201      	adds	r2, #1
 800e164:	9207      	str	r2, [sp, #28]
 800e166:	2230      	movs	r2, #48	; 0x30
 800e168:	700a      	strb	r2, [r1, #0]
 800e16a:	781a      	ldrb	r2, [r3, #0]
 800e16c:	3201      	adds	r2, #1
 800e16e:	701a      	strb	r2, [r3, #0]
 800e170:	e78c      	b.n	800e08c <_dtoa_r+0x63c>
 800e172:	4b7f      	ldr	r3, [pc, #508]	; (800e370 <_dtoa_r+0x920>)
 800e174:	2200      	movs	r2, #0
 800e176:	f7f2 fa4f 	bl	8000618 <__aeabi_dmul>
 800e17a:	2200      	movs	r2, #0
 800e17c:	2300      	movs	r3, #0
 800e17e:	4606      	mov	r6, r0
 800e180:	460f      	mov	r7, r1
 800e182:	f7f2 fcb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800e186:	2800      	cmp	r0, #0
 800e188:	d09b      	beq.n	800e0c2 <_dtoa_r+0x672>
 800e18a:	e7cd      	b.n	800e128 <_dtoa_r+0x6d8>
 800e18c:	9a08      	ldr	r2, [sp, #32]
 800e18e:	2a00      	cmp	r2, #0
 800e190:	f000 80c4 	beq.w	800e31c <_dtoa_r+0x8cc>
 800e194:	9a05      	ldr	r2, [sp, #20]
 800e196:	2a01      	cmp	r2, #1
 800e198:	f300 80a8 	bgt.w	800e2ec <_dtoa_r+0x89c>
 800e19c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e19e:	2a00      	cmp	r2, #0
 800e1a0:	f000 80a0 	beq.w	800e2e4 <_dtoa_r+0x894>
 800e1a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e1a8:	9e06      	ldr	r6, [sp, #24]
 800e1aa:	4645      	mov	r5, r8
 800e1ac:	9a04      	ldr	r2, [sp, #16]
 800e1ae:	2101      	movs	r1, #1
 800e1b0:	441a      	add	r2, r3
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	4498      	add	r8, r3
 800e1b6:	9204      	str	r2, [sp, #16]
 800e1b8:	f000 fd5e 	bl	800ec78 <__i2b>
 800e1bc:	4607      	mov	r7, r0
 800e1be:	2d00      	cmp	r5, #0
 800e1c0:	dd0b      	ble.n	800e1da <_dtoa_r+0x78a>
 800e1c2:	9b04      	ldr	r3, [sp, #16]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	dd08      	ble.n	800e1da <_dtoa_r+0x78a>
 800e1c8:	42ab      	cmp	r3, r5
 800e1ca:	9a04      	ldr	r2, [sp, #16]
 800e1cc:	bfa8      	it	ge
 800e1ce:	462b      	movge	r3, r5
 800e1d0:	eba8 0803 	sub.w	r8, r8, r3
 800e1d4:	1aed      	subs	r5, r5, r3
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	9304      	str	r3, [sp, #16]
 800e1da:	9b06      	ldr	r3, [sp, #24]
 800e1dc:	b1fb      	cbz	r3, 800e21e <_dtoa_r+0x7ce>
 800e1de:	9b08      	ldr	r3, [sp, #32]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 809f 	beq.w	800e324 <_dtoa_r+0x8d4>
 800e1e6:	2e00      	cmp	r6, #0
 800e1e8:	dd11      	ble.n	800e20e <_dtoa_r+0x7be>
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	4632      	mov	r2, r6
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f000 fdfe 	bl	800edf0 <__pow5mult>
 800e1f4:	465a      	mov	r2, fp
 800e1f6:	4601      	mov	r1, r0
 800e1f8:	4607      	mov	r7, r0
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f000 fd52 	bl	800eca4 <__multiply>
 800e200:	4659      	mov	r1, fp
 800e202:	9007      	str	r0, [sp, #28]
 800e204:	4620      	mov	r0, r4
 800e206:	f000 fc7b 	bl	800eb00 <_Bfree>
 800e20a:	9b07      	ldr	r3, [sp, #28]
 800e20c:	469b      	mov	fp, r3
 800e20e:	9b06      	ldr	r3, [sp, #24]
 800e210:	1b9a      	subs	r2, r3, r6
 800e212:	d004      	beq.n	800e21e <_dtoa_r+0x7ce>
 800e214:	4659      	mov	r1, fp
 800e216:	4620      	mov	r0, r4
 800e218:	f000 fdea 	bl	800edf0 <__pow5mult>
 800e21c:	4683      	mov	fp, r0
 800e21e:	2101      	movs	r1, #1
 800e220:	4620      	mov	r0, r4
 800e222:	f000 fd29 	bl	800ec78 <__i2b>
 800e226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e228:	2b00      	cmp	r3, #0
 800e22a:	4606      	mov	r6, r0
 800e22c:	dd7c      	ble.n	800e328 <_dtoa_r+0x8d8>
 800e22e:	461a      	mov	r2, r3
 800e230:	4601      	mov	r1, r0
 800e232:	4620      	mov	r0, r4
 800e234:	f000 fddc 	bl	800edf0 <__pow5mult>
 800e238:	9b05      	ldr	r3, [sp, #20]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	4606      	mov	r6, r0
 800e23e:	dd76      	ble.n	800e32e <_dtoa_r+0x8de>
 800e240:	2300      	movs	r3, #0
 800e242:	9306      	str	r3, [sp, #24]
 800e244:	6933      	ldr	r3, [r6, #16]
 800e246:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e24a:	6918      	ldr	r0, [r3, #16]
 800e24c:	f000 fcc4 	bl	800ebd8 <__hi0bits>
 800e250:	f1c0 0020 	rsb	r0, r0, #32
 800e254:	9b04      	ldr	r3, [sp, #16]
 800e256:	4418      	add	r0, r3
 800e258:	f010 001f 	ands.w	r0, r0, #31
 800e25c:	f000 8086 	beq.w	800e36c <_dtoa_r+0x91c>
 800e260:	f1c0 0320 	rsb	r3, r0, #32
 800e264:	2b04      	cmp	r3, #4
 800e266:	dd7f      	ble.n	800e368 <_dtoa_r+0x918>
 800e268:	f1c0 001c 	rsb	r0, r0, #28
 800e26c:	9b04      	ldr	r3, [sp, #16]
 800e26e:	4403      	add	r3, r0
 800e270:	4480      	add	r8, r0
 800e272:	4405      	add	r5, r0
 800e274:	9304      	str	r3, [sp, #16]
 800e276:	f1b8 0f00 	cmp.w	r8, #0
 800e27a:	dd05      	ble.n	800e288 <_dtoa_r+0x838>
 800e27c:	4659      	mov	r1, fp
 800e27e:	4642      	mov	r2, r8
 800e280:	4620      	mov	r0, r4
 800e282:	f000 fe0f 	bl	800eea4 <__lshift>
 800e286:	4683      	mov	fp, r0
 800e288:	9b04      	ldr	r3, [sp, #16]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	dd05      	ble.n	800e29a <_dtoa_r+0x84a>
 800e28e:	4631      	mov	r1, r6
 800e290:	461a      	mov	r2, r3
 800e292:	4620      	mov	r0, r4
 800e294:	f000 fe06 	bl	800eea4 <__lshift>
 800e298:	4606      	mov	r6, r0
 800e29a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d069      	beq.n	800e374 <_dtoa_r+0x924>
 800e2a0:	4631      	mov	r1, r6
 800e2a2:	4658      	mov	r0, fp
 800e2a4:	f000 fe6a 	bl	800ef7c <__mcmp>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	da63      	bge.n	800e374 <_dtoa_r+0x924>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	4659      	mov	r1, fp
 800e2b0:	220a      	movs	r2, #10
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f000 fc46 	bl	800eb44 <__multadd>
 800e2b8:	9b08      	ldr	r3, [sp, #32]
 800e2ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2be:	4683      	mov	fp, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f000 818f 	beq.w	800e5e4 <_dtoa_r+0xb94>
 800e2c6:	4639      	mov	r1, r7
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	220a      	movs	r2, #10
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	f000 fc39 	bl	800eb44 <__multadd>
 800e2d2:	f1b9 0f00 	cmp.w	r9, #0
 800e2d6:	4607      	mov	r7, r0
 800e2d8:	f300 808e 	bgt.w	800e3f8 <_dtoa_r+0x9a8>
 800e2dc:	9b05      	ldr	r3, [sp, #20]
 800e2de:	2b02      	cmp	r3, #2
 800e2e0:	dc50      	bgt.n	800e384 <_dtoa_r+0x934>
 800e2e2:	e089      	b.n	800e3f8 <_dtoa_r+0x9a8>
 800e2e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2ea:	e75d      	b.n	800e1a8 <_dtoa_r+0x758>
 800e2ec:	9b01      	ldr	r3, [sp, #4]
 800e2ee:	1e5e      	subs	r6, r3, #1
 800e2f0:	9b06      	ldr	r3, [sp, #24]
 800e2f2:	42b3      	cmp	r3, r6
 800e2f4:	bfbf      	itttt	lt
 800e2f6:	9b06      	ldrlt	r3, [sp, #24]
 800e2f8:	9606      	strlt	r6, [sp, #24]
 800e2fa:	1af2      	sublt	r2, r6, r3
 800e2fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e2fe:	bfb6      	itet	lt
 800e300:	189b      	addlt	r3, r3, r2
 800e302:	1b9e      	subge	r6, r3, r6
 800e304:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e306:	9b01      	ldr	r3, [sp, #4]
 800e308:	bfb8      	it	lt
 800e30a:	2600      	movlt	r6, #0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	bfb5      	itete	lt
 800e310:	eba8 0503 	sublt.w	r5, r8, r3
 800e314:	9b01      	ldrge	r3, [sp, #4]
 800e316:	2300      	movlt	r3, #0
 800e318:	4645      	movge	r5, r8
 800e31a:	e747      	b.n	800e1ac <_dtoa_r+0x75c>
 800e31c:	9e06      	ldr	r6, [sp, #24]
 800e31e:	9f08      	ldr	r7, [sp, #32]
 800e320:	4645      	mov	r5, r8
 800e322:	e74c      	b.n	800e1be <_dtoa_r+0x76e>
 800e324:	9a06      	ldr	r2, [sp, #24]
 800e326:	e775      	b.n	800e214 <_dtoa_r+0x7c4>
 800e328:	9b05      	ldr	r3, [sp, #20]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	dc18      	bgt.n	800e360 <_dtoa_r+0x910>
 800e32e:	9b02      	ldr	r3, [sp, #8]
 800e330:	b9b3      	cbnz	r3, 800e360 <_dtoa_r+0x910>
 800e332:	9b03      	ldr	r3, [sp, #12]
 800e334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e338:	b9a3      	cbnz	r3, 800e364 <_dtoa_r+0x914>
 800e33a:	9b03      	ldr	r3, [sp, #12]
 800e33c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e340:	0d1b      	lsrs	r3, r3, #20
 800e342:	051b      	lsls	r3, r3, #20
 800e344:	b12b      	cbz	r3, 800e352 <_dtoa_r+0x902>
 800e346:	9b04      	ldr	r3, [sp, #16]
 800e348:	3301      	adds	r3, #1
 800e34a:	9304      	str	r3, [sp, #16]
 800e34c:	f108 0801 	add.w	r8, r8, #1
 800e350:	2301      	movs	r3, #1
 800e352:	9306      	str	r3, [sp, #24]
 800e354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e356:	2b00      	cmp	r3, #0
 800e358:	f47f af74 	bne.w	800e244 <_dtoa_r+0x7f4>
 800e35c:	2001      	movs	r0, #1
 800e35e:	e779      	b.n	800e254 <_dtoa_r+0x804>
 800e360:	2300      	movs	r3, #0
 800e362:	e7f6      	b.n	800e352 <_dtoa_r+0x902>
 800e364:	9b02      	ldr	r3, [sp, #8]
 800e366:	e7f4      	b.n	800e352 <_dtoa_r+0x902>
 800e368:	d085      	beq.n	800e276 <_dtoa_r+0x826>
 800e36a:	4618      	mov	r0, r3
 800e36c:	301c      	adds	r0, #28
 800e36e:	e77d      	b.n	800e26c <_dtoa_r+0x81c>
 800e370:	40240000 	.word	0x40240000
 800e374:	9b01      	ldr	r3, [sp, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	dc38      	bgt.n	800e3ec <_dtoa_r+0x99c>
 800e37a:	9b05      	ldr	r3, [sp, #20]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	dd35      	ble.n	800e3ec <_dtoa_r+0x99c>
 800e380:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e384:	f1b9 0f00 	cmp.w	r9, #0
 800e388:	d10d      	bne.n	800e3a6 <_dtoa_r+0x956>
 800e38a:	4631      	mov	r1, r6
 800e38c:	464b      	mov	r3, r9
 800e38e:	2205      	movs	r2, #5
 800e390:	4620      	mov	r0, r4
 800e392:	f000 fbd7 	bl	800eb44 <__multadd>
 800e396:	4601      	mov	r1, r0
 800e398:	4606      	mov	r6, r0
 800e39a:	4658      	mov	r0, fp
 800e39c:	f000 fdee 	bl	800ef7c <__mcmp>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	f73f adbd 	bgt.w	800df20 <_dtoa_r+0x4d0>
 800e3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3a8:	9d00      	ldr	r5, [sp, #0]
 800e3aa:	ea6f 0a03 	mvn.w	sl, r3
 800e3ae:	f04f 0800 	mov.w	r8, #0
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	f000 fba3 	bl	800eb00 <_Bfree>
 800e3ba:	2f00      	cmp	r7, #0
 800e3bc:	f43f aeb4 	beq.w	800e128 <_dtoa_r+0x6d8>
 800e3c0:	f1b8 0f00 	cmp.w	r8, #0
 800e3c4:	d005      	beq.n	800e3d2 <_dtoa_r+0x982>
 800e3c6:	45b8      	cmp	r8, r7
 800e3c8:	d003      	beq.n	800e3d2 <_dtoa_r+0x982>
 800e3ca:	4641      	mov	r1, r8
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 fb97 	bl	800eb00 <_Bfree>
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f000 fb93 	bl	800eb00 <_Bfree>
 800e3da:	e6a5      	b.n	800e128 <_dtoa_r+0x6d8>
 800e3dc:	2600      	movs	r6, #0
 800e3de:	4637      	mov	r7, r6
 800e3e0:	e7e1      	b.n	800e3a6 <_dtoa_r+0x956>
 800e3e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e3e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e3e8:	4637      	mov	r7, r6
 800e3ea:	e599      	b.n	800df20 <_dtoa_r+0x4d0>
 800e3ec:	9b08      	ldr	r3, [sp, #32]
 800e3ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f000 80fd 	beq.w	800e5f2 <_dtoa_r+0xba2>
 800e3f8:	2d00      	cmp	r5, #0
 800e3fa:	dd05      	ble.n	800e408 <_dtoa_r+0x9b8>
 800e3fc:	4639      	mov	r1, r7
 800e3fe:	462a      	mov	r2, r5
 800e400:	4620      	mov	r0, r4
 800e402:	f000 fd4f 	bl	800eea4 <__lshift>
 800e406:	4607      	mov	r7, r0
 800e408:	9b06      	ldr	r3, [sp, #24]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d05c      	beq.n	800e4c8 <_dtoa_r+0xa78>
 800e40e:	6879      	ldr	r1, [r7, #4]
 800e410:	4620      	mov	r0, r4
 800e412:	f000 fb35 	bl	800ea80 <_Balloc>
 800e416:	4605      	mov	r5, r0
 800e418:	b928      	cbnz	r0, 800e426 <_dtoa_r+0x9d6>
 800e41a:	4b80      	ldr	r3, [pc, #512]	; (800e61c <_dtoa_r+0xbcc>)
 800e41c:	4602      	mov	r2, r0
 800e41e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e422:	f7ff bb2e 	b.w	800da82 <_dtoa_r+0x32>
 800e426:	693a      	ldr	r2, [r7, #16]
 800e428:	3202      	adds	r2, #2
 800e42a:	0092      	lsls	r2, r2, #2
 800e42c:	f107 010c 	add.w	r1, r7, #12
 800e430:	300c      	adds	r0, #12
 800e432:	f7fe fcb3 	bl	800cd9c <memcpy>
 800e436:	2201      	movs	r2, #1
 800e438:	4629      	mov	r1, r5
 800e43a:	4620      	mov	r0, r4
 800e43c:	f000 fd32 	bl	800eea4 <__lshift>
 800e440:	9b00      	ldr	r3, [sp, #0]
 800e442:	3301      	adds	r3, #1
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	9b00      	ldr	r3, [sp, #0]
 800e448:	444b      	add	r3, r9
 800e44a:	9307      	str	r3, [sp, #28]
 800e44c:	9b02      	ldr	r3, [sp, #8]
 800e44e:	f003 0301 	and.w	r3, r3, #1
 800e452:	46b8      	mov	r8, r7
 800e454:	9306      	str	r3, [sp, #24]
 800e456:	4607      	mov	r7, r0
 800e458:	9b01      	ldr	r3, [sp, #4]
 800e45a:	4631      	mov	r1, r6
 800e45c:	3b01      	subs	r3, #1
 800e45e:	4658      	mov	r0, fp
 800e460:	9302      	str	r3, [sp, #8]
 800e462:	f7ff fa69 	bl	800d938 <quorem>
 800e466:	4603      	mov	r3, r0
 800e468:	3330      	adds	r3, #48	; 0x30
 800e46a:	9004      	str	r0, [sp, #16]
 800e46c:	4641      	mov	r1, r8
 800e46e:	4658      	mov	r0, fp
 800e470:	9308      	str	r3, [sp, #32]
 800e472:	f000 fd83 	bl	800ef7c <__mcmp>
 800e476:	463a      	mov	r2, r7
 800e478:	4681      	mov	r9, r0
 800e47a:	4631      	mov	r1, r6
 800e47c:	4620      	mov	r0, r4
 800e47e:	f000 fd99 	bl	800efb4 <__mdiff>
 800e482:	68c2      	ldr	r2, [r0, #12]
 800e484:	9b08      	ldr	r3, [sp, #32]
 800e486:	4605      	mov	r5, r0
 800e488:	bb02      	cbnz	r2, 800e4cc <_dtoa_r+0xa7c>
 800e48a:	4601      	mov	r1, r0
 800e48c:	4658      	mov	r0, fp
 800e48e:	f000 fd75 	bl	800ef7c <__mcmp>
 800e492:	9b08      	ldr	r3, [sp, #32]
 800e494:	4602      	mov	r2, r0
 800e496:	4629      	mov	r1, r5
 800e498:	4620      	mov	r0, r4
 800e49a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e49e:	f000 fb2f 	bl	800eb00 <_Bfree>
 800e4a2:	9b05      	ldr	r3, [sp, #20]
 800e4a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4a6:	9d01      	ldr	r5, [sp, #4]
 800e4a8:	ea43 0102 	orr.w	r1, r3, r2
 800e4ac:	9b06      	ldr	r3, [sp, #24]
 800e4ae:	430b      	orrs	r3, r1
 800e4b0:	9b08      	ldr	r3, [sp, #32]
 800e4b2:	d10d      	bne.n	800e4d0 <_dtoa_r+0xa80>
 800e4b4:	2b39      	cmp	r3, #57	; 0x39
 800e4b6:	d029      	beq.n	800e50c <_dtoa_r+0xabc>
 800e4b8:	f1b9 0f00 	cmp.w	r9, #0
 800e4bc:	dd01      	ble.n	800e4c2 <_dtoa_r+0xa72>
 800e4be:	9b04      	ldr	r3, [sp, #16]
 800e4c0:	3331      	adds	r3, #49	; 0x31
 800e4c2:	9a02      	ldr	r2, [sp, #8]
 800e4c4:	7013      	strb	r3, [r2, #0]
 800e4c6:	e774      	b.n	800e3b2 <_dtoa_r+0x962>
 800e4c8:	4638      	mov	r0, r7
 800e4ca:	e7b9      	b.n	800e440 <_dtoa_r+0x9f0>
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	e7e2      	b.n	800e496 <_dtoa_r+0xa46>
 800e4d0:	f1b9 0f00 	cmp.w	r9, #0
 800e4d4:	db06      	blt.n	800e4e4 <_dtoa_r+0xa94>
 800e4d6:	9905      	ldr	r1, [sp, #20]
 800e4d8:	ea41 0909 	orr.w	r9, r1, r9
 800e4dc:	9906      	ldr	r1, [sp, #24]
 800e4de:	ea59 0101 	orrs.w	r1, r9, r1
 800e4e2:	d120      	bne.n	800e526 <_dtoa_r+0xad6>
 800e4e4:	2a00      	cmp	r2, #0
 800e4e6:	ddec      	ble.n	800e4c2 <_dtoa_r+0xa72>
 800e4e8:	4659      	mov	r1, fp
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	f000 fcd8 	bl	800eea4 <__lshift>
 800e4f4:	4631      	mov	r1, r6
 800e4f6:	4683      	mov	fp, r0
 800e4f8:	f000 fd40 	bl	800ef7c <__mcmp>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	9b01      	ldr	r3, [sp, #4]
 800e500:	dc02      	bgt.n	800e508 <_dtoa_r+0xab8>
 800e502:	d1de      	bne.n	800e4c2 <_dtoa_r+0xa72>
 800e504:	07da      	lsls	r2, r3, #31
 800e506:	d5dc      	bpl.n	800e4c2 <_dtoa_r+0xa72>
 800e508:	2b39      	cmp	r3, #57	; 0x39
 800e50a:	d1d8      	bne.n	800e4be <_dtoa_r+0xa6e>
 800e50c:	9a02      	ldr	r2, [sp, #8]
 800e50e:	2339      	movs	r3, #57	; 0x39
 800e510:	7013      	strb	r3, [r2, #0]
 800e512:	462b      	mov	r3, r5
 800e514:	461d      	mov	r5, r3
 800e516:	3b01      	subs	r3, #1
 800e518:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e51c:	2a39      	cmp	r2, #57	; 0x39
 800e51e:	d050      	beq.n	800e5c2 <_dtoa_r+0xb72>
 800e520:	3201      	adds	r2, #1
 800e522:	701a      	strb	r2, [r3, #0]
 800e524:	e745      	b.n	800e3b2 <_dtoa_r+0x962>
 800e526:	2a00      	cmp	r2, #0
 800e528:	dd03      	ble.n	800e532 <_dtoa_r+0xae2>
 800e52a:	2b39      	cmp	r3, #57	; 0x39
 800e52c:	d0ee      	beq.n	800e50c <_dtoa_r+0xabc>
 800e52e:	3301      	adds	r3, #1
 800e530:	e7c7      	b.n	800e4c2 <_dtoa_r+0xa72>
 800e532:	9a01      	ldr	r2, [sp, #4]
 800e534:	9907      	ldr	r1, [sp, #28]
 800e536:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e53a:	428a      	cmp	r2, r1
 800e53c:	d02a      	beq.n	800e594 <_dtoa_r+0xb44>
 800e53e:	4659      	mov	r1, fp
 800e540:	2300      	movs	r3, #0
 800e542:	220a      	movs	r2, #10
 800e544:	4620      	mov	r0, r4
 800e546:	f000 fafd 	bl	800eb44 <__multadd>
 800e54a:	45b8      	cmp	r8, r7
 800e54c:	4683      	mov	fp, r0
 800e54e:	f04f 0300 	mov.w	r3, #0
 800e552:	f04f 020a 	mov.w	r2, #10
 800e556:	4641      	mov	r1, r8
 800e558:	4620      	mov	r0, r4
 800e55a:	d107      	bne.n	800e56c <_dtoa_r+0xb1c>
 800e55c:	f000 faf2 	bl	800eb44 <__multadd>
 800e560:	4680      	mov	r8, r0
 800e562:	4607      	mov	r7, r0
 800e564:	9b01      	ldr	r3, [sp, #4]
 800e566:	3301      	adds	r3, #1
 800e568:	9301      	str	r3, [sp, #4]
 800e56a:	e775      	b.n	800e458 <_dtoa_r+0xa08>
 800e56c:	f000 faea 	bl	800eb44 <__multadd>
 800e570:	4639      	mov	r1, r7
 800e572:	4680      	mov	r8, r0
 800e574:	2300      	movs	r3, #0
 800e576:	220a      	movs	r2, #10
 800e578:	4620      	mov	r0, r4
 800e57a:	f000 fae3 	bl	800eb44 <__multadd>
 800e57e:	4607      	mov	r7, r0
 800e580:	e7f0      	b.n	800e564 <_dtoa_r+0xb14>
 800e582:	f1b9 0f00 	cmp.w	r9, #0
 800e586:	9a00      	ldr	r2, [sp, #0]
 800e588:	bfcc      	ite	gt
 800e58a:	464d      	movgt	r5, r9
 800e58c:	2501      	movle	r5, #1
 800e58e:	4415      	add	r5, r2
 800e590:	f04f 0800 	mov.w	r8, #0
 800e594:	4659      	mov	r1, fp
 800e596:	2201      	movs	r2, #1
 800e598:	4620      	mov	r0, r4
 800e59a:	9301      	str	r3, [sp, #4]
 800e59c:	f000 fc82 	bl	800eea4 <__lshift>
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4683      	mov	fp, r0
 800e5a4:	f000 fcea 	bl	800ef7c <__mcmp>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	dcb2      	bgt.n	800e512 <_dtoa_r+0xac2>
 800e5ac:	d102      	bne.n	800e5b4 <_dtoa_r+0xb64>
 800e5ae:	9b01      	ldr	r3, [sp, #4]
 800e5b0:	07db      	lsls	r3, r3, #31
 800e5b2:	d4ae      	bmi.n	800e512 <_dtoa_r+0xac2>
 800e5b4:	462b      	mov	r3, r5
 800e5b6:	461d      	mov	r5, r3
 800e5b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5bc:	2a30      	cmp	r2, #48	; 0x30
 800e5be:	d0fa      	beq.n	800e5b6 <_dtoa_r+0xb66>
 800e5c0:	e6f7      	b.n	800e3b2 <_dtoa_r+0x962>
 800e5c2:	9a00      	ldr	r2, [sp, #0]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d1a5      	bne.n	800e514 <_dtoa_r+0xac4>
 800e5c8:	f10a 0a01 	add.w	sl, sl, #1
 800e5cc:	2331      	movs	r3, #49	; 0x31
 800e5ce:	e779      	b.n	800e4c4 <_dtoa_r+0xa74>
 800e5d0:	4b13      	ldr	r3, [pc, #76]	; (800e620 <_dtoa_r+0xbd0>)
 800e5d2:	f7ff baaf 	b.w	800db34 <_dtoa_r+0xe4>
 800e5d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f47f aa86 	bne.w	800daea <_dtoa_r+0x9a>
 800e5de:	4b11      	ldr	r3, [pc, #68]	; (800e624 <_dtoa_r+0xbd4>)
 800e5e0:	f7ff baa8 	b.w	800db34 <_dtoa_r+0xe4>
 800e5e4:	f1b9 0f00 	cmp.w	r9, #0
 800e5e8:	dc03      	bgt.n	800e5f2 <_dtoa_r+0xba2>
 800e5ea:	9b05      	ldr	r3, [sp, #20]
 800e5ec:	2b02      	cmp	r3, #2
 800e5ee:	f73f aec9 	bgt.w	800e384 <_dtoa_r+0x934>
 800e5f2:	9d00      	ldr	r5, [sp, #0]
 800e5f4:	4631      	mov	r1, r6
 800e5f6:	4658      	mov	r0, fp
 800e5f8:	f7ff f99e 	bl	800d938 <quorem>
 800e5fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e600:	f805 3b01 	strb.w	r3, [r5], #1
 800e604:	9a00      	ldr	r2, [sp, #0]
 800e606:	1aaa      	subs	r2, r5, r2
 800e608:	4591      	cmp	r9, r2
 800e60a:	ddba      	ble.n	800e582 <_dtoa_r+0xb32>
 800e60c:	4659      	mov	r1, fp
 800e60e:	2300      	movs	r3, #0
 800e610:	220a      	movs	r2, #10
 800e612:	4620      	mov	r0, r4
 800e614:	f000 fa96 	bl	800eb44 <__multadd>
 800e618:	4683      	mov	fp, r0
 800e61a:	e7eb      	b.n	800e5f4 <_dtoa_r+0xba4>
 800e61c:	080125b7 	.word	0x080125b7
 800e620:	08012510 	.word	0x08012510
 800e624:	08012534 	.word	0x08012534

0800e628 <__sflush_r>:
 800e628:	898a      	ldrh	r2, [r1, #12]
 800e62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e62e:	4605      	mov	r5, r0
 800e630:	0710      	lsls	r0, r2, #28
 800e632:	460c      	mov	r4, r1
 800e634:	d458      	bmi.n	800e6e8 <__sflush_r+0xc0>
 800e636:	684b      	ldr	r3, [r1, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	dc05      	bgt.n	800e648 <__sflush_r+0x20>
 800e63c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e63e:	2b00      	cmp	r3, #0
 800e640:	dc02      	bgt.n	800e648 <__sflush_r+0x20>
 800e642:	2000      	movs	r0, #0
 800e644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e64a:	2e00      	cmp	r6, #0
 800e64c:	d0f9      	beq.n	800e642 <__sflush_r+0x1a>
 800e64e:	2300      	movs	r3, #0
 800e650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e654:	682f      	ldr	r7, [r5, #0]
 800e656:	602b      	str	r3, [r5, #0]
 800e658:	d032      	beq.n	800e6c0 <__sflush_r+0x98>
 800e65a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e65c:	89a3      	ldrh	r3, [r4, #12]
 800e65e:	075a      	lsls	r2, r3, #29
 800e660:	d505      	bpl.n	800e66e <__sflush_r+0x46>
 800e662:	6863      	ldr	r3, [r4, #4]
 800e664:	1ac0      	subs	r0, r0, r3
 800e666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e668:	b10b      	cbz	r3, 800e66e <__sflush_r+0x46>
 800e66a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e66c:	1ac0      	subs	r0, r0, r3
 800e66e:	2300      	movs	r3, #0
 800e670:	4602      	mov	r2, r0
 800e672:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e674:	6a21      	ldr	r1, [r4, #32]
 800e676:	4628      	mov	r0, r5
 800e678:	47b0      	blx	r6
 800e67a:	1c43      	adds	r3, r0, #1
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	d106      	bne.n	800e68e <__sflush_r+0x66>
 800e680:	6829      	ldr	r1, [r5, #0]
 800e682:	291d      	cmp	r1, #29
 800e684:	d82c      	bhi.n	800e6e0 <__sflush_r+0xb8>
 800e686:	4a2a      	ldr	r2, [pc, #168]	; (800e730 <__sflush_r+0x108>)
 800e688:	40ca      	lsrs	r2, r1
 800e68a:	07d6      	lsls	r6, r2, #31
 800e68c:	d528      	bpl.n	800e6e0 <__sflush_r+0xb8>
 800e68e:	2200      	movs	r2, #0
 800e690:	6062      	str	r2, [r4, #4]
 800e692:	04d9      	lsls	r1, r3, #19
 800e694:	6922      	ldr	r2, [r4, #16]
 800e696:	6022      	str	r2, [r4, #0]
 800e698:	d504      	bpl.n	800e6a4 <__sflush_r+0x7c>
 800e69a:	1c42      	adds	r2, r0, #1
 800e69c:	d101      	bne.n	800e6a2 <__sflush_r+0x7a>
 800e69e:	682b      	ldr	r3, [r5, #0]
 800e6a0:	b903      	cbnz	r3, 800e6a4 <__sflush_r+0x7c>
 800e6a2:	6560      	str	r0, [r4, #84]	; 0x54
 800e6a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6a6:	602f      	str	r7, [r5, #0]
 800e6a8:	2900      	cmp	r1, #0
 800e6aa:	d0ca      	beq.n	800e642 <__sflush_r+0x1a>
 800e6ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6b0:	4299      	cmp	r1, r3
 800e6b2:	d002      	beq.n	800e6ba <__sflush_r+0x92>
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	f000 fd71 	bl	800f19c <_free_r>
 800e6ba:	2000      	movs	r0, #0
 800e6bc:	6360      	str	r0, [r4, #52]	; 0x34
 800e6be:	e7c1      	b.n	800e644 <__sflush_r+0x1c>
 800e6c0:	6a21      	ldr	r1, [r4, #32]
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	47b0      	blx	r6
 800e6c8:	1c41      	adds	r1, r0, #1
 800e6ca:	d1c7      	bne.n	800e65c <__sflush_r+0x34>
 800e6cc:	682b      	ldr	r3, [r5, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d0c4      	beq.n	800e65c <__sflush_r+0x34>
 800e6d2:	2b1d      	cmp	r3, #29
 800e6d4:	d001      	beq.n	800e6da <__sflush_r+0xb2>
 800e6d6:	2b16      	cmp	r3, #22
 800e6d8:	d101      	bne.n	800e6de <__sflush_r+0xb6>
 800e6da:	602f      	str	r7, [r5, #0]
 800e6dc:	e7b1      	b.n	800e642 <__sflush_r+0x1a>
 800e6de:	89a3      	ldrh	r3, [r4, #12]
 800e6e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6e4:	81a3      	strh	r3, [r4, #12]
 800e6e6:	e7ad      	b.n	800e644 <__sflush_r+0x1c>
 800e6e8:	690f      	ldr	r7, [r1, #16]
 800e6ea:	2f00      	cmp	r7, #0
 800e6ec:	d0a9      	beq.n	800e642 <__sflush_r+0x1a>
 800e6ee:	0793      	lsls	r3, r2, #30
 800e6f0:	680e      	ldr	r6, [r1, #0]
 800e6f2:	bf08      	it	eq
 800e6f4:	694b      	ldreq	r3, [r1, #20]
 800e6f6:	600f      	str	r7, [r1, #0]
 800e6f8:	bf18      	it	ne
 800e6fa:	2300      	movne	r3, #0
 800e6fc:	eba6 0807 	sub.w	r8, r6, r7
 800e700:	608b      	str	r3, [r1, #8]
 800e702:	f1b8 0f00 	cmp.w	r8, #0
 800e706:	dd9c      	ble.n	800e642 <__sflush_r+0x1a>
 800e708:	6a21      	ldr	r1, [r4, #32]
 800e70a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e70c:	4643      	mov	r3, r8
 800e70e:	463a      	mov	r2, r7
 800e710:	4628      	mov	r0, r5
 800e712:	47b0      	blx	r6
 800e714:	2800      	cmp	r0, #0
 800e716:	dc06      	bgt.n	800e726 <__sflush_r+0xfe>
 800e718:	89a3      	ldrh	r3, [r4, #12]
 800e71a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e71e:	81a3      	strh	r3, [r4, #12]
 800e720:	f04f 30ff 	mov.w	r0, #4294967295
 800e724:	e78e      	b.n	800e644 <__sflush_r+0x1c>
 800e726:	4407      	add	r7, r0
 800e728:	eba8 0800 	sub.w	r8, r8, r0
 800e72c:	e7e9      	b.n	800e702 <__sflush_r+0xda>
 800e72e:	bf00      	nop
 800e730:	20400001 	.word	0x20400001

0800e734 <_fflush_r>:
 800e734:	b538      	push	{r3, r4, r5, lr}
 800e736:	690b      	ldr	r3, [r1, #16]
 800e738:	4605      	mov	r5, r0
 800e73a:	460c      	mov	r4, r1
 800e73c:	b913      	cbnz	r3, 800e744 <_fflush_r+0x10>
 800e73e:	2500      	movs	r5, #0
 800e740:	4628      	mov	r0, r5
 800e742:	bd38      	pop	{r3, r4, r5, pc}
 800e744:	b118      	cbz	r0, 800e74e <_fflush_r+0x1a>
 800e746:	6983      	ldr	r3, [r0, #24]
 800e748:	b90b      	cbnz	r3, 800e74e <_fflush_r+0x1a>
 800e74a:	f000 f887 	bl	800e85c <__sinit>
 800e74e:	4b14      	ldr	r3, [pc, #80]	; (800e7a0 <_fflush_r+0x6c>)
 800e750:	429c      	cmp	r4, r3
 800e752:	d11b      	bne.n	800e78c <_fflush_r+0x58>
 800e754:	686c      	ldr	r4, [r5, #4]
 800e756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d0ef      	beq.n	800e73e <_fflush_r+0xa>
 800e75e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e760:	07d0      	lsls	r0, r2, #31
 800e762:	d404      	bmi.n	800e76e <_fflush_r+0x3a>
 800e764:	0599      	lsls	r1, r3, #22
 800e766:	d402      	bmi.n	800e76e <_fflush_r+0x3a>
 800e768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e76a:	f000 f91a 	bl	800e9a2 <__retarget_lock_acquire_recursive>
 800e76e:	4628      	mov	r0, r5
 800e770:	4621      	mov	r1, r4
 800e772:	f7ff ff59 	bl	800e628 <__sflush_r>
 800e776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e778:	07da      	lsls	r2, r3, #31
 800e77a:	4605      	mov	r5, r0
 800e77c:	d4e0      	bmi.n	800e740 <_fflush_r+0xc>
 800e77e:	89a3      	ldrh	r3, [r4, #12]
 800e780:	059b      	lsls	r3, r3, #22
 800e782:	d4dd      	bmi.n	800e740 <_fflush_r+0xc>
 800e784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e786:	f000 f90d 	bl	800e9a4 <__retarget_lock_release_recursive>
 800e78a:	e7d9      	b.n	800e740 <_fflush_r+0xc>
 800e78c:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <_fflush_r+0x70>)
 800e78e:	429c      	cmp	r4, r3
 800e790:	d101      	bne.n	800e796 <_fflush_r+0x62>
 800e792:	68ac      	ldr	r4, [r5, #8]
 800e794:	e7df      	b.n	800e756 <_fflush_r+0x22>
 800e796:	4b04      	ldr	r3, [pc, #16]	; (800e7a8 <_fflush_r+0x74>)
 800e798:	429c      	cmp	r4, r3
 800e79a:	bf08      	it	eq
 800e79c:	68ec      	ldreq	r4, [r5, #12]
 800e79e:	e7da      	b.n	800e756 <_fflush_r+0x22>
 800e7a0:	080125e8 	.word	0x080125e8
 800e7a4:	08012608 	.word	0x08012608
 800e7a8:	080125c8 	.word	0x080125c8

0800e7ac <std>:
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	b510      	push	{r4, lr}
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	e9c0 3300 	strd	r3, r3, [r0]
 800e7b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7ba:	6083      	str	r3, [r0, #8]
 800e7bc:	8181      	strh	r1, [r0, #12]
 800e7be:	6643      	str	r3, [r0, #100]	; 0x64
 800e7c0:	81c2      	strh	r2, [r0, #14]
 800e7c2:	6183      	str	r3, [r0, #24]
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	2208      	movs	r2, #8
 800e7c8:	305c      	adds	r0, #92	; 0x5c
 800e7ca:	f7fe faf5 	bl	800cdb8 <memset>
 800e7ce:	4b05      	ldr	r3, [pc, #20]	; (800e7e4 <std+0x38>)
 800e7d0:	6263      	str	r3, [r4, #36]	; 0x24
 800e7d2:	4b05      	ldr	r3, [pc, #20]	; (800e7e8 <std+0x3c>)
 800e7d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7d6:	4b05      	ldr	r3, [pc, #20]	; (800e7ec <std+0x40>)
 800e7d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7da:	4b05      	ldr	r3, [pc, #20]	; (800e7f0 <std+0x44>)
 800e7dc:	6224      	str	r4, [r4, #32]
 800e7de:	6323      	str	r3, [r4, #48]	; 0x30
 800e7e0:	bd10      	pop	{r4, pc}
 800e7e2:	bf00      	nop
 800e7e4:	0800f5c5 	.word	0x0800f5c5
 800e7e8:	0800f5e7 	.word	0x0800f5e7
 800e7ec:	0800f61f 	.word	0x0800f61f
 800e7f0:	0800f643 	.word	0x0800f643

0800e7f4 <_cleanup_r>:
 800e7f4:	4901      	ldr	r1, [pc, #4]	; (800e7fc <_cleanup_r+0x8>)
 800e7f6:	f000 b8af 	b.w	800e958 <_fwalk_reent>
 800e7fa:	bf00      	nop
 800e7fc:	0800e735 	.word	0x0800e735

0800e800 <__sfmoreglue>:
 800e800:	b570      	push	{r4, r5, r6, lr}
 800e802:	1e4a      	subs	r2, r1, #1
 800e804:	2568      	movs	r5, #104	; 0x68
 800e806:	4355      	muls	r5, r2
 800e808:	460e      	mov	r6, r1
 800e80a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e80e:	f000 fd15 	bl	800f23c <_malloc_r>
 800e812:	4604      	mov	r4, r0
 800e814:	b140      	cbz	r0, 800e828 <__sfmoreglue+0x28>
 800e816:	2100      	movs	r1, #0
 800e818:	e9c0 1600 	strd	r1, r6, [r0]
 800e81c:	300c      	adds	r0, #12
 800e81e:	60a0      	str	r0, [r4, #8]
 800e820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e824:	f7fe fac8 	bl	800cdb8 <memset>
 800e828:	4620      	mov	r0, r4
 800e82a:	bd70      	pop	{r4, r5, r6, pc}

0800e82c <__sfp_lock_acquire>:
 800e82c:	4801      	ldr	r0, [pc, #4]	; (800e834 <__sfp_lock_acquire+0x8>)
 800e82e:	f000 b8b8 	b.w	800e9a2 <__retarget_lock_acquire_recursive>
 800e832:	bf00      	nop
 800e834:	20022118 	.word	0x20022118

0800e838 <__sfp_lock_release>:
 800e838:	4801      	ldr	r0, [pc, #4]	; (800e840 <__sfp_lock_release+0x8>)
 800e83a:	f000 b8b3 	b.w	800e9a4 <__retarget_lock_release_recursive>
 800e83e:	bf00      	nop
 800e840:	20022118 	.word	0x20022118

0800e844 <__sinit_lock_acquire>:
 800e844:	4801      	ldr	r0, [pc, #4]	; (800e84c <__sinit_lock_acquire+0x8>)
 800e846:	f000 b8ac 	b.w	800e9a2 <__retarget_lock_acquire_recursive>
 800e84a:	bf00      	nop
 800e84c:	20022113 	.word	0x20022113

0800e850 <__sinit_lock_release>:
 800e850:	4801      	ldr	r0, [pc, #4]	; (800e858 <__sinit_lock_release+0x8>)
 800e852:	f000 b8a7 	b.w	800e9a4 <__retarget_lock_release_recursive>
 800e856:	bf00      	nop
 800e858:	20022113 	.word	0x20022113

0800e85c <__sinit>:
 800e85c:	b510      	push	{r4, lr}
 800e85e:	4604      	mov	r4, r0
 800e860:	f7ff fff0 	bl	800e844 <__sinit_lock_acquire>
 800e864:	69a3      	ldr	r3, [r4, #24]
 800e866:	b11b      	cbz	r3, 800e870 <__sinit+0x14>
 800e868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e86c:	f7ff bff0 	b.w	800e850 <__sinit_lock_release>
 800e870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e874:	6523      	str	r3, [r4, #80]	; 0x50
 800e876:	4b13      	ldr	r3, [pc, #76]	; (800e8c4 <__sinit+0x68>)
 800e878:	4a13      	ldr	r2, [pc, #76]	; (800e8c8 <__sinit+0x6c>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e87e:	42a3      	cmp	r3, r4
 800e880:	bf04      	itt	eq
 800e882:	2301      	moveq	r3, #1
 800e884:	61a3      	streq	r3, [r4, #24]
 800e886:	4620      	mov	r0, r4
 800e888:	f000 f820 	bl	800e8cc <__sfp>
 800e88c:	6060      	str	r0, [r4, #4]
 800e88e:	4620      	mov	r0, r4
 800e890:	f000 f81c 	bl	800e8cc <__sfp>
 800e894:	60a0      	str	r0, [r4, #8]
 800e896:	4620      	mov	r0, r4
 800e898:	f000 f818 	bl	800e8cc <__sfp>
 800e89c:	2200      	movs	r2, #0
 800e89e:	60e0      	str	r0, [r4, #12]
 800e8a0:	2104      	movs	r1, #4
 800e8a2:	6860      	ldr	r0, [r4, #4]
 800e8a4:	f7ff ff82 	bl	800e7ac <std>
 800e8a8:	68a0      	ldr	r0, [r4, #8]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	2109      	movs	r1, #9
 800e8ae:	f7ff ff7d 	bl	800e7ac <std>
 800e8b2:	68e0      	ldr	r0, [r4, #12]
 800e8b4:	2202      	movs	r2, #2
 800e8b6:	2112      	movs	r1, #18
 800e8b8:	f7ff ff78 	bl	800e7ac <std>
 800e8bc:	2301      	movs	r3, #1
 800e8be:	61a3      	str	r3, [r4, #24]
 800e8c0:	e7d2      	b.n	800e868 <__sinit+0xc>
 800e8c2:	bf00      	nop
 800e8c4:	080124fc 	.word	0x080124fc
 800e8c8:	0800e7f5 	.word	0x0800e7f5

0800e8cc <__sfp>:
 800e8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ce:	4607      	mov	r7, r0
 800e8d0:	f7ff ffac 	bl	800e82c <__sfp_lock_acquire>
 800e8d4:	4b1e      	ldr	r3, [pc, #120]	; (800e950 <__sfp+0x84>)
 800e8d6:	681e      	ldr	r6, [r3, #0]
 800e8d8:	69b3      	ldr	r3, [r6, #24]
 800e8da:	b913      	cbnz	r3, 800e8e2 <__sfp+0x16>
 800e8dc:	4630      	mov	r0, r6
 800e8de:	f7ff ffbd 	bl	800e85c <__sinit>
 800e8e2:	3648      	adds	r6, #72	; 0x48
 800e8e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	d503      	bpl.n	800e8f4 <__sfp+0x28>
 800e8ec:	6833      	ldr	r3, [r6, #0]
 800e8ee:	b30b      	cbz	r3, 800e934 <__sfp+0x68>
 800e8f0:	6836      	ldr	r6, [r6, #0]
 800e8f2:	e7f7      	b.n	800e8e4 <__sfp+0x18>
 800e8f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e8f8:	b9d5      	cbnz	r5, 800e930 <__sfp+0x64>
 800e8fa:	4b16      	ldr	r3, [pc, #88]	; (800e954 <__sfp+0x88>)
 800e8fc:	60e3      	str	r3, [r4, #12]
 800e8fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e902:	6665      	str	r5, [r4, #100]	; 0x64
 800e904:	f000 f84c 	bl	800e9a0 <__retarget_lock_init_recursive>
 800e908:	f7ff ff96 	bl	800e838 <__sfp_lock_release>
 800e90c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e910:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e914:	6025      	str	r5, [r4, #0]
 800e916:	61a5      	str	r5, [r4, #24]
 800e918:	2208      	movs	r2, #8
 800e91a:	4629      	mov	r1, r5
 800e91c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e920:	f7fe fa4a 	bl	800cdb8 <memset>
 800e924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e92c:	4620      	mov	r0, r4
 800e92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e930:	3468      	adds	r4, #104	; 0x68
 800e932:	e7d9      	b.n	800e8e8 <__sfp+0x1c>
 800e934:	2104      	movs	r1, #4
 800e936:	4638      	mov	r0, r7
 800e938:	f7ff ff62 	bl	800e800 <__sfmoreglue>
 800e93c:	4604      	mov	r4, r0
 800e93e:	6030      	str	r0, [r6, #0]
 800e940:	2800      	cmp	r0, #0
 800e942:	d1d5      	bne.n	800e8f0 <__sfp+0x24>
 800e944:	f7ff ff78 	bl	800e838 <__sfp_lock_release>
 800e948:	230c      	movs	r3, #12
 800e94a:	603b      	str	r3, [r7, #0]
 800e94c:	e7ee      	b.n	800e92c <__sfp+0x60>
 800e94e:	bf00      	nop
 800e950:	080124fc 	.word	0x080124fc
 800e954:	ffff0001 	.word	0xffff0001

0800e958 <_fwalk_reent>:
 800e958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e95c:	4606      	mov	r6, r0
 800e95e:	4688      	mov	r8, r1
 800e960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e964:	2700      	movs	r7, #0
 800e966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e96a:	f1b9 0901 	subs.w	r9, r9, #1
 800e96e:	d505      	bpl.n	800e97c <_fwalk_reent+0x24>
 800e970:	6824      	ldr	r4, [r4, #0]
 800e972:	2c00      	cmp	r4, #0
 800e974:	d1f7      	bne.n	800e966 <_fwalk_reent+0xe>
 800e976:	4638      	mov	r0, r7
 800e978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e97c:	89ab      	ldrh	r3, [r5, #12]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d907      	bls.n	800e992 <_fwalk_reent+0x3a>
 800e982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e986:	3301      	adds	r3, #1
 800e988:	d003      	beq.n	800e992 <_fwalk_reent+0x3a>
 800e98a:	4629      	mov	r1, r5
 800e98c:	4630      	mov	r0, r6
 800e98e:	47c0      	blx	r8
 800e990:	4307      	orrs	r7, r0
 800e992:	3568      	adds	r5, #104	; 0x68
 800e994:	e7e9      	b.n	800e96a <_fwalk_reent+0x12>
	...

0800e998 <_localeconv_r>:
 800e998:	4800      	ldr	r0, [pc, #0]	; (800e99c <_localeconv_r+0x4>)
 800e99a:	4770      	bx	lr
 800e99c:	200001bc 	.word	0x200001bc

0800e9a0 <__retarget_lock_init_recursive>:
 800e9a0:	4770      	bx	lr

0800e9a2 <__retarget_lock_acquire_recursive>:
 800e9a2:	4770      	bx	lr

0800e9a4 <__retarget_lock_release_recursive>:
 800e9a4:	4770      	bx	lr

0800e9a6 <__swhatbuf_r>:
 800e9a6:	b570      	push	{r4, r5, r6, lr}
 800e9a8:	460e      	mov	r6, r1
 800e9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ae:	2900      	cmp	r1, #0
 800e9b0:	b096      	sub	sp, #88	; 0x58
 800e9b2:	4614      	mov	r4, r2
 800e9b4:	461d      	mov	r5, r3
 800e9b6:	da07      	bge.n	800e9c8 <__swhatbuf_r+0x22>
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	602b      	str	r3, [r5, #0]
 800e9bc:	89b3      	ldrh	r3, [r6, #12]
 800e9be:	061a      	lsls	r2, r3, #24
 800e9c0:	d410      	bmi.n	800e9e4 <__swhatbuf_r+0x3e>
 800e9c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9c6:	e00e      	b.n	800e9e6 <__swhatbuf_r+0x40>
 800e9c8:	466a      	mov	r2, sp
 800e9ca:	f000 fe91 	bl	800f6f0 <_fstat_r>
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	dbf2      	blt.n	800e9b8 <__swhatbuf_r+0x12>
 800e9d2:	9a01      	ldr	r2, [sp, #4]
 800e9d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e9d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e9dc:	425a      	negs	r2, r3
 800e9de:	415a      	adcs	r2, r3
 800e9e0:	602a      	str	r2, [r5, #0]
 800e9e2:	e7ee      	b.n	800e9c2 <__swhatbuf_r+0x1c>
 800e9e4:	2340      	movs	r3, #64	; 0x40
 800e9e6:	2000      	movs	r0, #0
 800e9e8:	6023      	str	r3, [r4, #0]
 800e9ea:	b016      	add	sp, #88	; 0x58
 800e9ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e9f0 <__smakebuf_r>:
 800e9f0:	898b      	ldrh	r3, [r1, #12]
 800e9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9f4:	079d      	lsls	r5, r3, #30
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	460c      	mov	r4, r1
 800e9fa:	d507      	bpl.n	800ea0c <__smakebuf_r+0x1c>
 800e9fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea00:	6023      	str	r3, [r4, #0]
 800ea02:	6123      	str	r3, [r4, #16]
 800ea04:	2301      	movs	r3, #1
 800ea06:	6163      	str	r3, [r4, #20]
 800ea08:	b002      	add	sp, #8
 800ea0a:	bd70      	pop	{r4, r5, r6, pc}
 800ea0c:	ab01      	add	r3, sp, #4
 800ea0e:	466a      	mov	r2, sp
 800ea10:	f7ff ffc9 	bl	800e9a6 <__swhatbuf_r>
 800ea14:	9900      	ldr	r1, [sp, #0]
 800ea16:	4605      	mov	r5, r0
 800ea18:	4630      	mov	r0, r6
 800ea1a:	f000 fc0f 	bl	800f23c <_malloc_r>
 800ea1e:	b948      	cbnz	r0, 800ea34 <__smakebuf_r+0x44>
 800ea20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea24:	059a      	lsls	r2, r3, #22
 800ea26:	d4ef      	bmi.n	800ea08 <__smakebuf_r+0x18>
 800ea28:	f023 0303 	bic.w	r3, r3, #3
 800ea2c:	f043 0302 	orr.w	r3, r3, #2
 800ea30:	81a3      	strh	r3, [r4, #12]
 800ea32:	e7e3      	b.n	800e9fc <__smakebuf_r+0xc>
 800ea34:	4b0d      	ldr	r3, [pc, #52]	; (800ea6c <__smakebuf_r+0x7c>)
 800ea36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ea38:	89a3      	ldrh	r3, [r4, #12]
 800ea3a:	6020      	str	r0, [r4, #0]
 800ea3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea40:	81a3      	strh	r3, [r4, #12]
 800ea42:	9b00      	ldr	r3, [sp, #0]
 800ea44:	6163      	str	r3, [r4, #20]
 800ea46:	9b01      	ldr	r3, [sp, #4]
 800ea48:	6120      	str	r0, [r4, #16]
 800ea4a:	b15b      	cbz	r3, 800ea64 <__smakebuf_r+0x74>
 800ea4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea50:	4630      	mov	r0, r6
 800ea52:	f000 fe5f 	bl	800f714 <_isatty_r>
 800ea56:	b128      	cbz	r0, 800ea64 <__smakebuf_r+0x74>
 800ea58:	89a3      	ldrh	r3, [r4, #12]
 800ea5a:	f023 0303 	bic.w	r3, r3, #3
 800ea5e:	f043 0301 	orr.w	r3, r3, #1
 800ea62:	81a3      	strh	r3, [r4, #12]
 800ea64:	89a0      	ldrh	r0, [r4, #12]
 800ea66:	4305      	orrs	r5, r0
 800ea68:	81a5      	strh	r5, [r4, #12]
 800ea6a:	e7cd      	b.n	800ea08 <__smakebuf_r+0x18>
 800ea6c:	0800e7f5 	.word	0x0800e7f5

0800ea70 <malloc>:
 800ea70:	4b02      	ldr	r3, [pc, #8]	; (800ea7c <malloc+0xc>)
 800ea72:	4601      	mov	r1, r0
 800ea74:	6818      	ldr	r0, [r3, #0]
 800ea76:	f000 bbe1 	b.w	800f23c <_malloc_r>
 800ea7a:	bf00      	nop
 800ea7c:	20000068 	.word	0x20000068

0800ea80 <_Balloc>:
 800ea80:	b570      	push	{r4, r5, r6, lr}
 800ea82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea84:	4604      	mov	r4, r0
 800ea86:	460d      	mov	r5, r1
 800ea88:	b976      	cbnz	r6, 800eaa8 <_Balloc+0x28>
 800ea8a:	2010      	movs	r0, #16
 800ea8c:	f7ff fff0 	bl	800ea70 <malloc>
 800ea90:	4602      	mov	r2, r0
 800ea92:	6260      	str	r0, [r4, #36]	; 0x24
 800ea94:	b920      	cbnz	r0, 800eaa0 <_Balloc+0x20>
 800ea96:	4b18      	ldr	r3, [pc, #96]	; (800eaf8 <_Balloc+0x78>)
 800ea98:	4818      	ldr	r0, [pc, #96]	; (800eafc <_Balloc+0x7c>)
 800ea9a:	2166      	movs	r1, #102	; 0x66
 800ea9c:	f000 fde8 	bl	800f670 <__assert_func>
 800eaa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaa4:	6006      	str	r6, [r0, #0]
 800eaa6:	60c6      	str	r6, [r0, #12]
 800eaa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eaaa:	68f3      	ldr	r3, [r6, #12]
 800eaac:	b183      	cbz	r3, 800ead0 <_Balloc+0x50>
 800eaae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eab6:	b9b8      	cbnz	r0, 800eae8 <_Balloc+0x68>
 800eab8:	2101      	movs	r1, #1
 800eaba:	fa01 f605 	lsl.w	r6, r1, r5
 800eabe:	1d72      	adds	r2, r6, #5
 800eac0:	0092      	lsls	r2, r2, #2
 800eac2:	4620      	mov	r0, r4
 800eac4:	f000 fb5a 	bl	800f17c <_calloc_r>
 800eac8:	b160      	cbz	r0, 800eae4 <_Balloc+0x64>
 800eaca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eace:	e00e      	b.n	800eaee <_Balloc+0x6e>
 800ead0:	2221      	movs	r2, #33	; 0x21
 800ead2:	2104      	movs	r1, #4
 800ead4:	4620      	mov	r0, r4
 800ead6:	f000 fb51 	bl	800f17c <_calloc_r>
 800eada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eadc:	60f0      	str	r0, [r6, #12]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1e4      	bne.n	800eaae <_Balloc+0x2e>
 800eae4:	2000      	movs	r0, #0
 800eae6:	bd70      	pop	{r4, r5, r6, pc}
 800eae8:	6802      	ldr	r2, [r0, #0]
 800eaea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eaee:	2300      	movs	r3, #0
 800eaf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eaf4:	e7f7      	b.n	800eae6 <_Balloc+0x66>
 800eaf6:	bf00      	nop
 800eaf8:	08012541 	.word	0x08012541
 800eafc:	08012628 	.word	0x08012628

0800eb00 <_Bfree>:
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb04:	4605      	mov	r5, r0
 800eb06:	460c      	mov	r4, r1
 800eb08:	b976      	cbnz	r6, 800eb28 <_Bfree+0x28>
 800eb0a:	2010      	movs	r0, #16
 800eb0c:	f7ff ffb0 	bl	800ea70 <malloc>
 800eb10:	4602      	mov	r2, r0
 800eb12:	6268      	str	r0, [r5, #36]	; 0x24
 800eb14:	b920      	cbnz	r0, 800eb20 <_Bfree+0x20>
 800eb16:	4b09      	ldr	r3, [pc, #36]	; (800eb3c <_Bfree+0x3c>)
 800eb18:	4809      	ldr	r0, [pc, #36]	; (800eb40 <_Bfree+0x40>)
 800eb1a:	218a      	movs	r1, #138	; 0x8a
 800eb1c:	f000 fda8 	bl	800f670 <__assert_func>
 800eb20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb24:	6006      	str	r6, [r0, #0]
 800eb26:	60c6      	str	r6, [r0, #12]
 800eb28:	b13c      	cbz	r4, 800eb3a <_Bfree+0x3a>
 800eb2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb2c:	6862      	ldr	r2, [r4, #4]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb34:	6021      	str	r1, [r4, #0]
 800eb36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb3a:	bd70      	pop	{r4, r5, r6, pc}
 800eb3c:	08012541 	.word	0x08012541
 800eb40:	08012628 	.word	0x08012628

0800eb44 <__multadd>:
 800eb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb48:	690e      	ldr	r6, [r1, #16]
 800eb4a:	4607      	mov	r7, r0
 800eb4c:	4698      	mov	r8, r3
 800eb4e:	460c      	mov	r4, r1
 800eb50:	f101 0014 	add.w	r0, r1, #20
 800eb54:	2300      	movs	r3, #0
 800eb56:	6805      	ldr	r5, [r0, #0]
 800eb58:	b2a9      	uxth	r1, r5
 800eb5a:	fb02 8101 	mla	r1, r2, r1, r8
 800eb5e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eb62:	0c2d      	lsrs	r5, r5, #16
 800eb64:	fb02 c505 	mla	r5, r2, r5, ip
 800eb68:	b289      	uxth	r1, r1
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800eb70:	429e      	cmp	r6, r3
 800eb72:	f840 1b04 	str.w	r1, [r0], #4
 800eb76:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800eb7a:	dcec      	bgt.n	800eb56 <__multadd+0x12>
 800eb7c:	f1b8 0f00 	cmp.w	r8, #0
 800eb80:	d022      	beq.n	800ebc8 <__multadd+0x84>
 800eb82:	68a3      	ldr	r3, [r4, #8]
 800eb84:	42b3      	cmp	r3, r6
 800eb86:	dc19      	bgt.n	800ebbc <__multadd+0x78>
 800eb88:	6861      	ldr	r1, [r4, #4]
 800eb8a:	4638      	mov	r0, r7
 800eb8c:	3101      	adds	r1, #1
 800eb8e:	f7ff ff77 	bl	800ea80 <_Balloc>
 800eb92:	4605      	mov	r5, r0
 800eb94:	b928      	cbnz	r0, 800eba2 <__multadd+0x5e>
 800eb96:	4602      	mov	r2, r0
 800eb98:	4b0d      	ldr	r3, [pc, #52]	; (800ebd0 <__multadd+0x8c>)
 800eb9a:	480e      	ldr	r0, [pc, #56]	; (800ebd4 <__multadd+0x90>)
 800eb9c:	21b5      	movs	r1, #181	; 0xb5
 800eb9e:	f000 fd67 	bl	800f670 <__assert_func>
 800eba2:	6922      	ldr	r2, [r4, #16]
 800eba4:	3202      	adds	r2, #2
 800eba6:	f104 010c 	add.w	r1, r4, #12
 800ebaa:	0092      	lsls	r2, r2, #2
 800ebac:	300c      	adds	r0, #12
 800ebae:	f7fe f8f5 	bl	800cd9c <memcpy>
 800ebb2:	4621      	mov	r1, r4
 800ebb4:	4638      	mov	r0, r7
 800ebb6:	f7ff ffa3 	bl	800eb00 <_Bfree>
 800ebba:	462c      	mov	r4, r5
 800ebbc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ebc0:	3601      	adds	r6, #1
 800ebc2:	f8c3 8014 	str.w	r8, [r3, #20]
 800ebc6:	6126      	str	r6, [r4, #16]
 800ebc8:	4620      	mov	r0, r4
 800ebca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebce:	bf00      	nop
 800ebd0:	080125b7 	.word	0x080125b7
 800ebd4:	08012628 	.word	0x08012628

0800ebd8 <__hi0bits>:
 800ebd8:	0c03      	lsrs	r3, r0, #16
 800ebda:	041b      	lsls	r3, r3, #16
 800ebdc:	b9d3      	cbnz	r3, 800ec14 <__hi0bits+0x3c>
 800ebde:	0400      	lsls	r0, r0, #16
 800ebe0:	2310      	movs	r3, #16
 800ebe2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ebe6:	bf04      	itt	eq
 800ebe8:	0200      	lsleq	r0, r0, #8
 800ebea:	3308      	addeq	r3, #8
 800ebec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ebf0:	bf04      	itt	eq
 800ebf2:	0100      	lsleq	r0, r0, #4
 800ebf4:	3304      	addeq	r3, #4
 800ebf6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ebfa:	bf04      	itt	eq
 800ebfc:	0080      	lsleq	r0, r0, #2
 800ebfe:	3302      	addeq	r3, #2
 800ec00:	2800      	cmp	r0, #0
 800ec02:	db05      	blt.n	800ec10 <__hi0bits+0x38>
 800ec04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ec08:	f103 0301 	add.w	r3, r3, #1
 800ec0c:	bf08      	it	eq
 800ec0e:	2320      	moveq	r3, #32
 800ec10:	4618      	mov	r0, r3
 800ec12:	4770      	bx	lr
 800ec14:	2300      	movs	r3, #0
 800ec16:	e7e4      	b.n	800ebe2 <__hi0bits+0xa>

0800ec18 <__lo0bits>:
 800ec18:	6803      	ldr	r3, [r0, #0]
 800ec1a:	f013 0207 	ands.w	r2, r3, #7
 800ec1e:	4601      	mov	r1, r0
 800ec20:	d00b      	beq.n	800ec3a <__lo0bits+0x22>
 800ec22:	07da      	lsls	r2, r3, #31
 800ec24:	d424      	bmi.n	800ec70 <__lo0bits+0x58>
 800ec26:	0798      	lsls	r0, r3, #30
 800ec28:	bf49      	itett	mi
 800ec2a:	085b      	lsrmi	r3, r3, #1
 800ec2c:	089b      	lsrpl	r3, r3, #2
 800ec2e:	2001      	movmi	r0, #1
 800ec30:	600b      	strmi	r3, [r1, #0]
 800ec32:	bf5c      	itt	pl
 800ec34:	600b      	strpl	r3, [r1, #0]
 800ec36:	2002      	movpl	r0, #2
 800ec38:	4770      	bx	lr
 800ec3a:	b298      	uxth	r0, r3
 800ec3c:	b9b0      	cbnz	r0, 800ec6c <__lo0bits+0x54>
 800ec3e:	0c1b      	lsrs	r3, r3, #16
 800ec40:	2010      	movs	r0, #16
 800ec42:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ec46:	bf04      	itt	eq
 800ec48:	0a1b      	lsreq	r3, r3, #8
 800ec4a:	3008      	addeq	r0, #8
 800ec4c:	071a      	lsls	r2, r3, #28
 800ec4e:	bf04      	itt	eq
 800ec50:	091b      	lsreq	r3, r3, #4
 800ec52:	3004      	addeq	r0, #4
 800ec54:	079a      	lsls	r2, r3, #30
 800ec56:	bf04      	itt	eq
 800ec58:	089b      	lsreq	r3, r3, #2
 800ec5a:	3002      	addeq	r0, #2
 800ec5c:	07da      	lsls	r2, r3, #31
 800ec5e:	d403      	bmi.n	800ec68 <__lo0bits+0x50>
 800ec60:	085b      	lsrs	r3, r3, #1
 800ec62:	f100 0001 	add.w	r0, r0, #1
 800ec66:	d005      	beq.n	800ec74 <__lo0bits+0x5c>
 800ec68:	600b      	str	r3, [r1, #0]
 800ec6a:	4770      	bx	lr
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	e7e8      	b.n	800ec42 <__lo0bits+0x2a>
 800ec70:	2000      	movs	r0, #0
 800ec72:	4770      	bx	lr
 800ec74:	2020      	movs	r0, #32
 800ec76:	4770      	bx	lr

0800ec78 <__i2b>:
 800ec78:	b510      	push	{r4, lr}
 800ec7a:	460c      	mov	r4, r1
 800ec7c:	2101      	movs	r1, #1
 800ec7e:	f7ff feff 	bl	800ea80 <_Balloc>
 800ec82:	4602      	mov	r2, r0
 800ec84:	b928      	cbnz	r0, 800ec92 <__i2b+0x1a>
 800ec86:	4b05      	ldr	r3, [pc, #20]	; (800ec9c <__i2b+0x24>)
 800ec88:	4805      	ldr	r0, [pc, #20]	; (800eca0 <__i2b+0x28>)
 800ec8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ec8e:	f000 fcef 	bl	800f670 <__assert_func>
 800ec92:	2301      	movs	r3, #1
 800ec94:	6144      	str	r4, [r0, #20]
 800ec96:	6103      	str	r3, [r0, #16]
 800ec98:	bd10      	pop	{r4, pc}
 800ec9a:	bf00      	nop
 800ec9c:	080125b7 	.word	0x080125b7
 800eca0:	08012628 	.word	0x08012628

0800eca4 <__multiply>:
 800eca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca8:	4614      	mov	r4, r2
 800ecaa:	690a      	ldr	r2, [r1, #16]
 800ecac:	6923      	ldr	r3, [r4, #16]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	bfb8      	it	lt
 800ecb2:	460b      	movlt	r3, r1
 800ecb4:	460d      	mov	r5, r1
 800ecb6:	bfbc      	itt	lt
 800ecb8:	4625      	movlt	r5, r4
 800ecba:	461c      	movlt	r4, r3
 800ecbc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ecc0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ecc4:	68ab      	ldr	r3, [r5, #8]
 800ecc6:	6869      	ldr	r1, [r5, #4]
 800ecc8:	eb0a 0709 	add.w	r7, sl, r9
 800eccc:	42bb      	cmp	r3, r7
 800ecce:	b085      	sub	sp, #20
 800ecd0:	bfb8      	it	lt
 800ecd2:	3101      	addlt	r1, #1
 800ecd4:	f7ff fed4 	bl	800ea80 <_Balloc>
 800ecd8:	b930      	cbnz	r0, 800ece8 <__multiply+0x44>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	4b42      	ldr	r3, [pc, #264]	; (800ede8 <__multiply+0x144>)
 800ecde:	4843      	ldr	r0, [pc, #268]	; (800edec <__multiply+0x148>)
 800ece0:	f240 115d 	movw	r1, #349	; 0x15d
 800ece4:	f000 fcc4 	bl	800f670 <__assert_func>
 800ece8:	f100 0614 	add.w	r6, r0, #20
 800ecec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ecf0:	4633      	mov	r3, r6
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	4543      	cmp	r3, r8
 800ecf6:	d31e      	bcc.n	800ed36 <__multiply+0x92>
 800ecf8:	f105 0c14 	add.w	ip, r5, #20
 800ecfc:	f104 0314 	add.w	r3, r4, #20
 800ed00:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ed04:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ed08:	9202      	str	r2, [sp, #8]
 800ed0a:	ebac 0205 	sub.w	r2, ip, r5
 800ed0e:	3a15      	subs	r2, #21
 800ed10:	f022 0203 	bic.w	r2, r2, #3
 800ed14:	3204      	adds	r2, #4
 800ed16:	f105 0115 	add.w	r1, r5, #21
 800ed1a:	458c      	cmp	ip, r1
 800ed1c:	bf38      	it	cc
 800ed1e:	2204      	movcc	r2, #4
 800ed20:	9201      	str	r2, [sp, #4]
 800ed22:	9a02      	ldr	r2, [sp, #8]
 800ed24:	9303      	str	r3, [sp, #12]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d808      	bhi.n	800ed3c <__multiply+0x98>
 800ed2a:	2f00      	cmp	r7, #0
 800ed2c:	dc55      	bgt.n	800edda <__multiply+0x136>
 800ed2e:	6107      	str	r7, [r0, #16]
 800ed30:	b005      	add	sp, #20
 800ed32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed36:	f843 2b04 	str.w	r2, [r3], #4
 800ed3a:	e7db      	b.n	800ecf4 <__multiply+0x50>
 800ed3c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed40:	f1ba 0f00 	cmp.w	sl, #0
 800ed44:	d020      	beq.n	800ed88 <__multiply+0xe4>
 800ed46:	f105 0e14 	add.w	lr, r5, #20
 800ed4a:	46b1      	mov	r9, r6
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ed52:	f8d9 b000 	ldr.w	fp, [r9]
 800ed56:	b2a1      	uxth	r1, r4
 800ed58:	fa1f fb8b 	uxth.w	fp, fp
 800ed5c:	fb0a b101 	mla	r1, sl, r1, fp
 800ed60:	4411      	add	r1, r2
 800ed62:	f8d9 2000 	ldr.w	r2, [r9]
 800ed66:	0c24      	lsrs	r4, r4, #16
 800ed68:	0c12      	lsrs	r2, r2, #16
 800ed6a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ed6e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ed72:	b289      	uxth	r1, r1
 800ed74:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ed78:	45f4      	cmp	ip, lr
 800ed7a:	f849 1b04 	str.w	r1, [r9], #4
 800ed7e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ed82:	d8e4      	bhi.n	800ed4e <__multiply+0xaa>
 800ed84:	9901      	ldr	r1, [sp, #4]
 800ed86:	5072      	str	r2, [r6, r1]
 800ed88:	9a03      	ldr	r2, [sp, #12]
 800ed8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed8e:	3304      	adds	r3, #4
 800ed90:	f1b9 0f00 	cmp.w	r9, #0
 800ed94:	d01f      	beq.n	800edd6 <__multiply+0x132>
 800ed96:	6834      	ldr	r4, [r6, #0]
 800ed98:	f105 0114 	add.w	r1, r5, #20
 800ed9c:	46b6      	mov	lr, r6
 800ed9e:	f04f 0a00 	mov.w	sl, #0
 800eda2:	880a      	ldrh	r2, [r1, #0]
 800eda4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800eda8:	fb09 b202 	mla	r2, r9, r2, fp
 800edac:	4492      	add	sl, r2
 800edae:	b2a4      	uxth	r4, r4
 800edb0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800edb4:	f84e 4b04 	str.w	r4, [lr], #4
 800edb8:	f851 4b04 	ldr.w	r4, [r1], #4
 800edbc:	f8be 2000 	ldrh.w	r2, [lr]
 800edc0:	0c24      	lsrs	r4, r4, #16
 800edc2:	fb09 2404 	mla	r4, r9, r4, r2
 800edc6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800edca:	458c      	cmp	ip, r1
 800edcc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800edd0:	d8e7      	bhi.n	800eda2 <__multiply+0xfe>
 800edd2:	9a01      	ldr	r2, [sp, #4]
 800edd4:	50b4      	str	r4, [r6, r2]
 800edd6:	3604      	adds	r6, #4
 800edd8:	e7a3      	b.n	800ed22 <__multiply+0x7e>
 800edda:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1a5      	bne.n	800ed2e <__multiply+0x8a>
 800ede2:	3f01      	subs	r7, #1
 800ede4:	e7a1      	b.n	800ed2a <__multiply+0x86>
 800ede6:	bf00      	nop
 800ede8:	080125b7 	.word	0x080125b7
 800edec:	08012628 	.word	0x08012628

0800edf0 <__pow5mult>:
 800edf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf4:	4615      	mov	r5, r2
 800edf6:	f012 0203 	ands.w	r2, r2, #3
 800edfa:	4606      	mov	r6, r0
 800edfc:	460f      	mov	r7, r1
 800edfe:	d007      	beq.n	800ee10 <__pow5mult+0x20>
 800ee00:	4c25      	ldr	r4, [pc, #148]	; (800ee98 <__pow5mult+0xa8>)
 800ee02:	3a01      	subs	r2, #1
 800ee04:	2300      	movs	r3, #0
 800ee06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee0a:	f7ff fe9b 	bl	800eb44 <__multadd>
 800ee0e:	4607      	mov	r7, r0
 800ee10:	10ad      	asrs	r5, r5, #2
 800ee12:	d03d      	beq.n	800ee90 <__pow5mult+0xa0>
 800ee14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee16:	b97c      	cbnz	r4, 800ee38 <__pow5mult+0x48>
 800ee18:	2010      	movs	r0, #16
 800ee1a:	f7ff fe29 	bl	800ea70 <malloc>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	6270      	str	r0, [r6, #36]	; 0x24
 800ee22:	b928      	cbnz	r0, 800ee30 <__pow5mult+0x40>
 800ee24:	4b1d      	ldr	r3, [pc, #116]	; (800ee9c <__pow5mult+0xac>)
 800ee26:	481e      	ldr	r0, [pc, #120]	; (800eea0 <__pow5mult+0xb0>)
 800ee28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ee2c:	f000 fc20 	bl	800f670 <__assert_func>
 800ee30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee34:	6004      	str	r4, [r0, #0]
 800ee36:	60c4      	str	r4, [r0, #12]
 800ee38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee40:	b94c      	cbnz	r4, 800ee56 <__pow5mult+0x66>
 800ee42:	f240 2171 	movw	r1, #625	; 0x271
 800ee46:	4630      	mov	r0, r6
 800ee48:	f7ff ff16 	bl	800ec78 <__i2b>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee52:	4604      	mov	r4, r0
 800ee54:	6003      	str	r3, [r0, #0]
 800ee56:	f04f 0900 	mov.w	r9, #0
 800ee5a:	07eb      	lsls	r3, r5, #31
 800ee5c:	d50a      	bpl.n	800ee74 <__pow5mult+0x84>
 800ee5e:	4639      	mov	r1, r7
 800ee60:	4622      	mov	r2, r4
 800ee62:	4630      	mov	r0, r6
 800ee64:	f7ff ff1e 	bl	800eca4 <__multiply>
 800ee68:	4639      	mov	r1, r7
 800ee6a:	4680      	mov	r8, r0
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	f7ff fe47 	bl	800eb00 <_Bfree>
 800ee72:	4647      	mov	r7, r8
 800ee74:	106d      	asrs	r5, r5, #1
 800ee76:	d00b      	beq.n	800ee90 <__pow5mult+0xa0>
 800ee78:	6820      	ldr	r0, [r4, #0]
 800ee7a:	b938      	cbnz	r0, 800ee8c <__pow5mult+0x9c>
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	4621      	mov	r1, r4
 800ee80:	4630      	mov	r0, r6
 800ee82:	f7ff ff0f 	bl	800eca4 <__multiply>
 800ee86:	6020      	str	r0, [r4, #0]
 800ee88:	f8c0 9000 	str.w	r9, [r0]
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	e7e4      	b.n	800ee5a <__pow5mult+0x6a>
 800ee90:	4638      	mov	r0, r7
 800ee92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee96:	bf00      	nop
 800ee98:	08012778 	.word	0x08012778
 800ee9c:	08012541 	.word	0x08012541
 800eea0:	08012628 	.word	0x08012628

0800eea4 <__lshift>:
 800eea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eea8:	460c      	mov	r4, r1
 800eeaa:	6849      	ldr	r1, [r1, #4]
 800eeac:	6923      	ldr	r3, [r4, #16]
 800eeae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	4607      	mov	r7, r0
 800eeb6:	4691      	mov	r9, r2
 800eeb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eebc:	f108 0601 	add.w	r6, r8, #1
 800eec0:	42b3      	cmp	r3, r6
 800eec2:	db0b      	blt.n	800eedc <__lshift+0x38>
 800eec4:	4638      	mov	r0, r7
 800eec6:	f7ff fddb 	bl	800ea80 <_Balloc>
 800eeca:	4605      	mov	r5, r0
 800eecc:	b948      	cbnz	r0, 800eee2 <__lshift+0x3e>
 800eece:	4602      	mov	r2, r0
 800eed0:	4b28      	ldr	r3, [pc, #160]	; (800ef74 <__lshift+0xd0>)
 800eed2:	4829      	ldr	r0, [pc, #164]	; (800ef78 <__lshift+0xd4>)
 800eed4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eed8:	f000 fbca 	bl	800f670 <__assert_func>
 800eedc:	3101      	adds	r1, #1
 800eede:	005b      	lsls	r3, r3, #1
 800eee0:	e7ee      	b.n	800eec0 <__lshift+0x1c>
 800eee2:	2300      	movs	r3, #0
 800eee4:	f100 0114 	add.w	r1, r0, #20
 800eee8:	f100 0210 	add.w	r2, r0, #16
 800eeec:	4618      	mov	r0, r3
 800eeee:	4553      	cmp	r3, sl
 800eef0:	db33      	blt.n	800ef5a <__lshift+0xb6>
 800eef2:	6920      	ldr	r0, [r4, #16]
 800eef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eef8:	f104 0314 	add.w	r3, r4, #20
 800eefc:	f019 091f 	ands.w	r9, r9, #31
 800ef00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef08:	d02b      	beq.n	800ef62 <__lshift+0xbe>
 800ef0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ef0e:	468a      	mov	sl, r1
 800ef10:	2200      	movs	r2, #0
 800ef12:	6818      	ldr	r0, [r3, #0]
 800ef14:	fa00 f009 	lsl.w	r0, r0, r9
 800ef18:	4302      	orrs	r2, r0
 800ef1a:	f84a 2b04 	str.w	r2, [sl], #4
 800ef1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef22:	459c      	cmp	ip, r3
 800ef24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef28:	d8f3      	bhi.n	800ef12 <__lshift+0x6e>
 800ef2a:	ebac 0304 	sub.w	r3, ip, r4
 800ef2e:	3b15      	subs	r3, #21
 800ef30:	f023 0303 	bic.w	r3, r3, #3
 800ef34:	3304      	adds	r3, #4
 800ef36:	f104 0015 	add.w	r0, r4, #21
 800ef3a:	4584      	cmp	ip, r0
 800ef3c:	bf38      	it	cc
 800ef3e:	2304      	movcc	r3, #4
 800ef40:	50ca      	str	r2, [r1, r3]
 800ef42:	b10a      	cbz	r2, 800ef48 <__lshift+0xa4>
 800ef44:	f108 0602 	add.w	r6, r8, #2
 800ef48:	3e01      	subs	r6, #1
 800ef4a:	4638      	mov	r0, r7
 800ef4c:	612e      	str	r6, [r5, #16]
 800ef4e:	4621      	mov	r1, r4
 800ef50:	f7ff fdd6 	bl	800eb00 <_Bfree>
 800ef54:	4628      	mov	r0, r5
 800ef56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef5e:	3301      	adds	r3, #1
 800ef60:	e7c5      	b.n	800eeee <__lshift+0x4a>
 800ef62:	3904      	subs	r1, #4
 800ef64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef6c:	459c      	cmp	ip, r3
 800ef6e:	d8f9      	bhi.n	800ef64 <__lshift+0xc0>
 800ef70:	e7ea      	b.n	800ef48 <__lshift+0xa4>
 800ef72:	bf00      	nop
 800ef74:	080125b7 	.word	0x080125b7
 800ef78:	08012628 	.word	0x08012628

0800ef7c <__mcmp>:
 800ef7c:	b530      	push	{r4, r5, lr}
 800ef7e:	6902      	ldr	r2, [r0, #16]
 800ef80:	690c      	ldr	r4, [r1, #16]
 800ef82:	1b12      	subs	r2, r2, r4
 800ef84:	d10e      	bne.n	800efa4 <__mcmp+0x28>
 800ef86:	f100 0314 	add.w	r3, r0, #20
 800ef8a:	3114      	adds	r1, #20
 800ef8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef9c:	42a5      	cmp	r5, r4
 800ef9e:	d003      	beq.n	800efa8 <__mcmp+0x2c>
 800efa0:	d305      	bcc.n	800efae <__mcmp+0x32>
 800efa2:	2201      	movs	r2, #1
 800efa4:	4610      	mov	r0, r2
 800efa6:	bd30      	pop	{r4, r5, pc}
 800efa8:	4283      	cmp	r3, r0
 800efaa:	d3f3      	bcc.n	800ef94 <__mcmp+0x18>
 800efac:	e7fa      	b.n	800efa4 <__mcmp+0x28>
 800efae:	f04f 32ff 	mov.w	r2, #4294967295
 800efb2:	e7f7      	b.n	800efa4 <__mcmp+0x28>

0800efb4 <__mdiff>:
 800efb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb8:	460c      	mov	r4, r1
 800efba:	4606      	mov	r6, r0
 800efbc:	4611      	mov	r1, r2
 800efbe:	4620      	mov	r0, r4
 800efc0:	4617      	mov	r7, r2
 800efc2:	f7ff ffdb 	bl	800ef7c <__mcmp>
 800efc6:	1e05      	subs	r5, r0, #0
 800efc8:	d110      	bne.n	800efec <__mdiff+0x38>
 800efca:	4629      	mov	r1, r5
 800efcc:	4630      	mov	r0, r6
 800efce:	f7ff fd57 	bl	800ea80 <_Balloc>
 800efd2:	b930      	cbnz	r0, 800efe2 <__mdiff+0x2e>
 800efd4:	4b39      	ldr	r3, [pc, #228]	; (800f0bc <__mdiff+0x108>)
 800efd6:	4602      	mov	r2, r0
 800efd8:	f240 2132 	movw	r1, #562	; 0x232
 800efdc:	4838      	ldr	r0, [pc, #224]	; (800f0c0 <__mdiff+0x10c>)
 800efde:	f000 fb47 	bl	800f670 <__assert_func>
 800efe2:	2301      	movs	r3, #1
 800efe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efec:	bfa4      	itt	ge
 800efee:	463b      	movge	r3, r7
 800eff0:	4627      	movge	r7, r4
 800eff2:	4630      	mov	r0, r6
 800eff4:	6879      	ldr	r1, [r7, #4]
 800eff6:	bfa6      	itte	ge
 800eff8:	461c      	movge	r4, r3
 800effa:	2500      	movge	r5, #0
 800effc:	2501      	movlt	r5, #1
 800effe:	f7ff fd3f 	bl	800ea80 <_Balloc>
 800f002:	b920      	cbnz	r0, 800f00e <__mdiff+0x5a>
 800f004:	4b2d      	ldr	r3, [pc, #180]	; (800f0bc <__mdiff+0x108>)
 800f006:	4602      	mov	r2, r0
 800f008:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f00c:	e7e6      	b.n	800efdc <__mdiff+0x28>
 800f00e:	693e      	ldr	r6, [r7, #16]
 800f010:	60c5      	str	r5, [r0, #12]
 800f012:	6925      	ldr	r5, [r4, #16]
 800f014:	f107 0114 	add.w	r1, r7, #20
 800f018:	f104 0914 	add.w	r9, r4, #20
 800f01c:	f100 0e14 	add.w	lr, r0, #20
 800f020:	f107 0210 	add.w	r2, r7, #16
 800f024:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f028:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f02c:	46f2      	mov	sl, lr
 800f02e:	2700      	movs	r7, #0
 800f030:	f859 3b04 	ldr.w	r3, [r9], #4
 800f034:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f038:	fa1f f883 	uxth.w	r8, r3
 800f03c:	fa17 f78b 	uxtah	r7, r7, fp
 800f040:	0c1b      	lsrs	r3, r3, #16
 800f042:	eba7 0808 	sub.w	r8, r7, r8
 800f046:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f04a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f04e:	fa1f f888 	uxth.w	r8, r8
 800f052:	141f      	asrs	r7, r3, #16
 800f054:	454d      	cmp	r5, r9
 800f056:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f05a:	f84a 3b04 	str.w	r3, [sl], #4
 800f05e:	d8e7      	bhi.n	800f030 <__mdiff+0x7c>
 800f060:	1b2b      	subs	r3, r5, r4
 800f062:	3b15      	subs	r3, #21
 800f064:	f023 0303 	bic.w	r3, r3, #3
 800f068:	3304      	adds	r3, #4
 800f06a:	3415      	adds	r4, #21
 800f06c:	42a5      	cmp	r5, r4
 800f06e:	bf38      	it	cc
 800f070:	2304      	movcc	r3, #4
 800f072:	4419      	add	r1, r3
 800f074:	4473      	add	r3, lr
 800f076:	469e      	mov	lr, r3
 800f078:	460d      	mov	r5, r1
 800f07a:	4565      	cmp	r5, ip
 800f07c:	d30e      	bcc.n	800f09c <__mdiff+0xe8>
 800f07e:	f10c 0203 	add.w	r2, ip, #3
 800f082:	1a52      	subs	r2, r2, r1
 800f084:	f022 0203 	bic.w	r2, r2, #3
 800f088:	3903      	subs	r1, #3
 800f08a:	458c      	cmp	ip, r1
 800f08c:	bf38      	it	cc
 800f08e:	2200      	movcc	r2, #0
 800f090:	441a      	add	r2, r3
 800f092:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f096:	b17b      	cbz	r3, 800f0b8 <__mdiff+0x104>
 800f098:	6106      	str	r6, [r0, #16]
 800f09a:	e7a5      	b.n	800efe8 <__mdiff+0x34>
 800f09c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f0a0:	fa17 f488 	uxtah	r4, r7, r8
 800f0a4:	1422      	asrs	r2, r4, #16
 800f0a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f0aa:	b2a4      	uxth	r4, r4
 800f0ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f0b0:	f84e 4b04 	str.w	r4, [lr], #4
 800f0b4:	1417      	asrs	r7, r2, #16
 800f0b6:	e7e0      	b.n	800f07a <__mdiff+0xc6>
 800f0b8:	3e01      	subs	r6, #1
 800f0ba:	e7ea      	b.n	800f092 <__mdiff+0xde>
 800f0bc:	080125b7 	.word	0x080125b7
 800f0c0:	08012628 	.word	0x08012628

0800f0c4 <__d2b>:
 800f0c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0c8:	4689      	mov	r9, r1
 800f0ca:	2101      	movs	r1, #1
 800f0cc:	ec57 6b10 	vmov	r6, r7, d0
 800f0d0:	4690      	mov	r8, r2
 800f0d2:	f7ff fcd5 	bl	800ea80 <_Balloc>
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	b930      	cbnz	r0, 800f0e8 <__d2b+0x24>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	4b25      	ldr	r3, [pc, #148]	; (800f174 <__d2b+0xb0>)
 800f0de:	4826      	ldr	r0, [pc, #152]	; (800f178 <__d2b+0xb4>)
 800f0e0:	f240 310a 	movw	r1, #778	; 0x30a
 800f0e4:	f000 fac4 	bl	800f670 <__assert_func>
 800f0e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f0ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f0f0:	bb35      	cbnz	r5, 800f140 <__d2b+0x7c>
 800f0f2:	2e00      	cmp	r6, #0
 800f0f4:	9301      	str	r3, [sp, #4]
 800f0f6:	d028      	beq.n	800f14a <__d2b+0x86>
 800f0f8:	4668      	mov	r0, sp
 800f0fa:	9600      	str	r6, [sp, #0]
 800f0fc:	f7ff fd8c 	bl	800ec18 <__lo0bits>
 800f100:	9900      	ldr	r1, [sp, #0]
 800f102:	b300      	cbz	r0, 800f146 <__d2b+0x82>
 800f104:	9a01      	ldr	r2, [sp, #4]
 800f106:	f1c0 0320 	rsb	r3, r0, #32
 800f10a:	fa02 f303 	lsl.w	r3, r2, r3
 800f10e:	430b      	orrs	r3, r1
 800f110:	40c2      	lsrs	r2, r0
 800f112:	6163      	str	r3, [r4, #20]
 800f114:	9201      	str	r2, [sp, #4]
 800f116:	9b01      	ldr	r3, [sp, #4]
 800f118:	61a3      	str	r3, [r4, #24]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	bf14      	ite	ne
 800f11e:	2202      	movne	r2, #2
 800f120:	2201      	moveq	r2, #1
 800f122:	6122      	str	r2, [r4, #16]
 800f124:	b1d5      	cbz	r5, 800f15c <__d2b+0x98>
 800f126:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f12a:	4405      	add	r5, r0
 800f12c:	f8c9 5000 	str.w	r5, [r9]
 800f130:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f134:	f8c8 0000 	str.w	r0, [r8]
 800f138:	4620      	mov	r0, r4
 800f13a:	b003      	add	sp, #12
 800f13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f144:	e7d5      	b.n	800f0f2 <__d2b+0x2e>
 800f146:	6161      	str	r1, [r4, #20]
 800f148:	e7e5      	b.n	800f116 <__d2b+0x52>
 800f14a:	a801      	add	r0, sp, #4
 800f14c:	f7ff fd64 	bl	800ec18 <__lo0bits>
 800f150:	9b01      	ldr	r3, [sp, #4]
 800f152:	6163      	str	r3, [r4, #20]
 800f154:	2201      	movs	r2, #1
 800f156:	6122      	str	r2, [r4, #16]
 800f158:	3020      	adds	r0, #32
 800f15a:	e7e3      	b.n	800f124 <__d2b+0x60>
 800f15c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f160:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f164:	f8c9 0000 	str.w	r0, [r9]
 800f168:	6918      	ldr	r0, [r3, #16]
 800f16a:	f7ff fd35 	bl	800ebd8 <__hi0bits>
 800f16e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f172:	e7df      	b.n	800f134 <__d2b+0x70>
 800f174:	080125b7 	.word	0x080125b7
 800f178:	08012628 	.word	0x08012628

0800f17c <_calloc_r>:
 800f17c:	b513      	push	{r0, r1, r4, lr}
 800f17e:	434a      	muls	r2, r1
 800f180:	4611      	mov	r1, r2
 800f182:	9201      	str	r2, [sp, #4]
 800f184:	f000 f85a 	bl	800f23c <_malloc_r>
 800f188:	4604      	mov	r4, r0
 800f18a:	b118      	cbz	r0, 800f194 <_calloc_r+0x18>
 800f18c:	9a01      	ldr	r2, [sp, #4]
 800f18e:	2100      	movs	r1, #0
 800f190:	f7fd fe12 	bl	800cdb8 <memset>
 800f194:	4620      	mov	r0, r4
 800f196:	b002      	add	sp, #8
 800f198:	bd10      	pop	{r4, pc}
	...

0800f19c <_free_r>:
 800f19c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f19e:	2900      	cmp	r1, #0
 800f1a0:	d048      	beq.n	800f234 <_free_r+0x98>
 800f1a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1a6:	9001      	str	r0, [sp, #4]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f1a1 0404 	sub.w	r4, r1, #4
 800f1ae:	bfb8      	it	lt
 800f1b0:	18e4      	addlt	r4, r4, r3
 800f1b2:	f000 fae3 	bl	800f77c <__malloc_lock>
 800f1b6:	4a20      	ldr	r2, [pc, #128]	; (800f238 <_free_r+0x9c>)
 800f1b8:	9801      	ldr	r0, [sp, #4]
 800f1ba:	6813      	ldr	r3, [r2, #0]
 800f1bc:	4615      	mov	r5, r2
 800f1be:	b933      	cbnz	r3, 800f1ce <_free_r+0x32>
 800f1c0:	6063      	str	r3, [r4, #4]
 800f1c2:	6014      	str	r4, [r2, #0]
 800f1c4:	b003      	add	sp, #12
 800f1c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1ca:	f000 badd 	b.w	800f788 <__malloc_unlock>
 800f1ce:	42a3      	cmp	r3, r4
 800f1d0:	d90b      	bls.n	800f1ea <_free_r+0x4e>
 800f1d2:	6821      	ldr	r1, [r4, #0]
 800f1d4:	1862      	adds	r2, r4, r1
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	bf04      	itt	eq
 800f1da:	681a      	ldreq	r2, [r3, #0]
 800f1dc:	685b      	ldreq	r3, [r3, #4]
 800f1de:	6063      	str	r3, [r4, #4]
 800f1e0:	bf04      	itt	eq
 800f1e2:	1852      	addeq	r2, r2, r1
 800f1e4:	6022      	streq	r2, [r4, #0]
 800f1e6:	602c      	str	r4, [r5, #0]
 800f1e8:	e7ec      	b.n	800f1c4 <_free_r+0x28>
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	b10b      	cbz	r3, 800f1f4 <_free_r+0x58>
 800f1f0:	42a3      	cmp	r3, r4
 800f1f2:	d9fa      	bls.n	800f1ea <_free_r+0x4e>
 800f1f4:	6811      	ldr	r1, [r2, #0]
 800f1f6:	1855      	adds	r5, r2, r1
 800f1f8:	42a5      	cmp	r5, r4
 800f1fa:	d10b      	bne.n	800f214 <_free_r+0x78>
 800f1fc:	6824      	ldr	r4, [r4, #0]
 800f1fe:	4421      	add	r1, r4
 800f200:	1854      	adds	r4, r2, r1
 800f202:	42a3      	cmp	r3, r4
 800f204:	6011      	str	r1, [r2, #0]
 800f206:	d1dd      	bne.n	800f1c4 <_free_r+0x28>
 800f208:	681c      	ldr	r4, [r3, #0]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	6053      	str	r3, [r2, #4]
 800f20e:	4421      	add	r1, r4
 800f210:	6011      	str	r1, [r2, #0]
 800f212:	e7d7      	b.n	800f1c4 <_free_r+0x28>
 800f214:	d902      	bls.n	800f21c <_free_r+0x80>
 800f216:	230c      	movs	r3, #12
 800f218:	6003      	str	r3, [r0, #0]
 800f21a:	e7d3      	b.n	800f1c4 <_free_r+0x28>
 800f21c:	6825      	ldr	r5, [r4, #0]
 800f21e:	1961      	adds	r1, r4, r5
 800f220:	428b      	cmp	r3, r1
 800f222:	bf04      	itt	eq
 800f224:	6819      	ldreq	r1, [r3, #0]
 800f226:	685b      	ldreq	r3, [r3, #4]
 800f228:	6063      	str	r3, [r4, #4]
 800f22a:	bf04      	itt	eq
 800f22c:	1949      	addeq	r1, r1, r5
 800f22e:	6021      	streq	r1, [r4, #0]
 800f230:	6054      	str	r4, [r2, #4]
 800f232:	e7c7      	b.n	800f1c4 <_free_r+0x28>
 800f234:	b003      	add	sp, #12
 800f236:	bd30      	pop	{r4, r5, pc}
 800f238:	20021c64 	.word	0x20021c64

0800f23c <_malloc_r>:
 800f23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f23e:	1ccd      	adds	r5, r1, #3
 800f240:	f025 0503 	bic.w	r5, r5, #3
 800f244:	3508      	adds	r5, #8
 800f246:	2d0c      	cmp	r5, #12
 800f248:	bf38      	it	cc
 800f24a:	250c      	movcc	r5, #12
 800f24c:	2d00      	cmp	r5, #0
 800f24e:	4606      	mov	r6, r0
 800f250:	db01      	blt.n	800f256 <_malloc_r+0x1a>
 800f252:	42a9      	cmp	r1, r5
 800f254:	d903      	bls.n	800f25e <_malloc_r+0x22>
 800f256:	230c      	movs	r3, #12
 800f258:	6033      	str	r3, [r6, #0]
 800f25a:	2000      	movs	r0, #0
 800f25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f25e:	f000 fa8d 	bl	800f77c <__malloc_lock>
 800f262:	4921      	ldr	r1, [pc, #132]	; (800f2e8 <_malloc_r+0xac>)
 800f264:	680a      	ldr	r2, [r1, #0]
 800f266:	4614      	mov	r4, r2
 800f268:	b99c      	cbnz	r4, 800f292 <_malloc_r+0x56>
 800f26a:	4f20      	ldr	r7, [pc, #128]	; (800f2ec <_malloc_r+0xb0>)
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	b923      	cbnz	r3, 800f27a <_malloc_r+0x3e>
 800f270:	4621      	mov	r1, r4
 800f272:	4630      	mov	r0, r6
 800f274:	f000 f996 	bl	800f5a4 <_sbrk_r>
 800f278:	6038      	str	r0, [r7, #0]
 800f27a:	4629      	mov	r1, r5
 800f27c:	4630      	mov	r0, r6
 800f27e:	f000 f991 	bl	800f5a4 <_sbrk_r>
 800f282:	1c43      	adds	r3, r0, #1
 800f284:	d123      	bne.n	800f2ce <_malloc_r+0x92>
 800f286:	230c      	movs	r3, #12
 800f288:	6033      	str	r3, [r6, #0]
 800f28a:	4630      	mov	r0, r6
 800f28c:	f000 fa7c 	bl	800f788 <__malloc_unlock>
 800f290:	e7e3      	b.n	800f25a <_malloc_r+0x1e>
 800f292:	6823      	ldr	r3, [r4, #0]
 800f294:	1b5b      	subs	r3, r3, r5
 800f296:	d417      	bmi.n	800f2c8 <_malloc_r+0x8c>
 800f298:	2b0b      	cmp	r3, #11
 800f29a:	d903      	bls.n	800f2a4 <_malloc_r+0x68>
 800f29c:	6023      	str	r3, [r4, #0]
 800f29e:	441c      	add	r4, r3
 800f2a0:	6025      	str	r5, [r4, #0]
 800f2a2:	e004      	b.n	800f2ae <_malloc_r+0x72>
 800f2a4:	6863      	ldr	r3, [r4, #4]
 800f2a6:	42a2      	cmp	r2, r4
 800f2a8:	bf0c      	ite	eq
 800f2aa:	600b      	streq	r3, [r1, #0]
 800f2ac:	6053      	strne	r3, [r2, #4]
 800f2ae:	4630      	mov	r0, r6
 800f2b0:	f000 fa6a 	bl	800f788 <__malloc_unlock>
 800f2b4:	f104 000b 	add.w	r0, r4, #11
 800f2b8:	1d23      	adds	r3, r4, #4
 800f2ba:	f020 0007 	bic.w	r0, r0, #7
 800f2be:	1ac2      	subs	r2, r0, r3
 800f2c0:	d0cc      	beq.n	800f25c <_malloc_r+0x20>
 800f2c2:	1a1b      	subs	r3, r3, r0
 800f2c4:	50a3      	str	r3, [r4, r2]
 800f2c6:	e7c9      	b.n	800f25c <_malloc_r+0x20>
 800f2c8:	4622      	mov	r2, r4
 800f2ca:	6864      	ldr	r4, [r4, #4]
 800f2cc:	e7cc      	b.n	800f268 <_malloc_r+0x2c>
 800f2ce:	1cc4      	adds	r4, r0, #3
 800f2d0:	f024 0403 	bic.w	r4, r4, #3
 800f2d4:	42a0      	cmp	r0, r4
 800f2d6:	d0e3      	beq.n	800f2a0 <_malloc_r+0x64>
 800f2d8:	1a21      	subs	r1, r4, r0
 800f2da:	4630      	mov	r0, r6
 800f2dc:	f000 f962 	bl	800f5a4 <_sbrk_r>
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	d1dd      	bne.n	800f2a0 <_malloc_r+0x64>
 800f2e4:	e7cf      	b.n	800f286 <_malloc_r+0x4a>
 800f2e6:	bf00      	nop
 800f2e8:	20021c64 	.word	0x20021c64
 800f2ec:	20021c68 	.word	0x20021c68

0800f2f0 <__sfputc_r>:
 800f2f0:	6893      	ldr	r3, [r2, #8]
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	b410      	push	{r4}
 800f2f8:	6093      	str	r3, [r2, #8]
 800f2fa:	da08      	bge.n	800f30e <__sfputc_r+0x1e>
 800f2fc:	6994      	ldr	r4, [r2, #24]
 800f2fe:	42a3      	cmp	r3, r4
 800f300:	db01      	blt.n	800f306 <__sfputc_r+0x16>
 800f302:	290a      	cmp	r1, #10
 800f304:	d103      	bne.n	800f30e <__sfputc_r+0x1e>
 800f306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f30a:	f7fe ba55 	b.w	800d7b8 <__swbuf_r>
 800f30e:	6813      	ldr	r3, [r2, #0]
 800f310:	1c58      	adds	r0, r3, #1
 800f312:	6010      	str	r0, [r2, #0]
 800f314:	7019      	strb	r1, [r3, #0]
 800f316:	4608      	mov	r0, r1
 800f318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f31c:	4770      	bx	lr

0800f31e <__sfputs_r>:
 800f31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f320:	4606      	mov	r6, r0
 800f322:	460f      	mov	r7, r1
 800f324:	4614      	mov	r4, r2
 800f326:	18d5      	adds	r5, r2, r3
 800f328:	42ac      	cmp	r4, r5
 800f32a:	d101      	bne.n	800f330 <__sfputs_r+0x12>
 800f32c:	2000      	movs	r0, #0
 800f32e:	e007      	b.n	800f340 <__sfputs_r+0x22>
 800f330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f334:	463a      	mov	r2, r7
 800f336:	4630      	mov	r0, r6
 800f338:	f7ff ffda 	bl	800f2f0 <__sfputc_r>
 800f33c:	1c43      	adds	r3, r0, #1
 800f33e:	d1f3      	bne.n	800f328 <__sfputs_r+0xa>
 800f340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f344 <_vfiprintf_r>:
 800f344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	460d      	mov	r5, r1
 800f34a:	b09d      	sub	sp, #116	; 0x74
 800f34c:	4614      	mov	r4, r2
 800f34e:	4698      	mov	r8, r3
 800f350:	4606      	mov	r6, r0
 800f352:	b118      	cbz	r0, 800f35c <_vfiprintf_r+0x18>
 800f354:	6983      	ldr	r3, [r0, #24]
 800f356:	b90b      	cbnz	r3, 800f35c <_vfiprintf_r+0x18>
 800f358:	f7ff fa80 	bl	800e85c <__sinit>
 800f35c:	4b89      	ldr	r3, [pc, #548]	; (800f584 <_vfiprintf_r+0x240>)
 800f35e:	429d      	cmp	r5, r3
 800f360:	d11b      	bne.n	800f39a <_vfiprintf_r+0x56>
 800f362:	6875      	ldr	r5, [r6, #4]
 800f364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f366:	07d9      	lsls	r1, r3, #31
 800f368:	d405      	bmi.n	800f376 <_vfiprintf_r+0x32>
 800f36a:	89ab      	ldrh	r3, [r5, #12]
 800f36c:	059a      	lsls	r2, r3, #22
 800f36e:	d402      	bmi.n	800f376 <_vfiprintf_r+0x32>
 800f370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f372:	f7ff fb16 	bl	800e9a2 <__retarget_lock_acquire_recursive>
 800f376:	89ab      	ldrh	r3, [r5, #12]
 800f378:	071b      	lsls	r3, r3, #28
 800f37a:	d501      	bpl.n	800f380 <_vfiprintf_r+0x3c>
 800f37c:	692b      	ldr	r3, [r5, #16]
 800f37e:	b9eb      	cbnz	r3, 800f3bc <_vfiprintf_r+0x78>
 800f380:	4629      	mov	r1, r5
 800f382:	4630      	mov	r0, r6
 800f384:	f7fe fa6a 	bl	800d85c <__swsetup_r>
 800f388:	b1c0      	cbz	r0, 800f3bc <_vfiprintf_r+0x78>
 800f38a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f38c:	07dc      	lsls	r4, r3, #31
 800f38e:	d50e      	bpl.n	800f3ae <_vfiprintf_r+0x6a>
 800f390:	f04f 30ff 	mov.w	r0, #4294967295
 800f394:	b01d      	add	sp, #116	; 0x74
 800f396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f39a:	4b7b      	ldr	r3, [pc, #492]	; (800f588 <_vfiprintf_r+0x244>)
 800f39c:	429d      	cmp	r5, r3
 800f39e:	d101      	bne.n	800f3a4 <_vfiprintf_r+0x60>
 800f3a0:	68b5      	ldr	r5, [r6, #8]
 800f3a2:	e7df      	b.n	800f364 <_vfiprintf_r+0x20>
 800f3a4:	4b79      	ldr	r3, [pc, #484]	; (800f58c <_vfiprintf_r+0x248>)
 800f3a6:	429d      	cmp	r5, r3
 800f3a8:	bf08      	it	eq
 800f3aa:	68f5      	ldreq	r5, [r6, #12]
 800f3ac:	e7da      	b.n	800f364 <_vfiprintf_r+0x20>
 800f3ae:	89ab      	ldrh	r3, [r5, #12]
 800f3b0:	0598      	lsls	r0, r3, #22
 800f3b2:	d4ed      	bmi.n	800f390 <_vfiprintf_r+0x4c>
 800f3b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3b6:	f7ff faf5 	bl	800e9a4 <__retarget_lock_release_recursive>
 800f3ba:	e7e9      	b.n	800f390 <_vfiprintf_r+0x4c>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	9309      	str	r3, [sp, #36]	; 0x24
 800f3c0:	2320      	movs	r3, #32
 800f3c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3ca:	2330      	movs	r3, #48	; 0x30
 800f3cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f590 <_vfiprintf_r+0x24c>
 800f3d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3d4:	f04f 0901 	mov.w	r9, #1
 800f3d8:	4623      	mov	r3, r4
 800f3da:	469a      	mov	sl, r3
 800f3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3e0:	b10a      	cbz	r2, 800f3e6 <_vfiprintf_r+0xa2>
 800f3e2:	2a25      	cmp	r2, #37	; 0x25
 800f3e4:	d1f9      	bne.n	800f3da <_vfiprintf_r+0x96>
 800f3e6:	ebba 0b04 	subs.w	fp, sl, r4
 800f3ea:	d00b      	beq.n	800f404 <_vfiprintf_r+0xc0>
 800f3ec:	465b      	mov	r3, fp
 800f3ee:	4622      	mov	r2, r4
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	f7ff ff93 	bl	800f31e <__sfputs_r>
 800f3f8:	3001      	adds	r0, #1
 800f3fa:	f000 80aa 	beq.w	800f552 <_vfiprintf_r+0x20e>
 800f3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f400:	445a      	add	r2, fp
 800f402:	9209      	str	r2, [sp, #36]	; 0x24
 800f404:	f89a 3000 	ldrb.w	r3, [sl]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f000 80a2 	beq.w	800f552 <_vfiprintf_r+0x20e>
 800f40e:	2300      	movs	r3, #0
 800f410:	f04f 32ff 	mov.w	r2, #4294967295
 800f414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f418:	f10a 0a01 	add.w	sl, sl, #1
 800f41c:	9304      	str	r3, [sp, #16]
 800f41e:	9307      	str	r3, [sp, #28]
 800f420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f424:	931a      	str	r3, [sp, #104]	; 0x68
 800f426:	4654      	mov	r4, sl
 800f428:	2205      	movs	r2, #5
 800f42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f42e:	4858      	ldr	r0, [pc, #352]	; (800f590 <_vfiprintf_r+0x24c>)
 800f430:	f7f0 fee6 	bl	8000200 <memchr>
 800f434:	9a04      	ldr	r2, [sp, #16]
 800f436:	b9d8      	cbnz	r0, 800f470 <_vfiprintf_r+0x12c>
 800f438:	06d1      	lsls	r1, r2, #27
 800f43a:	bf44      	itt	mi
 800f43c:	2320      	movmi	r3, #32
 800f43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f442:	0713      	lsls	r3, r2, #28
 800f444:	bf44      	itt	mi
 800f446:	232b      	movmi	r3, #43	; 0x2b
 800f448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f44c:	f89a 3000 	ldrb.w	r3, [sl]
 800f450:	2b2a      	cmp	r3, #42	; 0x2a
 800f452:	d015      	beq.n	800f480 <_vfiprintf_r+0x13c>
 800f454:	9a07      	ldr	r2, [sp, #28]
 800f456:	4654      	mov	r4, sl
 800f458:	2000      	movs	r0, #0
 800f45a:	f04f 0c0a 	mov.w	ip, #10
 800f45e:	4621      	mov	r1, r4
 800f460:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f464:	3b30      	subs	r3, #48	; 0x30
 800f466:	2b09      	cmp	r3, #9
 800f468:	d94e      	bls.n	800f508 <_vfiprintf_r+0x1c4>
 800f46a:	b1b0      	cbz	r0, 800f49a <_vfiprintf_r+0x156>
 800f46c:	9207      	str	r2, [sp, #28]
 800f46e:	e014      	b.n	800f49a <_vfiprintf_r+0x156>
 800f470:	eba0 0308 	sub.w	r3, r0, r8
 800f474:	fa09 f303 	lsl.w	r3, r9, r3
 800f478:	4313      	orrs	r3, r2
 800f47a:	9304      	str	r3, [sp, #16]
 800f47c:	46a2      	mov	sl, r4
 800f47e:	e7d2      	b.n	800f426 <_vfiprintf_r+0xe2>
 800f480:	9b03      	ldr	r3, [sp, #12]
 800f482:	1d19      	adds	r1, r3, #4
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	9103      	str	r1, [sp, #12]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	bfbb      	ittet	lt
 800f48c:	425b      	neglt	r3, r3
 800f48e:	f042 0202 	orrlt.w	r2, r2, #2
 800f492:	9307      	strge	r3, [sp, #28]
 800f494:	9307      	strlt	r3, [sp, #28]
 800f496:	bfb8      	it	lt
 800f498:	9204      	strlt	r2, [sp, #16]
 800f49a:	7823      	ldrb	r3, [r4, #0]
 800f49c:	2b2e      	cmp	r3, #46	; 0x2e
 800f49e:	d10c      	bne.n	800f4ba <_vfiprintf_r+0x176>
 800f4a0:	7863      	ldrb	r3, [r4, #1]
 800f4a2:	2b2a      	cmp	r3, #42	; 0x2a
 800f4a4:	d135      	bne.n	800f512 <_vfiprintf_r+0x1ce>
 800f4a6:	9b03      	ldr	r3, [sp, #12]
 800f4a8:	1d1a      	adds	r2, r3, #4
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	9203      	str	r2, [sp, #12]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	bfb8      	it	lt
 800f4b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4b6:	3402      	adds	r4, #2
 800f4b8:	9305      	str	r3, [sp, #20]
 800f4ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f5a0 <_vfiprintf_r+0x25c>
 800f4be:	7821      	ldrb	r1, [r4, #0]
 800f4c0:	2203      	movs	r2, #3
 800f4c2:	4650      	mov	r0, sl
 800f4c4:	f7f0 fe9c 	bl	8000200 <memchr>
 800f4c8:	b140      	cbz	r0, 800f4dc <_vfiprintf_r+0x198>
 800f4ca:	2340      	movs	r3, #64	; 0x40
 800f4cc:	eba0 000a 	sub.w	r0, r0, sl
 800f4d0:	fa03 f000 	lsl.w	r0, r3, r0
 800f4d4:	9b04      	ldr	r3, [sp, #16]
 800f4d6:	4303      	orrs	r3, r0
 800f4d8:	3401      	adds	r4, #1
 800f4da:	9304      	str	r3, [sp, #16]
 800f4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4e0:	482c      	ldr	r0, [pc, #176]	; (800f594 <_vfiprintf_r+0x250>)
 800f4e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4e6:	2206      	movs	r2, #6
 800f4e8:	f7f0 fe8a 	bl	8000200 <memchr>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d03f      	beq.n	800f570 <_vfiprintf_r+0x22c>
 800f4f0:	4b29      	ldr	r3, [pc, #164]	; (800f598 <_vfiprintf_r+0x254>)
 800f4f2:	bb1b      	cbnz	r3, 800f53c <_vfiprintf_r+0x1f8>
 800f4f4:	9b03      	ldr	r3, [sp, #12]
 800f4f6:	3307      	adds	r3, #7
 800f4f8:	f023 0307 	bic.w	r3, r3, #7
 800f4fc:	3308      	adds	r3, #8
 800f4fe:	9303      	str	r3, [sp, #12]
 800f500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f502:	443b      	add	r3, r7
 800f504:	9309      	str	r3, [sp, #36]	; 0x24
 800f506:	e767      	b.n	800f3d8 <_vfiprintf_r+0x94>
 800f508:	fb0c 3202 	mla	r2, ip, r2, r3
 800f50c:	460c      	mov	r4, r1
 800f50e:	2001      	movs	r0, #1
 800f510:	e7a5      	b.n	800f45e <_vfiprintf_r+0x11a>
 800f512:	2300      	movs	r3, #0
 800f514:	3401      	adds	r4, #1
 800f516:	9305      	str	r3, [sp, #20]
 800f518:	4619      	mov	r1, r3
 800f51a:	f04f 0c0a 	mov.w	ip, #10
 800f51e:	4620      	mov	r0, r4
 800f520:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f524:	3a30      	subs	r2, #48	; 0x30
 800f526:	2a09      	cmp	r2, #9
 800f528:	d903      	bls.n	800f532 <_vfiprintf_r+0x1ee>
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d0c5      	beq.n	800f4ba <_vfiprintf_r+0x176>
 800f52e:	9105      	str	r1, [sp, #20]
 800f530:	e7c3      	b.n	800f4ba <_vfiprintf_r+0x176>
 800f532:	fb0c 2101 	mla	r1, ip, r1, r2
 800f536:	4604      	mov	r4, r0
 800f538:	2301      	movs	r3, #1
 800f53a:	e7f0      	b.n	800f51e <_vfiprintf_r+0x1da>
 800f53c:	ab03      	add	r3, sp, #12
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	462a      	mov	r2, r5
 800f542:	4b16      	ldr	r3, [pc, #88]	; (800f59c <_vfiprintf_r+0x258>)
 800f544:	a904      	add	r1, sp, #16
 800f546:	4630      	mov	r0, r6
 800f548:	f7fd fcde 	bl	800cf08 <_printf_float>
 800f54c:	4607      	mov	r7, r0
 800f54e:	1c78      	adds	r0, r7, #1
 800f550:	d1d6      	bne.n	800f500 <_vfiprintf_r+0x1bc>
 800f552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f554:	07d9      	lsls	r1, r3, #31
 800f556:	d405      	bmi.n	800f564 <_vfiprintf_r+0x220>
 800f558:	89ab      	ldrh	r3, [r5, #12]
 800f55a:	059a      	lsls	r2, r3, #22
 800f55c:	d402      	bmi.n	800f564 <_vfiprintf_r+0x220>
 800f55e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f560:	f7ff fa20 	bl	800e9a4 <__retarget_lock_release_recursive>
 800f564:	89ab      	ldrh	r3, [r5, #12]
 800f566:	065b      	lsls	r3, r3, #25
 800f568:	f53f af12 	bmi.w	800f390 <_vfiprintf_r+0x4c>
 800f56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f56e:	e711      	b.n	800f394 <_vfiprintf_r+0x50>
 800f570:	ab03      	add	r3, sp, #12
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	462a      	mov	r2, r5
 800f576:	4b09      	ldr	r3, [pc, #36]	; (800f59c <_vfiprintf_r+0x258>)
 800f578:	a904      	add	r1, sp, #16
 800f57a:	4630      	mov	r0, r6
 800f57c:	f7fd ff68 	bl	800d450 <_printf_i>
 800f580:	e7e4      	b.n	800f54c <_vfiprintf_r+0x208>
 800f582:	bf00      	nop
 800f584:	080125e8 	.word	0x080125e8
 800f588:	08012608 	.word	0x08012608
 800f58c:	080125c8 	.word	0x080125c8
 800f590:	08012784 	.word	0x08012784
 800f594:	0801278e 	.word	0x0801278e
 800f598:	0800cf09 	.word	0x0800cf09
 800f59c:	0800f31f 	.word	0x0800f31f
 800f5a0:	0801278a 	.word	0x0801278a

0800f5a4 <_sbrk_r>:
 800f5a4:	b538      	push	{r3, r4, r5, lr}
 800f5a6:	4d06      	ldr	r5, [pc, #24]	; (800f5c0 <_sbrk_r+0x1c>)
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	4604      	mov	r4, r0
 800f5ac:	4608      	mov	r0, r1
 800f5ae:	602b      	str	r3, [r5, #0]
 800f5b0:	f7f2 fd30 	bl	8002014 <_sbrk>
 800f5b4:	1c43      	adds	r3, r0, #1
 800f5b6:	d102      	bne.n	800f5be <_sbrk_r+0x1a>
 800f5b8:	682b      	ldr	r3, [r5, #0]
 800f5ba:	b103      	cbz	r3, 800f5be <_sbrk_r+0x1a>
 800f5bc:	6023      	str	r3, [r4, #0]
 800f5be:	bd38      	pop	{r3, r4, r5, pc}
 800f5c0:	2002211c 	.word	0x2002211c

0800f5c4 <__sread>:
 800f5c4:	b510      	push	{r4, lr}
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5cc:	f000 f8e2 	bl	800f794 <_read_r>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	bfab      	itete	ge
 800f5d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f5d6:	89a3      	ldrhlt	r3, [r4, #12]
 800f5d8:	181b      	addge	r3, r3, r0
 800f5da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f5de:	bfac      	ite	ge
 800f5e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f5e2:	81a3      	strhlt	r3, [r4, #12]
 800f5e4:	bd10      	pop	{r4, pc}

0800f5e6 <__swrite>:
 800f5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ea:	461f      	mov	r7, r3
 800f5ec:	898b      	ldrh	r3, [r1, #12]
 800f5ee:	05db      	lsls	r3, r3, #23
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	460c      	mov	r4, r1
 800f5f4:	4616      	mov	r6, r2
 800f5f6:	d505      	bpl.n	800f604 <__swrite+0x1e>
 800f5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5fc:	2302      	movs	r3, #2
 800f5fe:	2200      	movs	r2, #0
 800f600:	f000 f898 	bl	800f734 <_lseek_r>
 800f604:	89a3      	ldrh	r3, [r4, #12]
 800f606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f60a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f60e:	81a3      	strh	r3, [r4, #12]
 800f610:	4632      	mov	r2, r6
 800f612:	463b      	mov	r3, r7
 800f614:	4628      	mov	r0, r5
 800f616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f61a:	f000 b817 	b.w	800f64c <_write_r>

0800f61e <__sseek>:
 800f61e:	b510      	push	{r4, lr}
 800f620:	460c      	mov	r4, r1
 800f622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f626:	f000 f885 	bl	800f734 <_lseek_r>
 800f62a:	1c43      	adds	r3, r0, #1
 800f62c:	89a3      	ldrh	r3, [r4, #12]
 800f62e:	bf15      	itete	ne
 800f630:	6560      	strne	r0, [r4, #84]	; 0x54
 800f632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f63a:	81a3      	strheq	r3, [r4, #12]
 800f63c:	bf18      	it	ne
 800f63e:	81a3      	strhne	r3, [r4, #12]
 800f640:	bd10      	pop	{r4, pc}

0800f642 <__sclose>:
 800f642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f646:	f000 b831 	b.w	800f6ac <_close_r>
	...

0800f64c <_write_r>:
 800f64c:	b538      	push	{r3, r4, r5, lr}
 800f64e:	4d07      	ldr	r5, [pc, #28]	; (800f66c <_write_r+0x20>)
 800f650:	4604      	mov	r4, r0
 800f652:	4608      	mov	r0, r1
 800f654:	4611      	mov	r1, r2
 800f656:	2200      	movs	r2, #0
 800f658:	602a      	str	r2, [r5, #0]
 800f65a:	461a      	mov	r2, r3
 800f65c:	f7f2 fc89 	bl	8001f72 <_write>
 800f660:	1c43      	adds	r3, r0, #1
 800f662:	d102      	bne.n	800f66a <_write_r+0x1e>
 800f664:	682b      	ldr	r3, [r5, #0]
 800f666:	b103      	cbz	r3, 800f66a <_write_r+0x1e>
 800f668:	6023      	str	r3, [r4, #0]
 800f66a:	bd38      	pop	{r3, r4, r5, pc}
 800f66c:	2002211c 	.word	0x2002211c

0800f670 <__assert_func>:
 800f670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f672:	4614      	mov	r4, r2
 800f674:	461a      	mov	r2, r3
 800f676:	4b09      	ldr	r3, [pc, #36]	; (800f69c <__assert_func+0x2c>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4605      	mov	r5, r0
 800f67c:	68d8      	ldr	r0, [r3, #12]
 800f67e:	b14c      	cbz	r4, 800f694 <__assert_func+0x24>
 800f680:	4b07      	ldr	r3, [pc, #28]	; (800f6a0 <__assert_func+0x30>)
 800f682:	9100      	str	r1, [sp, #0]
 800f684:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f688:	4906      	ldr	r1, [pc, #24]	; (800f6a4 <__assert_func+0x34>)
 800f68a:	462b      	mov	r3, r5
 800f68c:	f000 f81e 	bl	800f6cc <fiprintf>
 800f690:	f000 f89f 	bl	800f7d2 <abort>
 800f694:	4b04      	ldr	r3, [pc, #16]	; (800f6a8 <__assert_func+0x38>)
 800f696:	461c      	mov	r4, r3
 800f698:	e7f3      	b.n	800f682 <__assert_func+0x12>
 800f69a:	bf00      	nop
 800f69c:	20000068 	.word	0x20000068
 800f6a0:	08012795 	.word	0x08012795
 800f6a4:	080127a2 	.word	0x080127a2
 800f6a8:	080127d0 	.word	0x080127d0

0800f6ac <_close_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	4d06      	ldr	r5, [pc, #24]	; (800f6c8 <_close_r+0x1c>)
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	4608      	mov	r0, r1
 800f6b6:	602b      	str	r3, [r5, #0]
 800f6b8:	f7f2 fc77 	bl	8001faa <_close>
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	d102      	bne.n	800f6c6 <_close_r+0x1a>
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	b103      	cbz	r3, 800f6c6 <_close_r+0x1a>
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	bd38      	pop	{r3, r4, r5, pc}
 800f6c8:	2002211c 	.word	0x2002211c

0800f6cc <fiprintf>:
 800f6cc:	b40e      	push	{r1, r2, r3}
 800f6ce:	b503      	push	{r0, r1, lr}
 800f6d0:	4601      	mov	r1, r0
 800f6d2:	ab03      	add	r3, sp, #12
 800f6d4:	4805      	ldr	r0, [pc, #20]	; (800f6ec <fiprintf+0x20>)
 800f6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6da:	6800      	ldr	r0, [r0, #0]
 800f6dc:	9301      	str	r3, [sp, #4]
 800f6de:	f7ff fe31 	bl	800f344 <_vfiprintf_r>
 800f6e2:	b002      	add	sp, #8
 800f6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6e8:	b003      	add	sp, #12
 800f6ea:	4770      	bx	lr
 800f6ec:	20000068 	.word	0x20000068

0800f6f0 <_fstat_r>:
 800f6f0:	b538      	push	{r3, r4, r5, lr}
 800f6f2:	4d07      	ldr	r5, [pc, #28]	; (800f710 <_fstat_r+0x20>)
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	4608      	mov	r0, r1
 800f6fa:	4611      	mov	r1, r2
 800f6fc:	602b      	str	r3, [r5, #0]
 800f6fe:	f7f2 fc60 	bl	8001fc2 <_fstat>
 800f702:	1c43      	adds	r3, r0, #1
 800f704:	d102      	bne.n	800f70c <_fstat_r+0x1c>
 800f706:	682b      	ldr	r3, [r5, #0]
 800f708:	b103      	cbz	r3, 800f70c <_fstat_r+0x1c>
 800f70a:	6023      	str	r3, [r4, #0]
 800f70c:	bd38      	pop	{r3, r4, r5, pc}
 800f70e:	bf00      	nop
 800f710:	2002211c 	.word	0x2002211c

0800f714 <_isatty_r>:
 800f714:	b538      	push	{r3, r4, r5, lr}
 800f716:	4d06      	ldr	r5, [pc, #24]	; (800f730 <_isatty_r+0x1c>)
 800f718:	2300      	movs	r3, #0
 800f71a:	4604      	mov	r4, r0
 800f71c:	4608      	mov	r0, r1
 800f71e:	602b      	str	r3, [r5, #0]
 800f720:	f7f2 fc5f 	bl	8001fe2 <_isatty>
 800f724:	1c43      	adds	r3, r0, #1
 800f726:	d102      	bne.n	800f72e <_isatty_r+0x1a>
 800f728:	682b      	ldr	r3, [r5, #0]
 800f72a:	b103      	cbz	r3, 800f72e <_isatty_r+0x1a>
 800f72c:	6023      	str	r3, [r4, #0]
 800f72e:	bd38      	pop	{r3, r4, r5, pc}
 800f730:	2002211c 	.word	0x2002211c

0800f734 <_lseek_r>:
 800f734:	b538      	push	{r3, r4, r5, lr}
 800f736:	4d07      	ldr	r5, [pc, #28]	; (800f754 <_lseek_r+0x20>)
 800f738:	4604      	mov	r4, r0
 800f73a:	4608      	mov	r0, r1
 800f73c:	4611      	mov	r1, r2
 800f73e:	2200      	movs	r2, #0
 800f740:	602a      	str	r2, [r5, #0]
 800f742:	461a      	mov	r2, r3
 800f744:	f7f2 fc58 	bl	8001ff8 <_lseek>
 800f748:	1c43      	adds	r3, r0, #1
 800f74a:	d102      	bne.n	800f752 <_lseek_r+0x1e>
 800f74c:	682b      	ldr	r3, [r5, #0]
 800f74e:	b103      	cbz	r3, 800f752 <_lseek_r+0x1e>
 800f750:	6023      	str	r3, [r4, #0]
 800f752:	bd38      	pop	{r3, r4, r5, pc}
 800f754:	2002211c 	.word	0x2002211c

0800f758 <__ascii_mbtowc>:
 800f758:	b082      	sub	sp, #8
 800f75a:	b901      	cbnz	r1, 800f75e <__ascii_mbtowc+0x6>
 800f75c:	a901      	add	r1, sp, #4
 800f75e:	b142      	cbz	r2, 800f772 <__ascii_mbtowc+0x1a>
 800f760:	b14b      	cbz	r3, 800f776 <__ascii_mbtowc+0x1e>
 800f762:	7813      	ldrb	r3, [r2, #0]
 800f764:	600b      	str	r3, [r1, #0]
 800f766:	7812      	ldrb	r2, [r2, #0]
 800f768:	1e10      	subs	r0, r2, #0
 800f76a:	bf18      	it	ne
 800f76c:	2001      	movne	r0, #1
 800f76e:	b002      	add	sp, #8
 800f770:	4770      	bx	lr
 800f772:	4610      	mov	r0, r2
 800f774:	e7fb      	b.n	800f76e <__ascii_mbtowc+0x16>
 800f776:	f06f 0001 	mvn.w	r0, #1
 800f77a:	e7f8      	b.n	800f76e <__ascii_mbtowc+0x16>

0800f77c <__malloc_lock>:
 800f77c:	4801      	ldr	r0, [pc, #4]	; (800f784 <__malloc_lock+0x8>)
 800f77e:	f7ff b910 	b.w	800e9a2 <__retarget_lock_acquire_recursive>
 800f782:	bf00      	nop
 800f784:	20022114 	.word	0x20022114

0800f788 <__malloc_unlock>:
 800f788:	4801      	ldr	r0, [pc, #4]	; (800f790 <__malloc_unlock+0x8>)
 800f78a:	f7ff b90b 	b.w	800e9a4 <__retarget_lock_release_recursive>
 800f78e:	bf00      	nop
 800f790:	20022114 	.word	0x20022114

0800f794 <_read_r>:
 800f794:	b538      	push	{r3, r4, r5, lr}
 800f796:	4d07      	ldr	r5, [pc, #28]	; (800f7b4 <_read_r+0x20>)
 800f798:	4604      	mov	r4, r0
 800f79a:	4608      	mov	r0, r1
 800f79c:	4611      	mov	r1, r2
 800f79e:	2200      	movs	r2, #0
 800f7a0:	602a      	str	r2, [r5, #0]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	f7f2 fbc8 	bl	8001f38 <_read>
 800f7a8:	1c43      	adds	r3, r0, #1
 800f7aa:	d102      	bne.n	800f7b2 <_read_r+0x1e>
 800f7ac:	682b      	ldr	r3, [r5, #0]
 800f7ae:	b103      	cbz	r3, 800f7b2 <_read_r+0x1e>
 800f7b0:	6023      	str	r3, [r4, #0]
 800f7b2:	bd38      	pop	{r3, r4, r5, pc}
 800f7b4:	2002211c 	.word	0x2002211c

0800f7b8 <__ascii_wctomb>:
 800f7b8:	b149      	cbz	r1, 800f7ce <__ascii_wctomb+0x16>
 800f7ba:	2aff      	cmp	r2, #255	; 0xff
 800f7bc:	bf85      	ittet	hi
 800f7be:	238a      	movhi	r3, #138	; 0x8a
 800f7c0:	6003      	strhi	r3, [r0, #0]
 800f7c2:	700a      	strbls	r2, [r1, #0]
 800f7c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f7c8:	bf98      	it	ls
 800f7ca:	2001      	movls	r0, #1
 800f7cc:	4770      	bx	lr
 800f7ce:	4608      	mov	r0, r1
 800f7d0:	4770      	bx	lr

0800f7d2 <abort>:
 800f7d2:	b508      	push	{r3, lr}
 800f7d4:	2006      	movs	r0, #6
 800f7d6:	f000 f82b 	bl	800f830 <raise>
 800f7da:	2001      	movs	r0, #1
 800f7dc:	f7f2 fba2 	bl	8001f24 <_exit>

0800f7e0 <_raise_r>:
 800f7e0:	291f      	cmp	r1, #31
 800f7e2:	b538      	push	{r3, r4, r5, lr}
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	460d      	mov	r5, r1
 800f7e8:	d904      	bls.n	800f7f4 <_raise_r+0x14>
 800f7ea:	2316      	movs	r3, #22
 800f7ec:	6003      	str	r3, [r0, #0]
 800f7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f2:	bd38      	pop	{r3, r4, r5, pc}
 800f7f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f7f6:	b112      	cbz	r2, 800f7fe <_raise_r+0x1e>
 800f7f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7fc:	b94b      	cbnz	r3, 800f812 <_raise_r+0x32>
 800f7fe:	4620      	mov	r0, r4
 800f800:	f000 f830 	bl	800f864 <_getpid_r>
 800f804:	462a      	mov	r2, r5
 800f806:	4601      	mov	r1, r0
 800f808:	4620      	mov	r0, r4
 800f80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f80e:	f000 b817 	b.w	800f840 <_kill_r>
 800f812:	2b01      	cmp	r3, #1
 800f814:	d00a      	beq.n	800f82c <_raise_r+0x4c>
 800f816:	1c59      	adds	r1, r3, #1
 800f818:	d103      	bne.n	800f822 <_raise_r+0x42>
 800f81a:	2316      	movs	r3, #22
 800f81c:	6003      	str	r3, [r0, #0]
 800f81e:	2001      	movs	r0, #1
 800f820:	e7e7      	b.n	800f7f2 <_raise_r+0x12>
 800f822:	2400      	movs	r4, #0
 800f824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f828:	4628      	mov	r0, r5
 800f82a:	4798      	blx	r3
 800f82c:	2000      	movs	r0, #0
 800f82e:	e7e0      	b.n	800f7f2 <_raise_r+0x12>

0800f830 <raise>:
 800f830:	4b02      	ldr	r3, [pc, #8]	; (800f83c <raise+0xc>)
 800f832:	4601      	mov	r1, r0
 800f834:	6818      	ldr	r0, [r3, #0]
 800f836:	f7ff bfd3 	b.w	800f7e0 <_raise_r>
 800f83a:	bf00      	nop
 800f83c:	20000068 	.word	0x20000068

0800f840 <_kill_r>:
 800f840:	b538      	push	{r3, r4, r5, lr}
 800f842:	4d07      	ldr	r5, [pc, #28]	; (800f860 <_kill_r+0x20>)
 800f844:	2300      	movs	r3, #0
 800f846:	4604      	mov	r4, r0
 800f848:	4608      	mov	r0, r1
 800f84a:	4611      	mov	r1, r2
 800f84c:	602b      	str	r3, [r5, #0]
 800f84e:	f7f2 fb59 	bl	8001f04 <_kill>
 800f852:	1c43      	adds	r3, r0, #1
 800f854:	d102      	bne.n	800f85c <_kill_r+0x1c>
 800f856:	682b      	ldr	r3, [r5, #0]
 800f858:	b103      	cbz	r3, 800f85c <_kill_r+0x1c>
 800f85a:	6023      	str	r3, [r4, #0]
 800f85c:	bd38      	pop	{r3, r4, r5, pc}
 800f85e:	bf00      	nop
 800f860:	2002211c 	.word	0x2002211c

0800f864 <_getpid_r>:
 800f864:	f7f2 bb46 	b.w	8001ef4 <_getpid>

0800f868 <_init>:
 800f868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f86a:	bf00      	nop
 800f86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f86e:	bc08      	pop	{r3}
 800f870:	469e      	mov	lr, r3
 800f872:	4770      	bx	lr

0800f874 <_fini>:
 800f874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f876:	bf00      	nop
 800f878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f87a:	bc08      	pop	{r3}
 800f87c:	469e      	mov	lr, r3
 800f87e:	4770      	bx	lr
