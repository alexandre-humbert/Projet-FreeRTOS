
2021_FreeRTOS_FISE3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003114  0800f9a0  0800f9a0  0001f9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ab4  08012ab4  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  08012ab4  08012ab4  00022ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012abc  08012abc  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012abc  08012abc  00022abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ac0  08012ac0  00022ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08012ac4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00021ef0  20000238  08012cfc  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20022128  08012cfc  00032128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   000303a5  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062d4  00000000  00000000  0006060d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a8  00000000  00000000  000668e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef8  00000000  00000000  00068a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004a249  00000000  00000000  0006a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002956a  00000000  00000000  000b4bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5104  00000000  00000000  000de13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d323f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c2c  00000000  00000000  001d3294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000238 	.word	0x20000238
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f988 	.word	0x0800f988

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000023c 	.word	0x2000023c
 80001ec:	0800f988 	.word	0x0800f988

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <MX_DMA2D_Init+0x60>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef6:	f003 f9a3 	bl	8004240 <HAL_DMA2D_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f00:	f000 fe72 	bl	8001be8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f04:	2101      	movs	r1, #1
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000f08:	f003 fc08 	bl	800471c <HAL_DMA2D_ConfigLayer>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f12:	f000 fe69 	bl	8001be8 <Error_Handler>
  }

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20021c6c 	.word	0x20021c6c
 8000f20:	4002b000 	.word	0x4002b000

08000f24 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_DMA2D_MspInit+0x48>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d115      	bne.n	8000f62 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	205a      	movs	r0, #90	; 0x5a
 8000f58:	f002 ff68 	bl	8003e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f5c:	205a      	movs	r0, #90	; 0x5a
 8000f5e:	f002 ff81 	bl	8003e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	4002b000 	.word	0x4002b000
 8000f70:	40023800 	.word	0x40023800

08000f74 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_FMC_Init+0x98>)
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <MX_FMC_Init+0x9c>)
 8000f90:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_FMC_Init+0x98>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_FMC_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_FMC_Init+0x98>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_FMC_Init+0x98>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_FMC_Init+0x98>)
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_FMC_Init+0x98>)
 8000fb2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000fb6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_FMC_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_FMC_Init+0x98>)
 8000fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_FMC_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_FMC_Init+0x98>)
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_FMC_Init+0x98>)
 8000ff6:	f006 fb37 	bl	8007668 <HAL_SDRAM_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001000:	f000 fdf2 	bl	8001be8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20021cac 	.word	0x20021cac
 8001010:	a0000140 	.word	0xa0000140

08001014 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <HAL_FMC_MspInit+0x104>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d16f      	bne.n	8001110 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_FMC_MspInit+0x104>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_FMC_MspInit+0x108>)
 800103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6393      	str	r3, [r2, #56]	; 0x38
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001052:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001056:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001064:	230c      	movs	r3, #12
 8001066:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	482c      	ldr	r0, [pc, #176]	; (8001120 <HAL_FMC_MspInit+0x10c>)
 800106e:	f003 fc83 	bl	8004978 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001072:	2301      	movs	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001082:	230c      	movs	r3, #12
 8001084:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4826      	ldr	r0, [pc, #152]	; (8001124 <HAL_FMC_MspInit+0x110>)
 800108c:	f003 fc74 	bl	8004978 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001090:	f248 1333 	movw	r3, #33075	; 0x8133
 8001094:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	481f      	ldr	r0, [pc, #124]	; (8001128 <HAL_FMC_MspInit+0x114>)
 80010ac:	f003 fc64 	bl	8004978 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010b4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c2:	230c      	movs	r3, #12
 80010c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <HAL_FMC_MspInit+0x118>)
 80010cc:	f003 fc54 	bl	8004978 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80010d0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80010d4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e2:	230c      	movs	r3, #12
 80010e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <HAL_FMC_MspInit+0x11c>)
 80010ec:	f003 fc44 	bl	8004978 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001100:	230c      	movs	r3, #12
 8001102:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <HAL_FMC_MspInit+0x120>)
 800110a:	f003 fc35 	bl	8004978 <HAL_GPIO_Init>
 800110e:	e000      	b.n	8001112 <HAL_FMC_MspInit+0xfe>
    return;
 8001110:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000254 	.word	0x20000254
 800111c:	40023800 	.word	0x40023800
 8001120:	40021400 	.word	0x40021400
 8001124:	40020800 	.word	0x40020800
 8001128:	40021800 	.word	0x40021800
 800112c:	40021000 	.word	0x40021000
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40020400 	.word	0x40020400

08001138 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001140:	f7ff ff68 	bl	8001014 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <vApplicationGetTimerTaskMemory>:
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize )
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <vApplicationGetTimerTaskMemory+0x2c>)
 800115c:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <vApplicationGetTimerTaskMemory+0x30>)
 8001162:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	200004bc 	.word	0x200004bc
 800117c:	20000520 	.word	0x20000520

08001180 <vApplicationGetIdleTaskMemory>:

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a07      	ldr	r2, [pc, #28]	; (80011ac <vApplicationGetIdleTaskMemory+0x2c>)
 8001190:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <vApplicationGetIdleTaskMemory+0x30>)
 8001196:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000258 	.word	0x20000258
 80011b0:	200002bc 	.word	0x200002bc

080011b4 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08e      	sub	sp, #56	; 0x38
 80011b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	4b89      	ldr	r3, [pc, #548]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a88      	ldr	r2, [pc, #544]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b86      	ldr	r3, [pc, #536]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	4b82      	ldr	r3, [pc, #520]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a81      	ldr	r2, [pc, #516]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <MX_GPIO_Init+0x240>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a7a      	ldr	r2, [pc, #488]	; (80013f4 <MX_GPIO_Init+0x240>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b78      	ldr	r3, [pc, #480]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b74      	ldr	r3, [pc, #464]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a73      	ldr	r2, [pc, #460]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b71      	ldr	r3, [pc, #452]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a6c      	ldr	r2, [pc, #432]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <MX_GPIO_Init+0x240>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <MX_GPIO_Init+0x240>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a5e      	ldr	r2, [pc, #376]	; (80013f4 <MX_GPIO_Init+0x240>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <MX_GPIO_Init+0x240>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b55      	ldr	r3, [pc, #340]	; (80013f4 <MX_GPIO_Init+0x240>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2116      	movs	r1, #22
 80012ae:	4852      	ldr	r0, [pc, #328]	; (80013f8 <MX_GPIO_Init+0x244>)
 80012b0:	f003 fe1a 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	4850      	ldr	r0, [pc, #320]	; (80013fc <MX_GPIO_Init+0x248>)
 80012ba:	f003 fe15 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80012c4:	484e      	ldr	r0, [pc, #312]	; (8001400 <MX_GPIO_Init+0x24c>)
 80012c6:	f003 fe0f 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012d0:	484c      	ldr	r0, [pc, #304]	; (8001404 <MX_GPIO_Init+0x250>)
 80012d2:	f003 fe09 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80012d6:	2316      	movs	r3, #22
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4842      	ldr	r0, [pc, #264]	; (80013f8 <MX_GPIO_Init+0x244>)
 80012ee:	f003 fb43 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80012f2:	f248 0307 	movw	r3, #32775	; 0x8007
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f8:	4b43      	ldr	r3, [pc, #268]	; (8001408 <MX_GPIO_Init+0x254>)
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	483d      	ldr	r0, [pc, #244]	; (80013fc <MX_GPIO_Init+0x248>)
 8001308:	f003 fb36 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4836      	ldr	r0, [pc, #216]	; (80013fc <MX_GPIO_Init+0x248>)
 8001324:	f003 fb28 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <MX_GPIO_Init+0x254>)
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	482f      	ldr	r0, [pc, #188]	; (80013f8 <MX_GPIO_Init+0x244>)
 800133c:	f003 fb1c 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001340:	2304      	movs	r3, #4
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	482e      	ldr	r0, [pc, #184]	; (800140c <MX_GPIO_Init+0x258>)
 8001354:	f003 fb10 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001358:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800136a:	230c      	movs	r3, #12
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4825      	ldr	r0, [pc, #148]	; (800140c <MX_GPIO_Init+0x258>)
 8001376:	f003 faff 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_GPIO_Init+0x258>)
 8001390:	f003 faf2 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_GPIO_Init+0x24c>)
 80013aa:	f003 fae5 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80013ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_GPIO_Init+0x24c>)
 80013c8:	f003 fad6 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80013cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_GPIO_Init+0x250>)
 80013e6:	f003 fac7 	bl	8004978 <HAL_GPIO_Init>

}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021800 	.word	0x40021800
 8001408:	10120000 	.word	0x10120000
 800140c:	40020400 	.word	0x40020400

08001410 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_I2C3_Init+0x74>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <MX_I2C3_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_I2C3_Init+0x74>)
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <MX_I2C3_Init+0x7c>)
 800141e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_I2C3_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_I2C3_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_I2C3_Init+0x74>)
 800142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001432:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_I2C3_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C3_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_I2C3_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C3_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_I2C3_Init+0x74>)
 800144e:	f003 fd65 	bl	8004f1c <HAL_I2C_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001458:	f000 fbc6 	bl	8001be8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <MX_I2C3_Init+0x74>)
 8001460:	f004 fe49 	bl	80060f6 <HAL_I2CEx_ConfigAnalogFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800146a:	f000 fbbd 	bl	8001be8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C3_Init+0x74>)
 8001472:	f004 fe7c 	bl	800616e <HAL_I2CEx_ConfigDigitalFilter>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800147c:	f000 fbb4 	bl	8001be8 <Error_Handler>
  }

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20021ce0 	.word	0x20021ce0
 8001488:	40005c00 	.word	0x40005c00
 800148c:	000186a0 	.word	0x000186a0

08001490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <HAL_I2C_MspInit+0xc4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d14b      	bne.n	800154a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014fc:	2304      	movs	r3, #4
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4815      	ldr	r0, [pc, #84]	; (800155c <HAL_I2C_MspInit+0xcc>)
 8001508:	f003 fa36 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800150c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001512:	2312      	movs	r3, #18
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800151e:	2304      	movs	r3, #4
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <HAL_I2C_MspInit+0xd0>)
 800152a:	f003 fa25 	bl	8004978 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_I2C_MspInit+0xc8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005c00 	.word	0x40005c00
 8001558:	40023800 	.word	0x40023800
 800155c:	40020800 	.word	0x40020800
 8001560:	40020000 	.word	0x40020000

08001564 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2234      	movs	r2, #52	; 0x34
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00b fcb1 	bl	800ced8 <memset>

  hltdc.Instance = LTDC;
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <MX_LTDC_Init+0xf8>)
 8001578:	4a39      	ldr	r2, [pc, #228]	; (8001660 <MX_LTDC_Init+0xfc>)
 800157a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800157c:	4b37      	ldr	r3, [pc, #220]	; (800165c <MX_LTDC_Init+0xf8>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <MX_LTDC_Init+0xf8>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001588:	4b34      	ldr	r3, [pc, #208]	; (800165c <MX_LTDC_Init+0xf8>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <MX_LTDC_Init+0xf8>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <MX_LTDC_Init+0xf8>)
 8001596:	2209      	movs	r2, #9
 8001598:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <MX_LTDC_Init+0xf8>)
 800159c:	2201      	movs	r2, #1
 800159e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <MX_LTDC_Init+0xf8>)
 80015a2:	221d      	movs	r2, #29
 80015a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <MX_LTDC_Init+0xf8>)
 80015a8:	2203      	movs	r2, #3
 80015aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <MX_LTDC_Init+0xf8>)
 80015ae:	f240 120d 	movw	r2, #269	; 0x10d
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <MX_LTDC_Init+0xf8>)
 80015b6:	f240 1243 	movw	r2, #323	; 0x143
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <MX_LTDC_Init+0xf8>)
 80015be:	f240 1217 	movw	r2, #279	; 0x117
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_LTDC_Init+0xf8>)
 80015c6:	f240 1247 	movw	r2, #327	; 0x147
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_LTDC_Init+0xf8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_LTDC_Init+0xf8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_LTDC_Init+0xf8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015e4:	481d      	ldr	r0, [pc, #116]	; (800165c <MX_LTDC_Init+0xf8>)
 80015e6:	f004 fe01 	bl	80061ec <HAL_LTDC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80015f0:	f000 fafa 	bl	8001be8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80015f8:	23f0      	movs	r3, #240	; 0xf0
 80015fa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001600:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001604:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001606:	2302      	movs	r3, #2
 8001608:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001612:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001616:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001618:	2307      	movs	r3, #7
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800161c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001622:	23f0      	movs	r3, #240	; 0xf0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001626:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_LTDC_Init+0xf8>)
 8001646:	f004 ff63 	bl	8006510 <HAL_LTDC_ConfigLayer>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001650:	f000 faca 	bl	8001be8 <Error_Handler>
  }

}
 8001654:	bf00      	nop
 8001656:	3738      	adds	r7, #56	; 0x38
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20021d34 	.word	0x20021d34
 8001660:	40016800 	.word	0x40016800

08001664 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a7b      	ldr	r2, [pc, #492]	; (8001870 <HAL_LTDC_MspInit+0x20c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	f040 80f0 	bne.w	8001868 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	4b79      	ldr	r3, [pc, #484]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	4a78      	ldr	r2, [pc, #480]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001696:	6453      	str	r3, [r2, #68]	; 0x44
 8001698:	4b76      	ldr	r3, [pc, #472]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	4b72      	ldr	r3, [pc, #456]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4a71      	ldr	r2, [pc, #452]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ae:	f043 0320 	orr.w	r3, r3, #32
 80016b2:	6313      	str	r3, [r2, #48]	; 0x30
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	4b64      	ldr	r3, [pc, #400]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	4a63      	ldr	r2, [pc, #396]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	6313      	str	r3, [r2, #48]	; 0x30
 80016ec:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	4a5c      	ldr	r2, [pc, #368]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001706:	6313      	str	r3, [r2, #48]	; 0x30
 8001708:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b56      	ldr	r3, [pc, #344]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a55      	ldr	r2, [pc, #340]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_LTDC_MspInit+0x210>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800175e:	230e      	movs	r3, #14
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4843      	ldr	r0, [pc, #268]	; (8001878 <HAL_LTDC_MspInit+0x214>)
 800176a:	f003 f905 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800176e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001780:	230e      	movs	r3, #14
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	483c      	ldr	r0, [pc, #240]	; (800187c <HAL_LTDC_MspInit+0x218>)
 800178c:	f003 f8f4 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001790:	2303      	movs	r3, #3
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017a0:	2309      	movs	r3, #9
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4835      	ldr	r0, [pc, #212]	; (8001880 <HAL_LTDC_MspInit+0x21c>)
 80017ac:	f003 f8e4 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80017b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017c2:	230e      	movs	r3, #14
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	482c      	ldr	r0, [pc, #176]	; (8001880 <HAL_LTDC_MspInit+0x21c>)
 80017ce:	f003 f8d3 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80017d2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017e4:	230e      	movs	r3, #14
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4825      	ldr	r0, [pc, #148]	; (8001884 <HAL_LTDC_MspInit+0x220>)
 80017f0:	f003 f8c2 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80017f4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001806:	230e      	movs	r3, #14
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	4619      	mov	r1, r3
 8001810:	481d      	ldr	r0, [pc, #116]	; (8001888 <HAL_LTDC_MspInit+0x224>)
 8001812:	f003 f8b1 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001816:	2348      	movs	r3, #72	; 0x48
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001826:	230e      	movs	r3, #14
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	4816      	ldr	r0, [pc, #88]	; (800188c <HAL_LTDC_MspInit+0x228>)
 8001832:	f003 f8a1 	bl	8004978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001836:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001848:	2309      	movs	r3, #9
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <HAL_LTDC_MspInit+0x220>)
 8001854:	f003 f890 	bl	8004978 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2105      	movs	r1, #5
 800185c:	2058      	movs	r0, #88	; 0x58
 800185e:	f002 fae5 	bl	8003e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001862:	2058      	movs	r0, #88	; 0x58
 8001864:	f002 fafe 	bl	8003e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40016800 	.word	0x40016800
 8001874:	40023800 	.word	0x40023800
 8001878:	40021400 	.word	0x40021400
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40021800 	.word	0x40021800
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00

08001890 <RTOS_AppConfigureTimerForRuntimeStats>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t RTOS_RunTimeCounter;

void RTOS_AppConfigureTimerForRuntimeStats(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  RTOS_RunTimeCounter = 0;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <RTOS_AppConfigureTimerForRuntimeStats+0x14>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <RTOS_AppConfigureTimerForRuntimeStats+0x18>)
 800189c:	f006 fd19 	bl	80082d2 <HAL_TIM_Base_Start_IT>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20021df8 	.word	0x20021df8
 80018a8:	20021fc8 	.word	0x20021fc8

080018ac <RTOS_AppGetRuntimeCounterValueFromISR>:

uint32_t RTOS_AppGetRuntimeCounterValueFromISR(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return RTOS_RunTimeCounter;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <RTOS_AppGetRuntimeCounterValueFromISR+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20021df8 	.word	0x20021df8

080018c4 <__io_putchar>:

/*Redirecting printf to USART1*/
int __io_putchar(int ch)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80018cc:	1d39      	adds	r1, r7, #4
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	2201      	movs	r2, #1
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <__io_putchar+0x20>)
 80018d6:	f007 f92c 	bl	8008b32 <HAL_UART_Transmit>
	return ch;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20021efc 	.word	0x20021efc

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ee:	f002 f97f 	bl	8003bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f2:	f000 f8dd 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f6:	f7ff fc5d 	bl	80011b4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80018fa:	f7ff fae1 	bl	8000ec0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80018fe:	f7ff fb39 	bl	8000f74 <MX_FMC_Init>
  MX_I2C3_Init();
 8001902:	f7ff fd85 	bl	8001410 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001906:	f7ff fe2d 	bl	8001564 <MX_LTDC_Init>
  MX_SPI5_Init();
 800190a:	f000 f975 	bl	8001bf8 <MX_SPI5_Init>
  MX_TIM1_Init();
 800190e:	f000 fdf7 	bl	8002500 <MX_TIM1_Init>
  MX_TIM7_Init();
 8001912:	f000 fe93 	bl	800263c <MX_TIM7_Init>
  MX_TIM5_Init();
 8001916:	f000 fe43 	bl	80025a0 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800191a:	f000 ff21 	bl	8002760 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*LEDs turned on*/
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001924:	4852      	ldr	r0, [pc, #328]	; (8001a70 <main+0x188>)
 8001926:	f003 fadf 	bl	8004ee8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001930:	484f      	ldr	r0, [pc, #316]	; (8001a70 <main+0x188>)
 8001932:	f003 fad9 	bl	8004ee8 <HAL_GPIO_WritePin>

 /*LCD screen initialization and test*/
	BSP_LCD_Init();
 8001936:	f001 fb11 	bl	8002f5c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 800193a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800193e:	2000      	movs	r0, #0
 8001940:	f001 fb8e 	bl	8003060 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8001944:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001948:	2001      	movs	r0, #1
 800194a:	f001 fb89 	bl	8003060 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 800194e:	2001      	movs	r0, #1
 8001950:	f001 fbea 	bl	8003128 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001954:	f001 fd84 	bl	8003460 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f001 fc56 	bl	800320c <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 8001960:	4844      	ldr	r0, [pc, #272]	; (8001a74 <main+0x18c>)
 8001962:	f001 fc23 	bl	80031ac <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001966:	f04f 30ff 	mov.w	r0, #4294967295
 800196a:	f001 fc05 	bl	8003178 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_B_TELECOM);
 800196e:	4842      	ldr	r0, [pc, #264]	; (8001a78 <main+0x190>)
 8001970:	f001 fbea 	bl	8003148 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"PROJET", CENTER_MODE);
 8001974:	f001 fc34 	bl	80031e0 <BSP_LCD_GetFont>
 8001978:	4603      	mov	r3, r0
 800197a:	88d9      	ldrh	r1, [r3, #6]
 800197c:	2301      	movs	r3, #1
 800197e:	4a3f      	ldr	r2, [pc, #252]	; (8001a7c <main+0x194>)
 8001980:	2000      	movs	r0, #0
 8001982:	f001 fcaf 	bl	80032e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"SYSTEMES", CENTER_MODE);
 8001986:	f001 fc2b 	bl	80031e0 <BSP_LCD_GetFont>
 800198a:	4603      	mov	r3, r0
 800198c:	88db      	ldrh	r3, [r3, #6]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b299      	uxth	r1, r3
 8001992:	2301      	movs	r3, #1
 8001994:	4a3a      	ldr	r2, [pc, #232]	; (8001a80 <main+0x198>)
 8001996:	2000      	movs	r0, #0
 8001998:	f001 fca4 	bl	80032e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"TEMPS REEL", CENTER_MODE);
 800199c:	f001 fc20 	bl	80031e0 <BSP_LCD_GetFont>
 80019a0:	4603      	mov	r3, r0
 80019a2:	88db      	ldrh	r3, [r3, #6]
 80019a4:	461a      	mov	r2, r3
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	b299      	uxth	r1, r3
 80019ac:	2301      	movs	r3, #1
 80019ae:	4a35      	ldr	r2, [pc, #212]	; (8001a84 <main+0x19c>)
 80019b0:	2000      	movs	r0, #0
 80019b2:	f001 fc97 	bl	80032e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_G_TELECOM);
 80019b6:	4834      	ldr	r0, [pc, #208]	; (8001a88 <main+0x1a0>)
 80019b8:	f001 fbc6 	bl	8003148 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"2021/2022", CENTER_MODE);
 80019bc:	f001 fc10 	bl	80031e0 <BSP_LCD_GetFont>
 80019c0:	4603      	mov	r3, r0
 80019c2:	88db      	ldrh	r3, [r3, #6]
 80019c4:	461a      	mov	r2, r3
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	b299      	uxth	r1, r3
 80019cc:	2301      	movs	r3, #1
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <main+0x1a4>)
 80019d0:	2000      	movs	r0, #0
 80019d2:	f001 fc87 	bl	80032e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_R_TELECOM);
 80019d6:	482e      	ldr	r0, [pc, #184]	; (8001a90 <main+0x1a8>)
 80019d8:	f001 fbb6 	bl	8003148 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"TELECOM STE", CENTER_MODE);
 80019dc:	f001 fc00 	bl	80031e0 <BSP_LCD_GetFont>
 80019e0:	4603      	mov	r3, r0
 80019e2:	88db      	ldrh	r3, [r3, #6]
 80019e4:	461a      	mov	r2, r3
 80019e6:	00d2      	lsls	r2, r2, #3
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	b299      	uxth	r1, r3
 80019ec:	2301      	movs	r3, #1
 80019ee:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <main+0x1ac>)
 80019f0:	2000      	movs	r0, #0
 80019f2:	f001 fc77 	bl	80032e4 <BSP_LCD_DisplayStringAt>


	HAL_Delay(2000);
 80019f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019fa:	f002 f93b 	bl	8003c74 <HAL_Delay>
	BSP_LCD_SetFont(&Font12);
 80019fe:	4826      	ldr	r0, [pc, #152]	; (8001a98 <main+0x1b0>)
 8001a00:	f001 fbd4 	bl	80031ac <BSP_LCD_SetFont>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f001 fc00 	bl	800320c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a0c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a10:	f001 fb9a 	bl	8003148 <BSP_LCD_SetTextColor>

/*LEDs turned off*/
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1a:	4815      	ldr	r0, [pc, #84]	; (8001a70 <main+0x188>)
 8001a1c:	f003 fa64 	bl	8004ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	4812      	ldr	r0, [pc, #72]	; (8001a70 <main+0x188>)
 8001a28:	f003 fa5e 	bl	8004ee8 <HAL_GPIO_WritePin>

/*I2C3 bus scan*/
	I2C_Scan(&hi2c3,I2C_add);
 8001a2c:	491b      	ldr	r1, [pc, #108]	; (8001a9c <main+0x1b4>)
 8001a2e:	481c      	ldr	r0, [pc, #112]	; (8001aa0 <main+0x1b8>)
 8001a30:	f00b f804 	bl	800ca3c <I2C_Scan>

/*Sensors initialization*/
	Init(&hi2c3);
 8001a34:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <main+0x1b8>)
 8001a36:	f00b f82a 	bl	800ca8e <Init>
	Init_BMP280(&hi2c3);
 8001a3a:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <main+0x1b8>)
 8001a3c:	f00b f882 	bl	800cb44 <Init_BMP280>

/*I2C3 bus scan*/
	I2C_Scan(&hi2c3,I2C_add);
 8001a40:	4916      	ldr	r1, [pc, #88]	; (8001a9c <main+0x1b4>)
 8001a42:	4817      	ldr	r0, [pc, #92]	; (8001aa0 <main+0x1b8>)
 8001a44:	f00a fffa 	bl	800ca3c <I2C_Scan>
/* Start scheduler FreeRTOS*/

	TaskHandle_t xHandleTaskInit;

	/* Create the task init. */
	if( xTaskCreate(
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2300      	movs	r3, #0
 8001a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a56:	4913      	ldr	r1, [pc, #76]	; (8001aa4 <main+0x1bc>)
 8001a58:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <main+0x1c0>)
 8001a5a:	f008 ffc8 	bl	800a9ee <xTaskCreate>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <main+0x182>
	1000,
	NULL,
	4,
	&xHandleTaskInit
	) != pdPASS ){
		printf("Init task created");
 8001a64:	4811      	ldr	r0, [pc, #68]	; (8001aac <main+0x1c4>)
 8001a66:	f00b fea9 	bl	800d7bc <iprintf>
	}
	vTaskStartScheduler();
 8001a6a:	f009 f999 	bl	800ada0 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <main+0x186>
 8001a70:	40021800 	.word	0x40021800
 8001a74:	20000048 	.word	0x20000048
 8001a78:	ff065784 	.word	0xff065784
 8001a7c:	0800f9a0 	.word	0x0800f9a0
 8001a80:	0800f9a8 	.word	0x0800f9a8
 8001a84:	0800f9b4 	.word	0x0800f9b4
 8001a88:	ff81b835 	.word	0xff81b835
 8001a8c:	0800f9c0 	.word	0x0800f9c0
 8001a90:	ff813c2f 	.word	0xff813c2f
 8001a94:	0800f9cc 	.word	0x0800f9cc
 8001a98:	20000050 	.word	0x20000050
 8001a9c:	20021e08 	.word	0x20021e08
 8001aa0:	20021ce0 	.word	0x20021ce0
 8001aa4:	0800f9d8 	.word	0x0800f9d8
 8001aa8:	08002129 	.word	0x08002129
 8001aac:	0800f9e4 	.word	0x0800f9e4

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0a0      	sub	sp, #128	; 0x80
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aba:	2230      	movs	r2, #48	; 0x30
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00b fa0a 	bl	800ced8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2230      	movs	r2, #48	; 0x30
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00b f9fb 	bl	800ced8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <SystemClock_Config+0x10c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a34      	ldr	r2, [pc, #208]	; (8001bbc <SystemClock_Config+0x10c>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <SystemClock_Config+0x10c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a2e      	ldr	r2, [pc, #184]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <SystemClock_Config+0x110>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b22:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b24:	2302      	movs	r3, #2
 8001b26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b32:	23b4      	movs	r3, #180	; 0xb4
 8001b34:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 ff34 	bl	80069b0 <HAL_RCC_OscConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b4e:	f000 f84b 	bl	8001be8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b52:	f004 fedd 	bl	8006910 <HAL_PWREx_EnableOverDrive>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001b5c:	f000 f844 	bl	8001be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	230f      	movs	r3, #15
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b64:	2302      	movs	r3, #2
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 f986 	bl	8006e90 <HAL_RCC_ClockConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001b8a:	f000 f82d 	bl	8001be8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001b92:	233c      	movs	r3, #60	; 0x3c
 8001b94:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001b96:	2305      	movs	r3, #5
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 fba1 	bl	80072ec <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001bb0:	f000 f81a 	bl	8001be8 <Error_Handler>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3780      	adds	r7, #128	; 0x80
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bd6:	f002 f82d 	bl	8003c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40001000 	.word	0x40001000

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <MX_SPI5_Init+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c08:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c28:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c2c:	2218      	movs	r2, #24
 8001c2e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c44:	220a      	movs	r2, #10
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_SPI5_Init+0x64>)
 8001c4a:	f005 fd8c 	bl	8007766 <HAL_SPI_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c54:	f7ff ffc8 	bl	8001be8 <Error_Handler>
  }

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20021e58 	.word	0x20021e58
 8001c60:	40015000 	.word	0x40015000

08001c64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <HAL_SPI_MspInit+0x84>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12c      	bne.n	8001ce0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_SPI_MspInit+0x88>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001cbe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_SPI_MspInit+0x8c>)
 8001cdc:	f002 fe4c 	bl	8004978 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40015000 	.word	0x40015000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40021400 	.word	0x40021400

08001cf4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_SPI_MspDeInit+0x30>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10a      	bne.n	8001d1c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_SPI_MspDeInit+0x34>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_SPI_MspDeInit+0x34>)
 8001d0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001d12:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_SPI_MspDeInit+0x38>)
 8001d18:	f002 ffda 	bl	8004cd0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40015000 	.word	0x40015000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40021400 	.word	0x40021400

08001d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_MspInit+0x54>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_MspInit+0x54>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_MspInit+0x54>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_MspInit+0x54>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_MspInit+0x54>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_MspInit+0x54>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	210f      	movs	r1, #15
 8001d72:	f06f 0001 	mvn.w	r0, #1
 8001d76:	f002 f859 	bl	8003e2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	2036      	movs	r0, #54	; 0x36
 8001d9e:	f002 f845 	bl	8003e2c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001da2:	2036      	movs	r0, #54	; 0x36
 8001da4:	f002 f85e 	bl	8003e64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_InitTick+0xa4>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <HAL_InitTick+0xa4>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6413      	str	r3, [r2, #64]	; 0x40
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_InitTick+0xa4>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc4:	f107 0210 	add.w	r2, r7, #16
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 fa5a 	bl	8007288 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001dd4:	f005 fa30 	bl	8007238 <HAL_RCC_GetPCLK1Freq>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_InitTick+0xa8>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9b      	lsrs	r3, r3, #18
 8001de8:	3b01      	subs	r3, #1
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_InitTick+0xac>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_InitTick+0xb0>)
 8001df0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_InitTick+0xac>)
 8001df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_InitTick+0xac>)
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_InitTick+0xac>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_InitTick+0xac>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_InitTick+0xac>)
 8001e0e:	f006 fa35 	bl	800827c <HAL_TIM_Base_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e18:	4806      	ldr	r0, [pc, #24]	; (8001e34 <HAL_InitTick+0xac>)
 8001e1a:	f006 fa5a 	bl	80082d2 <HAL_TIM_Base_Start_IT>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3730      	adds	r7, #48	; 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	431bde83 	.word	0x431bde83
 8001e34:	20021eb0 	.word	0x20021eb0
 8001e38:	40001000 	.word	0x40001000

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <MemManage_Handler+0x4>

08001e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <USART1_IRQHandler+0x10>)
 8001e76:	f006 fef5 	bl	8008c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20021efc 	.word	0x20021efc

08001e84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM5_IRQHandler+0x10>)
 8001e8a:	f006 fa46 	bl	800831a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20021f48 	.word	0x20021f48

08001e98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <TIM6_DAC_IRQHandler+0x10>)
 8001e9e:	f006 fa3c 	bl	800831a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20021eb0 	.word	0x20021eb0

08001eac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	RTOS_RunTimeCounter++;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <TIM7_IRQHandler+0x18>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <TIM7_IRQHandler+0x18>)
 8001eb8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <TIM7_IRQHandler+0x1c>)
 8001ebc:	f006 fa2d 	bl	800831a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20021df8 	.word	0x20021df8
 8001ec8:	20021fc8 	.word	0x20021fc8

08001ecc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <LTDC_IRQHandler+0x10>)
 8001ed2:	f004 fa5b 	bl	800638c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20021d34 	.word	0x20021d34

08001ee0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA2D_IRQHandler+0x10>)
 8001ee6:	f002 fb08 	bl	80044fa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20021c6c 	.word	0x20021c6c

08001ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
	return 1;
 8001ef8:	2301      	movs	r3, #1
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_kill>:

int _kill(int pid, int sig)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f0e:	f00a ff97 	bl	800ce40 <__errno>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2216      	movs	r2, #22
 8001f16:	601a      	str	r2, [r3, #0]
	return -1;
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_exit>:

void _exit (int status)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ffe7 	bl	8001f04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f36:	e7fe      	b.n	8001f36 <_exit+0x12>

08001f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e00a      	b.n	8001f60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f4a:	f3af 8000 	nop.w
 8001f4e:	4601      	mov	r1, r0
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	60ba      	str	r2, [r7, #8]
 8001f56:	b2ca      	uxtb	r2, r1
 8001f58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf0      	blt.n	8001f4a <_read+0x12>
	}

return len;
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e009      	b.n	8001f98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc99 	bl	80018c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbf1      	blt.n	8001f84 <_write+0x12>
	}
	return len;
 8001fa0:	687b      	ldr	r3, [r7, #4]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_close>:

int _close(int file)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
	return -1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd2:	605a      	str	r2, [r3, #4]
	return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_isatty>:

int _isatty(int file)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	return 1;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
	return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f00a fefc 	bl	800ce40 <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20030000 	.word	0x20030000
 8002074:	00000400 	.word	0x00000400
 8002078:	20002460 	.word	0x20002460
 800207c:	20022128 	.word	0x20022128

08002080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <SystemInit+0x28>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <SystemInit+0x28>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SystemInit+0x28>)
 8002096:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800209a:	609a      	str	r2, [r3, #8]
#endif
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <vCallbackT1>:
SemaphoreHandle_t SemB_4;

QueueHandle_t xQueueAcc, xQueueGyr;


void  vCallbackT1(TimerHandle_t xTimer){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(SemB_1a);
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <vCallbackT1+0x20>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	f007 ff31 	bl	8009f24 <xQueueGenericSend>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20021ef4 	.word	0x20021ef4

080020d0 <vCallbackT2>:

void  vCallbackT2(TimerHandle_t xTimer){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(SemB_1b);
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <vCallbackT2+0x20>)
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	2300      	movs	r3, #0
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	f007 ff1f 	bl	8009f24 <xQueueGenericSend>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20021ef8 	.word	0x20021ef8

080020f4 <vCallbackT3>:


void vCallbackT3(TimerHandle_t xTimer){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(SemB_3);
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <vCallbackT3+0x2c>)
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	2300      	movs	r3, #0
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	f007 ff0d 	bl	8009f24 <xQueueGenericSend>
	xSemaphoreGive(SemB_4);
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <vCallbackT3+0x30>)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	f007 ff06 	bl	8009f24 <xQueueGenericSend>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20021f44 	.word	0x20021f44
 8002124:	20021f40 	.word	0x20021f40

08002128 <vTaskInit>:




void vTaskInit(void *pvParameters ){
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af02      	add	r7, sp, #8
 800212e:	6078      	str	r0, [r7, #4]
	//---------------------------------------
	// TIMER - START
	//---------------------------------------

	// Creation des timers
	Timer1 = xTimerCreate("Timer1", pdMS_TO_TICKS(10), pdTRUE, ( void * ) 0, vCallbackT1 );
 8002130:	4b81      	ldr	r3, [pc, #516]	; (8002338 <vTaskInit+0x210>)
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2300      	movs	r3, #0
 8002136:	2201      	movs	r2, #1
 8002138:	210a      	movs	r1, #10
 800213a:	4880      	ldr	r0, [pc, #512]	; (800233c <vTaskInit+0x214>)
 800213c:	f009 fd0c 	bl	800bb58 <xTimerCreate>
 8002140:	6138      	str	r0, [r7, #16]
	Timer2 = xTimerCreate("Timer2", pdMS_TO_TICKS(20), pdTRUE, ( void * ) 0, vCallbackT2 );
 8002142:	4b7f      	ldr	r3, [pc, #508]	; (8002340 <vTaskInit+0x218>)
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	2201      	movs	r2, #1
 800214a:	2114      	movs	r1, #20
 800214c:	487d      	ldr	r0, [pc, #500]	; (8002344 <vTaskInit+0x21c>)
 800214e:	f009 fd03 	bl	800bb58 <xTimerCreate>
 8002152:	60f8      	str	r0, [r7, #12]
	Timer3 = xTimerCreate("Timer3", pdMS_TO_TICKS(100), pdTRUE, ( void * ) 0, vCallbackT3 );
 8002154:	4b7c      	ldr	r3, [pc, #496]	; (8002348 <vTaskInit+0x220>)
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2300      	movs	r3, #0
 800215a:	2201      	movs	r2, #1
 800215c:	2164      	movs	r1, #100	; 0x64
 800215e:	487b      	ldr	r0, [pc, #492]	; (800234c <vTaskInit+0x224>)
 8002160:	f009 fcfa 	bl	800bb58 <xTimerCreate>
 8002164:	60b8      	str	r0, [r7, #8]
	// SEMAPHORE - START
	//---------------------------------------

	// création des sémaphores binaires

	SemB_1a = xSemaphoreCreateBinary();
 8002166:	2203      	movs	r2, #3
 8002168:	2100      	movs	r1, #0
 800216a:	2001      	movs	r0, #1
 800216c:	f007 fe76 	bl	8009e5c <xQueueGenericCreate>
 8002170:	4603      	mov	r3, r0
 8002172:	4a77      	ldr	r2, [pc, #476]	; (8002350 <vTaskInit+0x228>)
 8002174:	6013      	str	r3, [r2, #0]
	SemB_1b = xSemaphoreCreateBinary();
 8002176:	2203      	movs	r2, #3
 8002178:	2100      	movs	r1, #0
 800217a:	2001      	movs	r0, #1
 800217c:	f007 fe6e 	bl	8009e5c <xQueueGenericCreate>
 8002180:	4603      	mov	r3, r0
 8002182:	4a74      	ldr	r2, [pc, #464]	; (8002354 <vTaskInit+0x22c>)
 8002184:	6013      	str	r3, [r2, #0]
	SemB_3  = xSemaphoreCreateBinary();
 8002186:	2203      	movs	r2, #3
 8002188:	2100      	movs	r1, #0
 800218a:	2001      	movs	r0, #1
 800218c:	f007 fe66 	bl	8009e5c <xQueueGenericCreate>
 8002190:	4603      	mov	r3, r0
 8002192:	4a71      	ldr	r2, [pc, #452]	; (8002358 <vTaskInit+0x230>)
 8002194:	6013      	str	r3, [r2, #0]
	SemB_4  = xSemaphoreCreateBinary();
 8002196:	2203      	movs	r2, #3
 8002198:	2100      	movs	r1, #0
 800219a:	2001      	movs	r0, #1
 800219c:	f007 fe5e 	bl	8009e5c <xQueueGenericCreate>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4a6e      	ldr	r2, [pc, #440]	; (800235c <vTaskInit+0x234>)
 80021a4:	6013      	str	r3, [r2, #0]

	// vérification

	if(SemB_1a==NULL || SemB_1b==NULL || SemB_3==NULL || SemB_4==NULL)
 80021a6:	4b6a      	ldr	r3, [pc, #424]	; (8002350 <vTaskInit+0x228>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <vTaskInit+0x9e>
 80021ae:	4b69      	ldr	r3, [pc, #420]	; (8002354 <vTaskInit+0x22c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <vTaskInit+0x9e>
 80021b6:	4b68      	ldr	r3, [pc, #416]	; (8002358 <vTaskInit+0x230>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <vTaskInit+0x9e>
 80021be:	4b67      	ldr	r3, [pc, #412]	; (800235c <vTaskInit+0x234>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <vTaskInit+0xaa>
	{
		printf("Erreur création sémaphore  !\r\n");
 80021c6:	4866      	ldr	r0, [pc, #408]	; (8002360 <vTaskInit+0x238>)
 80021c8:	f00b fb7e 	bl	800d8c8 <puts>
		exit(1);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f00a fe3d 	bl	800ce4c <exit>
	}

	// Debug

	vQueueAddToRegistry(SemB_1a, "SemB_1a");
 80021d2:	4b5f      	ldr	r3, [pc, #380]	; (8002350 <vTaskInit+0x228>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4963      	ldr	r1, [pc, #396]	; (8002364 <vTaskInit+0x23c>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f008 fb4d 	bl	800a878 <vQueueAddToRegistry>
	vQueueAddToRegistry(SemB_1b, "SemB_1b");
 80021de:	4b5d      	ldr	r3, [pc, #372]	; (8002354 <vTaskInit+0x22c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4961      	ldr	r1, [pc, #388]	; (8002368 <vTaskInit+0x240>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f008 fb47 	bl	800a878 <vQueueAddToRegistry>
	vQueueAddToRegistry(SemB_3, "SemB_3");
 80021ea:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <vTaskInit+0x230>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	495f      	ldr	r1, [pc, #380]	; (800236c <vTaskInit+0x244>)
 80021f0:	4618      	mov	r0, r3
 80021f2:	f008 fb41 	bl	800a878 <vQueueAddToRegistry>
	vQueueAddToRegistry(SemB_4, "SemB_4");
 80021f6:	4b59      	ldr	r3, [pc, #356]	; (800235c <vTaskInit+0x234>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	495d      	ldr	r1, [pc, #372]	; (8002370 <vTaskInit+0x248>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f008 fb3b 	bl	800a878 <vQueueAddToRegistry>

	//---------------------------------------
	// TACHE - START
	//---------------------------------------

	xTaskCreate(vTask1a, "task 1a", 1000, NULL, 3, NULL);
 8002202:	2300      	movs	r3, #0
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	2303      	movs	r3, #3
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2300      	movs	r3, #0
 800220c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002210:	4958      	ldr	r1, [pc, #352]	; (8002374 <vTaskInit+0x24c>)
 8002212:	4859      	ldr	r0, [pc, #356]	; (8002378 <vTaskInit+0x250>)
 8002214:	f008 fbeb 	bl	800a9ee <xTaskCreate>
	xTaskCreate(vTask1b, "task 1b", 1000, NULL, 3, NULL);
 8002218:	2300      	movs	r3, #0
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2303      	movs	r3, #3
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2300      	movs	r3, #0
 8002222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002226:	4955      	ldr	r1, [pc, #340]	; (800237c <vTaskInit+0x254>)
 8002228:	4855      	ldr	r0, [pc, #340]	; (8002380 <vTaskInit+0x258>)
 800222a:	f008 fbe0 	bl	800a9ee <xTaskCreate>
	xTaskCreate(vTask2a, "task 1a", 1000, NULL, 2, NULL);
 800222e:	2300      	movs	r3, #0
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	2302      	movs	r3, #2
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2300      	movs	r3, #0
 8002238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800223c:	494d      	ldr	r1, [pc, #308]	; (8002374 <vTaskInit+0x24c>)
 800223e:	4851      	ldr	r0, [pc, #324]	; (8002384 <vTaskInit+0x25c>)
 8002240:	f008 fbd5 	bl	800a9ee <xTaskCreate>
	xTaskCreate(vTask2b, "task 1b", 1000, NULL, 2, NULL);
 8002244:	2300      	movs	r3, #0
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	2302      	movs	r3, #2
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2300      	movs	r3, #0
 800224e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002252:	494a      	ldr	r1, [pc, #296]	; (800237c <vTaskInit+0x254>)
 8002254:	484c      	ldr	r0, [pc, #304]	; (8002388 <vTaskInit+0x260>)
 8002256:	f008 fbca 	bl	800a9ee <xTaskCreate>
	xTaskCreate(vTask1a, "task 3", 1000, NULL, 1, NULL);
 800225a:	2300      	movs	r3, #0
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	2301      	movs	r3, #1
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2300      	movs	r3, #0
 8002264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002268:	4948      	ldr	r1, [pc, #288]	; (800238c <vTaskInit+0x264>)
 800226a:	4843      	ldr	r0, [pc, #268]	; (8002378 <vTaskInit+0x250>)
 800226c:	f008 fbbf 	bl	800a9ee <xTaskCreate>
	xTaskCreate(vTask1b, "task 4", 1000, NULL, 1, NULL);
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2301      	movs	r3, #1
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2300      	movs	r3, #0
 800227a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800227e:	4944      	ldr	r1, [pc, #272]	; (8002390 <vTaskInit+0x268>)
 8002280:	483f      	ldr	r0, [pc, #252]	; (8002380 <vTaskInit+0x258>)
 8002282:	f008 fbb4 	bl	800a9ee <xTaskCreate>
	// TACHE - END
	//---------------------------------------

	// Creation Queue

	xQueueAcc = xQueueCreate( 10, 3*sizeof( double ) );
 8002286:	2200      	movs	r2, #0
 8002288:	2118      	movs	r1, #24
 800228a:	200a      	movs	r0, #10
 800228c:	f007 fde6 	bl	8009e5c <xQueueGenericCreate>
 8002290:	4603      	mov	r3, r0
 8002292:	4a40      	ldr	r2, [pc, #256]	; (8002394 <vTaskInit+0x26c>)
 8002294:	6013      	str	r3, [r2, #0]
	xQueueGyr = xQueueCreate( 10, 3*sizeof( double ) );
 8002296:	2200      	movs	r2, #0
 8002298:	2118      	movs	r1, #24
 800229a:	200a      	movs	r0, #10
 800229c:	f007 fdde 	bl	8009e5c <xQueueGenericCreate>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4a3d      	ldr	r2, [pc, #244]	; (8002398 <vTaskInit+0x270>)
 80022a4:	6013      	str	r3, [r2, #0]

	if( xQueueAcc == NULL || xQueueGyr == NULL )
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <vTaskInit+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <vTaskInit+0x18e>
 80022ae:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <vTaskInit+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <vTaskInit+0x194>
	{
	  printf("Erreur creation queue\n\r");
 80022b6:	4839      	ldr	r0, [pc, #228]	; (800239c <vTaskInit+0x274>)
 80022b8:	f00b fa80 	bl	800d7bc <iprintf>
	    }


	// Demarrage des timers
	if( ( Timer1 != NULL ) && ( Timer2 != NULL ) && ( Timer3 != NULL ) ){
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d026      	beq.n	8002310 <vTaskInit+0x1e8>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <vTaskInit+0x1e8>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d020      	beq.n	8002310 <vTaskInit+0x1e8>
		xTimer1Started = xTimerStart( Timer1, 0 );
 80022ce:	f008 fe79 	bl	800afc4 <xTaskGetTickCount>
 80022d2:	4602      	mov	r2, r0
 80022d4:	2300      	movs	r3, #0
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2300      	movs	r3, #0
 80022da:	2101      	movs	r1, #1
 80022dc:	6938      	ldr	r0, [r7, #16]
 80022de:	f009 fc97 	bl	800bc10 <xTimerGenericCommand>
 80022e2:	61f8      	str	r0, [r7, #28]
		xTimer2Started = xTimerStart( Timer3, 0 );
 80022e4:	f008 fe6e 	bl	800afc4 <xTaskGetTickCount>
 80022e8:	4602      	mov	r2, r0
 80022ea:	2300      	movs	r3, #0
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	2101      	movs	r1, #1
 80022f2:	68b8      	ldr	r0, [r7, #8]
 80022f4:	f009 fc8c 	bl	800bc10 <xTimerGenericCommand>
 80022f8:	61b8      	str	r0, [r7, #24]
		xTimer3Started = xTimerStart( Timer3, 0 );
 80022fa:	f008 fe63 	bl	800afc4 <xTaskGetTickCount>
 80022fe:	4602      	mov	r2, r0
 8002300:	2300      	movs	r3, #0
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2300      	movs	r3, #0
 8002306:	2101      	movs	r1, #1
 8002308:	68b8      	ldr	r0, [r7, #8]
 800230a:	f009 fc81 	bl	800bc10 <xTimerGenericCommand>
 800230e:	6178      	str	r0, [r7, #20]
	}

	if( ( xTimer1Started == pdPASS ) && ( xTimer2Started == pdPASS ) && ( xTimer3Started == pdPASS ) )
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d108      	bne.n	8002328 <vTaskInit+0x200>
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <vTaskInit+0x200>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <vTaskInit+0x200>
	 {
		printf("Timers running\n\r");
 8002322:	481f      	ldr	r0, [pc, #124]	; (80023a0 <vTaskInit+0x278>)
 8002324:	f00b fa4a 	bl	800d7bc <iprintf>
	 }
	// Destruction de la tache
	vTaskDelete(NULL);
 8002328:	2000      	movs	r0, #0
 800232a:	f008 fca9 	bl	800ac80 <vTaskDelete>
}
 800232e:	bf00      	nop
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	080020ad 	.word	0x080020ad
 800233c:	0800f9f8 	.word	0x0800f9f8
 8002340:	080020d1 	.word	0x080020d1
 8002344:	0800fa00 	.word	0x0800fa00
 8002348:	080020f5 	.word	0x080020f5
 800234c:	0800fa08 	.word	0x0800fa08
 8002350:	20021ef4 	.word	0x20021ef4
 8002354:	20021ef8 	.word	0x20021ef8
 8002358:	20021f44 	.word	0x20021f44
 800235c:	20021f40 	.word	0x20021f40
 8002360:	0800fa10 	.word	0x0800fa10
 8002364:	0800fa30 	.word	0x0800fa30
 8002368:	0800fa38 	.word	0x0800fa38
 800236c:	0800fa40 	.word	0x0800fa40
 8002370:	0800fa48 	.word	0x0800fa48
 8002374:	0800fa50 	.word	0x0800fa50
 8002378:	080023a5 	.word	0x080023a5
 800237c:	0800fa58 	.word	0x0800fa58
 8002380:	08002441 	.word	0x08002441
 8002384:	08002469 	.word	0x08002469
 8002388:	080024f5 	.word	0x080024f5
 800238c:	0800fa60 	.word	0x0800fa60
 8002390:	0800fa68 	.word	0x0800fa68
 8002394:	20021ef0 	.word	0x20021ef0
 8002398:	20021f3c 	.word	0x20021f3c
 800239c:	0800fa70 	.word	0x0800fa70
 80023a0:	0800fa88 	.word	0x0800fa88

080023a4 <vTask1a>:


void vTask1a(void *pvParameters ){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	; 0x38
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	double acc[3];
	double gyro[3];

	while(1)
	{
		printf("Tache1a\n\r");
 80023ac:	481d      	ldr	r0, [pc, #116]	; (8002424 <vTask1a+0x80>)
 80023ae:	f00b fa05 	bl	800d7bc <iprintf>
		xSemaphoreTake(SemB_1a, portMAX_DELAY);
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <vTask1a+0x84>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f04f 31ff 	mov.w	r1, #4294967295
 80023ba:	4618      	mov	r0, r3
 80023bc:	f008 f828 	bl	800a410 <xQueueSemaphoreTake>

		// Section critique ( à faire )

		MeasureA(&hi2c3,acc);
 80023c0:	f107 0320 	add.w	r3, r7, #32
 80023c4:	4619      	mov	r1, r3
 80023c6:	4819      	ldr	r0, [pc, #100]	; (800242c <vTask1a+0x88>)
 80023c8:	f00a fbf2 	bl	800cbb0 <MeasureA>
		MeasureG(&hi2c3,gyro);
 80023cc:	f107 0308 	add.w	r3, r7, #8
 80023d0:	4619      	mov	r1, r3
 80023d2:	4816      	ldr	r0, [pc, #88]	; (800242c <vTask1a+0x88>)
 80023d4:	f00a fc7c 	bl	800ccd0 <MeasureG>
	    if( xQueueAcc != 0 )
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <vTask1a+0x8c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <vTask1a+0x58>
	    {
	        if( xQueueSend( xQueueAcc, ( void * ) &acc, ( TickType_t ) 10 ) != pdPASS )
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <vTask1a+0x8c>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	f107 0120 	add.w	r1, r7, #32
 80023e8:	2300      	movs	r3, #0
 80023ea:	220a      	movs	r2, #10
 80023ec:	f007 fd9a 	bl	8009f24 <xQueueGenericSend>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d002      	beq.n	80023fc <vTask1a+0x58>
	        {
	            printf("Erreur envoi acc\n\r");
 80023f6:	480f      	ldr	r0, [pc, #60]	; (8002434 <vTask1a+0x90>)
 80023f8:	f00b f9e0 	bl	800d7bc <iprintf>
	        }
	    }
	    if( xQueueGyr != 0 )
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <vTask1a+0x94>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0d3      	beq.n	80023ac <vTask1a+0x8>
	    {
	        if( xQueueSend( xQueueGyr, ( void * ) &gyro, ( TickType_t ) 10 ) != pdPASS )
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <vTask1a+0x94>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	f107 0108 	add.w	r1, r7, #8
 800240c:	2300      	movs	r3, #0
 800240e:	220a      	movs	r2, #10
 8002410:	f007 fd88 	bl	8009f24 <xQueueGenericSend>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	d0c8      	beq.n	80023ac <vTask1a+0x8>
	        {
	            printf("Erreur envoi gyro\n\r");
 800241a:	4808      	ldr	r0, [pc, #32]	; (800243c <vTask1a+0x98>)
 800241c:	f00b f9ce 	bl	800d7bc <iprintf>
		printf("Tache1a\n\r");
 8002420:	e7c4      	b.n	80023ac <vTask1a+0x8>
 8002422:	bf00      	nop
 8002424:	0800fa9c 	.word	0x0800fa9c
 8002428:	20021ef4 	.word	0x20021ef4
 800242c:	20021ce0 	.word	0x20021ce0
 8002430:	20021ef0 	.word	0x20021ef0
 8002434:	0800faa8 	.word	0x0800faa8
 8002438:	20021f3c 	.word	0x20021f3c
 800243c:	0800fabc 	.word	0x0800fabc

08002440 <vTask1b>:
	        }
	    }
	}
}

void vTask1b(void *pvParameters ){
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("Tache1b\n\r");
 8002448:	4805      	ldr	r0, [pc, #20]	; (8002460 <vTask1b+0x20>)
 800244a:	f00b f9b7 	bl	800d7bc <iprintf>
		xSemaphoreTake(SemB_1b, portMAX_DELAY);
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <vTask1b+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f04f 31ff 	mov.w	r1, #4294967295
 8002456:	4618      	mov	r0, r3
 8002458:	f007 ffda 	bl	800a410 <xQueueSemaphoreTake>
		printf("Tache1b\n\r");
 800245c:	e7f4      	b.n	8002448 <vTask1b+0x8>
 800245e:	bf00      	nop
 8002460:	0800fad0 	.word	0x0800fad0
 8002464:	20021ef8 	.word	0x20021ef8

08002468 <vTask2a>:

	}
}

void vTask2a(void *pvParameters ){
 8002468:	b580      	push	{r7, lr}
 800246a:	b08e      	sub	sp, #56	; 0x38
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	double acc[3];
	double gyro[3];

	while(1)
	{
		   if( xQueueAcc != NULL )
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <vTask2a+0x70>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <vTask2a+0x2c>
		   {
		      if( xQueueReceive( xQueueAcc,
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <vTask2a+0x70>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f107 0120 	add.w	r1, r7, #32
 8002480:	220a      	movs	r2, #10
 8002482:	4618      	mov	r0, r3
 8002484:	f007 fee4 	bl	800a250 <xQueueReceive>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d102      	bne.n	8002494 <vTask2a+0x2c>
		                         &( acc ),
		                         ( TickType_t ) 10 ) == pdPASS )
		      {
		    	  printf("Erreur rcepetion acc\n\r");
 800248e:	4813      	ldr	r0, [pc, #76]	; (80024dc <vTask2a+0x74>)
 8002490:	f00b f994 	bl	800d7bc <iprintf>
		      }
		   }

		   if( xQueueGyr != NULL )
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <vTask2a+0x78>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00d      	beq.n	80024b8 <vTask2a+0x50>
		   		   {
		   		      if( xQueueReceive( xQueueGyr,
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <vTask2a+0x78>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f107 0108 	add.w	r1, r7, #8
 80024a4:	220a      	movs	r2, #10
 80024a6:	4618      	mov	r0, r3
 80024a8:	f007 fed2 	bl	800a250 <xQueueReceive>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d102      	bne.n	80024b8 <vTask2a+0x50>
		   		                         &( gyro ),
		   		                         ( TickType_t ) 10 ) == pdPASS )
		   		      {
		   		    	  printf("Erreur rcepetion gyro\n\r");
 80024b2:	480c      	ldr	r0, [pc, #48]	; (80024e4 <vTask2a+0x7c>)
 80024b4:	f00b f982 	bl	800d7bc <iprintf>
		   		      }
		   		   }

			  printf("ax=%2.2f g\n\r",acc[0]);
 80024b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024bc:	480a      	ldr	r0, [pc, #40]	; (80024e8 <vTask2a+0x80>)
 80024be:	f00b f97d 	bl	800d7bc <iprintf>
			  printf("ay=%2.2f g\n\r",acc[1]);
 80024c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c6:	4809      	ldr	r0, [pc, #36]	; (80024ec <vTask2a+0x84>)
 80024c8:	f00b f978 	bl	800d7bc <iprintf>
			  printf("az=%2.2f g\n\r",acc[2]);
 80024cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024d0:	4807      	ldr	r0, [pc, #28]	; (80024f0 <vTask2a+0x88>)
 80024d2:	f00b f973 	bl	800d7bc <iprintf>
		   if( xQueueAcc != NULL )
 80024d6:	e7cb      	b.n	8002470 <vTask2a+0x8>
 80024d8:	20021ef0 	.word	0x20021ef0
 80024dc:	0800fadc 	.word	0x0800fadc
 80024e0:	20021f3c 	.word	0x20021f3c
 80024e4:	0800faf4 	.word	0x0800faf4
 80024e8:	0800fb0c 	.word	0x0800fb0c
 80024ec:	0800fb1c 	.word	0x0800fb1c
 80024f0:	0800fb2c 	.word	0x0800fb2c

080024f4 <vTask2b>:
	}
}

void vTask2b(void *pvParameters ){
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	while(1)
 80024fc:	e7fe      	b.n	80024fc <vTask2b+0x8>
	...

08002500 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002514:	463b      	mov	r3, r7
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <MX_TIM1_Init+0x98>)
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <MX_TIM1_Init+0x9c>)
 8002520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <MX_TIM1_Init+0x98>)
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <MX_TIM1_Init+0x98>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <MX_TIM1_Init+0x98>)
 8002530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002534:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <MX_TIM1_Init+0x98>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <MX_TIM1_Init+0x98>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <MX_TIM1_Init+0x98>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002548:	4813      	ldr	r0, [pc, #76]	; (8002598 <MX_TIM1_Init+0x98>)
 800254a:	f005 fe97 	bl	800827c <HAL_TIM_Base_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002554:	f7ff fb48 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	4619      	mov	r1, r3
 8002564:	480c      	ldr	r0, [pc, #48]	; (8002598 <MX_TIM1_Init+0x98>)
 8002566:	f005 ffe0 	bl	800852a <HAL_TIM_ConfigClockSource>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002570:	f7ff fb3a 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_TIM1_Init+0x98>)
 8002582:	f006 f9f9 	bl	8008978 <HAL_TIMEx_MasterConfigSynchronization>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800258c:	f7ff fb2c 	bl	8001be8 <Error_Handler>
  }

}
 8002590:	bf00      	nop
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20021f88 	.word	0x20021f88
 800259c:	40010000 	.word	0x40010000

080025a0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a6:	f107 0308 	add.w	r3, r7, #8
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b4:	463b      	mov	r3, r7
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <MX_TIM5_Init+0x94>)
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <MX_TIM5_Init+0x98>)
 80025c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <MX_TIM5_Init+0x94>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <MX_TIM5_Init+0x94>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <MX_TIM5_Init+0x94>)
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <MX_TIM5_Init+0x94>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <MX_TIM5_Init+0x94>)
 80025de:	2200      	movs	r2, #0
 80025e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025e2:	4814      	ldr	r0, [pc, #80]	; (8002634 <MX_TIM5_Init+0x94>)
 80025e4:	f005 fe4a 	bl	800827c <HAL_TIM_Base_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80025ee:	f7ff fafb 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025f8:	f107 0308 	add.w	r3, r7, #8
 80025fc:	4619      	mov	r1, r3
 80025fe:	480d      	ldr	r0, [pc, #52]	; (8002634 <MX_TIM5_Init+0x94>)
 8002600:	f005 ff93 	bl	800852a <HAL_TIM_ConfigClockSource>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800260a:	f7ff faed 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002616:	463b      	mov	r3, r7
 8002618:	4619      	mov	r1, r3
 800261a:	4806      	ldr	r0, [pc, #24]	; (8002634 <MX_TIM5_Init+0x94>)
 800261c:	f006 f9ac 	bl	8008978 <HAL_TIMEx_MasterConfigSynchronization>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002626:	f7ff fadf 	bl	8001be8 <Error_Handler>
  }

}
 800262a:	bf00      	nop
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20021f48 	.word	0x20021f48
 8002638:	40000c00 	.word	0x40000c00

0800263c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002642:	463b      	mov	r3, r7
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <MX_TIM7_Init+0x64>)
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <MX_TIM7_Init+0x68>)
 800264e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <MX_TIM7_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <MX_TIM7_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_TIM7_Init+0x64>)
 800265e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002662:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_TIM7_Init+0x64>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800266a:	480d      	ldr	r0, [pc, #52]	; (80026a0 <MX_TIM7_Init+0x64>)
 800266c:	f005 fe06 	bl	800827c <HAL_TIM_Base_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002676:	f7ff fab7 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002682:	463b      	mov	r3, r7
 8002684:	4619      	mov	r1, r3
 8002686:	4806      	ldr	r0, [pc, #24]	; (80026a0 <MX_TIM7_Init+0x64>)
 8002688:	f006 f976 	bl	8008978 <HAL_TIMEx_MasterConfigSynchronization>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002692:	f7ff faa9 	bl	8001be8 <Error_Handler>
  }

}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20021fc8 	.word	0x20021fc8
 80026a4:	40001400 	.word	0x40001400

080026a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <HAL_TIM_Base_MspInit+0xa8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_TIM_Base_MspInit+0xac>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a24      	ldr	r2, [pc, #144]	; (8002754 <HAL_TIM_Base_MspInit+0xac>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_TIM_Base_MspInit+0xac>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80026d6:	e036      	b.n	8002746 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <HAL_TIM_Base_MspInit+0xb0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d116      	bne.n	8002710 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_TIM_Base_MspInit+0xac>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <HAL_TIM_Base_MspInit+0xac>)
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_TIM_Base_MspInit+0xac>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2105      	movs	r1, #5
 8002702:	2032      	movs	r0, #50	; 0x32
 8002704:	f001 fb92 	bl	8003e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002708:	2032      	movs	r0, #50	; 0x32
 800270a:	f001 fbab 	bl	8003e64 <HAL_NVIC_EnableIRQ>
}
 800270e:	e01a      	b.n	8002746 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a11      	ldr	r2, [pc, #68]	; (800275c <HAL_TIM_Base_MspInit+0xb4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d115      	bne.n	8002746 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_TIM_Base_MspInit+0xac>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <HAL_TIM_Base_MspInit+0xac>)
 8002724:	f043 0320 	orr.w	r3, r3, #32
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_TIM_Base_MspInit+0xac>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2105      	movs	r1, #5
 800273a:	2037      	movs	r0, #55	; 0x37
 800273c:	f001 fb76 	bl	8003e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002740:	2037      	movs	r0, #55	; 0x37
 8002742:	f001 fb8f 	bl	8003e64 <HAL_NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40010000 	.word	0x40010000
 8002754:	40023800 	.word	0x40023800
 8002758:	40000c00 	.word	0x40000c00
 800275c:	40001400 	.word	0x40001400

08002760 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002766:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <MX_USART1_UART_Init+0x50>)
 8002768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 800276c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002798:	f006 f97e 	bl	8008a98 <HAL_UART_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027a2:	f7ff fa21 	bl	8001be8 <Error_Handler>
  }

}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20021efc 	.word	0x20021efc
 80027b0:	40011000 	.word	0x40011000

080027b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <HAL_UART_MspInit+0x94>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d134      	bne.n	8002840 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_UART_MspInit+0x98>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_UART_MspInit+0x98>)
 80027e0:	f043 0310 	orr.w	r3, r3, #16
 80027e4:	6453      	str	r3, [r2, #68]	; 0x44
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_UART_MspInit+0x98>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_UART_MspInit+0x98>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_UART_MspInit+0x98>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_UART_MspInit+0x98>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800280e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002820:	2307      	movs	r3, #7
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	4619      	mov	r1, r3
 800282a:	4809      	ldr	r0, [pc, #36]	; (8002850 <HAL_UART_MspInit+0x9c>)
 800282c:	f002 f8a4 	bl	8004978 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002830:	2200      	movs	r2, #0
 8002832:	2105      	movs	r1, #5
 8002834:	2025      	movs	r0, #37	; 0x25
 8002836:	f001 faf9 	bl	8003e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800283a:	2025      	movs	r0, #37	; 0x25
 800283c:	f001 fb12 	bl	8003e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002840:	bf00      	nop
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40011000 	.word	0x40011000
 800284c:	40023800 	.word	0x40023800
 8002850:	40020000 	.word	0x40020000

08002854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800288c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002858:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800285a:	e003      	b.n	8002864 <LoopCopyDataInit>

0800285c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800285e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002860:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002862:	3104      	adds	r1, #4

08002864 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002864:	480b      	ldr	r0, [pc, #44]	; (8002894 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002868:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800286a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800286c:	d3f6      	bcc.n	800285c <CopyDataInit>
  ldr  r2, =_sbss
 800286e:	4a0b      	ldr	r2, [pc, #44]	; (800289c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002870:	e002      	b.n	8002878 <LoopFillZerobss>

08002872 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002872:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002874:	f842 3b04 	str.w	r3, [r2], #4

08002878 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800287a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800287c:	d3f9      	bcc.n	8002872 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800287e:	f7ff fbff 	bl	8002080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002882:	f00a faf7 	bl	800ce74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002886:	f7ff f82f 	bl	80018e8 <main>
  bx  lr    
 800288a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800288c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002890:	08012ac4 	.word	0x08012ac4
  ldr  r0, =_sdata
 8002894:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002898:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 800289c:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 80028a0:	20022128 	.word	0x20022128

080028a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a4:	e7fe      	b.n	80028a4 <ADC_IRQHandler>

080028a6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80028aa:	f000 fa5d 	bl	8002d68 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80028ae:	20ca      	movs	r0, #202	; 0xca
 80028b0:	f000 f95d 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80028b4:	20c3      	movs	r0, #195	; 0xc3
 80028b6:	f000 f967 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80028ba:	2008      	movs	r0, #8
 80028bc:	f000 f964 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80028c0:	2050      	movs	r0, #80	; 0x50
 80028c2:	f000 f961 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80028c6:	20cf      	movs	r0, #207	; 0xcf
 80028c8:	f000 f951 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f000 f95b 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80028d2:	20c1      	movs	r0, #193	; 0xc1
 80028d4:	f000 f958 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80028d8:	2030      	movs	r0, #48	; 0x30
 80028da:	f000 f955 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80028de:	20ed      	movs	r0, #237	; 0xed
 80028e0:	f000 f945 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80028e4:	2064      	movs	r0, #100	; 0x64
 80028e6:	f000 f94f 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80028ea:	2003      	movs	r0, #3
 80028ec:	f000 f94c 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80028f0:	2012      	movs	r0, #18
 80028f2:	f000 f949 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80028f6:	2081      	movs	r0, #129	; 0x81
 80028f8:	f000 f946 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80028fc:	20e8      	movs	r0, #232	; 0xe8
 80028fe:	f000 f936 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002902:	2085      	movs	r0, #133	; 0x85
 8002904:	f000 f940 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002908:	2000      	movs	r0, #0
 800290a:	f000 f93d 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800290e:	2078      	movs	r0, #120	; 0x78
 8002910:	f000 f93a 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002914:	20cb      	movs	r0, #203	; 0xcb
 8002916:	f000 f92a 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800291a:	2039      	movs	r0, #57	; 0x39
 800291c:	f000 f934 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002920:	202c      	movs	r0, #44	; 0x2c
 8002922:	f000 f931 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f000 f92e 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800292c:	2034      	movs	r0, #52	; 0x34
 800292e:	f000 f92b 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002932:	2002      	movs	r0, #2
 8002934:	f000 f928 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002938:	20f7      	movs	r0, #247	; 0xf7
 800293a:	f000 f918 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800293e:	2020      	movs	r0, #32
 8002940:	f000 f922 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002944:	20ea      	movs	r0, #234	; 0xea
 8002946:	f000 f912 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f000 f91c 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002950:	2000      	movs	r0, #0
 8002952:	f000 f919 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002956:	20b1      	movs	r0, #177	; 0xb1
 8002958:	f000 f909 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800295c:	2000      	movs	r0, #0
 800295e:	f000 f913 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002962:	201b      	movs	r0, #27
 8002964:	f000 f910 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002968:	20b6      	movs	r0, #182	; 0xb6
 800296a:	f000 f900 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800296e:	200a      	movs	r0, #10
 8002970:	f000 f90a 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002974:	20a2      	movs	r0, #162	; 0xa2
 8002976:	f000 f907 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800297a:	20c0      	movs	r0, #192	; 0xc0
 800297c:	f000 f8f7 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002980:	2010      	movs	r0, #16
 8002982:	f000 f901 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002986:	20c1      	movs	r0, #193	; 0xc1
 8002988:	f000 f8f1 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800298c:	2010      	movs	r0, #16
 800298e:	f000 f8fb 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002992:	20c5      	movs	r0, #197	; 0xc5
 8002994:	f000 f8eb 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002998:	2045      	movs	r0, #69	; 0x45
 800299a:	f000 f8f5 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800299e:	2015      	movs	r0, #21
 80029a0:	f000 f8f2 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80029a4:	20c7      	movs	r0, #199	; 0xc7
 80029a6:	f000 f8e2 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80029aa:	2090      	movs	r0, #144	; 0x90
 80029ac:	f000 f8ec 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80029b0:	2036      	movs	r0, #54	; 0x36
 80029b2:	f000 f8dc 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80029b6:	20c8      	movs	r0, #200	; 0xc8
 80029b8:	f000 f8e6 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80029bc:	20f2      	movs	r0, #242	; 0xf2
 80029be:	f000 f8d6 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f000 f8e0 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80029c8:	20b0      	movs	r0, #176	; 0xb0
 80029ca:	f000 f8d0 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80029ce:	20c2      	movs	r0, #194	; 0xc2
 80029d0:	f000 f8da 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80029d4:	20b6      	movs	r0, #182	; 0xb6
 80029d6:	f000 f8ca 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80029da:	200a      	movs	r0, #10
 80029dc:	f000 f8d4 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80029e0:	20a7      	movs	r0, #167	; 0xa7
 80029e2:	f000 f8d1 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80029e6:	2027      	movs	r0, #39	; 0x27
 80029e8:	f000 f8ce 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80029ec:	2004      	movs	r0, #4
 80029ee:	f000 f8cb 	bl	8002b88 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80029f2:	202a      	movs	r0, #42	; 0x2a
 80029f4:	f000 f8bb 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f000 f8c5 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 f8c2 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f000 f8bf 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002a0a:	20ef      	movs	r0, #239	; 0xef
 8002a0c:	f000 f8bc 	bl	8002b88 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002a10:	202b      	movs	r0, #43	; 0x2b
 8002a12:	f000 f8ac 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f000 f8b6 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f000 f8b3 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f000 f8b0 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002a28:	203f      	movs	r0, #63	; 0x3f
 8002a2a:	f000 f8ad 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002a2e:	20f6      	movs	r0, #246	; 0xf6
 8002a30:	f000 f89d 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002a34:	2001      	movs	r0, #1
 8002a36:	f000 f8a7 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f000 f8a4 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002a40:	2006      	movs	r0, #6
 8002a42:	f000 f8a1 	bl	8002b88 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002a46:	202c      	movs	r0, #44	; 0x2c
 8002a48:	f000 f891 	bl	8002b6e <ili9341_WriteReg>
  LCD_Delay(200);
 8002a4c:	20c8      	movs	r0, #200	; 0xc8
 8002a4e:	f000 fa79 	bl	8002f44 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002a52:	2026      	movs	r0, #38	; 0x26
 8002a54:	f000 f88b 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f000 f895 	bl	8002b88 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002a5e:	20e0      	movs	r0, #224	; 0xe0
 8002a60:	f000 f885 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002a64:	200f      	movs	r0, #15
 8002a66:	f000 f88f 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002a6a:	2029      	movs	r0, #41	; 0x29
 8002a6c:	f000 f88c 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002a70:	2024      	movs	r0, #36	; 0x24
 8002a72:	f000 f889 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002a76:	200c      	movs	r0, #12
 8002a78:	f000 f886 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002a7c:	200e      	movs	r0, #14
 8002a7e:	f000 f883 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002a82:	2009      	movs	r0, #9
 8002a84:	f000 f880 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002a88:	204e      	movs	r0, #78	; 0x4e
 8002a8a:	f000 f87d 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002a8e:	2078      	movs	r0, #120	; 0x78
 8002a90:	f000 f87a 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002a94:	203c      	movs	r0, #60	; 0x3c
 8002a96:	f000 f877 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002a9a:	2009      	movs	r0, #9
 8002a9c:	f000 f874 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002aa0:	2013      	movs	r0, #19
 8002aa2:	f000 f871 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002aa6:	2005      	movs	r0, #5
 8002aa8:	f000 f86e 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002aac:	2017      	movs	r0, #23
 8002aae:	f000 f86b 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002ab2:	2011      	movs	r0, #17
 8002ab4:	f000 f868 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 f865 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002abe:	20e1      	movs	r0, #225	; 0xe1
 8002ac0:	f000 f855 	bl	8002b6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f000 f85f 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002aca:	2016      	movs	r0, #22
 8002acc:	f000 f85c 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002ad0:	201b      	movs	r0, #27
 8002ad2:	f000 f859 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002ad6:	2004      	movs	r0, #4
 8002ad8:	f000 f856 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002adc:	2011      	movs	r0, #17
 8002ade:	f000 f853 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002ae2:	2007      	movs	r0, #7
 8002ae4:	f000 f850 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002ae8:	2031      	movs	r0, #49	; 0x31
 8002aea:	f000 f84d 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002aee:	2033      	movs	r0, #51	; 0x33
 8002af0:	f000 f84a 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002af4:	2042      	movs	r0, #66	; 0x42
 8002af6:	f000 f847 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002afa:	2005      	movs	r0, #5
 8002afc:	f000 f844 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002b00:	200c      	movs	r0, #12
 8002b02:	f000 f841 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002b06:	200a      	movs	r0, #10
 8002b08:	f000 f83e 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002b0c:	2028      	movs	r0, #40	; 0x28
 8002b0e:	f000 f83b 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002b12:	202f      	movs	r0, #47	; 0x2f
 8002b14:	f000 f838 	bl	8002b88 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002b18:	200f      	movs	r0, #15
 8002b1a:	f000 f835 	bl	8002b88 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002b1e:	2011      	movs	r0, #17
 8002b20:	f000 f825 	bl	8002b6e <ili9341_WriteReg>
  LCD_Delay(200);
 8002b24:	20c8      	movs	r0, #200	; 0xc8
 8002b26:	f000 fa0d 	bl	8002f44 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002b2a:	2029      	movs	r0, #41	; 0x29
 8002b2c:	f000 f81f 	bl	8002b6e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002b30:	202c      	movs	r0, #44	; 0x2c
 8002b32:	f000 f81c 	bl	8002b6e <ili9341_WriteReg>
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002b3e:	f000 f913 	bl	8002d68 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002b42:	2103      	movs	r1, #3
 8002b44:	20d3      	movs	r0, #211	; 0xd3
 8002b46:	f000 f82c 	bl	8002ba2 <ili9341_ReadData>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	b29b      	uxth	r3, r3
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002b56:	2029      	movs	r0, #41	; 0x29
 8002b58:	f000 f809 	bl	8002b6e <ili9341_WriteReg>
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002b64:	2028      	movs	r0, #40	; 0x28
 8002b66:	f000 f802 	bl	8002b6e <ili9341_WriteReg>
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f98e 	bl	8002e9c <LCD_IO_WriteReg>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f95f 	bl	8002e58 <LCD_IO_WriteData>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	460a      	mov	r2, r1
 8002bac:	80fb      	strh	r3, [r7, #6]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002bb2:	797a      	ldrb	r2, [r7, #5]
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f991 	bl	8002ee0 <LCD_IO_ReadData>
 8002bbe:	4603      	mov	r3, r0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002bcc:	23f0      	movs	r3, #240	; 0xf0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002bdc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002bf0:	4819      	ldr	r0, [pc, #100]	; (8002c58 <SPIx_Init+0x6c>)
 8002bf2:	f005 fa23 	bl	800803c <HAL_SPI_GetState>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d12b      	bne.n	8002c54 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <SPIx_Init+0x6c>)
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <SPIx_Init+0x70>)
 8002c00:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <SPIx_Init+0x6c>)
 8002c04:	2218      	movs	r2, #24
 8002c06:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <SPIx_Init+0x6c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <SPIx_Init+0x6c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <SPIx_Init+0x6c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <SPIx_Init+0x6c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <SPIx_Init+0x6c>)
 8002c22:	2207      	movs	r2, #7
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <SPIx_Init+0x6c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <SPIx_Init+0x6c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <SPIx_Init+0x6c>)
 8002c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c38:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <SPIx_Init+0x6c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <SPIx_Init+0x6c>)
 8002c42:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c46:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002c48:	4803      	ldr	r0, [pc, #12]	; (8002c58 <SPIx_Init+0x6c>)
 8002c4a:	f000 f853 	bl	8002cf4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002c4e:	4802      	ldr	r0, [pc, #8]	; (8002c58 <SPIx_Init+0x6c>)
 8002c50:	f004 fd89 	bl	8007766 <HAL_SPI_Init>
  } 
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20002464 	.word	0x20002464
 8002c5c:	40015000 	.word	0x40015000

08002c60 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <SPIx_Read+0x38>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f107 0108 	add.w	r1, r7, #8
 8002c7a:	4808      	ldr	r0, [pc, #32]	; (8002c9c <SPIx_Read+0x3c>)
 8002c7c:	f004 ff33 	bl	8007ae6 <HAL_SPI_Receive>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002c8a:	f000 f827 	bl	8002cdc <SPIx_Error>
  }
  
  return readvalue;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	2000003c 	.word	0x2000003c
 8002c9c:	20002464 	.word	0x20002464

08002ca0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <SPIx_Write+0x34>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	1db9      	adds	r1, r7, #6
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4808      	ldr	r0, [pc, #32]	; (8002cd8 <SPIx_Write+0x38>)
 8002cb8:	f004 fde1 	bl	800787e <HAL_SPI_Transmit>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002cc6:	f000 f809 	bl	8002cdc <SPIx_Error>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	2000003c 	.word	0x2000003c
 8002cd8:	20002464 	.word	0x20002464

08002cdc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002ce0:	4803      	ldr	r0, [pc, #12]	; (8002cf0 <SPIx_Error+0x14>)
 8002ce2:	f004 fda4 	bl	800782e <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002ce6:	f7ff ff81 	bl	8002bec <SPIx_Init>
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20002464 	.word	0x20002464

08002cf4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <SPIx_MspInit+0x6c>)
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <SPIx_MspInit+0x6c>)
 8002d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <SPIx_MspInit+0x6c>)
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <SPIx_MspInit+0x6c>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <SPIx_MspInit+0x6c>)
 8002d22:	f043 0320 	orr.w	r3, r3, #32
 8002d26:	6313      	str	r3, [r2, #48]	; 0x30
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <SPIx_MspInit+0x6c>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002d34:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002d42:	2301      	movs	r3, #1
 8002d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002d46:	2305      	movs	r3, #5
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4804      	ldr	r0, [pc, #16]	; (8002d64 <SPIx_MspInit+0x70>)
 8002d52:	f001 fe11 	bl	8004978 <HAL_GPIO_Init>
}
 8002d56:	bf00      	nop
 8002d58:	3728      	adds	r7, #40	; 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40021400 	.word	0x40021400

08002d68 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <LCD_IO_Init+0xe0>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d164      	bne.n	8002e40 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002d76:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <LCD_IO_Init+0xe0>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <LCD_IO_Init+0xe4>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	4a31      	ldr	r2, [pc, #196]	; (8002e4c <LCD_IO_Init+0xe4>)
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8c:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <LCD_IO_Init+0xe4>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002da6:	2302      	movs	r3, #2
 8002da8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002daa:	f107 030c 	add.w	r3, r7, #12
 8002dae:	4619      	mov	r1, r3
 8002db0:	4827      	ldr	r0, [pc, #156]	; (8002e50 <LCD_IO_Init+0xe8>)
 8002db2:	f001 fde1 	bl	8004978 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <LCD_IO_Init+0xe4>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <LCD_IO_Init+0xe4>)
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <LCD_IO_Init+0xe4>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002de0:	2302      	movs	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	4619      	mov	r1, r3
 8002dea:	4819      	ldr	r0, [pc, #100]	; (8002e50 <LCD_IO_Init+0xe8>)
 8002dec:	f001 fdc4 	bl	8004978 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002df0:	2300      	movs	r3, #0
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <LCD_IO_Init+0xe4>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <LCD_IO_Init+0xe4>)
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <LCD_IO_Init+0xe4>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002e1c:	f107 030c 	add.w	r3, r7, #12
 8002e20:	4619      	mov	r1, r3
 8002e22:	480c      	ldr	r0, [pc, #48]	; (8002e54 <LCD_IO_Init+0xec>)
 8002e24:	f001 fda8 	bl	8004978 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	4809      	ldr	r0, [pc, #36]	; (8002e54 <LCD_IO_Init+0xec>)
 8002e2e:	f002 f85b 	bl	8004ee8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002e32:	2201      	movs	r2, #1
 8002e34:	2104      	movs	r1, #4
 8002e36:	4807      	ldr	r0, [pc, #28]	; (8002e54 <LCD_IO_Init+0xec>)
 8002e38:	f002 f856 	bl	8004ee8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002e3c:	f7ff fed6 	bl	8002bec <SPIx_Init>
  }
}
 8002e40:	bf00      	nop
 8002e42:	3720      	adds	r7, #32
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200024bc 	.word	0x200024bc
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40020c00 	.word	0x40020c00
 8002e54:	40020800 	.word	0x40020800

08002e58 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002e62:	2201      	movs	r2, #1
 8002e64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e68:	480a      	ldr	r0, [pc, #40]	; (8002e94 <LCD_IO_WriteData+0x3c>)
 8002e6a:	f002 f83d 	bl	8004ee8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2104      	movs	r1, #4
 8002e72:	4809      	ldr	r0, [pc, #36]	; (8002e98 <LCD_IO_WriteData+0x40>)
 8002e74:	f002 f838 	bl	8004ee8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ff10 	bl	8002ca0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e80:	2201      	movs	r2, #1
 8002e82:	2104      	movs	r1, #4
 8002e84:	4804      	ldr	r0, [pc, #16]	; (8002e98 <LCD_IO_WriteData+0x40>)
 8002e86:	f002 f82f 	bl	8004ee8 <HAL_GPIO_WritePin>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	40020800 	.word	0x40020800

08002e9c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eac:	480a      	ldr	r0, [pc, #40]	; (8002ed8 <LCD_IO_WriteReg+0x3c>)
 8002eae:	f002 f81b 	bl	8004ee8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2104      	movs	r1, #4
 8002eb6:	4809      	ldr	r0, [pc, #36]	; (8002edc <LCD_IO_WriteReg+0x40>)
 8002eb8:	f002 f816 	bl	8004ee8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff feed 	bl	8002ca0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2104      	movs	r1, #4
 8002eca:	4804      	ldr	r0, [pc, #16]	; (8002edc <LCD_IO_WriteReg+0x40>)
 8002ecc:	f002 f80c 	bl	8004ee8 <HAL_GPIO_WritePin>
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40020800 	.word	0x40020800

08002ee0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460a      	mov	r2, r1
 8002eea:	80fb      	strh	r3, [r7, #6]
 8002eec:	4613      	mov	r3, r2
 8002eee:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2104      	movs	r1, #4
 8002ef8:	4810      	ldr	r0, [pc, #64]	; (8002f3c <LCD_IO_ReadData+0x5c>)
 8002efa:	f001 fff5 	bl	8004ee8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002efe:	2200      	movs	r2, #0
 8002f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f04:	480e      	ldr	r0, [pc, #56]	; (8002f40 <LCD_IO_ReadData+0x60>)
 8002f06:	f001 ffef 	bl	8004ee8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fec7 	bl	8002ca0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002f12:	797b      	ldrb	r3, [r7, #5]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fea3 	bl	8002c60 <SPIx_Read>
 8002f1a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f22:	4807      	ldr	r0, [pc, #28]	; (8002f40 <LCD_IO_ReadData+0x60>)
 8002f24:	f001 ffe0 	bl	8004ee8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	4803      	ldr	r0, [pc, #12]	; (8002f3c <LCD_IO_ReadData+0x5c>)
 8002f2e:	f001 ffdb 	bl	8004ee8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00

08002f44 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fe91 	bl	8003c74 <HAL_Delay>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002f60:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002f62:	4a2e      	ldr	r2, [pc, #184]	; (800301c <BSP_LCD_Init+0xc0>)
 8002f64:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002f66:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002f68:	2209      	movs	r2, #9
 8002f6a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002f74:	221d      	movs	r2, #29
 8002f76:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002f7e:	4b26      	ldr	r3, [pc, #152]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002f80:	f240 120d 	movw	r2, #269	; 0x10d
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002f88:	f240 1243 	movw	r2, #323	; 0x143
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002f8e:	4b22      	ldr	r3, [pc, #136]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002f90:	f240 1217 	movw	r2, #279	; 0x117
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002f98:	f240 1247 	movw	r2, #327	; 0x147
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002fae:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <BSP_LCD_Init+0xc4>)
 8002fb8:	2208      	movs	r2, #8
 8002fba:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002fbc:	4b18      	ldr	r3, [pc, #96]	; (8003020 <BSP_LCD_Init+0xc4>)
 8002fbe:	22c0      	movs	r2, #192	; 0xc0
 8002fc0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002fc2:	4b17      	ldr	r3, [pc, #92]	; (8003020 <BSP_LCD_Init+0xc4>)
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002fc8:	4b15      	ldr	r3, [pc, #84]	; (8003020 <BSP_LCD_Init+0xc4>)
 8002fca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002fd0:	4813      	ldr	r0, [pc, #76]	; (8003020 <BSP_LCD_Init+0xc4>)
 8002fd2:	f004 f98b 	bl	80072ec <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002fee:	f000 fa47 	bl	8003480 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002ff2:	4809      	ldr	r0, [pc, #36]	; (8003018 <BSP_LCD_Init+0xbc>)
 8002ff4:	f003 f8fa 	bl	80061ec <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <BSP_LCD_Init+0xc8>)
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <BSP_LCD_Init+0xcc>)
 8002ffc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <BSP_LCD_Init+0xc8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003006:	f000 fc29 	bl	800385c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800300a:	4808      	ldr	r0, [pc, #32]	; (800302c <BSP_LCD_Init+0xd0>)
 800300c:	f000 f8ce 	bl	80031ac <BSP_LCD_SetFont>

  return LCD_OK;
 8003010:	2300      	movs	r3, #0
}  
 8003012:	4618      	mov	r0, r3
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20022008 	.word	0x20022008
 800301c:	40016800 	.word	0x40016800
 8003020:	20002500 	.word	0x20002500
 8003024:	200220b0 	.word	0x200220b0
 8003028:	20000004 	.word	0x20000004
 800302c:	20000040 	.word	0x20000040

08003030 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <BSP_LCD_GetXSize+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	4798      	blx	r3
 800303c:	4603      	mov	r3, r0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	200220b0 	.word	0x200220b0

08003048 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <BSP_LCD_GetYSize+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	4798      	blx	r3
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200220b0 	.word	0x200220b0

08003060 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003060:	b580      	push	{r7, lr}
 8003062:	b090      	sub	sp, #64	; 0x40
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003070:	f7ff ffde 	bl	8003030 <BSP_LCD_GetXSize>
 8003074:	4603      	mov	r3, r0
 8003076:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800307c:	f7ff ffe4 	bl	8003048 <BSP_LCD_GetYSize>
 8003080:	4603      	mov	r3, r0
 8003082:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800308c:	23ff      	movs	r3, #255	; 0xff
 800308e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80030a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80030ac:	2307      	movs	r3, #7
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80030b0:	f7ff ffbe 	bl	8003030 <BSP_LCD_GetXSize>
 80030b4:	4603      	mov	r3, r0
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80030b8:	f7ff ffc6 	bl	8003048 <BSP_LCD_GetYSize>
 80030bc:	4603      	mov	r3, r0
 80030be:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80030c0:	88fa      	ldrh	r2, [r7, #6]
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	4619      	mov	r1, r3
 80030c8:	4814      	ldr	r0, [pc, #80]	; (800311c <BSP_LCD_LayerDefaultInit+0xbc>)
 80030ca:	f003 fa21 	bl	8006510 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	4913      	ldr	r1, [pc, #76]	; (8003120 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3304      	adds	r3, #4
 80030de:	f04f 32ff 	mov.w	r2, #4294967295
 80030e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	490e      	ldr	r1, [pc, #56]	; (8003120 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3308      	adds	r3, #8
 80030f4:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <BSP_LCD_LayerDefaultInit+0xc4>)
 80030f6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	4909      	ldr	r1, [pc, #36]	; (8003120 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800310a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800310c:	4803      	ldr	r0, [pc, #12]	; (800311c <BSP_LCD_LayerDefaultInit+0xbc>)
 800310e:	f003 fa3d 	bl	800658c <HAL_LTDC_EnableDither>
}
 8003112:	bf00      	nop
 8003114:	3740      	adds	r7, #64	; 0x40
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20022008 	.word	0x20022008
 8003120:	20002534 	.word	0x20002534
 8003124:	20000040 	.word	0x20000040

08003128 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003130:	4a04      	ldr	r2, [pc, #16]	; (8003144 <BSP_LCD_SelectLayer+0x1c>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6013      	str	r3, [r2, #0]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20002530 	.word	0x20002530

08003148 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <BSP_LCD_SetTextColor+0x28>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4907      	ldr	r1, [pc, #28]	; (8003174 <BSP_LCD_SetTextColor+0x2c>)
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	601a      	str	r2, [r3, #0]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	20002530 	.word	0x20002530
 8003174:	20002534 	.word	0x20002534

08003178 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <BSP_LCD_SetBackColor+0x2c>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4908      	ldr	r1, [pc, #32]	; (80031a8 <BSP_LCD_SetBackColor+0x30>)
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3304      	adds	r3, #4
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20002530 	.word	0x20002530
 80031a8:	20002534 	.word	0x20002534

080031ac <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <BSP_LCD_SetFont+0x2c>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4908      	ldr	r1, [pc, #32]	; (80031dc <BSP_LCD_SetFont+0x30>)
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3308      	adds	r3, #8
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20002530 	.word	0x20002530
 80031dc:	20002534 	.word	0x20002534

080031e0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <BSP_LCD_GetFont+0x24>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4907      	ldr	r1, [pc, #28]	; (8003208 <BSP_LCD_GetFont+0x28>)
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3308      	adds	r3, #8
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20002530 	.word	0x20002530
 8003208:	20002534 	.word	0x20002534

0800320c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320e:	b085      	sub	sp, #20
 8003210:	af02      	add	r7, sp, #8
 8003212:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <BSP_LCD_Clear+0x48>)
 8003216:	681c      	ldr	r4, [r3, #0]
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <BSP_LCD_Clear+0x48>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <BSP_LCD_Clear+0x4c>)
 800321e:	2134      	movs	r1, #52	; 0x34
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	335c      	adds	r3, #92	; 0x5c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461e      	mov	r6, r3
 800322c:	f7ff ff00 	bl	8003030 <BSP_LCD_GetXSize>
 8003230:	4605      	mov	r5, r0
 8003232:	f7ff ff09 	bl	8003048 <BSP_LCD_GetYSize>
 8003236:	4602      	mov	r2, r0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2300      	movs	r3, #0
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	462a      	mov	r2, r5
 8003244:	4631      	mov	r1, r6
 8003246:	4620      	mov	r0, r4
 8003248:	f000 fad0 	bl	80037ec <FillBuffer>
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003254:	20002530 	.word	0x20002530
 8003258:	20022008 	.word	0x20022008

0800325c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	80fb      	strh	r3, [r7, #6]
 8003266:	460b      	mov	r3, r1
 8003268:	80bb      	strh	r3, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <BSP_LCD_DisplayChar+0x80>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	491b      	ldr	r1, [pc, #108]	; (80032e0 <BSP_LCD_DisplayChar+0x84>)
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3308      	adds	r3, #8
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <BSP_LCD_DisplayChar+0x80>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4c14      	ldr	r4, [pc, #80]	; (80032e0 <BSP_LCD_DisplayChar+0x84>)
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4423      	add	r3, r4
 800329a:	3308      	adds	r3, #8
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80032a0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <BSP_LCD_DisplayChar+0x80>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4c0d      	ldr	r4, [pc, #52]	; (80032e0 <BSP_LCD_DisplayChar+0x84>)
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4423      	add	r3, r4
 80032b4:	3308      	adds	r3, #8
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	889b      	ldrh	r3, [r3, #4]
 80032ba:	3307      	adds	r3, #7
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da00      	bge.n	80032c2 <BSP_LCD_DisplayChar+0x66>
 80032c0:	3307      	adds	r3, #7
 80032c2:	10db      	asrs	r3, r3, #3
 80032c4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80032c8:	18ca      	adds	r2, r1, r3
 80032ca:	88b9      	ldrh	r1, [r7, #4]
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f9d2 	bl	8003678 <DrawChar>
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}
 80032dc:	20002530 	.word	0x20002530
 80032e0:	20002534 	.word	0x20002534

080032e4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60ba      	str	r2, [r7, #8]
 80032ec:	461a      	mov	r2, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	81fb      	strh	r3, [r7, #14]
 80032f2:	460b      	mov	r3, r1
 80032f4:	81bb      	strh	r3, [r7, #12]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80032fa:	2301      	movs	r3, #1
 80032fc:	83fb      	strh	r3, [r7, #30]
 80032fe:	2300      	movs	r3, #0
 8003300:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800330e:	e002      	b.n	8003316 <BSP_LCD_DisplayStringAt+0x32>
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	3301      	adds	r3, #1
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	617a      	str	r2, [r7, #20]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f6      	bne.n	8003310 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003322:	f7ff fe85 	bl	8003030 <BSP_LCD_GetXSize>
 8003326:	4601      	mov	r1, r0
 8003328:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <BSP_LCD_DisplayStringAt+0x174>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	484b      	ldr	r0, [pc, #300]	; (800345c <BSP_LCD_DisplayStringAt+0x178>)
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4403      	add	r3, r0
 8003338:	3308      	adds	r3, #8
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	889b      	ldrh	r3, [r3, #4]
 800333e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003342:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d01c      	beq.n	8003384 <BSP_LCD_DisplayStringAt+0xa0>
 800334a:	2b03      	cmp	r3, #3
 800334c:	dc33      	bgt.n	80033b6 <BSP_LCD_DisplayStringAt+0xd2>
 800334e:	2b01      	cmp	r3, #1
 8003350:	d002      	beq.n	8003358 <BSP_LCD_DisplayStringAt+0x74>
 8003352:	2b02      	cmp	r3, #2
 8003354:	d019      	beq.n	800338a <BSP_LCD_DisplayStringAt+0xa6>
 8003356:	e02e      	b.n	80033b6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	1ad1      	subs	r1, r2, r3
 800335e:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <BSP_LCD_DisplayStringAt+0x174>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	483e      	ldr	r0, [pc, #248]	; (800345c <BSP_LCD_DisplayStringAt+0x178>)
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4403      	add	r3, r0
 800336e:	3308      	adds	r3, #8
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	889b      	ldrh	r3, [r3, #4]
 8003374:	fb03 f301 	mul.w	r3, r3, r1
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	89fb      	ldrh	r3, [r7, #14]
 800337e:	4413      	add	r3, r2
 8003380:	83fb      	strh	r3, [r7, #30]
      break;
 8003382:	e01b      	b.n	80033bc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003384:	89fb      	ldrh	r3, [r7, #14]
 8003386:	83fb      	strh	r3, [r7, #30]
      break;
 8003388:	e018      	b.n	80033bc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	b299      	uxth	r1, r3
 8003392:	4b31      	ldr	r3, [pc, #196]	; (8003458 <BSP_LCD_DisplayStringAt+0x174>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4831      	ldr	r0, [pc, #196]	; (800345c <BSP_LCD_DisplayStringAt+0x178>)
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4403      	add	r3, r0
 80033a2:	3308      	adds	r3, #8
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	889b      	ldrh	r3, [r3, #4]
 80033a8:	fb11 f303 	smulbb	r3, r1, r3
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	89fb      	ldrh	r3, [r7, #14]
 80033b0:	4413      	add	r3, r2
 80033b2:	83fb      	strh	r3, [r7, #30]
      break;
 80033b4:	e002      	b.n	80033bc <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80033b6:	89fb      	ldrh	r3, [r7, #14]
 80033b8:	83fb      	strh	r3, [r7, #30]
      break;
 80033ba:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80033bc:	e01a      	b.n	80033f4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	89b9      	ldrh	r1, [r7, #12]
 80033c4:	8bfb      	ldrh	r3, [r7, #30]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff ff48 	bl	800325c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <BSP_LCD_DisplayStringAt+0x174>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4922      	ldr	r1, [pc, #136]	; (800345c <BSP_LCD_DisplayStringAt+0x178>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3308      	adds	r3, #8
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	889a      	ldrh	r2, [r3, #4]
 80033e2:	8bfb      	ldrh	r3, [r7, #30]
 80033e4:	4413      	add	r3, r2
 80033e6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	3301      	adds	r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]
    i++;
 80033ee:	8bbb      	ldrh	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2dc      	uxtb	r4, r3
 8003402:	f7ff fe15 	bl	8003030 <BSP_LCD_GetXSize>
 8003406:	8bb9      	ldrh	r1, [r7, #28]
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <BSP_LCD_DisplayStringAt+0x174>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4d13      	ldr	r5, [pc, #76]	; (800345c <BSP_LCD_DisplayStringAt+0x178>)
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	442b      	add	r3, r5
 8003418:	3308      	adds	r3, #8
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	889b      	ldrh	r3, [r3, #4]
 800341e:	fb03 f301 	mul.w	r3, r3, r1
 8003422:	1ac3      	subs	r3, r0, r3
 8003424:	b299      	uxth	r1, r3
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <BSP_LCD_DisplayStringAt+0x174>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	480c      	ldr	r0, [pc, #48]	; (800345c <BSP_LCD_DisplayStringAt+0x178>)
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4403      	add	r3, r0
 8003436:	3308      	adds	r3, #8
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	889b      	ldrh	r3, [r3, #4]
 800343c:	4299      	cmp	r1, r3
 800343e:	bf2c      	ite	cs
 8003440:	2301      	movcs	r3, #1
 8003442:	2300      	movcc	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4023      	ands	r3, r4
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1b7      	bne.n	80033be <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bdb0      	pop	{r4, r5, r7, pc}
 8003458:	20002530 	.word	0x20002530
 800345c:	20002534 	.word	0x20002534

08003460 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <BSP_LCD_DisplayOn+0x1c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800346e:	4b03      	ldr	r3, [pc, #12]	; (800347c <BSP_LCD_DisplayOn+0x1c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4798      	blx	r3
  }
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200220b0 	.word	0x200220b0

08003480 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08e      	sub	sp, #56	; 0x38
 8003484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	623b      	str	r3, [r7, #32]
 800348a:	4b61      	ldr	r3, [pc, #388]	; (8003610 <BSP_LCD_MspInit+0x190>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	4a60      	ldr	r2, [pc, #384]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003490:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003494:	6453      	str	r3, [r2, #68]	; 0x44
 8003496:	4b5e      	ldr	r3, [pc, #376]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800349e:	623b      	str	r3, [r7, #32]
 80034a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	4b5a      	ldr	r3, [pc, #360]	; (8003610 <BSP_LCD_MspInit+0x190>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a59      	ldr	r2, [pc, #356]	; (8003610 <BSP_LCD_MspInit+0x190>)
 80034ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b57      	ldr	r3, [pc, #348]	; (8003610 <BSP_LCD_MspInit+0x190>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	4b53      	ldr	r3, [pc, #332]	; (8003610 <BSP_LCD_MspInit+0x190>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a52      	ldr	r2, [pc, #328]	; (8003610 <BSP_LCD_MspInit+0x190>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b50      	ldr	r3, [pc, #320]	; (8003610 <BSP_LCD_MspInit+0x190>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <BSP_LCD_MspInit+0x190>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a4b      	ldr	r2, [pc, #300]	; (8003610 <BSP_LCD_MspInit+0x190>)
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b49      	ldr	r3, [pc, #292]	; (8003610 <BSP_LCD_MspInit+0x190>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	4b45      	ldr	r3, [pc, #276]	; (8003610 <BSP_LCD_MspInit+0x190>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a44      	ldr	r2, [pc, #272]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b42      	ldr	r3, [pc, #264]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a3d      	ldr	r2, [pc, #244]	; (8003610 <BSP_LCD_MspInit+0x190>)
 800351c:	f043 0308 	orr.w	r3, r3, #8
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	4b37      	ldr	r3, [pc, #220]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a36      	ldr	r2, [pc, #216]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003538:	f043 0320 	orr.w	r3, r3, #32
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b34      	ldr	r3, [pc, #208]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	4b30      	ldr	r3, [pc, #192]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <BSP_LCD_MspInit+0x190>)
 8003554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003558:	6313      	str	r3, [r2, #48]	; 0x30
 800355a:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <BSP_LCD_MspInit+0x190>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003566:	f641 0358 	movw	r3, #6232	; 0x1858
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800356c:	2302      	movs	r3, #2
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003574:	2302      	movs	r3, #2
 8003576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003578:	230e      	movs	r3, #14
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800357c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003580:	4619      	mov	r1, r3
 8003582:	4824      	ldr	r0, [pc, #144]	; (8003614 <BSP_LCD_MspInit+0x194>)
 8003584:	f001 f9f8 	bl	8004978 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003588:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800358e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003592:	4619      	mov	r1, r3
 8003594:	4820      	ldr	r0, [pc, #128]	; (8003618 <BSP_LCD_MspInit+0x198>)
 8003596:	f001 f9ef 	bl	8004978 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800359a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80035a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a4:	4619      	mov	r1, r3
 80035a6:	481d      	ldr	r0, [pc, #116]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80035a8:	f001 f9e6 	bl	8004978 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80035ac:	2348      	movs	r3, #72	; 0x48
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80035b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b4:	4619      	mov	r1, r3
 80035b6:	481a      	ldr	r0, [pc, #104]	; (8003620 <BSP_LCD_MspInit+0x1a0>)
 80035b8:	f001 f9de 	bl	8004978 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80035bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80035c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c6:	4619      	mov	r1, r3
 80035c8:	4816      	ldr	r0, [pc, #88]	; (8003624 <BSP_LCD_MspInit+0x1a4>)
 80035ca:	f001 f9d5 	bl	8004978 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80035ce:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80035d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d8:	4619      	mov	r1, r3
 80035da:	4813      	ldr	r0, [pc, #76]	; (8003628 <BSP_LCD_MspInit+0x1a8>)
 80035dc:	f001 f9cc 	bl	8004978 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80035e0:	2303      	movs	r3, #3
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80035e4:	2309      	movs	r3, #9
 80035e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ec:	4619      	mov	r1, r3
 80035ee:	480a      	ldr	r0, [pc, #40]	; (8003618 <BSP_LCD_MspInit+0x198>)
 80035f0:	f001 f9c2 	bl	8004978 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80035f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80035fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035fe:	4619      	mov	r1, r3
 8003600:	4809      	ldr	r0, [pc, #36]	; (8003628 <BSP_LCD_MspInit+0x1a8>)
 8003602:	f001 f9b9 	bl	8004978 <HAL_GPIO_Init>
}
 8003606:	bf00      	nop
 8003608:	3738      	adds	r7, #56	; 0x38
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	40020000 	.word	0x40020000
 8003618:	40020400 	.word	0x40020400
 800361c:	40020800 	.word	0x40020800
 8003620:	40020c00 	.word	0x40020c00
 8003624:	40021400 	.word	0x40021400
 8003628:	40021800 	.word	0x40021800

0800362c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800362c:	b5b0      	push	{r4, r5, r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	603a      	str	r2, [r7, #0]
 8003636:	80fb      	strh	r3, [r7, #6]
 8003638:	460b      	mov	r3, r1
 800363a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <BSP_LCD_DrawPixel+0x44>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <BSP_LCD_DrawPixel+0x48>)
 8003642:	2134      	movs	r1, #52	; 0x34
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	335c      	adds	r3, #92	; 0x5c
 800364c:	681c      	ldr	r4, [r3, #0]
 800364e:	88bd      	ldrh	r5, [r7, #4]
 8003650:	f7ff fcee 	bl	8003030 <BSP_LCD_GetXSize>
 8003654:	4603      	mov	r3, r0
 8003656:	fb03 f205 	mul.w	r2, r3, r5
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4423      	add	r3, r4
 8003662:	461a      	mov	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bdb0      	pop	{r4, r5, r7, pc}
 8003670:	20002530 	.word	0x20002530
 8003674:	20022008 	.word	0x20022008

08003678 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	603a      	str	r2, [r7, #0]
 8003682:	80fb      	strh	r3, [r7, #6]
 8003684:	460b      	mov	r3, r1
 8003686:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	2300      	movs	r3, #0
 800368e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003694:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <DrawChar+0x16c>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4953      	ldr	r1, [pc, #332]	; (80037e8 <DrawChar+0x170>)
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3308      	adds	r3, #8
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	88db      	ldrh	r3, [r3, #6]
 80036aa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80036ac:	4b4d      	ldr	r3, [pc, #308]	; (80037e4 <DrawChar+0x16c>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	494d      	ldr	r1, [pc, #308]	; (80037e8 <DrawChar+0x170>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3308      	adds	r3, #8
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80036c4:	8a3b      	ldrh	r3, [r7, #16]
 80036c6:	3307      	adds	r3, #7
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	da00      	bge.n	80036ce <DrawChar+0x56>
 80036cc:	3307      	adds	r3, #7
 80036ce:	10db      	asrs	r3, r3, #3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	8a3b      	ldrh	r3, [r7, #16]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	e076      	b.n	80037d2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80036e4:	8a3b      	ldrh	r3, [r7, #16]
 80036e6:	3307      	adds	r3, #7
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	da00      	bge.n	80036ee <DrawChar+0x76>
 80036ec:	3307      	adds	r3, #7
 80036ee:	10db      	asrs	r3, r3, #3
 80036f0:	461a      	mov	r2, r3
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fb03 f302 	mul.w	r3, r3, r2
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	4413      	add	r3, r2
 80036fc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80036fe:	8a3b      	ldrh	r3, [r7, #16]
 8003700:	3307      	adds	r3, #7
 8003702:	2b00      	cmp	r3, #0
 8003704:	da00      	bge.n	8003708 <DrawChar+0x90>
 8003706:	3307      	adds	r3, #7
 8003708:	10db      	asrs	r3, r3, #3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d002      	beq.n	8003714 <DrawChar+0x9c>
 800370e:	2b02      	cmp	r3, #2
 8003710:	d004      	beq.n	800371c <DrawChar+0xa4>
 8003712:	e00c      	b.n	800372e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	617b      	str	r3, [r7, #20]
      break;
 800371a:	e016      	b.n	800374a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	3201      	adds	r2, #1
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
      break;
 800372c:	e00d      	b.n	800374a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	041a      	lsls	r2, r3, #16
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	3301      	adds	r3, #1
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	4313      	orrs	r3, r2
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	3202      	adds	r2, #2
 8003742:	7812      	ldrb	r2, [r2, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
      break;
 8003748:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	e036      	b.n	80037be <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003750:	8a3a      	ldrh	r2, [r7, #16]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad2      	subs	r2, r2, r3
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	4413      	add	r3, r2
 800375a:	3b01      	subs	r3, #1
 800375c:	2201      	movs	r2, #1
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	461a      	mov	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	b29a      	uxth	r2, r3
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	4413      	add	r3, r2
 8003774:	b298      	uxth	r0, r3
 8003776:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <DrawChar+0x16c>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	491b      	ldr	r1, [pc, #108]	; (80037e8 <DrawChar+0x170>)
 800377c:	4613      	mov	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	88bb      	ldrh	r3, [r7, #4]
 800378a:	4619      	mov	r1, r3
 800378c:	f7ff ff4e 	bl	800362c <BSP_LCD_DrawPixel>
 8003790:	e012      	b.n	80037b8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	b29a      	uxth	r2, r3
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	4413      	add	r3, r2
 800379a:	b298      	uxth	r0, r3
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <DrawChar+0x16c>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4911      	ldr	r1, [pc, #68]	; (80037e8 <DrawChar+0x170>)
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3304      	adds	r3, #4
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	88bb      	ldrh	r3, [r7, #4]
 80037b2:	4619      	mov	r1, r3
 80037b4:	f7ff ff3a 	bl	800362c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	3301      	adds	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	8a3b      	ldrh	r3, [r7, #16]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d3c4      	bcc.n	8003750 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80037c6:	88bb      	ldrh	r3, [r7, #4]
 80037c8:	3301      	adds	r3, #1
 80037ca:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	3301      	adds	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	8a7b      	ldrh	r3, [r7, #18]
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d384      	bcc.n	80036e4 <DrawChar+0x6c>
  }
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20002530 	.word	0x20002530
 80037e8:	20002534 	.word	0x20002534

080037ec <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80037fa:	4b16      	ldr	r3, [pc, #88]	; (8003854 <FillBuffer+0x68>)
 80037fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003800:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <FillBuffer+0x68>)
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <FillBuffer+0x68>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <FillBuffer+0x68>)
 8003810:	4a11      	ldr	r2, [pc, #68]	; (8003858 <FillBuffer+0x6c>)
 8003812:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003814:	480f      	ldr	r0, [pc, #60]	; (8003854 <FillBuffer+0x68>)
 8003816:	f000 fd13 	bl	8004240 <HAL_DMA2D_Init>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d115      	bne.n	800384c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	480c      	ldr	r0, [pc, #48]	; (8003854 <FillBuffer+0x68>)
 8003824:	f000 ff7a 	bl	800471c <HAL_DMA2D_ConfigLayer>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10e      	bne.n	800384c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	4806      	ldr	r0, [pc, #24]	; (8003854 <FillBuffer+0x68>)
 800383a:	f000 fd4a 	bl	80042d2 <HAL_DMA2D_Start>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003844:	210a      	movs	r1, #10
 8003846:	4803      	ldr	r0, [pc, #12]	; (8003854 <FillBuffer+0x68>)
 8003848:	f000 fd6e 	bl	8004328 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	200024c0 	.word	0x200024c0
 8003858:	4002b000 	.word	0x4002b000

0800385c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003860:	4b29      	ldr	r3, [pc, #164]	; (8003908 <BSP_SDRAM_Init+0xac>)
 8003862:	4a2a      	ldr	r2, [pc, #168]	; (800390c <BSP_SDRAM_Init+0xb0>)
 8003864:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003866:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <BSP_SDRAM_Init+0xb4>)
 8003868:	2202      	movs	r2, #2
 800386a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <BSP_SDRAM_Init+0xb4>)
 800386e:	2207      	movs	r2, #7
 8003870:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <BSP_SDRAM_Init+0xb4>)
 8003874:	2204      	movs	r2, #4
 8003876:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003878:	4b25      	ldr	r3, [pc, #148]	; (8003910 <BSP_SDRAM_Init+0xb4>)
 800387a:	2207      	movs	r2, #7
 800387c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <BSP_SDRAM_Init+0xb4>)
 8003880:	2202      	movs	r2, #2
 8003882:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <BSP_SDRAM_Init+0xb4>)
 8003886:	2202      	movs	r2, #2
 8003888:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800388a:	4b21      	ldr	r3, [pc, #132]	; (8003910 <BSP_SDRAM_Init+0xb4>)
 800388c:	2202      	movs	r2, #2
 800388e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <BSP_SDRAM_Init+0xac>)
 8003892:	2201      	movs	r2, #1
 8003894:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003896:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <BSP_SDRAM_Init+0xac>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <BSP_SDRAM_Init+0xac>)
 800389e:	2204      	movs	r2, #4
 80038a0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80038a2:	4b19      	ldr	r3, [pc, #100]	; (8003908 <BSP_SDRAM_Init+0xac>)
 80038a4:	2210      	movs	r2, #16
 80038a6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80038a8:	4b17      	ldr	r3, [pc, #92]	; (8003908 <BSP_SDRAM_Init+0xac>)
 80038aa:	2240      	movs	r2, #64	; 0x40
 80038ac:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80038ae:	4b16      	ldr	r3, [pc, #88]	; (8003908 <BSP_SDRAM_Init+0xac>)
 80038b0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80038b4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <BSP_SDRAM_Init+0xac>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <BSP_SDRAM_Init+0xac>)
 80038be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80038c4:	4b10      	ldr	r3, [pc, #64]	; (8003908 <BSP_SDRAM_Init+0xac>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <BSP_SDRAM_Init+0xac>)
 80038cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80038d2:	2100      	movs	r1, #0
 80038d4:	480c      	ldr	r0, [pc, #48]	; (8003908 <BSP_SDRAM_Init+0xac>)
 80038d6:	f000 f87f 	bl	80039d8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80038da:	490d      	ldr	r1, [pc, #52]	; (8003910 <BSP_SDRAM_Init+0xb4>)
 80038dc:	480a      	ldr	r0, [pc, #40]	; (8003908 <BSP_SDRAM_Init+0xac>)
 80038de:	f003 fec3 	bl	8007668 <HAL_SDRAM_Init>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <BSP_SDRAM_Init+0xb8>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e002      	b.n	80038f6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <BSP_SDRAM_Init+0xb8>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80038f6:	f240 506a 	movw	r0, #1386	; 0x56a
 80038fa:	f000 f80d 	bl	8003918 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <BSP_SDRAM_Init+0xb8>)
 8003900:	781b      	ldrb	r3, [r3, #0]
}
 8003902:	4618      	mov	r0, r3
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	2000254c 	.word	0x2000254c
 800390c:	a0000140 	.word	0xa0000140
 8003910:	20002580 	.word	0x20002580
 8003914:	20000058 	.word	0x20000058

08003918 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003924:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800392a:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800392c:	2208      	movs	r2, #8
 800392e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003930:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003932:	2201      	movs	r2, #1
 8003934:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003936:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003938:	2200      	movs	r2, #0
 800393a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800393c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003940:	4923      	ldr	r1, [pc, #140]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003942:	4824      	ldr	r0, [pc, #144]	; (80039d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003944:	f003 fec4 	bl	80076d0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003948:	2001      	movs	r0, #1
 800394a:	f000 f993 	bl	8003c74 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003950:	2202      	movs	r2, #2
 8003952:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003956:	2208      	movs	r2, #8
 8003958:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800395c:	2201      	movs	r2, #1
 800395e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003962:	2200      	movs	r2, #0
 8003964:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800396a:	4919      	ldr	r1, [pc, #100]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800396c:	4819      	ldr	r0, [pc, #100]	; (80039d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800396e:	f003 feaf 	bl	80076d0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003974:	2203      	movs	r2, #3
 8003976:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800397a:	2208      	movs	r2, #8
 800397c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800397e:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003980:	2204      	movs	r2, #4
 8003982:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800398a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800398e:	4910      	ldr	r1, [pc, #64]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003990:	4810      	ldr	r0, [pc, #64]	; (80039d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003992:	f003 fe9d 	bl	80076d0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003996:	f44f 730c 	mov.w	r3, #560	; 0x230
 800399a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800399e:	2204      	movs	r2, #4
 80039a0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039a4:	2208      	movs	r2, #8
 80039a6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a07      	ldr	r2, [pc, #28]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039b2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80039b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039b8:	4905      	ldr	r1, [pc, #20]	; (80039d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039ba:	4806      	ldr	r0, [pc, #24]	; (80039d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039bc:	f003 fe88 	bl	80076d0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4804      	ldr	r0, [pc, #16]	; (80039d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039c4:	f003 feaf 	bl	8007726 <HAL_SDRAM_ProgramRefreshRate>
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2000259c 	.word	0x2000259c
 80039d4:	2000254c 	.word	0x2000254c

080039d8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b090      	sub	sp, #64	; 0x40
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80ec 	beq.w	8003bc2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ee:	4b77      	ldr	r3, [pc, #476]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	4a76      	ldr	r2, [pc, #472]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6393      	str	r3, [r2, #56]	; 0x38
 80039fa:	4b74      	ldr	r3, [pc, #464]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0a:	4b70      	ldr	r3, [pc, #448]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	4a6f      	ldr	r2, [pc, #444]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a14:	6313      	str	r3, [r2, #48]	; 0x30
 8003a16:	4b6d      	ldr	r3, [pc, #436]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	623b      	str	r3, [r7, #32]
 8003a26:	4b69      	ldr	r3, [pc, #420]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a68      	ldr	r2, [pc, #416]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	4b66      	ldr	r3, [pc, #408]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	4b62      	ldr	r3, [pc, #392]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	4a61      	ldr	r2, [pc, #388]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a48:	f043 0304 	orr.w	r3, r3, #4
 8003a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	4b5b      	ldr	r3, [pc, #364]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	4a5a      	ldr	r2, [pc, #360]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a64:	f043 0308 	orr.w	r3, r3, #8
 8003a68:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6a:	4b58      	ldr	r3, [pc, #352]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	4a53      	ldr	r2, [pc, #332]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a80:	f043 0310 	orr.w	r3, r3, #16
 8003a84:	6313      	str	r3, [r2, #48]	; 0x30
 8003a86:	4b51      	ldr	r3, [pc, #324]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	4b4d      	ldr	r3, [pc, #308]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a4c      	ldr	r2, [pc, #304]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003a9c:	f043 0320 	orr.w	r3, r3, #32
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a45      	ldr	r2, [pc, #276]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <BSP_SDRAM_MspInit+0x1f4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003aca:	2302      	movs	r3, #2
 8003acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003ada:	2360      	movs	r3, #96	; 0x60
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	483a      	ldr	r0, [pc, #232]	; (8003bd0 <BSP_SDRAM_MspInit+0x1f8>)
 8003ae6:	f000 ff47 	bl	8004978 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003aea:	2301      	movs	r3, #1
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003af2:	4619      	mov	r1, r3
 8003af4:	4837      	ldr	r0, [pc, #220]	; (8003bd4 <BSP_SDRAM_MspInit+0x1fc>)
 8003af6:	f000 ff3f 	bl	8004978 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003afa:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b04:	4619      	mov	r1, r3
 8003b06:	4834      	ldr	r0, [pc, #208]	; (8003bd8 <BSP_SDRAM_MspInit+0x200>)
 8003b08:	f000 ff36 	bl	8004978 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003b0c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b16:	4619      	mov	r1, r3
 8003b18:	4830      	ldr	r0, [pc, #192]	; (8003bdc <BSP_SDRAM_MspInit+0x204>)
 8003b1a:	f000 ff2d 	bl	8004978 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003b1e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b28:	4619      	mov	r1, r3
 8003b2a:	482d      	ldr	r0, [pc, #180]	; (8003be0 <BSP_SDRAM_MspInit+0x208>)
 8003b2c:	f000 ff24 	bl	8004978 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003b30:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4829      	ldr	r0, [pc, #164]	; (8003be4 <BSP_SDRAM_MspInit+0x20c>)
 8003b3e:	f000 ff1b 	bl	8004978 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003b42:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b54:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b5c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b5e:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b64:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b6c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b7a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b84:	2203      	movs	r2, #3
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003b88:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <BSP_SDRAM_MspInit+0x214>)
 8003b98:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba0:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003ba6:	4810      	ldr	r0, [pc, #64]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003ba8:	f000 fa18 	bl	8003fdc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003bac:	480e      	ldr	r0, [pc, #56]	; (8003be8 <BSP_SDRAM_MspInit+0x210>)
 8003bae:	f000 f967 	bl	8003e80 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	2038      	movs	r0, #56	; 0x38
 8003bb8:	f000 f938 	bl	8003e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003bbc:	2038      	movs	r0, #56	; 0x38
 8003bbe:	f000 f951 	bl	8003e64 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003bc2:	bf00      	nop
 8003bc4:	3740      	adds	r7, #64	; 0x40
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40021400 	.word	0x40021400
 8003be4:	40021800 	.word	0x40021800
 8003be8:	200025ac 	.word	0x200025ac
 8003bec:	40026410 	.word	0x40026410

08003bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <HAL_Init+0x40>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a0d      	ldr	r2, [pc, #52]	; (8003c30 <HAL_Init+0x40>)
 8003bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_Init+0x40>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <HAL_Init+0x40>)
 8003c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_Init+0x40>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <HAL_Init+0x40>)
 8003c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c18:	2003      	movs	r0, #3
 8003c1a:	f000 f8fc 	bl	8003e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c1e:	2000      	movs	r0, #0
 8003c20:	f7fe f8b2 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c24:	f7fe f884 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023c00 	.word	0x40023c00

08003c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_IncTick+0x20>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_IncTick+0x24>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4413      	add	r3, r2
 8003c44:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <HAL_IncTick+0x24>)
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000060 	.word	0x20000060
 8003c58:	200220b4 	.word	0x200220b4

08003c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_GetTick+0x14>)
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	200220b4 	.word	0x200220b4

08003c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c7c:	f7ff ffee 	bl	8003c5c <HAL_GetTick>
 8003c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8c:	d005      	beq.n	8003c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_Delay+0x44>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c9a:	bf00      	nop
 8003c9c:	f7ff ffde 	bl	8003c5c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d8f7      	bhi.n	8003c9c <HAL_Delay+0x28>
  {
  }
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000060 	.word	0x20000060

08003cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <__NVIC_SetPriorityGrouping+0x44>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cee:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	60d3      	str	r3, [r2, #12]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <__NVIC_GetPriorityGrouping+0x18>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	f003 0307 	and.w	r3, r3, #7
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	db0b      	blt.n	8003d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	4907      	ldr	r1, [pc, #28]	; (8003d58 <__NVIC_EnableIRQ+0x38>)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2001      	movs	r0, #1
 8003d42:	fa00 f202 	lsl.w	r2, r0, r2
 8003d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000e100 	.word	0xe000e100

08003d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	db0a      	blt.n	8003d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	490c      	ldr	r1, [pc, #48]	; (8003da8 <__NVIC_SetPriority+0x4c>)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	0112      	lsls	r2, r2, #4
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d84:	e00a      	b.n	8003d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4908      	ldr	r1, [pc, #32]	; (8003dac <__NVIC_SetPriority+0x50>)
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	3b04      	subs	r3, #4
 8003d94:	0112      	lsls	r2, r2, #4
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	440b      	add	r3, r1
 8003d9a:	761a      	strb	r2, [r3, #24]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000e100 	.word	0xe000e100
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f1c3 0307 	rsb	r3, r3, #7
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	bf28      	it	cs
 8003dce:	2304      	movcs	r3, #4
 8003dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2b06      	cmp	r3, #6
 8003dd8:	d902      	bls.n	8003de0 <NVIC_EncodePriority+0x30>
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3b03      	subs	r3, #3
 8003dde:	e000      	b.n	8003de2 <NVIC_EncodePriority+0x32>
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	401a      	ands	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003e02:	43d9      	mvns	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e08:	4313      	orrs	r3, r2
         );
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3724      	adds	r7, #36	; 0x24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff4c 	bl	8003cbc <__NVIC_SetPriorityGrouping>
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e3e:	f7ff ff61 	bl	8003d04 <__NVIC_GetPriorityGrouping>
 8003e42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	6978      	ldr	r0, [r7, #20]
 8003e4a:	f7ff ffb1 	bl	8003db0 <NVIC_EncodePriority>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ff80 	bl	8003d5c <__NVIC_SetPriority>
}
 8003e5c:	bf00      	nop
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff54 	bl	8003d20 <__NVIC_EnableIRQ>
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e8c:	f7ff fee6 	bl	8003c5c <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e099      	b.n	8003fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ebc:	e00f      	b.n	8003ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ebe:	f7ff fecd 	bl	8003c5c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d908      	bls.n	8003ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e078      	b.n	8003fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e8      	bne.n	8003ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4b38      	ldr	r3, [pc, #224]	; (8003fd8 <HAL_DMA_Init+0x158>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d107      	bne.n	8003f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	4313      	orrs	r3, r2
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0307 	bic.w	r3, r3, #7
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d117      	bne.n	8003fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f8df 	bl	8004148 <DMA_CheckFifoParam>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2240      	movs	r2, #64	; 0x40
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e016      	b.n	8003fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f896 	bl	80040dc <DMA_CalcBaseAndBitshift>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	223f      	movs	r2, #63	; 0x3f
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	f010803f 	.word	0xf010803f

08003fdc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e050      	b.n	8004090 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d101      	bne.n	8003ffe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e048      	b.n	8004090 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2200      	movs	r2, #0
 800402c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2221      	movs	r2, #33	; 0x21
 800403c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f84c 	bl	80040dc <DMA_CalcBaseAndBitshift>
 8004044:	4603      	mov	r3, r0
 8004046:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	223f      	movs	r2, #63	; 0x3f
 8004072:	409a      	lsls	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d004      	beq.n	80040b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e00c      	b.n	80040d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2205      	movs	r2, #5
 80040ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	3b10      	subs	r3, #16
 80040ec:	4a14      	ldr	r2, [pc, #80]	; (8004140 <DMA_CalcBaseAndBitshift+0x64>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040f6:	4a13      	ldr	r2, [pc, #76]	; (8004144 <DMA_CalcBaseAndBitshift+0x68>)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d909      	bls.n	800411e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	1d1a      	adds	r2, r3, #4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	659a      	str	r2, [r3, #88]	; 0x58
 800411c:	e007      	b.n	800412e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	aaaaaaab 	.word	0xaaaaaaab
 8004144:	080126c8 	.word	0x080126c8

08004148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11f      	bne.n	80041a2 <DMA_CheckFifoParam+0x5a>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d856      	bhi.n	8004216 <DMA_CheckFifoParam+0xce>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <DMA_CheckFifoParam+0x28>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	08004193 	.word	0x08004193
 8004178:	08004181 	.word	0x08004181
 800417c:	08004217 	.word	0x08004217
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d046      	beq.n	800421a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004190:	e043      	b.n	800421a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800419a:	d140      	bne.n	800421e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e03d      	b.n	800421e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041aa:	d121      	bne.n	80041f0 <DMA_CheckFifoParam+0xa8>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d837      	bhi.n	8004222 <DMA_CheckFifoParam+0xda>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <DMA_CheckFifoParam+0x70>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041cf 	.word	0x080041cf
 80041c0:	080041c9 	.word	0x080041c9
 80041c4:	080041e1 	.word	0x080041e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e030      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d025      	beq.n	8004226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041de:	e022      	b.n	8004226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041e8:	d11f      	bne.n	800422a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ee:	e01c      	b.n	800422a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d903      	bls.n	80041fe <DMA_CheckFifoParam+0xb6>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d003      	beq.n	8004204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041fc:	e018      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
      break;
 8004202:	e015      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e00b      	b.n	800422e <DMA_CheckFifoParam+0xe6>
      break;
 8004216:	bf00      	nop
 8004218:	e00a      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800421a:	bf00      	nop
 800421c:	e008      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800421e:	bf00      	nop
 8004220:	e006      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 8004222:	bf00      	nop
 8004224:	e004      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 8004226:	bf00      	nop
 8004228:	e002      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;   
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800422e:	bf00      	nop
    }
  } 
  
  return status; 
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop

08004240 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e03b      	b.n	80042ca <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fc fe5c 	bl	8000f24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	f023 0107 	bic.w	r1, r3, #7
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d1      	ldr	r1, [r2, #12]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	430b      	orrs	r3, r1
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af02      	add	r7, sp, #8
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_DMA2D_Start+0x1c>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e018      	b.n	8004320 <HAL_DMA2D_Start+0x4e>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2202      	movs	r2, #2
 80042fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fa99 	bl	8004840 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d056      	beq.n	80043f2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004344:	f7ff fc8a 	bl	8003c5c <HAL_GetTick>
 8004348:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800434a:	e04b      	b.n	80043e4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800435a:	2b00      	cmp	r3, #0
 800435c:	d023      	beq.n	80043a6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	f043 0202 	orr.w	r2, r3, #2
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2221      	movs	r2, #33	; 0x21
 8004390:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2204      	movs	r2, #4
 8004396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e0a5      	b.n	80044f2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d01a      	beq.n	80043e4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80043ae:	f7ff fc55 	bl	8003c5c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <HAL_DMA2D_PollForTransfer+0x9c>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10f      	bne.n	80043e4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	f043 0220 	orr.w	r2, r3, #32
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2203      	movs	r2, #3
 80043d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e086      	b.n	80044f2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0ac      	beq.n	800434c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d061      	beq.n	80044d8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004414:	f7ff fc22 	bl	8003c5c <HAL_GetTick>
 8004418:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800441a:	e056      	b.n	80044ca <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800442a:	2b00      	cmp	r3, #0
 800442c:	d02e      	beq.n	800448c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	f043 0204 	orr.w	r2, r3, #4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	f043 0202 	orr.w	r2, r3, #2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	f043 0201 	orr.w	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2229      	movs	r2, #41	; 0x29
 8004476:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2204      	movs	r2, #4
 800447c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e032      	b.n	80044f2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	d01a      	beq.n	80044ca <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004494:	f7ff fbe2 	bl	8003c5c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <HAL_DMA2D_PollForTransfer+0x182>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	f043 0220 	orr.w	r2, r3, #32
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2203      	movs	r2, #3
 80044ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e013      	b.n	80044f2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0a1      	beq.n	800441c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2212      	movs	r2, #18
 80044de:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d026      	beq.n	800456a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d021      	beq.n	800456a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004534:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2201      	movs	r2, #1
 8004548:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2204      	movs	r2, #4
 800454e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d026      	beq.n	80045c2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d021      	beq.n	80045c2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800458c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2220      	movs	r2, #32
 8004594:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	f043 0202 	orr.w	r2, r3, #2
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2204      	movs	r2, #4
 80045a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d026      	beq.n	800461a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d021      	beq.n	800461a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2208      	movs	r2, #8
 80045ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	f043 0204 	orr.w	r2, r3, #4
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d013      	beq.n	800464c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00e      	beq.n	800464c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2204      	movs	r2, #4
 8004644:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f853 	bl	80046f2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d024      	beq.n	80046a0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01f      	beq.n	80046a0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800466e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2202      	movs	r2, #2
 8004676:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01f      	beq.n	80046ea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01a      	beq.n	80046ea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2210      	movs	r2, #16
 80046ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f80e 	bl	8004706 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_DMA2D_ConfigLayer+0x20>
 8004738:	2302      	movs	r3, #2
 800473a:	e079      	b.n	8004830 <HAL_DMA2D_ConfigLayer+0x114>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	3318      	adds	r3, #24
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004766:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_DMA2D_ConfigLayer+0x120>)
 8004768:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b0a      	cmp	r3, #10
 8004770:	d003      	beq.n	800477a <HAL_DMA2D_ConfigLayer+0x5e>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b09      	cmp	r3, #9
 8004778:	d107      	bne.n	800478a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e005      	b.n	8004796 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d120      	bne.n	80047de <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	ea02 0103 	and.w	r1, r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b0a      	cmp	r3, #10
 80047c4:	d003      	beq.n	80047ce <HAL_DMA2D_ConfigLayer+0xb2>
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b09      	cmp	r3, #9
 80047cc:	d127      	bne.n	800481e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
 80047dc:	e01f      	b.n	800481e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	43db      	mvns	r3, r3
 80047e8:	ea02 0103 	and.w	r1, r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b0a      	cmp	r3, #10
 8004806:	d003      	beq.n	8004810 <HAL_DMA2D_ConfigLayer+0xf4>
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b09      	cmp	r3, #9
 800480e:	d106      	bne.n	800481e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800481c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	ff03000f 	.word	0xff03000f

08004840 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004840:	b480      	push	{r7}
 8004842:	b08b      	sub	sp, #44	; 0x2c
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	041a      	lsls	r2, r3, #16
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	431a      	orrs	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004878:	d174      	bne.n	8004964 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004880:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004888:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004890:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d108      	bne.n	80048b2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
 80048b0:	e053      	b.n	800495a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d106      	bne.n	80048c8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4313      	orrs	r3, r2
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
 80048c6:	e048      	b.n	800495a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d111      	bne.n	80048f4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	0cdb      	lsrs	r3, r3, #19
 80048d4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	0a9b      	lsrs	r3, r3, #10
 80048da:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	08db      	lsrs	r3, r3, #3
 80048e0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	02db      	lsls	r3, r3, #11
 80048ea:	4313      	orrs	r3, r2
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
 80048f2:	e032      	b.n	800495a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d117      	bne.n	800492c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	0fdb      	lsrs	r3, r3, #31
 8004900:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	0cdb      	lsrs	r3, r3, #19
 8004906:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	0adb      	lsrs	r3, r3, #11
 800490c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	08db      	lsrs	r3, r3, #3
 8004912:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	029b      	lsls	r3, r3, #10
 800491c:	431a      	orrs	r2, r3
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	03db      	lsls	r3, r3, #15
 8004922:	4313      	orrs	r3, r2
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
 800492a:	e016      	b.n	800495a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	0f1b      	lsrs	r3, r3, #28
 8004930:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	0d1b      	lsrs	r3, r3, #20
 8004936:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	0b1b      	lsrs	r3, r3, #12
 800493c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	011a      	lsls	r2, r3, #4
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	431a      	orrs	r2, r3
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	031b      	lsls	r3, r3, #12
 8004952:	4313      	orrs	r3, r2
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004962:	e003      	b.n	800496c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	60da      	str	r2, [r3, #12]
}
 800496c:	bf00      	nop
 800496e:	372c      	adds	r7, #44	; 0x2c
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e177      	b.n	8004c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004994:	2201      	movs	r2, #1
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4013      	ands	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	f040 8166 	bne.w	8004c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d00b      	beq.n	80049d2 <HAL_GPIO_Init+0x5a>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d007      	beq.n	80049d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049c6:	2b11      	cmp	r3, #17
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b12      	cmp	r3, #18
 80049d0:	d130      	bne.n	8004a34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	2203      	movs	r2, #3
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a08:	2201      	movs	r2, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 0201 	and.w	r2, r3, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	2203      	movs	r2, #3
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0xfc>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b12      	cmp	r3, #18
 8004a72:	d123      	bne.n	8004abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	08da      	lsrs	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3208      	adds	r2, #8
 8004a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	220f      	movs	r2, #15
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	08da      	lsrs	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3208      	adds	r2, #8
 8004ab6:	69b9      	ldr	r1, [r7, #24]
 8004ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80c0 	beq.w	8004c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	4b66      	ldr	r3, [pc, #408]	; (8004c9c <HAL_GPIO_Init+0x324>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	4a65      	ldr	r2, [pc, #404]	; (8004c9c <HAL_GPIO_Init+0x324>)
 8004b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0e:	4b63      	ldr	r3, [pc, #396]	; (8004c9c <HAL_GPIO_Init+0x324>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b1a:	4a61      	ldr	r2, [pc, #388]	; (8004ca0 <HAL_GPIO_Init+0x328>)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	3302      	adds	r3, #2
 8004b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	220f      	movs	r2, #15
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43db      	mvns	r3, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a58      	ldr	r2, [pc, #352]	; (8004ca4 <HAL_GPIO_Init+0x32c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d037      	beq.n	8004bb6 <HAL_GPIO_Init+0x23e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a57      	ldr	r2, [pc, #348]	; (8004ca8 <HAL_GPIO_Init+0x330>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d031      	beq.n	8004bb2 <HAL_GPIO_Init+0x23a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a56      	ldr	r2, [pc, #344]	; (8004cac <HAL_GPIO_Init+0x334>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02b      	beq.n	8004bae <HAL_GPIO_Init+0x236>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a55      	ldr	r2, [pc, #340]	; (8004cb0 <HAL_GPIO_Init+0x338>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d025      	beq.n	8004baa <HAL_GPIO_Init+0x232>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a54      	ldr	r2, [pc, #336]	; (8004cb4 <HAL_GPIO_Init+0x33c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01f      	beq.n	8004ba6 <HAL_GPIO_Init+0x22e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a53      	ldr	r2, [pc, #332]	; (8004cb8 <HAL_GPIO_Init+0x340>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d019      	beq.n	8004ba2 <HAL_GPIO_Init+0x22a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a52      	ldr	r2, [pc, #328]	; (8004cbc <HAL_GPIO_Init+0x344>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_GPIO_Init+0x226>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a51      	ldr	r2, [pc, #324]	; (8004cc0 <HAL_GPIO_Init+0x348>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00d      	beq.n	8004b9a <HAL_GPIO_Init+0x222>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a50      	ldr	r2, [pc, #320]	; (8004cc4 <HAL_GPIO_Init+0x34c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <HAL_GPIO_Init+0x21e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a4f      	ldr	r2, [pc, #316]	; (8004cc8 <HAL_GPIO_Init+0x350>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <HAL_GPIO_Init+0x21a>
 8004b8e:	2309      	movs	r3, #9
 8004b90:	e012      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004b92:	230a      	movs	r3, #10
 8004b94:	e010      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004b96:	2308      	movs	r3, #8
 8004b98:	e00e      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004b9a:	2307      	movs	r3, #7
 8004b9c:	e00c      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004b9e:	2306      	movs	r3, #6
 8004ba0:	e00a      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004ba2:	2305      	movs	r3, #5
 8004ba4:	e008      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	e006      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004baa:	2303      	movs	r3, #3
 8004bac:	e004      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e002      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_GPIO_Init+0x240>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	f002 0203 	and.w	r2, r2, #3
 8004bbe:	0092      	lsls	r2, r2, #2
 8004bc0:	4093      	lsls	r3, r2
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc8:	4935      	ldr	r1, [pc, #212]	; (8004ca0 <HAL_GPIO_Init+0x328>)
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	3302      	adds	r3, #2
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bd6:	4b3d      	ldr	r3, [pc, #244]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	43db      	mvns	r3, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4013      	ands	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bfa:	4a34      	ldr	r2, [pc, #208]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c00:	4b32      	ldr	r3, [pc, #200]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c24:	4a29      	ldr	r2, [pc, #164]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c2a:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4013      	ands	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c4e:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c54:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4013      	ands	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c78:	4a14      	ldr	r2, [pc, #80]	; (8004ccc <HAL_GPIO_Init+0x354>)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	2b0f      	cmp	r3, #15
 8004c88:	f67f ae84 	bls.w	8004994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3724      	adds	r7, #36	; 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40013800 	.word	0x40013800
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	40020400 	.word	0x40020400
 8004cac:	40020800 	.word	0x40020800
 8004cb0:	40020c00 	.word	0x40020c00
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40021400 	.word	0x40021400
 8004cbc:	40021800 	.word	0x40021800
 8004cc0:	40021c00 	.word	0x40021c00
 8004cc4:	40022000 	.word	0x40022000
 8004cc8:	40022400 	.word	0x40022400
 8004ccc:	40013c00 	.word	0x40013c00

08004cd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e0d9      	b.n	8004ea0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cec:	2201      	movs	r2, #1
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	f040 80c9 	bne.w	8004e9a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d08:	4a6b      	ldr	r2, [pc, #428]	; (8004eb8 <HAL_GPIO_DeInit+0x1e8>)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	089b      	lsrs	r3, r3, #2
 8004d0e:	3302      	adds	r3, #2
 8004d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d14:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	220f      	movs	r2, #15
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a63      	ldr	r2, [pc, #396]	; (8004ebc <HAL_GPIO_DeInit+0x1ec>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d037      	beq.n	8004da2 <HAL_GPIO_DeInit+0xd2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a62      	ldr	r2, [pc, #392]	; (8004ec0 <HAL_GPIO_DeInit+0x1f0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d031      	beq.n	8004d9e <HAL_GPIO_DeInit+0xce>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a61      	ldr	r2, [pc, #388]	; (8004ec4 <HAL_GPIO_DeInit+0x1f4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d02b      	beq.n	8004d9a <HAL_GPIO_DeInit+0xca>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a60      	ldr	r2, [pc, #384]	; (8004ec8 <HAL_GPIO_DeInit+0x1f8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d025      	beq.n	8004d96 <HAL_GPIO_DeInit+0xc6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a5f      	ldr	r2, [pc, #380]	; (8004ecc <HAL_GPIO_DeInit+0x1fc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01f      	beq.n	8004d92 <HAL_GPIO_DeInit+0xc2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a5e      	ldr	r2, [pc, #376]	; (8004ed0 <HAL_GPIO_DeInit+0x200>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d019      	beq.n	8004d8e <HAL_GPIO_DeInit+0xbe>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a5d      	ldr	r2, [pc, #372]	; (8004ed4 <HAL_GPIO_DeInit+0x204>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <HAL_GPIO_DeInit+0xba>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a5c      	ldr	r2, [pc, #368]	; (8004ed8 <HAL_GPIO_DeInit+0x208>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00d      	beq.n	8004d86 <HAL_GPIO_DeInit+0xb6>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a5b      	ldr	r2, [pc, #364]	; (8004edc <HAL_GPIO_DeInit+0x20c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <HAL_GPIO_DeInit+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a5a      	ldr	r2, [pc, #360]	; (8004ee0 <HAL_GPIO_DeInit+0x210>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d101      	bne.n	8004d7e <HAL_GPIO_DeInit+0xae>
 8004d7a:	2309      	movs	r3, #9
 8004d7c:	e012      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d7e:	230a      	movs	r3, #10
 8004d80:	e010      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d82:	2308      	movs	r3, #8
 8004d84:	e00e      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d86:	2307      	movs	r3, #7
 8004d88:	e00c      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d8a:	2306      	movs	r3, #6
 8004d8c:	e00a      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d8e:	2305      	movs	r3, #5
 8004d90:	e008      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d92:	2304      	movs	r3, #4
 8004d94:	e006      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d96:	2303      	movs	r3, #3
 8004d98:	e004      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e002      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <HAL_GPIO_DeInit+0xd4>
 8004da2:	2300      	movs	r3, #0
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	f002 0203 	and.w	r2, r2, #3
 8004daa:	0092      	lsls	r2, r2, #2
 8004dac:	4093      	lsls	r3, r2
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d132      	bne.n	8004e1a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004db4:	4b4b      	ldr	r3, [pc, #300]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	4949      	ldr	r1, [pc, #292]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004dc2:	4b48      	ldr	r3, [pc, #288]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	4946      	ldr	r1, [pc, #280]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004dd0:	4b44      	ldr	r3, [pc, #272]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	4942      	ldr	r1, [pc, #264]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004dde:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	43db      	mvns	r3, r3
 8004de6:	493f      	ldr	r1, [pc, #252]	; (8004ee4 <HAL_GPIO_DeInit+0x214>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	220f      	movs	r2, #15
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004dfc:	4a2e      	ldr	r2, [pc, #184]	; (8004eb8 <HAL_GPIO_DeInit+0x1e8>)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	3302      	adds	r3, #2
 8004e04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	482a      	ldr	r0, [pc, #168]	; (8004eb8 <HAL_GPIO_DeInit+0x1e8>)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	400a      	ands	r2, r1
 8004e14:	3302      	adds	r3, #2
 8004e16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	2103      	movs	r1, #3
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	08da      	lsrs	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3208      	adds	r2, #8
 8004e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	220f      	movs	r2, #15
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	08d2      	lsrs	r2, r2, #3
 8004e50:	4019      	ands	r1, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3208      	adds	r2, #8
 8004e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	2103      	movs	r1, #3
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	2101      	movs	r1, #1
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	401a      	ands	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	2103      	movs	r1, #3
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	401a      	ands	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b0f      	cmp	r3, #15
 8004ea4:	f67f af22 	bls.w	8004cec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40013800 	.word	0x40013800
 8004ebc:	40020000 	.word	0x40020000
 8004ec0:	40020400 	.word	0x40020400
 8004ec4:	40020800 	.word	0x40020800
 8004ec8:	40020c00 	.word	0x40020c00
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	40021400 	.word	0x40021400
 8004ed4:	40021800 	.word	0x40021800
 8004ed8:	40021c00 	.word	0x40021c00
 8004edc:	40022000 	.word	0x40022000
 8004ee0:	40022400 	.word	0x40022400
 8004ee4:	40013c00 	.word	0x40013c00

08004ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ef8:	787b      	ldrb	r3, [r7, #1]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004efe:	887a      	ldrh	r2, [r7, #2]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f04:	e003      	b.n	8004f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	041a      	lsls	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	619a      	str	r2, [r3, #24]
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e12b      	b.n	8005186 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc faa4 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2224      	movs	r2, #36	; 0x24
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0201 	bic.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f80:	f002 f95a 	bl	8007238 <HAL_RCC_GetPCLK1Freq>
 8004f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4a81      	ldr	r2, [pc, #516]	; (8005190 <HAL_I2C_Init+0x274>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d807      	bhi.n	8004fa0 <HAL_I2C_Init+0x84>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a80      	ldr	r2, [pc, #512]	; (8005194 <HAL_I2C_Init+0x278>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	bf94      	ite	ls
 8004f98:	2301      	movls	r3, #1
 8004f9a:	2300      	movhi	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	e006      	b.n	8004fae <HAL_I2C_Init+0x92>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a7d      	ldr	r2, [pc, #500]	; (8005198 <HAL_I2C_Init+0x27c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	bf94      	ite	ls
 8004fa8:	2301      	movls	r3, #1
 8004faa:	2300      	movhi	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e0e7      	b.n	8005186 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4a78      	ldr	r2, [pc, #480]	; (800519c <HAL_I2C_Init+0x280>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	0c9b      	lsrs	r3, r3, #18
 8004fc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a6a      	ldr	r2, [pc, #424]	; (8005190 <HAL_I2C_Init+0x274>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d802      	bhi.n	8004ff0 <HAL_I2C_Init+0xd4>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	3301      	adds	r3, #1
 8004fee:	e009      	b.n	8005004 <HAL_I2C_Init+0xe8>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	4a69      	ldr	r2, [pc, #420]	; (80051a0 <HAL_I2C_Init+0x284>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	099b      	lsrs	r3, r3, #6
 8005002:	3301      	adds	r3, #1
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	430b      	orrs	r3, r1
 800500a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	495c      	ldr	r1, [pc, #368]	; (8005190 <HAL_I2C_Init+0x274>)
 8005020:	428b      	cmp	r3, r1
 8005022:	d819      	bhi.n	8005058 <HAL_I2C_Init+0x13c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1e59      	subs	r1, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005032:	1c59      	adds	r1, r3, #1
 8005034:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005038:	400b      	ands	r3, r1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_I2C_Init+0x138>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1e59      	subs	r1, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fbb1 f3f3 	udiv	r3, r1, r3
 800504c:	3301      	adds	r3, #1
 800504e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005052:	e051      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 8005054:	2304      	movs	r3, #4
 8005056:	e04f      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d111      	bne.n	8005084 <HAL_I2C_Init+0x168>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1e58      	subs	r0, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	440b      	add	r3, r1
 800506e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005072:	3301      	adds	r3, #1
 8005074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e012      	b.n	80050aa <HAL_I2C_Init+0x18e>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	1e58      	subs	r0, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6859      	ldr	r1, [r3, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	0099      	lsls	r1, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	fbb0 f3f3 	udiv	r3, r0, r3
 800509a:	3301      	adds	r3, #1
 800509c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Init+0x196>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e022      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10e      	bne.n	80050d8 <HAL_I2C_Init+0x1bc>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1e58      	subs	r0, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	440b      	add	r3, r1
 80050c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80050cc:	3301      	adds	r3, #1
 80050ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d6:	e00f      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1e58      	subs	r0, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6859      	ldr	r1, [r3, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	0099      	lsls	r1, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ee:	3301      	adds	r3, #1
 80050f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	6809      	ldr	r1, [r1, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6911      	ldr	r1, [r2, #16]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	4311      	orrs	r1, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	000186a0 	.word	0x000186a0
 8005194:	001e847f 	.word	0x001e847f
 8005198:	003d08ff 	.word	0x003d08ff
 800519c:	431bde83 	.word	0x431bde83
 80051a0:	10624dd3 	.word	0x10624dd3

080051a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	817b      	strh	r3, [r7, #10]
 80051b6:	460b      	mov	r3, r1
 80051b8:	813b      	strh	r3, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051be:	f7fe fd4d 	bl	8003c5c <HAL_GetTick>
 80051c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	f040 80d9 	bne.w	8005384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	2319      	movs	r3, #25
 80051d8:	2201      	movs	r2, #1
 80051da:	496d      	ldr	r1, [pc, #436]	; (8005390 <HAL_I2C_Mem_Write+0x1ec>)
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fdad 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
 80051ea:	e0cc      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_I2C_Mem_Write+0x56>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e0c5      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d007      	beq.n	8005220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800522e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2221      	movs	r2, #33	; 0x21
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2240      	movs	r2, #64	; 0x40
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a3a      	ldr	r2, [r7, #32]
 800524a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a4d      	ldr	r2, [pc, #308]	; (8005394 <HAL_I2C_Mem_Write+0x1f0>)
 8005260:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005262:	88f8      	ldrh	r0, [r7, #6]
 8005264:	893a      	ldrh	r2, [r7, #8]
 8005266:	8979      	ldrh	r1, [r7, #10]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	4603      	mov	r3, r0
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fbe4 	bl	8005a40 <I2C_RequestMemoryWrite>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d052      	beq.n	8005324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e081      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fe2e 	bl	8005ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00d      	beq.n	80052ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2b04      	cmp	r3, #4
 8005298:	d107      	bne.n	80052aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e06b      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d11b      	bne.n	8005324 <HAL_I2C_Mem_Write+0x180>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1aa      	bne.n	8005282 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 fe1a 	bl	8005f6a <I2C_WaitOnBTFFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	2b04      	cmp	r3, #4
 8005342:	d107      	bne.n	8005354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e016      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005384:	2302      	movs	r3, #2
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	00100002 	.word	0x00100002
 8005394:	ffff0000 	.word	0xffff0000

08005398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08c      	sub	sp, #48	; 0x30
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	817b      	strh	r3, [r7, #10]
 80053aa:	460b      	mov	r3, r1
 80053ac:	813b      	strh	r3, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053b2:	f7fe fc53 	bl	8003c5c <HAL_GetTick>
 80053b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	f040 8208 	bne.w	80057d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2319      	movs	r3, #25
 80053cc:	2201      	movs	r2, #1
 80053ce:	497b      	ldr	r1, [pc, #492]	; (80055bc <HAL_I2C_Mem_Read+0x224>)
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fcb3 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
 80053de:	e1fb      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_I2C_Mem_Read+0x56>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e1f4      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d007      	beq.n	8005414 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2222      	movs	r2, #34	; 0x22
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2240      	movs	r2, #64	; 0x40
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a5b      	ldr	r2, [pc, #364]	; (80055c0 <HAL_I2C_Mem_Read+0x228>)
 8005454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005456:	88f8      	ldrh	r0, [r7, #6]
 8005458:	893a      	ldrh	r2, [r7, #8]
 800545a:	8979      	ldrh	r1, [r7, #10]
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	4603      	mov	r3, r0
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fb80 	bl	8005b6c <I2C_RequestMemoryRead>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e1b0      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547a:	2b00      	cmp	r3, #0
 800547c:	d113      	bne.n	80054a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547e:	2300      	movs	r3, #0
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	623b      	str	r3, [r7, #32]
 8005492:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e184      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d11b      	bne.n	80054e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	e164      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d11b      	bne.n	8005526 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	e144      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800553c:	e138      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	2b03      	cmp	r3, #3
 8005544:	f200 80f1 	bhi.w	800572a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	2b01      	cmp	r3, #1
 800554e:	d123      	bne.n	8005598 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fd49 	bl	8005fec <I2C_WaitOnRXNEFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e139      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005596:	e10b      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559c:	2b02      	cmp	r3, #2
 800559e:	d14e      	bne.n	800563e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	2200      	movs	r2, #0
 80055a8:	4906      	ldr	r1, [pc, #24]	; (80055c4 <HAL_I2C_Mem_Read+0x22c>)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fbc6 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d008      	beq.n	80055c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e10e      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
 80055ba:	bf00      	nop
 80055bc:	00100002 	.word	0x00100002
 80055c0:	ffff0000 	.word	0xffff0000
 80055c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800563c:	e0b8      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2200      	movs	r2, #0
 8005646:	4966      	ldr	r1, [pc, #408]	; (80057e0 <HAL_I2C_Mem_Read+0x448>)
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fb77 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0bf      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	2200      	movs	r2, #0
 80056a2:	494f      	ldr	r1, [pc, #316]	; (80057e0 <HAL_I2C_Mem_Read+0x448>)
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fb49 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e091      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005728:	e042      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fc5c 	bl	8005fec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e04c      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b04      	cmp	r3, #4
 800577c:	d118      	bne.n	80057b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f47f aec2 	bne.w	800553e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e000      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
  }
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3728      	adds	r7, #40	; 0x28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	00010004 	.word	0x00010004

080057e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08a      	sub	sp, #40	; 0x28
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	460b      	mov	r3, r1
 80057f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80057f4:	f7fe fa32 	bl	8003c5c <HAL_GetTick>
 80057f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80057fa:	2301      	movs	r3, #1
 80057fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b20      	cmp	r3, #32
 8005808:	f040 8111 	bne.w	8005a2e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	2319      	movs	r3, #25
 8005812:	2201      	movs	r2, #1
 8005814:	4988      	ldr	r1, [pc, #544]	; (8005a38 <HAL_I2C_IsDeviceReady+0x254>)
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fa90 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005822:	2302      	movs	r3, #2
 8005824:	e104      	b.n	8005a30 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_I2C_IsDeviceReady+0x50>
 8005830:	2302      	movs	r3, #2
 8005832:	e0fd      	b.n	8005a30 <HAL_I2C_IsDeviceReady+0x24c>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b01      	cmp	r3, #1
 8005848:	d007      	beq.n	800585a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0201 	orr.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2224      	movs	r2, #36	; 0x24
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a70      	ldr	r2, [pc, #448]	; (8005a3c <HAL_I2C_IsDeviceReady+0x258>)
 800587c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800588c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2200      	movs	r2, #0
 8005896:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fa4e 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00d      	beq.n	80058c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b4:	d103      	bne.n	80058be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e0b6      	b.n	8005a30 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058c2:	897b      	ldrh	r3, [r7, #10]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80058d2:	f7fe f9c3 	bl	8003c5c <HAL_GetTick>
 80058d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	bf0c      	ite	eq
 80058e6:	2301      	moveq	r3, #1
 80058e8:	2300      	movne	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fc:	bf0c      	ite	eq
 80058fe:	2301      	moveq	r3, #1
 8005900:	2300      	movne	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005906:	e025      	b.n	8005954 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005908:	f7fe f9a8 	bl	8003c5c <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d302      	bcc.n	800591e <HAL_I2C_IsDeviceReady+0x13a>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	22a0      	movs	r2, #160	; 0xa0
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b02      	cmp	r3, #2
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594a:	bf0c      	ite	eq
 800594c:	2301      	moveq	r3, #1
 800594e:	2300      	movne	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2ba0      	cmp	r3, #160	; 0xa0
 800595e:	d005      	beq.n	800596c <HAL_I2C_IsDeviceReady+0x188>
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <HAL_I2C_IsDeviceReady+0x188>
 8005966:	7dbb      	ldrb	r3, [r7, #22]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0cd      	beq.n	8005908 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b02      	cmp	r3, #2
 8005980:	d129      	bne.n	80059d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005990:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	2319      	movs	r3, #25
 80059ae:	2201      	movs	r2, #1
 80059b0:	4921      	ldr	r1, [pc, #132]	; (8005a38 <HAL_I2C_IsDeviceReady+0x254>)
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f9c2 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e036      	b.n	8005a30 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e02c      	b.n	8005a30 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	2319      	movs	r3, #25
 80059f6:	2201      	movs	r2, #1
 80059f8:	490f      	ldr	r1, [pc, #60]	; (8005a38 <HAL_I2C_IsDeviceReady+0x254>)
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f99e 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e012      	b.n	8005a30 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	f4ff af32 	bcc.w	800587e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005a2e:	2302      	movs	r3, #2
  }
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	00100002 	.word	0x00100002
 8005a3c:	ffff0000 	.word	0xffff0000

08005a40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	4608      	mov	r0, r1
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	817b      	strh	r3, [r7, #10]
 8005a52:	460b      	mov	r3, r1
 8005a54:	813b      	strh	r3, [r7, #8]
 8005a56:	4613      	mov	r3, r2
 8005a58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f960 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00d      	beq.n	8005a9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a90:	d103      	bne.n	8005a9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e05f      	b.n	8005b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a9e:	897b      	ldrh	r3, [r7, #10]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	6a3a      	ldr	r2, [r7, #32]
 8005ab2:	492d      	ldr	r1, [pc, #180]	; (8005b68 <I2C_RequestMemoryWrite+0x128>)
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f998 	bl	8005dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e04c      	b.n	8005b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005adc:	6a39      	ldr	r1, [r7, #32]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fa02 	bl	8005ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d107      	bne.n	8005b02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e02b      	b.n	8005b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d105      	bne.n	8005b18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0c:	893b      	ldrh	r3, [r7, #8]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	611a      	str	r2, [r3, #16]
 8005b16:	e021      	b.n	8005b5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b18:	893b      	ldrh	r3, [r7, #8]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b28:	6a39      	ldr	r1, [r7, #32]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f9dc 	bl	8005ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00d      	beq.n	8005b52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d107      	bne.n	8005b4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e005      	b.n	8005b5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	00010002 	.word	0x00010002

08005b6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	4608      	mov	r0, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	817b      	strh	r3, [r7, #10]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	813b      	strh	r3, [r7, #8]
 8005b82:	4613      	mov	r3, r2
 8005b84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ba4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 f8c2 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bcc:	d103      	bne.n	8005bd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e0aa      	b.n	8005d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bda:	897b      	ldrh	r3, [r7, #10]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	461a      	mov	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005be8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	4952      	ldr	r1, [pc, #328]	; (8005d38 <I2C_RequestMemoryRead+0x1cc>)
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f8fa 	bl	8005dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e097      	b.n	8005d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c18:	6a39      	ldr	r1, [r7, #32]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f964 	bl	8005ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00d      	beq.n	8005c42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d107      	bne.n	8005c3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e076      	b.n	8005d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d105      	bne.n	8005c54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c48:	893b      	ldrh	r3, [r7, #8]
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	611a      	str	r2, [r3, #16]
 8005c52:	e021      	b.n	8005c98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c54:	893b      	ldrh	r3, [r7, #8]
 8005c56:	0a1b      	lsrs	r3, r3, #8
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c64:	6a39      	ldr	r1, [r7, #32]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f93e 	bl	8005ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00d      	beq.n	8005c8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d107      	bne.n	8005c8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e050      	b.n	8005d30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c8e:	893b      	ldrh	r3, [r7, #8]
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9a:	6a39      	ldr	r1, [r7, #32]
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f923 	bl	8005ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00d      	beq.n	8005cc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d107      	bne.n	8005cc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e035      	b.n	8005d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f82b 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00d      	beq.n	8005d08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfa:	d103      	bne.n	8005d04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e013      	b.n	8005d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d08:	897b      	ldrh	r3, [r7, #10]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	6a3a      	ldr	r2, [r7, #32]
 8005d1c:	4906      	ldr	r1, [pc, #24]	; (8005d38 <I2C_RequestMemoryRead+0x1cc>)
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 f863 	bl	8005dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	00010002 	.word	0x00010002

08005d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d4c:	e025      	b.n	8005d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d021      	beq.n	8005d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d56:	f7fd ff81 	bl	8003c5c <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d116      	bne.n	8005d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e023      	b.n	8005de2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d10d      	bne.n	8005dc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	43da      	mvns	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4013      	ands	r3, r2
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	bf0c      	ite	eq
 8005db6:	2301      	moveq	r3, #1
 8005db8:	2300      	movne	r3, #0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	e00c      	b.n	8005dda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	43da      	mvns	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bf0c      	ite	eq
 8005dd2:	2301      	moveq	r3, #1
 8005dd4:	2300      	movne	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d0b6      	beq.n	8005d4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005df8:	e051      	b.n	8005e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e08:	d123      	bne.n	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f043 0204 	orr.w	r2, r3, #4
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e046      	b.n	8005ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d021      	beq.n	8005e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5a:	f7fd feff 	bl	8003c5c <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d302      	bcc.n	8005e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d116      	bne.n	8005e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f043 0220 	orr.w	r2, r3, #32
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e020      	b.n	8005ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	0c1b      	lsrs	r3, r3, #16
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d10c      	bne.n	8005ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	43da      	mvns	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	bf14      	ite	ne
 8005eba:	2301      	movne	r3, #1
 8005ebc:	2300      	moveq	r3, #0
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	e00b      	b.n	8005eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	43da      	mvns	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d18d      	bne.n	8005dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ef4:	e02d      	b.n	8005f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f8ce 	bl	8006098 <I2C_IsAcknowledgeFailed>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e02d      	b.n	8005f62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d021      	beq.n	8005f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0e:	f7fd fea5 	bl	8003c5c <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d116      	bne.n	8005f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f043 0220 	orr.w	r2, r3, #32
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e007      	b.n	8005f62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5c:	2b80      	cmp	r3, #128	; 0x80
 8005f5e:	d1ca      	bne.n	8005ef6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f76:	e02d      	b.n	8005fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f88d 	bl	8006098 <I2C_IsAcknowledgeFailed>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e02d      	b.n	8005fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d021      	beq.n	8005fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f90:	f7fd fe64 	bl	8003c5c <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d302      	bcc.n	8005fa6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d116      	bne.n	8005fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	f043 0220 	orr.w	r2, r3, #32
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e007      	b.n	8005fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d1ca      	bne.n	8005f78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ff8:	e042      	b.n	8006080 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b10      	cmp	r3, #16
 8006006:	d119      	bne.n	800603c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0210 	mvn.w	r2, #16
 8006010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e029      	b.n	8006090 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603c:	f7fd fe0e 	bl	8003c5c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	d302      	bcc.n	8006052 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d116      	bne.n	8006080 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	f043 0220 	orr.w	r2, r3, #32
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e007      	b.n	8006090 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d1b5      	bne.n	8005ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ae:	d11b      	bne.n	80060e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	f043 0204 	orr.w	r2, r3, #4
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b20      	cmp	r3, #32
 800610a:	d129      	bne.n	8006160 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2224      	movs	r2, #36	; 0x24
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0210 	bic.w	r2, r2, #16
 8006132:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	e000      	b.n	8006162 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006160:	2302      	movs	r3, #2
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b20      	cmp	r3, #32
 8006186:	d12a      	bne.n	80061de <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2224      	movs	r2, #36	; 0x24
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80061a8:	89fb      	ldrh	r3, [r7, #14]
 80061aa:	f023 030f 	bic.w	r3, r3, #15
 80061ae:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	89fb      	ldrh	r3, [r7, #14]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	89fa      	ldrh	r2, [r7, #14]
 80061c0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0201 	orr.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	e000      	b.n	80061e0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80061de:	2302      	movs	r3, #2
  }
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e0bf      	b.n	800637e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fb fa26 	bl	8001664 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800622e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6999      	ldr	r1, [r3, #24]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006244:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6899      	ldr	r1, [r3, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	4b4a      	ldr	r3, [pc, #296]	; (8006388 <HAL_LTDC_Init+0x19c>)
 8006260:	400b      	ands	r3, r1
 8006262:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6899      	ldr	r1, [r3, #8]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68d9      	ldr	r1, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	4b3e      	ldr	r3, [pc, #248]	; (8006388 <HAL_LTDC_Init+0x19c>)
 800628e:	400b      	ands	r3, r1
 8006290:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	041b      	lsls	r3, r3, #16
 8006298:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68d9      	ldr	r1, [r3, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1a      	ldr	r2, [r3, #32]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6919      	ldr	r1, [r3, #16]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b33      	ldr	r3, [pc, #204]	; (8006388 <HAL_LTDC_Init+0x19c>)
 80062bc:	400b      	ands	r3, r1
 80062be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	041b      	lsls	r3, r3, #16
 80062c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6919      	ldr	r1, [r3, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6959      	ldr	r1, [r3, #20]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	4b27      	ldr	r3, [pc, #156]	; (8006388 <HAL_LTDC_Init+0x19c>)
 80062ea:	400b      	ands	r3, r1
 80062ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	041b      	lsls	r3, r3, #16
 80062f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6959      	ldr	r1, [r3, #20]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800631c:	041b      	lsls	r3, r3, #16
 800631e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800632e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0206 	orr.w	r2, r2, #6
 800635a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	f000f800 	.word	0xf000f800

0800638c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d023      	beq.n	80063f6 <HAL_LTDC_IRQHandler+0x6a>
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01e      	beq.n	80063f6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0204 	bic.w	r2, r2, #4
 80063c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2204      	movs	r2, #4
 80063ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063d6:	f043 0201 	orr.w	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2204      	movs	r2, #4
 80063e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f86f 	bl	80064d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d023      	beq.n	8006448 <HAL_LTDC_IRQHandler+0xbc>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01e      	beq.n	8006448 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0202 	bic.w	r2, r2, #2
 8006418:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2202      	movs	r2, #2
 8006420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006428:	f043 0202 	orr.w	r2, r3, #2
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f846 	bl	80064d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01b      	beq.n	800648a <HAL_LTDC_IRQHandler+0xfe>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d016      	beq.n	800648a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2201      	movs	r2, #1
 8006472:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f82f 	bl	80064e8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01b      	beq.n	80064cc <HAL_LTDC_IRQHandler+0x140>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0208 	bic.w	r2, r2, #8
 80064ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2208      	movs	r2, #8
 80064b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f818 	bl	80064fc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80064cc:	bf00      	nop
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006510:	b5b0      	push	{r4, r5, r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_LTDC_ConfigLayer+0x1a>
 8006526:	2302      	movs	r3, #2
 8006528:	e02c      	b.n	8006584 <HAL_LTDC_ConfigLayer+0x74>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2134      	movs	r1, #52	; 0x34
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	4413      	add	r3, r2
 8006546:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4614      	mov	r4, r2
 800654e:	461d      	mov	r5, r3
 8006550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800655a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 f83b 	bl	80065e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2201      	movs	r2, #1
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bdb0      	pop	{r4, r5, r7, pc}

0800658c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800659a:	2b01      	cmp	r3, #1
 800659c:	d101      	bne.n	80065a2 <HAL_LTDC_EnableDither+0x16>
 800659e:	2302      	movs	r3, #2
 80065a0:	e016      	b.n	80065d0 <HAL_LTDC_EnableDither+0x44>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80065b2:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <HAL_LTDC_EnableDither+0x50>)
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	4a09      	ldr	r2, [pc, #36]	; (80065dc <HAL_LTDC_EnableDither+0x50>)
 80065b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065bc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	40016800 	.word	0x40016800

080065e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b089      	sub	sp, #36	; 0x24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fc:	4413      	add	r3, r2
 80065fe:	041b      	lsls	r3, r3, #16
 8006600:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	01db      	lsls	r3, r3, #7
 800660c:	4413      	add	r3, r2
 800660e:	3384      	adds	r3, #132	; 0x84
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	4611      	mov	r1, r2
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	01d2      	lsls	r2, r2, #7
 800661c:	440a      	add	r2, r1
 800661e:	3284      	adds	r2, #132	; 0x84
 8006620:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006624:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006636:	4413      	add	r3, r2
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4619      	mov	r1, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	01db      	lsls	r3, r3, #7
 8006644:	440b      	add	r3, r1
 8006646:	3384      	adds	r3, #132	; 0x84
 8006648:	4619      	mov	r1, r3
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4313      	orrs	r3, r2
 800664e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800665e:	4413      	add	r3, r2
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	01db      	lsls	r3, r3, #7
 800666e:	4413      	add	r3, r2
 8006670:	3384      	adds	r3, #132	; 0x84
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	4611      	mov	r1, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	01d2      	lsls	r2, r2, #7
 800667e:	440a      	add	r2, r1
 8006680:	3284      	adds	r2, #132	; 0x84
 8006682:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006686:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006696:	4413      	add	r3, r2
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4619      	mov	r1, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	01db      	lsls	r3, r3, #7
 80066a4:	440b      	add	r3, r1
 80066a6:	3384      	adds	r3, #132	; 0x84
 80066a8:	4619      	mov	r1, r3
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	01db      	lsls	r3, r3, #7
 80066ba:	4413      	add	r3, r2
 80066bc:	3384      	adds	r3, #132	; 0x84
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	4611      	mov	r1, r2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	01d2      	lsls	r2, r2, #7
 80066ca:	440a      	add	r2, r1
 80066cc:	3284      	adds	r2, #132	; 0x84
 80066ce:	f023 0307 	bic.w	r3, r3, #7
 80066d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	01db      	lsls	r3, r3, #7
 80066de:	4413      	add	r3, r2
 80066e0:	3384      	adds	r3, #132	; 0x84
 80066e2:	461a      	mov	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80066fa:	041b      	lsls	r3, r3, #16
 80066fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	061b      	lsls	r3, r3, #24
 8006704:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	01db      	lsls	r3, r3, #7
 8006710:	4413      	add	r3, r2
 8006712:	3384      	adds	r3, #132	; 0x84
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	01db      	lsls	r3, r3, #7
 8006720:	4413      	add	r3, r2
 8006722:	3384      	adds	r3, #132	; 0x84
 8006724:	461a      	mov	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006730:	461a      	mov	r2, r3
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	431a      	orrs	r2, r3
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	01db      	lsls	r3, r3, #7
 8006744:	440b      	add	r3, r1
 8006746:	3384      	adds	r3, #132	; 0x84
 8006748:	4619      	mov	r1, r3
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	01db      	lsls	r3, r3, #7
 800675a:	4413      	add	r3, r2
 800675c:	3384      	adds	r3, #132	; 0x84
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	4611      	mov	r1, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	01d2      	lsls	r2, r2, #7
 800676a:	440a      	add	r2, r1
 800676c:	3284      	adds	r2, #132	; 0x84
 800676e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006772:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	461a      	mov	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	01db      	lsls	r3, r3, #7
 800677e:	4413      	add	r3, r2
 8006780:	3384      	adds	r3, #132	; 0x84
 8006782:	461a      	mov	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	01db      	lsls	r3, r3, #7
 8006794:	4413      	add	r3, r2
 8006796:	3384      	adds	r3, #132	; 0x84
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	4611      	mov	r1, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	01d2      	lsls	r2, r2, #7
 80067a4:	440a      	add	r2, r1
 80067a6:	3284      	adds	r2, #132	; 0x84
 80067a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80067ac:	f023 0307 	bic.w	r3, r3, #7
 80067b0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	69da      	ldr	r2, [r3, #28]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	6809      	ldr	r1, [r1, #0]
 80067be:	4608      	mov	r0, r1
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	01c9      	lsls	r1, r1, #7
 80067c4:	4401      	add	r1, r0
 80067c6:	3184      	adds	r1, #132	; 0x84
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	01db      	lsls	r3, r3, #7
 80067d6:	4413      	add	r3, r2
 80067d8:	3384      	adds	r3, #132	; 0x84
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	01db      	lsls	r3, r3, #7
 80067e6:	4413      	add	r3, r2
 80067e8:	3384      	adds	r3, #132	; 0x84
 80067ea:	461a      	mov	r2, r3
 80067ec:	2300      	movs	r3, #0
 80067ee:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	01db      	lsls	r3, r3, #7
 80067fa:	4413      	add	r3, r2
 80067fc:	3384      	adds	r3, #132	; 0x84
 80067fe:	461a      	mov	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d102      	bne.n	8006814 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800680e:	2304      	movs	r3, #4
 8006810:	61fb      	str	r3, [r7, #28]
 8006812:	e01b      	b.n	800684c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d102      	bne.n	8006822 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800681c:	2303      	movs	r3, #3
 800681e:	61fb      	str	r3, [r7, #28]
 8006820:	e014      	b.n	800684c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b04      	cmp	r3, #4
 8006828:	d00b      	beq.n	8006842 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800682e:	2b02      	cmp	r3, #2
 8006830:	d007      	beq.n	8006842 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006836:	2b03      	cmp	r3, #3
 8006838:	d003      	beq.n	8006842 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800683e:	2b07      	cmp	r3, #7
 8006840:	d102      	bne.n	8006848 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006842:	2302      	movs	r3, #2
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	e001      	b.n	800684c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006848:	2301      	movs	r3, #1
 800684a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	01db      	lsls	r3, r3, #7
 8006856:	4413      	add	r3, r2
 8006858:	3384      	adds	r3, #132	; 0x84
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	6812      	ldr	r2, [r2, #0]
 8006860:	4611      	mov	r1, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	01d2      	lsls	r2, r2, #7
 8006866:	440a      	add	r2, r1
 8006868:	3284      	adds	r2, #132	; 0x84
 800686a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800686e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	fb02 f303 	mul.w	r3, r2, r3
 800687a:	041a      	lsls	r2, r3, #16
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6859      	ldr	r1, [r3, #4]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	1acb      	subs	r3, r1, r3
 8006886:	69f9      	ldr	r1, [r7, #28]
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	3303      	adds	r3, #3
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	6809      	ldr	r1, [r1, #0]
 8006892:	4608      	mov	r0, r1
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	01c9      	lsls	r1, r1, #7
 8006898:	4401      	add	r1, r0
 800689a:	3184      	adds	r1, #132	; 0x84
 800689c:	4313      	orrs	r3, r2
 800689e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	01db      	lsls	r3, r3, #7
 80068aa:	4413      	add	r3, r2
 80068ac:	3384      	adds	r3, #132	; 0x84
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	6812      	ldr	r2, [r2, #0]
 80068b4:	4611      	mov	r1, r2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	01d2      	lsls	r2, r2, #7
 80068ba:	440a      	add	r2, r1
 80068bc:	3284      	adds	r2, #132	; 0x84
 80068be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068c2:	f023 0307 	bic.w	r3, r3, #7
 80068c6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	01db      	lsls	r3, r3, #7
 80068d2:	4413      	add	r3, r2
 80068d4:	3384      	adds	r3, #132	; 0x84
 80068d6:	461a      	mov	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	01db      	lsls	r3, r3, #7
 80068e8:	4413      	add	r3, r2
 80068ea:	3384      	adds	r3, #132	; 0x84
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	4611      	mov	r1, r2
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	01d2      	lsls	r2, r2, #7
 80068f8:	440a      	add	r2, r1
 80068fa:	3284      	adds	r2, #132	; 0x84
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	6013      	str	r3, [r2, #0]
}
 8006902:	bf00      	nop
 8006904:	3724      	adds	r7, #36	; 0x24
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
	...

08006910 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800691a:	2300      	movs	r3, #0
 800691c:	603b      	str	r3, [r7, #0]
 800691e:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006928:	6413      	str	r3, [r2, #64]	; 0x40
 800692a:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006936:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006938:	2201      	movs	r2, #1
 800693a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800693c:	f7fd f98e 	bl	8003c5c <HAL_GetTick>
 8006940:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006942:	e009      	b.n	8006958 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006944:	f7fd f98a 	bl	8003c5c <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006952:	d901      	bls.n	8006958 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e01f      	b.n	8006998 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006958:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006964:	d1ee      	bne.n	8006944 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006966:	4b11      	ldr	r3, [pc, #68]	; (80069ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006968:	2201      	movs	r2, #1
 800696a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800696c:	f7fd f976 	bl	8003c5c <HAL_GetTick>
 8006970:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006972:	e009      	b.n	8006988 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006974:	f7fd f972 	bl	8003c5c <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006982:	d901      	bls.n	8006988 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e007      	b.n	8006998 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006990:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006994:	d1ee      	bne.n	8006974 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40023800 	.word	0x40023800
 80069a4:	420e0040 	.word	0x420e0040
 80069a8:	40007000 	.word	0x40007000
 80069ac:	420e0044 	.word	0x420e0044

080069b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e25b      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d075      	beq.n	8006aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069ce:	4ba3      	ldr	r3, [pc, #652]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 030c 	and.w	r3, r3, #12
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d00c      	beq.n	80069f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069da:	4ba0      	ldr	r3, [pc, #640]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d112      	bne.n	8006a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069e6:	4b9d      	ldr	r3, [pc, #628]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f2:	d10b      	bne.n	8006a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f4:	4b99      	ldr	r3, [pc, #612]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d05b      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x108>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d157      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e236      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a14:	d106      	bne.n	8006a24 <HAL_RCC_OscConfig+0x74>
 8006a16:	4b91      	ldr	r3, [pc, #580]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a90      	ldr	r2, [pc, #576]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	e01d      	b.n	8006a60 <HAL_RCC_OscConfig+0xb0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCC_OscConfig+0x98>
 8006a2e:	4b8b      	ldr	r3, [pc, #556]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a8a      	ldr	r2, [pc, #552]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	4b88      	ldr	r3, [pc, #544]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a87      	ldr	r2, [pc, #540]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e00b      	b.n	8006a60 <HAL_RCC_OscConfig+0xb0>
 8006a48:	4b84      	ldr	r3, [pc, #528]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a83      	ldr	r2, [pc, #524]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	4b81      	ldr	r3, [pc, #516]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a80      	ldr	r2, [pc, #512]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d013      	beq.n	8006a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a68:	f7fd f8f8 	bl	8003c5c <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a70:	f7fd f8f4 	bl	8003c5c <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b64      	cmp	r3, #100	; 0x64
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e1fb      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a82:	4b76      	ldr	r3, [pc, #472]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCC_OscConfig+0xc0>
 8006a8e:	e014      	b.n	8006aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a90:	f7fd f8e4 	bl	8003c5c <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a98:	f7fd f8e0 	bl	8003c5c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b64      	cmp	r3, #100	; 0x64
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e1e7      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aaa:	4b6c      	ldr	r3, [pc, #432]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0xe8>
 8006ab6:	e000      	b.n	8006aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d063      	beq.n	8006b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ac6:	4b65      	ldr	r3, [pc, #404]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ad2:	4b62      	ldr	r3, [pc, #392]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d11c      	bne.n	8006b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ade:	4b5f      	ldr	r3, [pc, #380]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d116      	bne.n	8006b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aea:	4b5c      	ldr	r3, [pc, #368]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <HAL_RCC_OscConfig+0x152>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d001      	beq.n	8006b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e1bb      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b02:	4b56      	ldr	r3, [pc, #344]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	4952      	ldr	r1, [pc, #328]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b16:	e03a      	b.n	8006b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d020      	beq.n	8006b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b20:	4b4f      	ldr	r3, [pc, #316]	; (8006c60 <HAL_RCC_OscConfig+0x2b0>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b26:	f7fd f899 	bl	8003c5c <HAL_GetTick>
 8006b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b2e:	f7fd f895 	bl	8003c5c <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e19c      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b40:	4b46      	ldr	r3, [pc, #280]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f0      	beq.n	8006b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4c:	4b43      	ldr	r3, [pc, #268]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4940      	ldr	r1, [pc, #256]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	600b      	str	r3, [r1, #0]
 8006b60:	e015      	b.n	8006b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b62:	4b3f      	ldr	r3, [pc, #252]	; (8006c60 <HAL_RCC_OscConfig+0x2b0>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b68:	f7fd f878 	bl	8003c5c <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b70:	f7fd f874 	bl	8003c5c <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e17b      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b82:	4b36      	ldr	r3, [pc, #216]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f0      	bne.n	8006b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d030      	beq.n	8006bfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d016      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ba2:	4b30      	ldr	r3, [pc, #192]	; (8006c64 <HAL_RCC_OscConfig+0x2b4>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba8:	f7fd f858 	bl	8003c5c <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bb0:	f7fd f854 	bl	8003c5c <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e15b      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bc2:	4b26      	ldr	r3, [pc, #152]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x200>
 8006bce:	e015      	b.n	8006bfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bd0:	4b24      	ldr	r3, [pc, #144]	; (8006c64 <HAL_RCC_OscConfig+0x2b4>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bd6:	f7fd f841 	bl	8003c5c <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bde:	f7fd f83d 	bl	8003c5c <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e144      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1f0      	bne.n	8006bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 80a0 	beq.w	8006d4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10f      	bne.n	8006c3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	4a0e      	ldr	r2, [pc, #56]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c28:	6413      	str	r3, [r2, #64]	; 0x40
 8006c2a:	4b0c      	ldr	r3, [pc, #48]	; (8006c5c <HAL_RCC_OscConfig+0x2ac>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c32:	60bb      	str	r3, [r7, #8]
 8006c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <HAL_RCC_OscConfig+0x2b8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d121      	bne.n	8006c8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c46:	4b08      	ldr	r3, [pc, #32]	; (8006c68 <HAL_RCC_OscConfig+0x2b8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a07      	ldr	r2, [pc, #28]	; (8006c68 <HAL_RCC_OscConfig+0x2b8>)
 8006c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c52:	f7fd f803 	bl	8003c5c <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c58:	e011      	b.n	8006c7e <HAL_RCC_OscConfig+0x2ce>
 8006c5a:	bf00      	nop
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	42470000 	.word	0x42470000
 8006c64:	42470e80 	.word	0x42470e80
 8006c68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c6c:	f7fc fff6 	bl	8003c5c <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e0fd      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c7e:	4b81      	ldr	r3, [pc, #516]	; (8006e84 <HAL_RCC_OscConfig+0x4d4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0f0      	beq.n	8006c6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d106      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x2f0>
 8006c92:	4b7d      	ldr	r3, [pc, #500]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c96:	4a7c      	ldr	r2, [pc, #496]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c9e:	e01c      	b.n	8006cda <HAL_RCC_OscConfig+0x32a>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b05      	cmp	r3, #5
 8006ca6:	d10c      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x312>
 8006ca8:	4b77      	ldr	r3, [pc, #476]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cac:	4a76      	ldr	r2, [pc, #472]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006cae:	f043 0304 	orr.w	r3, r3, #4
 8006cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb4:	4b74      	ldr	r3, [pc, #464]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb8:	4a73      	ldr	r2, [pc, #460]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc0:	e00b      	b.n	8006cda <HAL_RCC_OscConfig+0x32a>
 8006cc2:	4b71      	ldr	r3, [pc, #452]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc6:	4a70      	ldr	r2, [pc, #448]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006cc8:	f023 0301 	bic.w	r3, r3, #1
 8006ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8006cce:	4b6e      	ldr	r3, [pc, #440]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd2:	4a6d      	ldr	r2, [pc, #436]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006cd4:	f023 0304 	bic.w	r3, r3, #4
 8006cd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d015      	beq.n	8006d0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce2:	f7fc ffbb 	bl	8003c5c <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce8:	e00a      	b.n	8006d00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cea:	f7fc ffb7 	bl	8003c5c <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e0bc      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d00:	4b61      	ldr	r3, [pc, #388]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0ee      	beq.n	8006cea <HAL_RCC_OscConfig+0x33a>
 8006d0c:	e014      	b.n	8006d38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d0e:	f7fc ffa5 	bl	8003c5c <HAL_GetTick>
 8006d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d14:	e00a      	b.n	8006d2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d16:	f7fc ffa1 	bl	8003c5c <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e0a6      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d2c:	4b56      	ldr	r3, [pc, #344]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1ee      	bne.n	8006d16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d105      	bne.n	8006d4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d3e:	4b52      	ldr	r3, [pc, #328]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	4a51      	ldr	r2, [pc, #324]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 8092 	beq.w	8006e78 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d54:	4b4c      	ldr	r3, [pc, #304]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 030c 	and.w	r3, r3, #12
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d05c      	beq.n	8006e1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d141      	bne.n	8006dec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d68:	4b48      	ldr	r3, [pc, #288]	; (8006e8c <HAL_RCC_OscConfig+0x4dc>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d6e:	f7fc ff75 	bl	8003c5c <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d74:	e008      	b.n	8006d88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d76:	f7fc ff71 	bl	8003c5c <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e078      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d88:	4b3f      	ldr	r3, [pc, #252]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1f0      	bne.n	8006d76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	019b      	lsls	r3, r3, #6
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	3b01      	subs	r3, #1
 8006dae:	041b      	lsls	r3, r3, #16
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	061b      	lsls	r3, r3, #24
 8006db8:	4933      	ldr	r1, [pc, #204]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dbe:	4b33      	ldr	r3, [pc, #204]	; (8006e8c <HAL_RCC_OscConfig+0x4dc>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc4:	f7fc ff4a 	bl	8003c5c <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dcc:	f7fc ff46 	bl	8003c5c <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e04d      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dde:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0x41c>
 8006dea:	e045      	b.n	8006e78 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dec:	4b27      	ldr	r3, [pc, #156]	; (8006e8c <HAL_RCC_OscConfig+0x4dc>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df2:	f7fc ff33 	bl	8003c5c <HAL_GetTick>
 8006df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df8:	e008      	b.n	8006e0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dfa:	f7fc ff2f 	bl	8003c5c <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e036      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e0c:	4b1e      	ldr	r3, [pc, #120]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1f0      	bne.n	8006dfa <HAL_RCC_OscConfig+0x44a>
 8006e18:	e02e      	b.n	8006e78 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e029      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e26:	4b18      	ldr	r3, [pc, #96]	; (8006e88 <HAL_RCC_OscConfig+0x4d8>)
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d11c      	bne.n	8006e74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d115      	bne.n	8006e74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e4e:	4013      	ands	r3, r2
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d10d      	bne.n	8006e74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d106      	bne.n	8006e74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d001      	beq.n	8006e78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40007000 	.word	0x40007000
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	42470060 	.word	0x42470060

08006e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e0cc      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ea4:	4b68      	ldr	r3, [pc, #416]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d90c      	bls.n	8006ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb2:	4b65      	ldr	r3, [pc, #404]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eba:	4b63      	ldr	r3, [pc, #396]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d001      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e0b8      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d020      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ee4:	4b59      	ldr	r3, [pc, #356]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4a58      	ldr	r2, [pc, #352]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006efc:	4b53      	ldr	r3, [pc, #332]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	4a52      	ldr	r2, [pc, #328]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f08:	4b50      	ldr	r3, [pc, #320]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	494d      	ldr	r1, [pc, #308]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d044      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f2e:	4b47      	ldr	r3, [pc, #284]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d119      	bne.n	8006f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e07f      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d003      	beq.n	8006f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d107      	bne.n	8006f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f4e:	4b3f      	ldr	r3, [pc, #252]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e06f      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f5e:	4b3b      	ldr	r3, [pc, #236]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e067      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f6e:	4b37      	ldr	r3, [pc, #220]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f023 0203 	bic.w	r2, r3, #3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	4934      	ldr	r1, [pc, #208]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f80:	f7fc fe6c 	bl	8003c5c <HAL_GetTick>
 8006f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f86:	e00a      	b.n	8006f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f88:	f7fc fe68 	bl	8003c5c <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e04f      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f9e:	4b2b      	ldr	r3, [pc, #172]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 020c 	and.w	r2, r3, #12
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d1eb      	bne.n	8006f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fb0:	4b25      	ldr	r3, [pc, #148]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 030f 	and.w	r3, r3, #15
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d20c      	bcs.n	8006fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fbe:	4b22      	ldr	r3, [pc, #136]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc6:	4b20      	ldr	r3, [pc, #128]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d001      	beq.n	8006fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e032      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d008      	beq.n	8006ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fe4:	4b19      	ldr	r3, [pc, #100]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	4916      	ldr	r1, [pc, #88]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007002:	4b12      	ldr	r3, [pc, #72]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	490e      	ldr	r1, [pc, #56]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	4313      	orrs	r3, r2
 8007014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007016:	f000 f821 	bl	800705c <HAL_RCC_GetSysClockFreq>
 800701a:	4602      	mov	r2, r0
 800701c:	4b0b      	ldr	r3, [pc, #44]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	091b      	lsrs	r3, r3, #4
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	490a      	ldr	r1, [pc, #40]	; (8007050 <HAL_RCC_ClockConfig+0x1c0>)
 8007028:	5ccb      	ldrb	r3, [r1, r3]
 800702a:	fa22 f303 	lsr.w	r3, r2, r3
 800702e:	4a09      	ldr	r2, [pc, #36]	; (8007054 <HAL_RCC_ClockConfig+0x1c4>)
 8007030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <HAL_RCC_ClockConfig+0x1c8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	f7fa fea6 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40023c00 	.word	0x40023c00
 800704c:	40023800 	.word	0x40023800
 8007050:	0800fba4 	.word	0x0800fba4
 8007054:	20000000 	.word	0x20000000
 8007058:	2000005c 	.word	0x2000005c

0800705c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800705c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	607b      	str	r3, [r7, #4]
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	2300      	movs	r3, #0
 800706e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007074:	4b67      	ldr	r3, [pc, #412]	; (8007214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 030c 	and.w	r3, r3, #12
 800707c:	2b08      	cmp	r3, #8
 800707e:	d00d      	beq.n	800709c <HAL_RCC_GetSysClockFreq+0x40>
 8007080:	2b08      	cmp	r3, #8
 8007082:	f200 80bd 	bhi.w	8007200 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0x34>
 800708a:	2b04      	cmp	r3, #4
 800708c:	d003      	beq.n	8007096 <HAL_RCC_GetSysClockFreq+0x3a>
 800708e:	e0b7      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007090:	4b61      	ldr	r3, [pc, #388]	; (8007218 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007092:	60bb      	str	r3, [r7, #8]
       break;
 8007094:	e0b7      	b.n	8007206 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007096:	4b61      	ldr	r3, [pc, #388]	; (800721c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007098:	60bb      	str	r3, [r7, #8]
      break;
 800709a:	e0b4      	b.n	8007206 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800709c:	4b5d      	ldr	r3, [pc, #372]	; (8007214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070a6:	4b5b      	ldr	r3, [pc, #364]	; (8007214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d04d      	beq.n	800714e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070b2:	4b58      	ldr	r3, [pc, #352]	; (8007214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	099b      	lsrs	r3, r3, #6
 80070b8:	461a      	mov	r2, r3
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070c2:	f04f 0100 	mov.w	r1, #0
 80070c6:	ea02 0800 	and.w	r8, r2, r0
 80070ca:	ea03 0901 	and.w	r9, r3, r1
 80070ce:	4640      	mov	r0, r8
 80070d0:	4649      	mov	r1, r9
 80070d2:	f04f 0200 	mov.w	r2, #0
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	014b      	lsls	r3, r1, #5
 80070dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070e0:	0142      	lsls	r2, r0, #5
 80070e2:	4610      	mov	r0, r2
 80070e4:	4619      	mov	r1, r3
 80070e6:	ebb0 0008 	subs.w	r0, r0, r8
 80070ea:	eb61 0109 	sbc.w	r1, r1, r9
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	f04f 0300 	mov.w	r3, #0
 80070f6:	018b      	lsls	r3, r1, #6
 80070f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070fc:	0182      	lsls	r2, r0, #6
 80070fe:	1a12      	subs	r2, r2, r0
 8007100:	eb63 0301 	sbc.w	r3, r3, r1
 8007104:	f04f 0000 	mov.w	r0, #0
 8007108:	f04f 0100 	mov.w	r1, #0
 800710c:	00d9      	lsls	r1, r3, #3
 800710e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007112:	00d0      	lsls	r0, r2, #3
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	eb12 0208 	adds.w	r2, r2, r8
 800711c:	eb43 0309 	adc.w	r3, r3, r9
 8007120:	f04f 0000 	mov.w	r0, #0
 8007124:	f04f 0100 	mov.w	r1, #0
 8007128:	0259      	lsls	r1, r3, #9
 800712a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800712e:	0250      	lsls	r0, r2, #9
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4610      	mov	r0, r2
 8007136:	4619      	mov	r1, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	461a      	mov	r2, r3
 800713c:	f04f 0300 	mov.w	r3, #0
 8007140:	f7f9 fd42 	bl	8000bc8 <__aeabi_uldivmod>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	4613      	mov	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	e04a      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800714e:	4b31      	ldr	r3, [pc, #196]	; (8007214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	099b      	lsrs	r3, r3, #6
 8007154:	461a      	mov	r2, r3
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800715e:	f04f 0100 	mov.w	r1, #0
 8007162:	ea02 0400 	and.w	r4, r2, r0
 8007166:	ea03 0501 	and.w	r5, r3, r1
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	014b      	lsls	r3, r1, #5
 8007178:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800717c:	0142      	lsls	r2, r0, #5
 800717e:	4610      	mov	r0, r2
 8007180:	4619      	mov	r1, r3
 8007182:	1b00      	subs	r0, r0, r4
 8007184:	eb61 0105 	sbc.w	r1, r1, r5
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	018b      	lsls	r3, r1, #6
 8007192:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007196:	0182      	lsls	r2, r0, #6
 8007198:	1a12      	subs	r2, r2, r0
 800719a:	eb63 0301 	sbc.w	r3, r3, r1
 800719e:	f04f 0000 	mov.w	r0, #0
 80071a2:	f04f 0100 	mov.w	r1, #0
 80071a6:	00d9      	lsls	r1, r3, #3
 80071a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071ac:	00d0      	lsls	r0, r2, #3
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	1912      	adds	r2, r2, r4
 80071b4:	eb45 0303 	adc.w	r3, r5, r3
 80071b8:	f04f 0000 	mov.w	r0, #0
 80071bc:	f04f 0100 	mov.w	r1, #0
 80071c0:	0299      	lsls	r1, r3, #10
 80071c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80071c6:	0290      	lsls	r0, r2, #10
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4610      	mov	r0, r2
 80071ce:	4619      	mov	r1, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	f7f9 fcf6 	bl	8000bc8 <__aeabi_uldivmod>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4613      	mov	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	0c1b      	lsrs	r3, r3, #16
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	3301      	adds	r3, #1
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	60bb      	str	r3, [r7, #8]
      break;
 80071fe:	e002      	b.n	8007206 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007200:	4b05      	ldr	r3, [pc, #20]	; (8007218 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007202:	60bb      	str	r3, [r7, #8]
      break;
 8007204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007206:	68bb      	ldr	r3, [r7, #8]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800
 8007218:	00f42400 	.word	0x00f42400
 800721c:	007a1200 	.word	0x007a1200

08007220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007224:	4b03      	ldr	r3, [pc, #12]	; (8007234 <HAL_RCC_GetHCLKFreq+0x14>)
 8007226:	681b      	ldr	r3, [r3, #0]
}
 8007228:	4618      	mov	r0, r3
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000000 	.word	0x20000000

08007238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800723c:	f7ff fff0 	bl	8007220 <HAL_RCC_GetHCLKFreq>
 8007240:	4602      	mov	r2, r0
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	0a9b      	lsrs	r3, r3, #10
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	4903      	ldr	r1, [pc, #12]	; (800725c <HAL_RCC_GetPCLK1Freq+0x24>)
 800724e:	5ccb      	ldrb	r3, [r1, r3]
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007254:	4618      	mov	r0, r3
 8007256:	bd80      	pop	{r7, pc}
 8007258:	40023800 	.word	0x40023800
 800725c:	0800fbb4 	.word	0x0800fbb4

08007260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007264:	f7ff ffdc 	bl	8007220 <HAL_RCC_GetHCLKFreq>
 8007268:	4602      	mov	r2, r0
 800726a:	4b05      	ldr	r3, [pc, #20]	; (8007280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	0b5b      	lsrs	r3, r3, #13
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	4903      	ldr	r1, [pc, #12]	; (8007284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007276:	5ccb      	ldrb	r3, [r1, r3]
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40023800 	.word	0x40023800
 8007284:	0800fbb4 	.word	0x0800fbb4

08007288 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	220f      	movs	r2, #15
 8007296:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007298:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <HAL_RCC_GetClockConfig+0x5c>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 0203 	and.w	r2, r3, #3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80072a4:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <HAL_RCC_GetClockConfig+0x5c>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80072b0:	4b0c      	ldr	r3, [pc, #48]	; (80072e4 <HAL_RCC_GetClockConfig+0x5c>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80072bc:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <HAL_RCC_GetClockConfig+0x5c>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	08db      	lsrs	r3, r3, #3
 80072c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072ca:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <HAL_RCC_GetClockConfig+0x60>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 020f 	and.w	r2, r3, #15
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	601a      	str	r2, [r3, #0]
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40023800 	.word	0x40023800
 80072e8:	40023c00 	.word	0x40023c00

080072ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007310:	2b00      	cmp	r3, #0
 8007312:	d105      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800731c:	2b00      	cmp	r3, #0
 800731e:	d075      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007320:	4bad      	ldr	r3, [pc, #692]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007326:	f7fc fc99 	bl	8003c5c <HAL_GetTick>
 800732a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800732c:	e008      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800732e:	f7fc fc95 	bl	8003c5c <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e18b      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007340:	4ba6      	ldr	r3, [pc, #664]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f0      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d009      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	019a      	lsls	r2, r3, #6
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	071b      	lsls	r3, r3, #28
 8007364:	499d      	ldr	r1, [pc, #628]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007366:	4313      	orrs	r3, r2
 8007368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01f      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007378:	4b98      	ldr	r3, [pc, #608]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800737a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737e:	0f1b      	lsrs	r3, r3, #28
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	019a      	lsls	r2, r3, #6
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	061b      	lsls	r3, r3, #24
 8007392:	431a      	orrs	r2, r3
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	071b      	lsls	r3, r3, #28
 8007398:	4990      	ldr	r1, [pc, #576]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800739a:	4313      	orrs	r3, r2
 800739c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073a0:	4b8e      	ldr	r3, [pc, #568]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a6:	f023 021f 	bic.w	r2, r3, #31
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	498a      	ldr	r1, [pc, #552]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00d      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	019a      	lsls	r2, r3, #6
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	061b      	lsls	r3, r3, #24
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	071b      	lsls	r3, r3, #28
 80073d8:	4980      	ldr	r1, [pc, #512]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073e0:	4b7d      	ldr	r3, [pc, #500]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80073e2:	2201      	movs	r2, #1
 80073e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073e6:	f7fc fc39 	bl	8003c5c <HAL_GetTick>
 80073ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073ec:	e008      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073ee:	f7fc fc35 	bl	8003c5c <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e12b      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007400:	4b76      	ldr	r3, [pc, #472]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0f0      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d105      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007420:	2b00      	cmp	r3, #0
 8007422:	d079      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007424:	4b6e      	ldr	r3, [pc, #440]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800742a:	f7fc fc17 	bl	8003c5c <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007430:	e008      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007432:	f7fc fc13 	bl	8003c5c <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e109      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007444:	4b65      	ldr	r3, [pc, #404]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800744c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007450:	d0ef      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b00      	cmp	r3, #0
 800745c:	d020      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800745e:	4b5f      	ldr	r3, [pc, #380]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	0f1b      	lsrs	r3, r3, #28
 8007466:	f003 0307 	and.w	r3, r3, #7
 800746a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	019a      	lsls	r2, r3, #6
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	061b      	lsls	r3, r3, #24
 8007478:	431a      	orrs	r2, r3
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	071b      	lsls	r3, r3, #28
 800747e:	4957      	ldr	r1, [pc, #348]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007480:	4313      	orrs	r3, r2
 8007482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007486:	4b55      	ldr	r3, [pc, #340]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800748c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	3b01      	subs	r3, #1
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	4950      	ldr	r1, [pc, #320]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01e      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074ac:	4b4b      	ldr	r3, [pc, #300]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b2:	0e1b      	lsrs	r3, r3, #24
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	019a      	lsls	r2, r3, #6
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	061b      	lsls	r3, r3, #24
 80074c4:	431a      	orrs	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	071b      	lsls	r3, r3, #28
 80074cc:	4943      	ldr	r1, [pc, #268]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80074d4:	4b41      	ldr	r3, [pc, #260]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	493e      	ldr	r1, [pc, #248]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074ea:	4b3d      	ldr	r3, [pc, #244]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074ec:	2201      	movs	r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074f0:	f7fc fbb4 	bl	8003c5c <HAL_GetTick>
 80074f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074f6:	e008      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80074f8:	f7fc fbb0 	bl	8003c5c <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d901      	bls.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e0a6      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800750a:	4b34      	ldr	r3, [pc, #208]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007516:	d1ef      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 808d 	beq.w	8007640 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	4b2c      	ldr	r3, [pc, #176]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	4a2b      	ldr	r2, [pc, #172]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007534:	6413      	str	r3, [r2, #64]	; 0x40
 8007536:	4b29      	ldr	r3, [pc, #164]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007542:	4b28      	ldr	r3, [pc, #160]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a27      	ldr	r2, [pc, #156]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800754c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800754e:	f7fc fb85 	bl	8003c5c <HAL_GetTick>
 8007552:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007554:	e008      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007556:	f7fc fb81 	bl	8003c5c <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d901      	bls.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e077      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007568:	4b1e      	ldr	r3, [pc, #120]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0f0      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800757c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d039      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	429a      	cmp	r2, r3
 8007590:	d032      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007592:	4b12      	ldr	r3, [pc, #72]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800759a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800759c:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800759e:	2201      	movs	r2, #1
 80075a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075a2:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80075a8:	4a0c      	ldr	r2, [pc, #48]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075ae:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d11e      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80075ba:	f7fc fb4f 	bl	8003c5c <HAL_GetTick>
 80075be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075c0:	e014      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075c2:	f7fc fb4b 	bl	8003c5c <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d90b      	bls.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e03f      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80075d8:	42470068 	.word	0x42470068
 80075dc:	40023800 	.word	0x40023800
 80075e0:	42470070 	.word	0x42470070
 80075e4:	40007000 	.word	0x40007000
 80075e8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ec:	4b1c      	ldr	r3, [pc, #112]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0e4      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007604:	d10d      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007606:	4b16      	ldr	r3, [pc, #88]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007612:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800761a:	4911      	ldr	r1, [pc, #68]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800761c:	4313      	orrs	r3, r2
 800761e:	608b      	str	r3, [r1, #8]
 8007620:	e005      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007622:	4b0f      	ldr	r3, [pc, #60]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	4a0e      	ldr	r2, [pc, #56]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007628:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800762c:	6093      	str	r3, [r2, #8]
 800762e:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800763a:	4909      	ldr	r1, [pc, #36]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800763c:	4313      	orrs	r3, r2
 800763e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0310 	and.w	r3, r3, #16
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007652:	4b04      	ldr	r3, [pc, #16]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007654:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	40023800 	.word	0x40023800
 8007664:	424711e0 	.word	0x424711e0

08007668 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e025      	b.n	80076c8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d106      	bne.n	8007696 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7f9 fd51 	bl	8001138 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2202      	movs	r2, #2
 800769a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3304      	adds	r3, #4
 80076a6:	4619      	mov	r1, r3
 80076a8:	4610      	mov	r0, r2
 80076aa:	f002 f901 	bl	80098b0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	461a      	mov	r2, r3
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	f002 f96c 	bl	8009996 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d101      	bne.n	80076ec <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80076e8:	2302      	movs	r3, #2
 80076ea:	e018      	b.n	800771e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f002 f9c9 	bl	8009a94 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d104      	bne.n	8007714 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2205      	movs	r2, #5
 800770e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007712:	e003      	b.n	800771c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d101      	bne.n	8007740 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800773c:	2302      	movs	r3, #2
 800773e:	e00e      	b.n	800775e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f002 f9dc 	bl	8009b0c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e056      	b.n	8007826 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7fa fa66 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	ea42 0103 	orr.w	r1, r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	0c1b      	lsrs	r3, r3, #16
 80077f6:	f003 0104 	and.w	r1, r3, #4
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007814:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e01a      	b.n	8007876 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007856:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fa fa4b 	bl	8001cf4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b088      	sub	sp, #32
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	603b      	str	r3, [r7, #0]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007898:	2b01      	cmp	r3, #1
 800789a:	d101      	bne.n	80078a0 <HAL_SPI_Transmit+0x22>
 800789c:	2302      	movs	r3, #2
 800789e:	e11e      	b.n	8007ade <HAL_SPI_Transmit+0x260>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078a8:	f7fc f9d8 	bl	8003c5c <HAL_GetTick>
 80078ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078ae:	88fb      	ldrh	r3, [r7, #6]
 80078b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d002      	beq.n	80078c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078be:	2302      	movs	r3, #2
 80078c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078c2:	e103      	b.n	8007acc <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <HAL_SPI_Transmit+0x52>
 80078ca:	88fb      	ldrh	r3, [r7, #6]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d102      	bne.n	80078d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078d4:	e0fa      	b.n	8007acc <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2203      	movs	r2, #3
 80078da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	88fa      	ldrh	r2, [r7, #6]
 80078ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	88fa      	ldrh	r2, [r7, #6]
 80078f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800791c:	d107      	bne.n	800792e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800792c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007938:	2b40      	cmp	r3, #64	; 0x40
 800793a:	d007      	beq.n	800794c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800794a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007954:	d14b      	bne.n	80079ee <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <HAL_SPI_Transmit+0xe6>
 800795e:	8afb      	ldrh	r3, [r7, #22]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d13e      	bne.n	80079e2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	881a      	ldrh	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	1c9a      	adds	r2, r3, #2
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800797e:	b29b      	uxth	r3, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007988:	e02b      	b.n	80079e2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b02      	cmp	r3, #2
 8007996:	d112      	bne.n	80079be <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799c:	881a      	ldrh	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a8:	1c9a      	adds	r2, r3, #2
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80079bc:	e011      	b.n	80079e2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079be:	f7fc f94d 	bl	8003c5c <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d803      	bhi.n	80079d6 <HAL_SPI_Transmit+0x158>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d102      	bne.n	80079dc <HAL_SPI_Transmit+0x15e>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079e0:	e074      	b.n	8007acc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1ce      	bne.n	800798a <HAL_SPI_Transmit+0x10c>
 80079ec:	e04c      	b.n	8007a88 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <HAL_SPI_Transmit+0x17e>
 80079f6:	8afb      	ldrh	r3, [r7, #22]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d140      	bne.n	8007a7e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	330c      	adds	r3, #12
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a22:	e02c      	b.n	8007a7e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d113      	bne.n	8007a5a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	330c      	adds	r3, #12
 8007a3c:	7812      	ldrb	r2, [r2, #0]
 8007a3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a58:	e011      	b.n	8007a7e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a5a:	f7fc f8ff 	bl	8003c5c <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d803      	bhi.n	8007a72 <HAL_SPI_Transmit+0x1f4>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d102      	bne.n	8007a78 <HAL_SPI_Transmit+0x1fa>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a7c:	e026      	b.n	8007acc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1cd      	bne.n	8007a24 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 fbb3 	bl	80081f8 <SPI_EndRxTxTransaction>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10a      	bne.n	8007abc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	613b      	str	r3, [r7, #16]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	77fb      	strb	r3, [r7, #31]
 8007ac8:	e000      	b.n	8007acc <HAL_SPI_Transmit+0x24e>
  }

error:
 8007aca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007adc:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3720      	adds	r7, #32
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b088      	sub	sp, #32
 8007aea:	af02      	add	r7, sp, #8
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	603b      	str	r3, [r7, #0]
 8007af2:	4613      	mov	r3, r2
 8007af4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b02:	d112      	bne.n	8007b2a <HAL_SPI_Receive+0x44>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10e      	bne.n	8007b2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2204      	movs	r2, #4
 8007b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b14:	88fa      	ldrh	r2, [r7, #6]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f8e9 	bl	8007cf8 <HAL_SPI_TransmitReceive>
 8007b26:	4603      	mov	r3, r0
 8007b28:	e0e2      	b.n	8007cf0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_SPI_Receive+0x52>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e0db      	b.n	8007cf0 <HAL_SPI_Receive+0x20a>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b40:	f7fc f88c 	bl	8003c5c <HAL_GetTick>
 8007b44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d002      	beq.n	8007b58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b52:	2302      	movs	r3, #2
 8007b54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b56:	e0c2      	b.n	8007cde <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <HAL_SPI_Receive+0x7e>
 8007b5e:	88fb      	ldrh	r3, [r7, #6]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b68:	e0b9      	b.n	8007cde <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2204      	movs	r2, #4
 8007b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	88fa      	ldrh	r2, [r7, #6]
 8007b82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	88fa      	ldrh	r2, [r7, #6]
 8007b88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb0:	d107      	bne.n	8007bc2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bc0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	d007      	beq.n	8007be0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bde:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d162      	bne.n	8007cae <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007be8:	e02e      	b.n	8007c48 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d115      	bne.n	8007c24 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f103 020c 	add.w	r2, r3, #12
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	7812      	ldrb	r2, [r2, #0]
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c22:	e011      	b.n	8007c48 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c24:	f7fc f81a 	bl	8003c5c <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d803      	bhi.n	8007c3c <HAL_SPI_Receive+0x156>
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3a:	d102      	bne.n	8007c42 <HAL_SPI_Receive+0x15c>
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d102      	bne.n	8007c48 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c46:	e04a      	b.n	8007cde <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1cb      	bne.n	8007bea <HAL_SPI_Receive+0x104>
 8007c52:	e031      	b.n	8007cb8 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d113      	bne.n	8007c8a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	b292      	uxth	r2, r2
 8007c6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	1c9a      	adds	r2, r3, #2
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c88:	e011      	b.n	8007cae <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c8a:	f7fb ffe7 	bl	8003c5c <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d803      	bhi.n	8007ca2 <HAL_SPI_Receive+0x1bc>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca0:	d102      	bne.n	8007ca8 <HAL_SPI_Receive+0x1c2>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007cac:	e017      	b.n	8007cde <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1cd      	bne.n	8007c54 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fa35 	bl	800812c <SPI_EndRxTransaction>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	75fb      	strb	r3, [r7, #23]
 8007cda:	e000      	b.n	8007cde <HAL_SPI_Receive+0x1f8>
  }

error :
 8007cdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08c      	sub	sp, #48	; 0x30
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d06:	2301      	movs	r3, #1
 8007d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <HAL_SPI_TransmitReceive+0x26>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e18a      	b.n	8008034 <HAL_SPI_TransmitReceive+0x33c>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d26:	f7fb ff99 	bl	8003c5c <HAL_GetTick>
 8007d2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d3c:	887b      	ldrh	r3, [r7, #2]
 8007d3e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d00f      	beq.n	8007d68 <HAL_SPI_TransmitReceive+0x70>
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d4e:	d107      	bne.n	8007d60 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <HAL_SPI_TransmitReceive+0x68>
 8007d58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d003      	beq.n	8007d68 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d60:	2302      	movs	r3, #2
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d66:	e15b      	b.n	8008020 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d005      	beq.n	8007d7a <HAL_SPI_TransmitReceive+0x82>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <HAL_SPI_TransmitReceive+0x82>
 8007d74:	887b      	ldrh	r3, [r7, #2]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d103      	bne.n	8007d82 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d80:	e14e      	b.n	8008020 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d003      	beq.n	8007d96 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2205      	movs	r2, #5
 8007d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	887a      	ldrh	r2, [r7, #2]
 8007da6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	887a      	ldrh	r2, [r7, #2]
 8007dac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	887a      	ldrh	r2, [r7, #2]
 8007db8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	887a      	ldrh	r2, [r7, #2]
 8007dbe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd6:	2b40      	cmp	r3, #64	; 0x40
 8007dd8:	d007      	beq.n	8007dea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df2:	d178      	bne.n	8007ee6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_SPI_TransmitReceive+0x10a>
 8007dfc:	8b7b      	ldrh	r3, [r7, #26]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d166      	bne.n	8007ed0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	881a      	ldrh	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e12:	1c9a      	adds	r2, r3, #2
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e26:	e053      	b.n	8007ed0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d11b      	bne.n	8007e6e <HAL_SPI_TransmitReceive+0x176>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d016      	beq.n	8007e6e <HAL_SPI_TransmitReceive+0x176>
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d113      	bne.n	8007e6e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	881a      	ldrh	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e56:	1c9a      	adds	r2, r3, #2
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d119      	bne.n	8007eb0 <HAL_SPI_TransmitReceive+0x1b8>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d014      	beq.n	8007eb0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	b292      	uxth	r2, r2
 8007e92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	1c9a      	adds	r2, r3, #2
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eac:	2301      	movs	r3, #1
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007eb0:	f7fb fed4 	bl	8003c5c <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d807      	bhi.n	8007ed0 <HAL_SPI_TransmitReceive+0x1d8>
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec6:	d003      	beq.n	8007ed0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ece:	e0a7      	b.n	8008020 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1a6      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x130>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1a1      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x130>
 8007ee4:	e07c      	b.n	8007fe0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <HAL_SPI_TransmitReceive+0x1fc>
 8007eee:	8b7b      	ldrh	r3, [r7, #26]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d16b      	bne.n	8007fcc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	7812      	ldrb	r2, [r2, #0]
 8007f00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f1a:	e057      	b.n	8007fcc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d11c      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x26c>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d017      	beq.n	8007f64 <HAL_SPI_TransmitReceive+0x26c>
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d114      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	330c      	adds	r3, #12
 8007f44:	7812      	ldrb	r2, [r2, #0]
 8007f46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d119      	bne.n	8007fa6 <HAL_SPI_TransmitReceive+0x2ae>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d014      	beq.n	8007fa6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fa6:	f7fb fe59 	bl	8003c5c <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d803      	bhi.n	8007fbe <HAL_SPI_TransmitReceive+0x2c6>
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbc:	d102      	bne.n	8007fc4 <HAL_SPI_TransmitReceive+0x2cc>
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d103      	bne.n	8007fcc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fca:	e029      	b.n	8008020 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1a2      	bne.n	8007f1c <HAL_SPI_TransmitReceive+0x224>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d19d      	bne.n	8007f1c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 f907 	bl	80081f8 <SPI_EndRxTxTransaction>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d006      	beq.n	8007ffe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ffc:	e010      	b.n	8008020 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10b      	bne.n	800801e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008006:	2300      	movs	r3, #0
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	617b      	str	r3, [r7, #20]
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	e000      	b.n	8008020 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800801e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008034:	4618      	mov	r0, r3
 8008036:	3730      	adds	r7, #48	; 0x30
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800804a:	b2db      	uxtb	r3, r3
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	4613      	mov	r3, r2
 8008066:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008068:	e04c      	b.n	8008104 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008070:	d048      	beq.n	8008104 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008072:	f7fb fdf3 	bl	8003c5c <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d902      	bls.n	8008088 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d13d      	bne.n	8008104 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008096:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080a0:	d111      	bne.n	80080c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080aa:	d004      	beq.n	80080b6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b4:	d107      	bne.n	80080c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ce:	d10f      	bne.n	80080f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e00f      	b.n	8008124 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	4013      	ands	r3, r2
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	429a      	cmp	r2, r3
 8008112:	bf0c      	ite	eq
 8008114:	2301      	moveq	r3, #1
 8008116:	2300      	movne	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	461a      	mov	r2, r3
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	429a      	cmp	r2, r3
 8008120:	d1a3      	bne.n	800806a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008140:	d111      	bne.n	8008166 <SPI_EndRxTransaction+0x3a>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800814a:	d004      	beq.n	8008156 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008154:	d107      	bne.n	8008166 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008164:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800816e:	d12a      	bne.n	80081c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008178:	d012      	beq.n	80081a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2200      	movs	r2, #0
 8008182:	2180      	movs	r1, #128	; 0x80
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff ff67 	bl	8008058 <SPI_WaitFlagStateUntilTimeout>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d02d      	beq.n	80081ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008194:	f043 0220 	orr.w	r2, r3, #32
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e026      	b.n	80081ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2200      	movs	r2, #0
 80081a8:	2101      	movs	r1, #1
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7ff ff54 	bl	8008058 <SPI_WaitFlagStateUntilTimeout>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d01a      	beq.n	80081ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ba:	f043 0220 	orr.w	r2, r3, #32
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e013      	b.n	80081ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2200      	movs	r2, #0
 80081ce:	2101      	movs	r1, #1
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7ff ff41 	bl	8008058 <SPI_WaitFlagStateUntilTimeout>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d007      	beq.n	80081ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e0:	f043 0220 	orr.w	r2, r3, #32
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e000      	b.n	80081ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008204:	4b1b      	ldr	r3, [pc, #108]	; (8008274 <SPI_EndRxTxTransaction+0x7c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a1b      	ldr	r2, [pc, #108]	; (8008278 <SPI_EndRxTxTransaction+0x80>)
 800820a:	fba2 2303 	umull	r2, r3, r2, r3
 800820e:	0d5b      	lsrs	r3, r3, #21
 8008210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008214:	fb02 f303 	mul.w	r3, r2, r3
 8008218:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008222:	d112      	bne.n	800824a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2200      	movs	r2, #0
 800822c:	2180      	movs	r1, #128	; 0x80
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff ff12 	bl	8008058 <SPI_WaitFlagStateUntilTimeout>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d016      	beq.n	8008268 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823e:	f043 0220 	orr.w	r2, r3, #32
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e00f      	b.n	800826a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00a      	beq.n	8008266 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	3b01      	subs	r3, #1
 8008254:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008260:	2b80      	cmp	r3, #128	; 0x80
 8008262:	d0f2      	beq.n	800824a <SPI_EndRxTxTransaction+0x52>
 8008264:	e000      	b.n	8008268 <SPI_EndRxTxTransaction+0x70>
        break;
 8008266:	bf00      	nop
  }

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000000 	.word	0x20000000
 8008278:	165e9f81 	.word	0x165e9f81

0800827c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e01d      	b.n	80082ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d106      	bne.n	80082a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7fa fa00 	bl	80026a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f000 fa22 	bl	8008704 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f042 0201 	orr.w	r2, r2, #1
 80082e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f003 0307 	and.w	r3, r3, #7
 80082f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b06      	cmp	r3, #6
 80082fa:	d007      	beq.n	800830c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b02      	cmp	r3, #2
 800832e:	d122      	bne.n	8008376 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b02      	cmp	r3, #2
 800833c:	d11b      	bne.n	8008376 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f06f 0202 	mvn.w	r2, #2
 8008346:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f9b2 	bl	80086c6 <HAL_TIM_IC_CaptureCallback>
 8008362:	e005      	b.n	8008370 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f9a4 	bl	80086b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f9b5 	bl	80086da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b04      	cmp	r3, #4
 8008382:	d122      	bne.n	80083ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	f003 0304 	and.w	r3, r3, #4
 800838e:	2b04      	cmp	r3, #4
 8008390:	d11b      	bne.n	80083ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f06f 0204 	mvn.w	r2, #4
 800839a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d003      	beq.n	80083b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f988 	bl	80086c6 <HAL_TIM_IC_CaptureCallback>
 80083b6:	e005      	b.n	80083c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f97a 	bl	80086b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f98b 	bl	80086da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d122      	bne.n	800841e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d11b      	bne.n	800841e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f06f 0208 	mvn.w	r2, #8
 80083ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2204      	movs	r2, #4
 80083f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	f003 0303 	and.w	r3, r3, #3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f95e 	bl	80086c6 <HAL_TIM_IC_CaptureCallback>
 800840a:	e005      	b.n	8008418 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f950 	bl	80086b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f961 	bl	80086da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b10      	cmp	r3, #16
 800842a:	d122      	bne.n	8008472 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f003 0310 	and.w	r3, r3, #16
 8008436:	2b10      	cmp	r3, #16
 8008438:	d11b      	bne.n	8008472 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f06f 0210 	mvn.w	r2, #16
 8008442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2208      	movs	r2, #8
 8008448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008454:	2b00      	cmp	r3, #0
 8008456:	d003      	beq.n	8008460 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f934 	bl	80086c6 <HAL_TIM_IC_CaptureCallback>
 800845e:	e005      	b.n	800846c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f926 	bl	80086b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f937 	bl	80086da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b01      	cmp	r3, #1
 800847e:	d10e      	bne.n	800849e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b01      	cmp	r3, #1
 800848c:	d107      	bne.n	800849e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f06f 0201 	mvn.w	r2, #1
 8008496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7f9 fb93 	bl	8001bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a8:	2b80      	cmp	r3, #128	; 0x80
 80084aa:	d10e      	bne.n	80084ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b6:	2b80      	cmp	r3, #128	; 0x80
 80084b8:	d107      	bne.n	80084ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fadd 	bl	8008a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d4:	2b40      	cmp	r3, #64	; 0x40
 80084d6:	d10e      	bne.n	80084f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e2:	2b40      	cmp	r3, #64	; 0x40
 80084e4:	d107      	bne.n	80084f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f8fc 	bl	80086ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b20      	cmp	r3, #32
 8008502:	d10e      	bne.n	8008522 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b20      	cmp	r3, #32
 8008510:	d107      	bne.n	8008522 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f06f 0220 	mvn.w	r2, #32
 800851a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 faa7 	bl	8008a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800853a:	2b01      	cmp	r3, #1
 800853c:	d101      	bne.n	8008542 <HAL_TIM_ConfigClockSource+0x18>
 800853e:	2302      	movs	r3, #2
 8008540:	e0b3      	b.n	80086aa <HAL_TIM_ConfigClockSource+0x180>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2202      	movs	r2, #2
 800854e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008560:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008568:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800857a:	d03e      	beq.n	80085fa <HAL_TIM_ConfigClockSource+0xd0>
 800857c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008580:	f200 8087 	bhi.w	8008692 <HAL_TIM_ConfigClockSource+0x168>
 8008584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008588:	f000 8085 	beq.w	8008696 <HAL_TIM_ConfigClockSource+0x16c>
 800858c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008590:	d87f      	bhi.n	8008692 <HAL_TIM_ConfigClockSource+0x168>
 8008592:	2b70      	cmp	r3, #112	; 0x70
 8008594:	d01a      	beq.n	80085cc <HAL_TIM_ConfigClockSource+0xa2>
 8008596:	2b70      	cmp	r3, #112	; 0x70
 8008598:	d87b      	bhi.n	8008692 <HAL_TIM_ConfigClockSource+0x168>
 800859a:	2b60      	cmp	r3, #96	; 0x60
 800859c:	d050      	beq.n	8008640 <HAL_TIM_ConfigClockSource+0x116>
 800859e:	2b60      	cmp	r3, #96	; 0x60
 80085a0:	d877      	bhi.n	8008692 <HAL_TIM_ConfigClockSource+0x168>
 80085a2:	2b50      	cmp	r3, #80	; 0x50
 80085a4:	d03c      	beq.n	8008620 <HAL_TIM_ConfigClockSource+0xf6>
 80085a6:	2b50      	cmp	r3, #80	; 0x50
 80085a8:	d873      	bhi.n	8008692 <HAL_TIM_ConfigClockSource+0x168>
 80085aa:	2b40      	cmp	r3, #64	; 0x40
 80085ac:	d058      	beq.n	8008660 <HAL_TIM_ConfigClockSource+0x136>
 80085ae:	2b40      	cmp	r3, #64	; 0x40
 80085b0:	d86f      	bhi.n	8008692 <HAL_TIM_ConfigClockSource+0x168>
 80085b2:	2b30      	cmp	r3, #48	; 0x30
 80085b4:	d064      	beq.n	8008680 <HAL_TIM_ConfigClockSource+0x156>
 80085b6:	2b30      	cmp	r3, #48	; 0x30
 80085b8:	d86b      	bhi.n	8008692 <HAL_TIM_ConfigClockSource+0x168>
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d060      	beq.n	8008680 <HAL_TIM_ConfigClockSource+0x156>
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d867      	bhi.n	8008692 <HAL_TIM_ConfigClockSource+0x168>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d05c      	beq.n	8008680 <HAL_TIM_ConfigClockSource+0x156>
 80085c6:	2b10      	cmp	r3, #16
 80085c8:	d05a      	beq.n	8008680 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80085ca:	e062      	b.n	8008692 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	6899      	ldr	r1, [r3, #8]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f000 f9ac 	bl	8008938 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	609a      	str	r2, [r3, #8]
      break;
 80085f8:	e04e      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6899      	ldr	r1, [r3, #8]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f000 f995 	bl	8008938 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800861c:	609a      	str	r2, [r3, #8]
      break;
 800861e:	e03b      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6818      	ldr	r0, [r3, #0]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	6859      	ldr	r1, [r3, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	461a      	mov	r2, r3
 800862e:	f000 f909 	bl	8008844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2150      	movs	r1, #80	; 0x50
 8008638:	4618      	mov	r0, r3
 800863a:	f000 f962 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 800863e:	e02b      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	6859      	ldr	r1, [r3, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	461a      	mov	r2, r3
 800864e:	f000 f928 	bl	80088a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2160      	movs	r1, #96	; 0x60
 8008658:	4618      	mov	r0, r3
 800865a:	f000 f952 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 800865e:	e01b      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	6859      	ldr	r1, [r3, #4]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	461a      	mov	r2, r3
 800866e:	f000 f8e9 	bl	8008844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2140      	movs	r1, #64	; 0x40
 8008678:	4618      	mov	r0, r3
 800867a:	f000 f942 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 800867e:	e00b      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f000 f939 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 8008690:	e002      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008692:	bf00      	nop
 8008694:	e000      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
	...

08008704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a40      	ldr	r2, [pc, #256]	; (8008818 <TIM_Base_SetConfig+0x114>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d013      	beq.n	8008744 <TIM_Base_SetConfig+0x40>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008722:	d00f      	beq.n	8008744 <TIM_Base_SetConfig+0x40>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a3d      	ldr	r2, [pc, #244]	; (800881c <TIM_Base_SetConfig+0x118>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00b      	beq.n	8008744 <TIM_Base_SetConfig+0x40>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a3c      	ldr	r2, [pc, #240]	; (8008820 <TIM_Base_SetConfig+0x11c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d007      	beq.n	8008744 <TIM_Base_SetConfig+0x40>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a3b      	ldr	r2, [pc, #236]	; (8008824 <TIM_Base_SetConfig+0x120>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d003      	beq.n	8008744 <TIM_Base_SetConfig+0x40>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a3a      	ldr	r2, [pc, #232]	; (8008828 <TIM_Base_SetConfig+0x124>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d108      	bne.n	8008756 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a2f      	ldr	r2, [pc, #188]	; (8008818 <TIM_Base_SetConfig+0x114>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d02b      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008764:	d027      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a2c      	ldr	r2, [pc, #176]	; (800881c <TIM_Base_SetConfig+0x118>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d023      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a2b      	ldr	r2, [pc, #172]	; (8008820 <TIM_Base_SetConfig+0x11c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d01f      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a2a      	ldr	r2, [pc, #168]	; (8008824 <TIM_Base_SetConfig+0x120>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d01b      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a29      	ldr	r2, [pc, #164]	; (8008828 <TIM_Base_SetConfig+0x124>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d017      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a28      	ldr	r2, [pc, #160]	; (800882c <TIM_Base_SetConfig+0x128>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a27      	ldr	r2, [pc, #156]	; (8008830 <TIM_Base_SetConfig+0x12c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00f      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a26      	ldr	r2, [pc, #152]	; (8008834 <TIM_Base_SetConfig+0x130>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00b      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a25      	ldr	r2, [pc, #148]	; (8008838 <TIM_Base_SetConfig+0x134>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d007      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a24      	ldr	r2, [pc, #144]	; (800883c <TIM_Base_SetConfig+0x138>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d003      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a23      	ldr	r2, [pc, #140]	; (8008840 <TIM_Base_SetConfig+0x13c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d108      	bne.n	80087c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a0a      	ldr	r2, [pc, #40]	; (8008818 <TIM_Base_SetConfig+0x114>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_Base_SetConfig+0xf8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <TIM_Base_SetConfig+0x124>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d103      	bne.n	8008804 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	615a      	str	r2, [r3, #20]
}
 800880a:	bf00      	nop
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00
 8008828:	40010400 	.word	0x40010400
 800882c:	40014000 	.word	0x40014000
 8008830:	40014400 	.word	0x40014400
 8008834:	40014800 	.word	0x40014800
 8008838:	40001800 	.word	0x40001800
 800883c:	40001c00 	.word	0x40001c00
 8008840:	40002000 	.word	0x40002000

08008844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	f023 0201 	bic.w	r2, r3, #1
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800886e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f023 030a 	bic.w	r3, r3, #10
 8008880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	621a      	str	r2, [r3, #32]
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b087      	sub	sp, #28
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	f023 0210 	bic.w	r2, r3, #16
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	031b      	lsls	r3, r3, #12
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	621a      	str	r2, [r3, #32]
}
 80088f6:	bf00      	nop
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	f043 0307 	orr.w	r3, r3, #7
 8008924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	609a      	str	r2, [r3, #8]
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	021a      	lsls	r2, r3, #8
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	431a      	orrs	r2, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4313      	orrs	r3, r2
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	4313      	orrs	r3, r2
 8008964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	609a      	str	r2, [r3, #8]
}
 800896c:	bf00      	nop
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008988:	2b01      	cmp	r3, #1
 800898a:	d101      	bne.n	8008990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800898c:	2302      	movs	r3, #2
 800898e:	e05a      	b.n	8008a46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a21      	ldr	r2, [pc, #132]	; (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d022      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089dc:	d01d      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a1d      	ldr	r2, [pc, #116]	; (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d018      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a1b      	ldr	r2, [pc, #108]	; (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d013      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a1a      	ldr	r2, [pc, #104]	; (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00e      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a18      	ldr	r2, [pc, #96]	; (8008a64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d009      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a17      	ldr	r2, [pc, #92]	; (8008a68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d004      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a15      	ldr	r2, [pc, #84]	; (8008a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d10c      	bne.n	8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	40010000 	.word	0x40010000
 8008a58:	40000400 	.word	0x40000400
 8008a5c:	40000800 	.word	0x40000800
 8008a60:	40000c00 	.word	0x40000c00
 8008a64:	40010400 	.word	0x40010400
 8008a68:	40014000 	.word	0x40014000
 8008a6c:	40001800 	.word	0x40001800

08008a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e03f      	b.n	8008b2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d106      	bne.n	8008ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7f9 fe78 	bl	80027b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2224      	movs	r2, #36	; 0x24
 8008ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fb4b 	bl	8009178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695a      	ldr	r2, [r3, #20]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b088      	sub	sp, #32
 8008b36:	af02      	add	r7, sp, #8
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	603b      	str	r3, [r7, #0]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	f040 8083 	bne.w	8008c5a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_UART_Transmit+0x2e>
 8008b5a:	88fb      	ldrh	r3, [r7, #6]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e07b      	b.n	8008c5c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d101      	bne.n	8008b72 <HAL_UART_Transmit+0x40>
 8008b6e:	2302      	movs	r3, #2
 8008b70:	e074      	b.n	8008c5c <HAL_UART_Transmit+0x12a>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2221      	movs	r2, #33	; 0x21
 8008b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008b88:	f7fb f868 	bl	8003c5c <HAL_GetTick>
 8008b8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	88fa      	ldrh	r2, [r7, #6]
 8008b92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	88fa      	ldrh	r2, [r7, #6]
 8008b98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008ba2:	e042      	b.n	8008c2a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bba:	d122      	bne.n	8008c02 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2180      	movs	r1, #128	; 0x80
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 f96a 	bl	8008ea0 <UART_WaitOnFlagUntilTimeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e042      	b.n	8008c5c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008be8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d103      	bne.n	8008bfa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	3302      	adds	r3, #2
 8008bf6:	60bb      	str	r3, [r7, #8]
 8008bf8:	e017      	b.n	8008c2a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	60bb      	str	r3, [r7, #8]
 8008c00:	e013      	b.n	8008c2a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2180      	movs	r1, #128	; 0x80
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 f947 	bl	8008ea0 <UART_WaitOnFlagUntilTimeout>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e01f      	b.n	8008c5c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	60ba      	str	r2, [r7, #8]
 8008c22:	781a      	ldrb	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1b7      	bne.n	8008ba4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2140      	movs	r1, #64	; 0x40
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 f92e 	bl	8008ea0 <UART_WaitOnFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e006      	b.n	8008c5c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	e000      	b.n	8008c5c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008c5a:	2302      	movs	r3, #2
  }
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008c84:	2300      	movs	r3, #0
 8008c86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	f003 030f 	and.w	r3, r3, #15
 8008c92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10d      	bne.n	8008cb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	f003 0320 	and.w	r3, r3, #32
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d008      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x52>
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	f003 0320 	and.w	r3, r3, #32
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f9e0 	bl	8009074 <UART_Receive_IT>
      return;
 8008cb4:	e0d0      	b.n	8008e58 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 80b0 	beq.w	8008e1e <HAL_UART_IRQHandler+0x1ba>
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d105      	bne.n	8008cd4 <HAL_UART_IRQHandler+0x70>
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 80a5 	beq.w	8008e1e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x90>
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cec:	f043 0201 	orr.w	r2, r3, #1
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <HAL_UART_IRQHandler+0xb0>
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0c:	f043 0202 	orr.w	r2, r3, #2
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <HAL_UART_IRQHandler+0xd0>
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2c:	f043 0204 	orr.w	r2, r3, #4
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00f      	beq.n	8008d5e <HAL_UART_IRQHandler+0xfa>
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	f003 0320 	and.w	r3, r3, #32
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d104      	bne.n	8008d52 <HAL_UART_IRQHandler+0xee>
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d56:	f043 0208 	orr.w	r2, r3, #8
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d077      	beq.n	8008e56 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	f003 0320 	and.w	r3, r3, #32
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d007      	beq.n	8008d80 <HAL_UART_IRQHandler+0x11c>
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f97a 	bl	8009074 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8a:	2b40      	cmp	r3, #64	; 0x40
 8008d8c:	bf0c      	ite	eq
 8008d8e:	2301      	moveq	r3, #1
 8008d90:	2300      	movne	r3, #0
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9a:	f003 0308 	and.w	r3, r3, #8
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d102      	bne.n	8008da8 <HAL_UART_IRQHandler+0x144>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d031      	beq.n	8008e0c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f8c3 	bl	8008f34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db8:	2b40      	cmp	r3, #64	; 0x40
 8008dba:	d123      	bne.n	8008e04 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	695a      	ldr	r2, [r3, #20]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d013      	beq.n	8008dfc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	4a21      	ldr	r2, [pc, #132]	; (8008e60 <HAL_UART_IRQHandler+0x1fc>)
 8008dda:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fb f959 	bl	8004098 <HAL_DMA_Abort_IT>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d016      	beq.n	8008e1a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008df6:	4610      	mov	r0, r2
 8008df8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dfa:	e00e      	b.n	8008e1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f845 	bl	8008e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e02:	e00a      	b.n	8008e1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f841 	bl	8008e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0a:	e006      	b.n	8008e1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f83d 	bl	8008e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008e18:	e01d      	b.n	8008e56 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1a:	bf00      	nop
    return;
 8008e1c:	e01b      	b.n	8008e56 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d008      	beq.n	8008e3a <HAL_UART_IRQHandler+0x1d6>
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f8b0 	bl	8008f98 <UART_Transmit_IT>
    return;
 8008e38:	e00e      	b.n	8008e58 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d009      	beq.n	8008e58 <HAL_UART_IRQHandler+0x1f4>
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d004      	beq.n	8008e58 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f8f8 	bl	8009044 <UART_EndTransmit_IT>
    return;
 8008e54:	e000      	b.n	8008e58 <HAL_UART_IRQHandler+0x1f4>
    return;
 8008e56:	bf00      	nop
  }
}
 8008e58:	3720      	adds	r7, #32
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	08008f71 	.word	0x08008f71

08008e64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	603b      	str	r3, [r7, #0]
 8008eac:	4613      	mov	r3, r2
 8008eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eb0:	e02c      	b.n	8008f0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb8:	d028      	beq.n	8008f0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d007      	beq.n	8008ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ec0:	f7fa fecc 	bl	8003c5c <HAL_GetTick>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d21d      	bcs.n	8008f0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ede:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	695a      	ldr	r2, [r3, #20]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0201 	bic.w	r2, r2, #1
 8008eee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2220      	movs	r2, #32
 8008efc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e00f      	b.n	8008f2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	4013      	ands	r3, r2
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	bf0c      	ite	eq
 8008f1c:	2301      	moveq	r3, #1
 8008f1e:	2300      	movne	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	461a      	mov	r2, r3
 8008f24:	79fb      	ldrb	r3, [r7, #7]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d0c3      	beq.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	695a      	ldr	r2, [r3, #20]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0201 	bic.w	r2, r2, #1
 8008f5a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7ff ff7e 	bl	8008e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b21      	cmp	r3, #33	; 0x21
 8008faa:	d144      	bne.n	8009036 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb4:	d11a      	bne.n	8008fec <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fca:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d105      	bne.n	8008fe0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a1b      	ldr	r3, [r3, #32]
 8008fd8:	1c9a      	adds	r2, r3, #2
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	621a      	str	r2, [r3, #32]
 8008fde:	e00e      	b.n	8008ffe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	621a      	str	r2, [r3, #32]
 8008fea:	e008      	b.n	8008ffe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	1c59      	adds	r1, r3, #1
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	6211      	str	r1, [r2, #32]
 8008ff6:	781a      	ldrb	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009002:	b29b      	uxth	r3, r3
 8009004:	3b01      	subs	r3, #1
 8009006:	b29b      	uxth	r3, r3
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	4619      	mov	r1, r3
 800900c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10f      	bne.n	8009032 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009020:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68da      	ldr	r2, [r3, #12]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009030:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	e000      	b.n	8009038 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009036:	2302      	movs	r3, #2
  }
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800905a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7ff fefd 	bl	8008e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b22      	cmp	r3, #34	; 0x22
 8009086:	d171      	bne.n	800916c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009090:	d123      	bne.n	80090da <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10e      	bne.n	80090be <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b6:	1c9a      	adds	r2, r3, #2
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	629a      	str	r2, [r3, #40]	; 0x28
 80090bc:	e029      	b.n	8009112 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d2:	1c5a      	adds	r2, r3, #1
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	629a      	str	r2, [r3, #40]	; 0x28
 80090d8:	e01b      	b.n	8009112 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6858      	ldr	r0, [r3, #4]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ec:	1c59      	adds	r1, r3, #1
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	6291      	str	r1, [r2, #40]	; 0x28
 80090f2:	b2c2      	uxtb	r2, r0
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e00c      	b.n	8009112 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009104:	1c58      	adds	r0, r3, #1
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	6288      	str	r0, [r1, #40]	; 0x28
 800910a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009116:	b29b      	uxth	r3, r3
 8009118:	3b01      	subs	r3, #1
 800911a:	b29b      	uxth	r3, r3
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	4619      	mov	r1, r3
 8009120:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009122:	2b00      	cmp	r3, #0
 8009124:	d120      	bne.n	8009168 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68da      	ldr	r2, [r3, #12]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0220 	bic.w	r2, r2, #32
 8009134:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68da      	ldr	r2, [r3, #12]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009144:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	695a      	ldr	r2, [r3, #20]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 0201 	bic.w	r2, r2, #1
 8009154:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff fe8a 	bl	8008e78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	e002      	b.n	800916e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	e000      	b.n	800916e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800916c:	2302      	movs	r3, #2
  }
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	b0bd      	sub	sp, #244	; 0xf4
 800917e:	af00      	add	r7, sp, #0
 8009180:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009194:	68d9      	ldr	r1, [r3, #12]
 8009196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	ea40 0301 	orr.w	r3, r0, r1
 80091a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	4313      	orrs	r3, r2
 80091c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80091c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091d0:	f021 010c 	bic.w	r1, r1, #12
 80091d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80091de:	430b      	orrs	r3, r1
 80091e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f2:	6999      	ldr	r1, [r3, #24]
 80091f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	ea40 0301 	orr.w	r3, r0, r1
 80091fe:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800920a:	f040 81a5 	bne.w	8009558 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800920e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	4bcd      	ldr	r3, [pc, #820]	; (800954c <UART_SetConfig+0x3d4>)
 8009216:	429a      	cmp	r2, r3
 8009218:	d006      	beq.n	8009228 <UART_SetConfig+0xb0>
 800921a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	4bcb      	ldr	r3, [pc, #812]	; (8009550 <UART_SetConfig+0x3d8>)
 8009222:	429a      	cmp	r2, r3
 8009224:	f040 80cb 	bne.w	80093be <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009228:	f7fe f81a 	bl	8007260 <HAL_RCC_GetPCLK2Freq>
 800922c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009230:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009234:	461c      	mov	r4, r3
 8009236:	f04f 0500 	mov.w	r5, #0
 800923a:	4622      	mov	r2, r4
 800923c:	462b      	mov	r3, r5
 800923e:	1891      	adds	r1, r2, r2
 8009240:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009244:	415b      	adcs	r3, r3
 8009246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800924a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800924e:	1912      	adds	r2, r2, r4
 8009250:	eb45 0303 	adc.w	r3, r5, r3
 8009254:	f04f 0000 	mov.w	r0, #0
 8009258:	f04f 0100 	mov.w	r1, #0
 800925c:	00d9      	lsls	r1, r3, #3
 800925e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009262:	00d0      	lsls	r0, r2, #3
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	1911      	adds	r1, r2, r4
 800926a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800926e:	416b      	adcs	r3, r5
 8009270:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	461a      	mov	r2, r3
 800927c:	f04f 0300 	mov.w	r3, #0
 8009280:	1891      	adds	r1, r2, r2
 8009282:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009286:	415b      	adcs	r3, r3
 8009288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800928c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009290:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009294:	f7f7 fc98 	bl	8000bc8 <__aeabi_uldivmod>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4bad      	ldr	r3, [pc, #692]	; (8009554 <UART_SetConfig+0x3dc>)
 800929e:	fba3 2302 	umull	r2, r3, r3, r2
 80092a2:	095b      	lsrs	r3, r3, #5
 80092a4:	011e      	lsls	r6, r3, #4
 80092a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092aa:	461c      	mov	r4, r3
 80092ac:	f04f 0500 	mov.w	r5, #0
 80092b0:	4622      	mov	r2, r4
 80092b2:	462b      	mov	r3, r5
 80092b4:	1891      	adds	r1, r2, r2
 80092b6:	67b9      	str	r1, [r7, #120]	; 0x78
 80092b8:	415b      	adcs	r3, r3
 80092ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80092c0:	1912      	adds	r2, r2, r4
 80092c2:	eb45 0303 	adc.w	r3, r5, r3
 80092c6:	f04f 0000 	mov.w	r0, #0
 80092ca:	f04f 0100 	mov.w	r1, #0
 80092ce:	00d9      	lsls	r1, r3, #3
 80092d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092d4:	00d0      	lsls	r0, r2, #3
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	1911      	adds	r1, r2, r4
 80092dc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80092e0:	416b      	adcs	r3, r5
 80092e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80092e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	461a      	mov	r2, r3
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	1891      	adds	r1, r2, r2
 80092f4:	6739      	str	r1, [r7, #112]	; 0x70
 80092f6:	415b      	adcs	r3, r3
 80092f8:	677b      	str	r3, [r7, #116]	; 0x74
 80092fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80092fe:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009302:	f7f7 fc61 	bl	8000bc8 <__aeabi_uldivmod>
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4b92      	ldr	r3, [pc, #584]	; (8009554 <UART_SetConfig+0x3dc>)
 800930c:	fba3 1302 	umull	r1, r3, r3, r2
 8009310:	095b      	lsrs	r3, r3, #5
 8009312:	2164      	movs	r1, #100	; 0x64
 8009314:	fb01 f303 	mul.w	r3, r1, r3
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	3332      	adds	r3, #50	; 0x32
 800931e:	4a8d      	ldr	r2, [pc, #564]	; (8009554 <UART_SetConfig+0x3dc>)
 8009320:	fba2 2303 	umull	r2, r3, r2, r3
 8009324:	095b      	lsrs	r3, r3, #5
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800932c:	441e      	add	r6, r3
 800932e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009332:	4618      	mov	r0, r3
 8009334:	f04f 0100 	mov.w	r1, #0
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	1894      	adds	r4, r2, r2
 800933e:	66bc      	str	r4, [r7, #104]	; 0x68
 8009340:	415b      	adcs	r3, r3
 8009342:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009344:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009348:	1812      	adds	r2, r2, r0
 800934a:	eb41 0303 	adc.w	r3, r1, r3
 800934e:	f04f 0400 	mov.w	r4, #0
 8009352:	f04f 0500 	mov.w	r5, #0
 8009356:	00dd      	lsls	r5, r3, #3
 8009358:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800935c:	00d4      	lsls	r4, r2, #3
 800935e:	4622      	mov	r2, r4
 8009360:	462b      	mov	r3, r5
 8009362:	1814      	adds	r4, r2, r0
 8009364:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009368:	414b      	adcs	r3, r1
 800936a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800936e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	461a      	mov	r2, r3
 8009376:	f04f 0300 	mov.w	r3, #0
 800937a:	1891      	adds	r1, r2, r2
 800937c:	6639      	str	r1, [r7, #96]	; 0x60
 800937e:	415b      	adcs	r3, r3
 8009380:	667b      	str	r3, [r7, #100]	; 0x64
 8009382:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800938a:	f7f7 fc1d 	bl	8000bc8 <__aeabi_uldivmod>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	4b70      	ldr	r3, [pc, #448]	; (8009554 <UART_SetConfig+0x3dc>)
 8009394:	fba3 1302 	umull	r1, r3, r3, r2
 8009398:	095b      	lsrs	r3, r3, #5
 800939a:	2164      	movs	r1, #100	; 0x64
 800939c:	fb01 f303 	mul.w	r3, r1, r3
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	3332      	adds	r3, #50	; 0x32
 80093a6:	4a6b      	ldr	r2, [pc, #428]	; (8009554 <UART_SetConfig+0x3dc>)
 80093a8:	fba2 2303 	umull	r2, r3, r2, r3
 80093ac:	095b      	lsrs	r3, r3, #5
 80093ae:	f003 0207 	and.w	r2, r3, #7
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4432      	add	r2, r6
 80093ba:	609a      	str	r2, [r3, #8]
 80093bc:	e26d      	b.n	800989a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093be:	f7fd ff3b 	bl	8007238 <HAL_RCC_GetPCLK1Freq>
 80093c2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093ca:	461c      	mov	r4, r3
 80093cc:	f04f 0500 	mov.w	r5, #0
 80093d0:	4622      	mov	r2, r4
 80093d2:	462b      	mov	r3, r5
 80093d4:	1891      	adds	r1, r2, r2
 80093d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80093d8:	415b      	adcs	r3, r3
 80093da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093e0:	1912      	adds	r2, r2, r4
 80093e2:	eb45 0303 	adc.w	r3, r5, r3
 80093e6:	f04f 0000 	mov.w	r0, #0
 80093ea:	f04f 0100 	mov.w	r1, #0
 80093ee:	00d9      	lsls	r1, r3, #3
 80093f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093f4:	00d0      	lsls	r0, r2, #3
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	1911      	adds	r1, r2, r4
 80093fc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009400:	416b      	adcs	r3, r5
 8009402:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	461a      	mov	r2, r3
 800940e:	f04f 0300 	mov.w	r3, #0
 8009412:	1891      	adds	r1, r2, r2
 8009414:	6539      	str	r1, [r7, #80]	; 0x50
 8009416:	415b      	adcs	r3, r3
 8009418:	657b      	str	r3, [r7, #84]	; 0x54
 800941a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800941e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009422:	f7f7 fbd1 	bl	8000bc8 <__aeabi_uldivmod>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	4b4a      	ldr	r3, [pc, #296]	; (8009554 <UART_SetConfig+0x3dc>)
 800942c:	fba3 2302 	umull	r2, r3, r3, r2
 8009430:	095b      	lsrs	r3, r3, #5
 8009432:	011e      	lsls	r6, r3, #4
 8009434:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009438:	461c      	mov	r4, r3
 800943a:	f04f 0500 	mov.w	r5, #0
 800943e:	4622      	mov	r2, r4
 8009440:	462b      	mov	r3, r5
 8009442:	1891      	adds	r1, r2, r2
 8009444:	64b9      	str	r1, [r7, #72]	; 0x48
 8009446:	415b      	adcs	r3, r3
 8009448:	64fb      	str	r3, [r7, #76]	; 0x4c
 800944a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800944e:	1912      	adds	r2, r2, r4
 8009450:	eb45 0303 	adc.w	r3, r5, r3
 8009454:	f04f 0000 	mov.w	r0, #0
 8009458:	f04f 0100 	mov.w	r1, #0
 800945c:	00d9      	lsls	r1, r3, #3
 800945e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009462:	00d0      	lsls	r0, r2, #3
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	1911      	adds	r1, r2, r4
 800946a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800946e:	416b      	adcs	r3, r5
 8009470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	461a      	mov	r2, r3
 800947c:	f04f 0300 	mov.w	r3, #0
 8009480:	1891      	adds	r1, r2, r2
 8009482:	6439      	str	r1, [r7, #64]	; 0x40
 8009484:	415b      	adcs	r3, r3
 8009486:	647b      	str	r3, [r7, #68]	; 0x44
 8009488:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800948c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009490:	f7f7 fb9a 	bl	8000bc8 <__aeabi_uldivmod>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4b2e      	ldr	r3, [pc, #184]	; (8009554 <UART_SetConfig+0x3dc>)
 800949a:	fba3 1302 	umull	r1, r3, r3, r2
 800949e:	095b      	lsrs	r3, r3, #5
 80094a0:	2164      	movs	r1, #100	; 0x64
 80094a2:	fb01 f303 	mul.w	r3, r1, r3
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	3332      	adds	r3, #50	; 0x32
 80094ac:	4a29      	ldr	r2, [pc, #164]	; (8009554 <UART_SetConfig+0x3dc>)
 80094ae:	fba2 2303 	umull	r2, r3, r2, r3
 80094b2:	095b      	lsrs	r3, r3, #5
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094ba:	441e      	add	r6, r3
 80094bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094c0:	4618      	mov	r0, r3
 80094c2:	f04f 0100 	mov.w	r1, #0
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	1894      	adds	r4, r2, r2
 80094cc:	63bc      	str	r4, [r7, #56]	; 0x38
 80094ce:	415b      	adcs	r3, r3
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094d6:	1812      	adds	r2, r2, r0
 80094d8:	eb41 0303 	adc.w	r3, r1, r3
 80094dc:	f04f 0400 	mov.w	r4, #0
 80094e0:	f04f 0500 	mov.w	r5, #0
 80094e4:	00dd      	lsls	r5, r3, #3
 80094e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094ea:	00d4      	lsls	r4, r2, #3
 80094ec:	4622      	mov	r2, r4
 80094ee:	462b      	mov	r3, r5
 80094f0:	1814      	adds	r4, r2, r0
 80094f2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80094f6:	414b      	adcs	r3, r1
 80094f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	461a      	mov	r2, r3
 8009504:	f04f 0300 	mov.w	r3, #0
 8009508:	1891      	adds	r1, r2, r2
 800950a:	6339      	str	r1, [r7, #48]	; 0x30
 800950c:	415b      	adcs	r3, r3
 800950e:	637b      	str	r3, [r7, #52]	; 0x34
 8009510:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009514:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009518:	f7f7 fb56 	bl	8000bc8 <__aeabi_uldivmod>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	4b0c      	ldr	r3, [pc, #48]	; (8009554 <UART_SetConfig+0x3dc>)
 8009522:	fba3 1302 	umull	r1, r3, r3, r2
 8009526:	095b      	lsrs	r3, r3, #5
 8009528:	2164      	movs	r1, #100	; 0x64
 800952a:	fb01 f303 	mul.w	r3, r1, r3
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	3332      	adds	r3, #50	; 0x32
 8009534:	4a07      	ldr	r2, [pc, #28]	; (8009554 <UART_SetConfig+0x3dc>)
 8009536:	fba2 2303 	umull	r2, r3, r2, r3
 800953a:	095b      	lsrs	r3, r3, #5
 800953c:	f003 0207 	and.w	r2, r3, #7
 8009540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4432      	add	r2, r6
 8009548:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800954a:	e1a6      	b.n	800989a <UART_SetConfig+0x722>
 800954c:	40011000 	.word	0x40011000
 8009550:	40011400 	.word	0x40011400
 8009554:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	4bd1      	ldr	r3, [pc, #836]	; (80098a4 <UART_SetConfig+0x72c>)
 8009560:	429a      	cmp	r2, r3
 8009562:	d006      	beq.n	8009572 <UART_SetConfig+0x3fa>
 8009564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	4bcf      	ldr	r3, [pc, #828]	; (80098a8 <UART_SetConfig+0x730>)
 800956c:	429a      	cmp	r2, r3
 800956e:	f040 80ca 	bne.w	8009706 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009572:	f7fd fe75 	bl	8007260 <HAL_RCC_GetPCLK2Freq>
 8009576:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800957a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800957e:	461c      	mov	r4, r3
 8009580:	f04f 0500 	mov.w	r5, #0
 8009584:	4622      	mov	r2, r4
 8009586:	462b      	mov	r3, r5
 8009588:	1891      	adds	r1, r2, r2
 800958a:	62b9      	str	r1, [r7, #40]	; 0x28
 800958c:	415b      	adcs	r3, r3
 800958e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009594:	1912      	adds	r2, r2, r4
 8009596:	eb45 0303 	adc.w	r3, r5, r3
 800959a:	f04f 0000 	mov.w	r0, #0
 800959e:	f04f 0100 	mov.w	r1, #0
 80095a2:	00d9      	lsls	r1, r3, #3
 80095a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095a8:	00d0      	lsls	r0, r2, #3
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	eb12 0a04 	adds.w	sl, r2, r4
 80095b2:	eb43 0b05 	adc.w	fp, r3, r5
 80095b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	4618      	mov	r0, r3
 80095be:	f04f 0100 	mov.w	r1, #0
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	f04f 0300 	mov.w	r3, #0
 80095ca:	008b      	lsls	r3, r1, #2
 80095cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095d0:	0082      	lsls	r2, r0, #2
 80095d2:	4650      	mov	r0, sl
 80095d4:	4659      	mov	r1, fp
 80095d6:	f7f7 faf7 	bl	8000bc8 <__aeabi_uldivmod>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	4bb3      	ldr	r3, [pc, #716]	; (80098ac <UART_SetConfig+0x734>)
 80095e0:	fba3 2302 	umull	r2, r3, r3, r2
 80095e4:	095b      	lsrs	r3, r3, #5
 80095e6:	011e      	lsls	r6, r3, #4
 80095e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095ec:	4618      	mov	r0, r3
 80095ee:	f04f 0100 	mov.w	r1, #0
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	1894      	adds	r4, r2, r2
 80095f8:	623c      	str	r4, [r7, #32]
 80095fa:	415b      	adcs	r3, r3
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
 80095fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009602:	1812      	adds	r2, r2, r0
 8009604:	eb41 0303 	adc.w	r3, r1, r3
 8009608:	f04f 0400 	mov.w	r4, #0
 800960c:	f04f 0500 	mov.w	r5, #0
 8009610:	00dd      	lsls	r5, r3, #3
 8009612:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009616:	00d4      	lsls	r4, r2, #3
 8009618:	4622      	mov	r2, r4
 800961a:	462b      	mov	r3, r5
 800961c:	1814      	adds	r4, r2, r0
 800961e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009622:	414b      	adcs	r3, r1
 8009624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	4618      	mov	r0, r3
 8009630:	f04f 0100 	mov.w	r1, #0
 8009634:	f04f 0200 	mov.w	r2, #0
 8009638:	f04f 0300 	mov.w	r3, #0
 800963c:	008b      	lsls	r3, r1, #2
 800963e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009642:	0082      	lsls	r2, r0, #2
 8009644:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009648:	f7f7 fabe 	bl	8000bc8 <__aeabi_uldivmod>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4b96      	ldr	r3, [pc, #600]	; (80098ac <UART_SetConfig+0x734>)
 8009652:	fba3 1302 	umull	r1, r3, r3, r2
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	2164      	movs	r1, #100	; 0x64
 800965a:	fb01 f303 	mul.w	r3, r1, r3
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	011b      	lsls	r3, r3, #4
 8009662:	3332      	adds	r3, #50	; 0x32
 8009664:	4a91      	ldr	r2, [pc, #580]	; (80098ac <UART_SetConfig+0x734>)
 8009666:	fba2 2303 	umull	r2, r3, r2, r3
 800966a:	095b      	lsrs	r3, r3, #5
 800966c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009670:	441e      	add	r6, r3
 8009672:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009676:	4618      	mov	r0, r3
 8009678:	f04f 0100 	mov.w	r1, #0
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	1894      	adds	r4, r2, r2
 8009682:	61bc      	str	r4, [r7, #24]
 8009684:	415b      	adcs	r3, r3
 8009686:	61fb      	str	r3, [r7, #28]
 8009688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800968c:	1812      	adds	r2, r2, r0
 800968e:	eb41 0303 	adc.w	r3, r1, r3
 8009692:	f04f 0400 	mov.w	r4, #0
 8009696:	f04f 0500 	mov.w	r5, #0
 800969a:	00dd      	lsls	r5, r3, #3
 800969c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096a0:	00d4      	lsls	r4, r2, #3
 80096a2:	4622      	mov	r2, r4
 80096a4:	462b      	mov	r3, r5
 80096a6:	1814      	adds	r4, r2, r0
 80096a8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80096ac:	414b      	adcs	r3, r1
 80096ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80096b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f04f 0100 	mov.w	r1, #0
 80096be:	f04f 0200 	mov.w	r2, #0
 80096c2:	f04f 0300 	mov.w	r3, #0
 80096c6:	008b      	lsls	r3, r1, #2
 80096c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096cc:	0082      	lsls	r2, r0, #2
 80096ce:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80096d2:	f7f7 fa79 	bl	8000bc8 <__aeabi_uldivmod>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4b74      	ldr	r3, [pc, #464]	; (80098ac <UART_SetConfig+0x734>)
 80096dc:	fba3 1302 	umull	r1, r3, r3, r2
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	2164      	movs	r1, #100	; 0x64
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	011b      	lsls	r3, r3, #4
 80096ec:	3332      	adds	r3, #50	; 0x32
 80096ee:	4a6f      	ldr	r2, [pc, #444]	; (80098ac <UART_SetConfig+0x734>)
 80096f0:	fba2 2303 	umull	r2, r3, r2, r3
 80096f4:	095b      	lsrs	r3, r3, #5
 80096f6:	f003 020f 	and.w	r2, r3, #15
 80096fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4432      	add	r2, r6
 8009702:	609a      	str	r2, [r3, #8]
 8009704:	e0c9      	b.n	800989a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009706:	f7fd fd97 	bl	8007238 <HAL_RCC_GetPCLK1Freq>
 800970a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800970e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009712:	461c      	mov	r4, r3
 8009714:	f04f 0500 	mov.w	r5, #0
 8009718:	4622      	mov	r2, r4
 800971a:	462b      	mov	r3, r5
 800971c:	1891      	adds	r1, r2, r2
 800971e:	6139      	str	r1, [r7, #16]
 8009720:	415b      	adcs	r3, r3
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009728:	1912      	adds	r2, r2, r4
 800972a:	eb45 0303 	adc.w	r3, r5, r3
 800972e:	f04f 0000 	mov.w	r0, #0
 8009732:	f04f 0100 	mov.w	r1, #0
 8009736:	00d9      	lsls	r1, r3, #3
 8009738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800973c:	00d0      	lsls	r0, r2, #3
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	eb12 0804 	adds.w	r8, r2, r4
 8009746:	eb43 0905 	adc.w	r9, r3, r5
 800974a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	4618      	mov	r0, r3
 8009752:	f04f 0100 	mov.w	r1, #0
 8009756:	f04f 0200 	mov.w	r2, #0
 800975a:	f04f 0300 	mov.w	r3, #0
 800975e:	008b      	lsls	r3, r1, #2
 8009760:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009764:	0082      	lsls	r2, r0, #2
 8009766:	4640      	mov	r0, r8
 8009768:	4649      	mov	r1, r9
 800976a:	f7f7 fa2d 	bl	8000bc8 <__aeabi_uldivmod>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	4b4e      	ldr	r3, [pc, #312]	; (80098ac <UART_SetConfig+0x734>)
 8009774:	fba3 2302 	umull	r2, r3, r3, r2
 8009778:	095b      	lsrs	r3, r3, #5
 800977a:	011e      	lsls	r6, r3, #4
 800977c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009780:	4618      	mov	r0, r3
 8009782:	f04f 0100 	mov.w	r1, #0
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	1894      	adds	r4, r2, r2
 800978c:	60bc      	str	r4, [r7, #8]
 800978e:	415b      	adcs	r3, r3
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009796:	1812      	adds	r2, r2, r0
 8009798:	eb41 0303 	adc.w	r3, r1, r3
 800979c:	f04f 0400 	mov.w	r4, #0
 80097a0:	f04f 0500 	mov.w	r5, #0
 80097a4:	00dd      	lsls	r5, r3, #3
 80097a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80097aa:	00d4      	lsls	r4, r2, #3
 80097ac:	4622      	mov	r2, r4
 80097ae:	462b      	mov	r3, r5
 80097b0:	1814      	adds	r4, r2, r0
 80097b2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80097b6:	414b      	adcs	r3, r1
 80097b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f04f 0100 	mov.w	r1, #0
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	f04f 0300 	mov.w	r3, #0
 80097d0:	008b      	lsls	r3, r1, #2
 80097d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80097d6:	0082      	lsls	r2, r0, #2
 80097d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80097dc:	f7f7 f9f4 	bl	8000bc8 <__aeabi_uldivmod>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4b31      	ldr	r3, [pc, #196]	; (80098ac <UART_SetConfig+0x734>)
 80097e6:	fba3 1302 	umull	r1, r3, r3, r2
 80097ea:	095b      	lsrs	r3, r3, #5
 80097ec:	2164      	movs	r1, #100	; 0x64
 80097ee:	fb01 f303 	mul.w	r3, r1, r3
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	011b      	lsls	r3, r3, #4
 80097f6:	3332      	adds	r3, #50	; 0x32
 80097f8:	4a2c      	ldr	r2, [pc, #176]	; (80098ac <UART_SetConfig+0x734>)
 80097fa:	fba2 2303 	umull	r2, r3, r2, r3
 80097fe:	095b      	lsrs	r3, r3, #5
 8009800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009804:	441e      	add	r6, r3
 8009806:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800980a:	4618      	mov	r0, r3
 800980c:	f04f 0100 	mov.w	r1, #0
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	1894      	adds	r4, r2, r2
 8009816:	603c      	str	r4, [r7, #0]
 8009818:	415b      	adcs	r3, r3
 800981a:	607b      	str	r3, [r7, #4]
 800981c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009820:	1812      	adds	r2, r2, r0
 8009822:	eb41 0303 	adc.w	r3, r1, r3
 8009826:	f04f 0400 	mov.w	r4, #0
 800982a:	f04f 0500 	mov.w	r5, #0
 800982e:	00dd      	lsls	r5, r3, #3
 8009830:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009834:	00d4      	lsls	r4, r2, #3
 8009836:	4622      	mov	r2, r4
 8009838:	462b      	mov	r3, r5
 800983a:	1814      	adds	r4, r2, r0
 800983c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009840:	414b      	adcs	r3, r1
 8009842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	4618      	mov	r0, r3
 800984e:	f04f 0100 	mov.w	r1, #0
 8009852:	f04f 0200 	mov.w	r2, #0
 8009856:	f04f 0300 	mov.w	r3, #0
 800985a:	008b      	lsls	r3, r1, #2
 800985c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009860:	0082      	lsls	r2, r0, #2
 8009862:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009866:	f7f7 f9af 	bl	8000bc8 <__aeabi_uldivmod>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <UART_SetConfig+0x734>)
 8009870:	fba3 1302 	umull	r1, r3, r3, r2
 8009874:	095b      	lsrs	r3, r3, #5
 8009876:	2164      	movs	r1, #100	; 0x64
 8009878:	fb01 f303 	mul.w	r3, r1, r3
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	3332      	adds	r3, #50	; 0x32
 8009882:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <UART_SetConfig+0x734>)
 8009884:	fba2 2303 	umull	r2, r3, r2, r3
 8009888:	095b      	lsrs	r3, r3, #5
 800988a:	f003 020f 	and.w	r2, r3, #15
 800988e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4432      	add	r2, r6
 8009896:	609a      	str	r2, [r3, #8]
}
 8009898:	e7ff      	b.n	800989a <UART_SetConfig+0x722>
 800989a:	bf00      	nop
 800989c:	37f4      	adds	r7, #244	; 0xf4
 800989e:	46bd      	mov	sp, r7
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	40011000 	.word	0x40011000
 80098a8:	40011400 	.word	0x40011400
 80098ac:	51eb851f 	.word	0x51eb851f

080098b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80098be:	2300      	movs	r3, #0
 80098c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d029      	beq.n	800991e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80098d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80098da:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098e4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80098ea:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80098f0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80098f6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80098fc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009902:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009908:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800990e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	4313      	orrs	r3, r2
 8009914:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	e034      	b.n	8009988 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800992a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009934:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800993a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800994e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009952:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800995c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009962:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009968:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800996e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009974:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	4313      	orrs	r3, r2
 800997a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3714      	adds	r7, #20
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009996:	b480      	push	{r7}
 8009998:	b087      	sub	sp, #28
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d02e      	beq.n	8009a0e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80099bc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099cc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80099d6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	3b01      	subs	r3, #1
 80099de:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80099e0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80099ea:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80099f4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099fe:	4313      	orrs	r3, r2
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	609a      	str	r2, [r3, #8]
 8009a0c:	e03b      	b.n	8009a86 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a1e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a30:	4313      	orrs	r3, r2
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a44:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a54:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009a5e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009a68:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a72:	4313      	orrs	r3, r2
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009ab0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009aba:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009acc:	f7fa f8c6 	bl	8003c5c <HAL_GetTick>
 8009ad0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009ad2:	e010      	b.n	8009af6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ada:	d00c      	beq.n	8009af6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d007      	beq.n	8009af2 <FMC_SDRAM_SendCommand+0x5e>
 8009ae2:	f7fa f8bb 	bl	8003c5c <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d201      	bcs.n	8009af6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e006      	b.n	8009b04 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	f003 0320 	and.w	r3, r3, #32
 8009afe:	2b20      	cmp	r3, #32
 8009b00:	d0e8      	beq.n	8009ad4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	695a      	ldr	r2, [r3, #20]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f103 0208 	add.w	r2, r3, #8
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f103 0208 	add.w	r2, r3, #8
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f103 0208 	add.w	r2, r3, #8
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	601a      	str	r2, [r3, #0]
}
 8009bc8:	bf00      	nop
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bea:	d103      	bne.n	8009bf4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	60fb      	str	r3, [r7, #12]
 8009bf2:	e00c      	b.n	8009c0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3308      	adds	r3, #8
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	e002      	b.n	8009c02 <vListInsert+0x2e>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d2f6      	bcs.n	8009bfc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	601a      	str	r2, [r3, #0]
}
 8009c3a:	bf00      	nop
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c46:	b480      	push	{r7}
 8009c48:	b085      	sub	sp, #20
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	6892      	ldr	r2, [r2, #8]
 8009c5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6852      	ldr	r2, [r2, #4]
 8009c66:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d103      	bne.n	8009c7a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689a      	ldr	r2, [r3, #8]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	1e5a      	subs	r2, r3, #1
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
	...

08009c9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009cc6:	f002 fbbd 	bl	800c444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd2:	68f9      	ldr	r1, [r7, #12]
 8009cd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cd6:	fb01 f303 	mul.w	r3, r1, r3
 8009cda:	441a      	add	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	68f9      	ldr	r1, [r7, #12]
 8009cfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cfc:	fb01 f303 	mul.w	r3, r1, r3
 8009d00:	441a      	add	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	22ff      	movs	r2, #255	; 0xff
 8009d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	22ff      	movs	r2, #255	; 0xff
 8009d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d114      	bne.n	8009d46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01a      	beq.n	8009d5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	3310      	adds	r3, #16
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f001 fad9 	bl	800b2e0 <xTaskRemoveFromEventList>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d012      	beq.n	8009d5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d34:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <xQueueGenericReset+0xcc>)
 8009d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	e009      	b.n	8009d5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3310      	adds	r3, #16
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff fef1 	bl	8009b32 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3324      	adds	r3, #36	; 0x24
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7ff feec 	bl	8009b32 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d5a:	f002 fba3 	bl	800c4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d5e:	2301      	movs	r3, #1
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	e000ed04 	.word	0xe000ed04

08009d6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08e      	sub	sp, #56	; 0x38
 8009d70:	af02      	add	r7, sp, #8
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
 8009d78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10a      	bne.n	8009d96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <xQueueGenericCreateStatic+0x52>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <xQueueGenericCreateStatic+0x56>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e000      	b.n	8009dc4 <xQueueGenericCreateStatic+0x58>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	623b      	str	r3, [r7, #32]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d102      	bne.n	8009dea <xQueueGenericCreateStatic+0x7e>
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <xQueueGenericCreateStatic+0x82>
 8009dea:	2301      	movs	r3, #1
 8009dec:	e000      	b.n	8009df0 <xQueueGenericCreateStatic+0x84>
 8009dee:	2300      	movs	r3, #0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10a      	bne.n	8009e0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	61fb      	str	r3, [r7, #28]
}
 8009e06:	bf00      	nop
 8009e08:	e7fe      	b.n	8009e08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e0a:	2350      	movs	r3, #80	; 0x50
 8009e0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b50      	cmp	r3, #80	; 0x50
 8009e12:	d00a      	beq.n	8009e2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	61bb      	str	r3, [r7, #24]
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00d      	beq.n	8009e52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	4613      	mov	r3, r2
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f000 f845 	bl	8009edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3730      	adds	r7, #48	; 0x30
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b08a      	sub	sp, #40	; 0x28
 8009e60:	af02      	add	r7, sp, #8
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	4613      	mov	r3, r2
 8009e68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	613b      	str	r3, [r7, #16]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	61fb      	str	r3, [r7, #28]
 8009e90:	e004      	b.n	8009e9c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	fb02 f303 	mul.w	r3, r2, r3
 8009e9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	3350      	adds	r3, #80	; 0x50
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f002 fbf1 	bl	800c688 <pvPortMalloc>
 8009ea6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d011      	beq.n	8009ed2 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	3350      	adds	r3, #80	; 0x50
 8009eb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ec0:	79fa      	ldrb	r2, [r7, #7]
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	68b9      	ldr	r1, [r7, #8]
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 f805 	bl	8009edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3720      	adds	r7, #32
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d103      	bne.n	8009ef8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	69ba      	ldr	r2, [r7, #24]
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	e002      	b.n	8009efe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	69b8      	ldr	r0, [r7, #24]
 8009f0e:	f7ff fec5 	bl	8009c9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	78fa      	ldrb	r2, [r7, #3]
 8009f16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f1a:	bf00      	nop
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
	...

08009f24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08e      	sub	sp, #56	; 0x38
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f32:	2300      	movs	r3, #0
 8009f34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10a      	bne.n	8009f56 <xQueueGenericSend+0x32>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d103      	bne.n	8009f64 <xQueueGenericSend+0x40>
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <xQueueGenericSend+0x44>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e000      	b.n	8009f6a <xQueueGenericSend+0x46>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10a      	bne.n	8009f84 <xQueueGenericSend+0x60>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f80:	bf00      	nop
 8009f82:	e7fe      	b.n	8009f82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d103      	bne.n	8009f92 <xQueueGenericSend+0x6e>
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d101      	bne.n	8009f96 <xQueueGenericSend+0x72>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e000      	b.n	8009f98 <xQueueGenericSend+0x74>
 8009f96:	2300      	movs	r3, #0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	623b      	str	r3, [r7, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fb2:	f001 fb51 	bl	800b658 <xTaskGetSchedulerState>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d102      	bne.n	8009fc2 <xQueueGenericSend+0x9e>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <xQueueGenericSend+0xa2>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e000      	b.n	8009fc8 <xQueueGenericSend+0xa4>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <xQueueGenericSend+0xbe>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	61fb      	str	r3, [r7, #28]
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fe2:	f002 fa2f 	bl	800c444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d302      	bcc.n	8009ff8 <xQueueGenericSend+0xd4>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d129      	bne.n	800a04c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ffe:	f000 fb2b 	bl	800a658 <prvCopyDataToQueue>
 800a002:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d010      	beq.n	800a02e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	3324      	adds	r3, #36	; 0x24
 800a010:	4618      	mov	r0, r3
 800a012:	f001 f965 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d013      	beq.n	800a044 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a01c:	4b3f      	ldr	r3, [pc, #252]	; (800a11c <xQueueGenericSend+0x1f8>)
 800a01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	e00a      	b.n	800a044 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	2b00      	cmp	r3, #0
 800a032:	d007      	beq.n	800a044 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a034:	4b39      	ldr	r3, [pc, #228]	; (800a11c <xQueueGenericSend+0x1f8>)
 800a036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a044:	f002 fa2e 	bl	800c4a4 <vPortExitCritical>
				return pdPASS;
 800a048:	2301      	movs	r3, #1
 800a04a:	e063      	b.n	800a114 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d103      	bne.n	800a05a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a052:	f002 fa27 	bl	800c4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a056:	2300      	movs	r3, #0
 800a058:	e05c      	b.n	800a114 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d106      	bne.n	800a06e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a060:	f107 0314 	add.w	r3, r7, #20
 800a064:	4618      	mov	r0, r3
 800a066:	f001 f99d 	bl	800b3a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a06a:	2301      	movs	r3, #1
 800a06c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a06e:	f002 fa19 	bl	800c4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a072:	f000 fefd 	bl	800ae70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a076:	f002 f9e5 	bl	800c444 <vPortEnterCritical>
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a080:	b25b      	sxtb	r3, r3
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a086:	d103      	bne.n	800a090 <xQueueGenericSend+0x16c>
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a096:	b25b      	sxtb	r3, r3
 800a098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09c:	d103      	bne.n	800a0a6 <xQueueGenericSend+0x182>
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0a6:	f002 f9fd 	bl	800c4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0aa:	1d3a      	adds	r2, r7, #4
 800a0ac:	f107 0314 	add.w	r3, r7, #20
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 f98c 	bl	800b3d0 <xTaskCheckForTimeOut>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d124      	bne.n	800a108 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0c0:	f000 fbc2 	bl	800a848 <prvIsQueueFull>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d018      	beq.n	800a0fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	3310      	adds	r3, #16
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f001 f8b4 	bl	800b240 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a0d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0da:	f000 fb4d 	bl	800a778 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a0de:	f000 fed5 	bl	800ae8c <xTaskResumeAll>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f47f af7c 	bne.w	8009fe2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a0ea:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <xQueueGenericSend+0x1f8>)
 800a0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	e772      	b.n	8009fe2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0fe:	f000 fb3b 	bl	800a778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a102:	f000 fec3 	bl	800ae8c <xTaskResumeAll>
 800a106:	e76c      	b.n	8009fe2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a10a:	f000 fb35 	bl	800a778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a10e:	f000 febd 	bl	800ae8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a112:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a114:	4618      	mov	r0, r3
 800a116:	3738      	adds	r7, #56	; 0x38
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	e000ed04 	.word	0xe000ed04

0800a120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08e      	sub	sp, #56	; 0x38
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10a      	bne.n	800a14e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a14a:	bf00      	nop
 800a14c:	e7fe      	b.n	800a14c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d103      	bne.n	800a15c <xQueueGenericSendFromISR+0x3c>
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <xQueueGenericSendFromISR+0x40>
 800a15c:	2301      	movs	r3, #1
 800a15e:	e000      	b.n	800a162 <xQueueGenericSendFromISR+0x42>
 800a160:	2300      	movs	r3, #0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	623b      	str	r3, [r7, #32]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d103      	bne.n	800a18a <xQueueGenericSendFromISR+0x6a>
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a186:	2b01      	cmp	r3, #1
 800a188:	d101      	bne.n	800a18e <xQueueGenericSendFromISR+0x6e>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e000      	b.n	800a190 <xQueueGenericSendFromISR+0x70>
 800a18e:	2300      	movs	r3, #0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	61fb      	str	r3, [r7, #28]
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1aa:	f002 fa2d 	bl	800c608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a1ae:	f3ef 8211 	mrs	r2, BASEPRI
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	61ba      	str	r2, [r7, #24]
 800a1c4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a1c6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d302      	bcc.n	800a1dc <xQueueGenericSendFromISR+0xbc>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d12c      	bne.n	800a236 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ec:	f000 fa34 	bl	800a658 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f8:	d112      	bne.n	800a220 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d016      	beq.n	800a230 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	3324      	adds	r3, #36	; 0x24
 800a206:	4618      	mov	r0, r3
 800a208:	f001 f86a 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00e      	beq.n	800a230 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00b      	beq.n	800a230 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	e007      	b.n	800a230 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a220:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a224:	3301      	adds	r3, #1
 800a226:	b2db      	uxtb	r3, r3
 800a228:	b25a      	sxtb	r2, r3
 800a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a230:	2301      	movs	r3, #1
 800a232:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a234:	e001      	b.n	800a23a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a236:	2300      	movs	r3, #0
 800a238:	637b      	str	r3, [r7, #52]	; 0x34
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a244:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3738      	adds	r7, #56	; 0x38
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08c      	sub	sp, #48	; 0x30
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a25c:	2300      	movs	r3, #0
 800a25e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <xQueueReceive+0x30>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	623b      	str	r3, [r7, #32]
}
 800a27c:	bf00      	nop
 800a27e:	e7fe      	b.n	800a27e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d103      	bne.n	800a28e <xQueueReceive+0x3e>
 800a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <xQueueReceive+0x42>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <xQueueReceive+0x44>
 800a292:	2300      	movs	r3, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <xQueueReceive+0x5e>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	61fb      	str	r3, [r7, #28]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2ae:	f001 f9d3 	bl	800b658 <xTaskGetSchedulerState>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d102      	bne.n	800a2be <xQueueReceive+0x6e>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <xQueueReceive+0x72>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e000      	b.n	800a2c4 <xQueueReceive+0x74>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <xQueueReceive+0x8e>
	__asm volatile
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	61bb      	str	r3, [r7, #24]
}
 800a2da:	bf00      	nop
 800a2dc:	e7fe      	b.n	800a2dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2de:	f002 f8b1 	bl	800c444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d01f      	beq.n	800a32e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2ee:	68b9      	ldr	r1, [r7, #8]
 800a2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2f2:	f000 fa1b 	bl	800a72c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	1e5a      	subs	r2, r3, #1
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00f      	beq.n	800a326 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	3310      	adds	r3, #16
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 ffe8 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d007      	beq.n	800a326 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a316:	4b3d      	ldr	r3, [pc, #244]	; (800a40c <xQueueReceive+0x1bc>)
 800a318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a326:	f002 f8bd 	bl	800c4a4 <vPortExitCritical>
				return pdPASS;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e069      	b.n	800a402 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d103      	bne.n	800a33c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a334:	f002 f8b6 	bl	800c4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a338:	2300      	movs	r3, #0
 800a33a:	e062      	b.n	800a402 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d106      	bne.n	800a350 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a342:	f107 0310 	add.w	r3, r7, #16
 800a346:	4618      	mov	r0, r3
 800a348:	f001 f82c 	bl	800b3a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a34c:	2301      	movs	r3, #1
 800a34e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a350:	f002 f8a8 	bl	800c4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a354:	f000 fd8c 	bl	800ae70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a358:	f002 f874 	bl	800c444 <vPortEnterCritical>
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a362:	b25b      	sxtb	r3, r3
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a368:	d103      	bne.n	800a372 <xQueueReceive+0x122>
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a378:	b25b      	sxtb	r3, r3
 800a37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a37e:	d103      	bne.n	800a388 <xQueueReceive+0x138>
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a388:	f002 f88c 	bl	800c4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a38c:	1d3a      	adds	r2, r7, #4
 800a38e:	f107 0310 	add.w	r3, r7, #16
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f001 f81b 	bl	800b3d0 <xTaskCheckForTimeOut>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d123      	bne.n	800a3e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3a2:	f000 fa3b 	bl	800a81c <prvIsQueueEmpty>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d017      	beq.n	800a3dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	3324      	adds	r3, #36	; 0x24
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 ff43 	bl	800b240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3bc:	f000 f9dc 	bl	800a778 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3c0:	f000 fd64 	bl	800ae8c <xTaskResumeAll>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d189      	bne.n	800a2de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a3ca:	4b10      	ldr	r3, [pc, #64]	; (800a40c <xQueueReceive+0x1bc>)
 800a3cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	e780      	b.n	800a2de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a3dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3de:	f000 f9cb 	bl	800a778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3e2:	f000 fd53 	bl	800ae8c <xTaskResumeAll>
 800a3e6:	e77a      	b.n	800a2de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a3e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ea:	f000 f9c5 	bl	800a778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3ee:	f000 fd4d 	bl	800ae8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f4:	f000 fa12 	bl	800a81c <prvIsQueueEmpty>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f43f af6f 	beq.w	800a2de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a400:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a402:	4618      	mov	r0, r3
 800a404:	3730      	adds	r7, #48	; 0x30
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	e000ed04 	.word	0xe000ed04

0800a410 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08e      	sub	sp, #56	; 0x38
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a41a:	2300      	movs	r3, #0
 800a41c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a422:	2300      	movs	r3, #0
 800a424:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10a      	bne.n	800a442 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	623b      	str	r3, [r7, #32]
}
 800a43e:	bf00      	nop
 800a440:	e7fe      	b.n	800a440 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00a      	beq.n	800a460 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	61fb      	str	r3, [r7, #28]
}
 800a45c:	bf00      	nop
 800a45e:	e7fe      	b.n	800a45e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a460:	f001 f8fa 	bl	800b658 <xTaskGetSchedulerState>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d102      	bne.n	800a470 <xQueueSemaphoreTake+0x60>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <xQueueSemaphoreTake+0x64>
 800a470:	2301      	movs	r3, #1
 800a472:	e000      	b.n	800a476 <xQueueSemaphoreTake+0x66>
 800a474:	2300      	movs	r3, #0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10a      	bne.n	800a490 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	61bb      	str	r3, [r7, #24]
}
 800a48c:	bf00      	nop
 800a48e:	e7fe      	b.n	800a48e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a490:	f001 ffd8 	bl	800c444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d024      	beq.n	800a4ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	1e5a      	subs	r2, r3, #1
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d104      	bne.n	800a4ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a4b0:	f001 fa90 	bl	800b9d4 <pvTaskIncrementMutexHeldCount>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00f      	beq.n	800a4e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c4:	3310      	adds	r3, #16
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 ff0a 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d007      	beq.n	800a4e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4d2:	4b54      	ldr	r3, [pc, #336]	; (800a624 <xQueueSemaphoreTake+0x214>)
 800a4d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4e2:	f001 ffdf 	bl	800c4a4 <vPortExitCritical>
				return pdPASS;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e097      	b.n	800a61a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d111      	bne.n	800a514 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00a      	beq.n	800a50c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	617b      	str	r3, [r7, #20]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a50c:	f001 ffca 	bl	800c4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a510:	2300      	movs	r3, #0
 800a512:	e082      	b.n	800a61a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a51a:	f107 030c 	add.w	r3, r7, #12
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 ff40 	bl	800b3a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a524:	2301      	movs	r3, #1
 800a526:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a528:	f001 ffbc 	bl	800c4a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a52c:	f000 fca0 	bl	800ae70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a530:	f001 ff88 	bl	800c444 <vPortEnterCritical>
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a53a:	b25b      	sxtb	r3, r3
 800a53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a540:	d103      	bne.n	800a54a <xQueueSemaphoreTake+0x13a>
 800a542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a550:	b25b      	sxtb	r3, r3
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a556:	d103      	bne.n	800a560 <xQueueSemaphoreTake+0x150>
 800a558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a560:	f001 ffa0 	bl	800c4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a564:	463a      	mov	r2, r7
 800a566:	f107 030c 	add.w	r3, r7, #12
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 ff2f 	bl	800b3d0 <xTaskCheckForTimeOut>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d132      	bne.n	800a5de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a57a:	f000 f94f 	bl	800a81c <prvIsQueueEmpty>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d026      	beq.n	800a5d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d109      	bne.n	800a5a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a58c:	f001 ff5a 	bl	800c444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	4618      	mov	r0, r3
 800a596:	f001 f87d 	bl	800b694 <xTaskPriorityInherit>
 800a59a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a59c:	f001 ff82 	bl	800c4a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a2:	3324      	adds	r3, #36	; 0x24
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 fe49 	bl	800b240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5b0:	f000 f8e2 	bl	800a778 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5b4:	f000 fc6a 	bl	800ae8c <xTaskResumeAll>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f47f af68 	bne.w	800a490 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a5c0:	4b18      	ldr	r3, [pc, #96]	; (800a624 <xQueueSemaphoreTake+0x214>)
 800a5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	e75e      	b.n	800a490 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a5d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5d4:	f000 f8d0 	bl	800a778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5d8:	f000 fc58 	bl	800ae8c <xTaskResumeAll>
 800a5dc:	e758      	b.n	800a490 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a5de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5e0:	f000 f8ca 	bl	800a778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5e4:	f000 fc52 	bl	800ae8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5ea:	f000 f917 	bl	800a81c <prvIsQueueEmpty>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f43f af4d 	beq.w	800a490 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00d      	beq.n	800a618 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a5fc:	f001 ff22 	bl	800c444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a602:	f000 f811 	bl	800a628 <prvGetDisinheritPriorityAfterTimeout>
 800a606:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a60e:	4618      	mov	r0, r3
 800a610:	f001 f946 	bl	800b8a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a614:	f001 ff46 	bl	800c4a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a618:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3738      	adds	r7, #56	; 0x38
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	e000ed04 	.word	0xe000ed04

0800a628 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a634:	2b00      	cmp	r3, #0
 800a636:	d006      	beq.n	800a646 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f1c3 0307 	rsb	r3, r3, #7
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	e001      	b.n	800a64a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a64a:	68fb      	ldr	r3, [r7, #12]
	}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a664:	2300      	movs	r3, #0
 800a666:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10d      	bne.n	800a692 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d14d      	bne.n	800a71a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	4618      	mov	r0, r3
 800a684:	f001 f886 	bl	800b794 <xTaskPriorityDisinherit>
 800a688:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	609a      	str	r2, [r3, #8]
 800a690:	e043      	b.n	800a71a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d119      	bne.n	800a6cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6858      	ldr	r0, [r3, #4]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	68b9      	ldr	r1, [r7, #8]
 800a6a4:	f002 fc0a 	bl	800cebc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d32b      	bcc.n	800a71a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	605a      	str	r2, [r3, #4]
 800a6ca:	e026      	b.n	800a71a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	68d8      	ldr	r0, [r3, #12]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	68b9      	ldr	r1, [r7, #8]
 800a6d8:	f002 fbf0 	bl	800cebc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	68da      	ldr	r2, [r3, #12]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e4:	425b      	negs	r3, r3
 800a6e6:	441a      	add	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	68da      	ldr	r2, [r3, #12]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d207      	bcs.n	800a708 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a700:	425b      	negs	r3, r3
 800a702:	441a      	add	r2, r3
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d105      	bne.n	800a71a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d002      	beq.n	800a71a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	3b01      	subs	r3, #1
 800a718:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a722:	697b      	ldr	r3, [r7, #20]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d018      	beq.n	800a770 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68da      	ldr	r2, [r3, #12]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	441a      	add	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68da      	ldr	r2, [r3, #12]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	429a      	cmp	r2, r3
 800a756:	d303      	bcc.n	800a760 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68d9      	ldr	r1, [r3, #12]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a768:	461a      	mov	r2, r3
 800a76a:	6838      	ldr	r0, [r7, #0]
 800a76c:	f002 fba6 	bl	800cebc <memcpy>
	}
}
 800a770:	bf00      	nop
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a780:	f001 fe60 	bl	800c444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a78a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a78c:	e011      	b.n	800a7b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a792:	2b00      	cmp	r3, #0
 800a794:	d012      	beq.n	800a7bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	3324      	adds	r3, #36	; 0x24
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fda0 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7a6:	f000 fe75 	bl	800b494 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	dce9      	bgt.n	800a78e <prvUnlockQueue+0x16>
 800a7ba:	e000      	b.n	800a7be <prvUnlockQueue+0x46>
					break;
 800a7bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	22ff      	movs	r2, #255	; 0xff
 800a7c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a7c6:	f001 fe6d 	bl	800c4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a7ca:	f001 fe3b 	bl	800c444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7d6:	e011      	b.n	800a7fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d012      	beq.n	800a806 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	3310      	adds	r3, #16
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 fd7b 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7f0:	f000 fe50 	bl	800b494 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a800:	2b00      	cmp	r3, #0
 800a802:	dce9      	bgt.n	800a7d8 <prvUnlockQueue+0x60>
 800a804:	e000      	b.n	800a808 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a806:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	22ff      	movs	r2, #255	; 0xff
 800a80c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a810:	f001 fe48 	bl	800c4a4 <vPortExitCritical>
}
 800a814:	bf00      	nop
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a824:	f001 fe0e 	bl	800c444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a830:	2301      	movs	r3, #1
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	e001      	b.n	800a83a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a83a:	f001 fe33 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800a83e:	68fb      	ldr	r3, [r7, #12]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a850:	f001 fdf8 	bl	800c444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d102      	bne.n	800a866 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a860:	2301      	movs	r3, #1
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e001      	b.n	800a86a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a86a:	f001 fe1b 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800a86e:	68fb      	ldr	r3, [r7, #12]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a882:	2300      	movs	r3, #0
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	e014      	b.n	800a8b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a888:	4a0f      	ldr	r2, [pc, #60]	; (800a8c8 <vQueueAddToRegistry+0x50>)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10b      	bne.n	800a8ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a894:	490c      	ldr	r1, [pc, #48]	; (800a8c8 <vQueueAddToRegistry+0x50>)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a89e:	4a0a      	ldr	r2, [pc, #40]	; (800a8c8 <vQueueAddToRegistry+0x50>)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	00db      	lsls	r3, r3, #3
 800a8a4:	4413      	add	r3, r2
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a8aa:	e006      	b.n	800a8ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2b0b      	cmp	r3, #11
 800a8b6:	d9e7      	bls.n	800a888 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a8b8:	bf00      	nop
 800a8ba:	bf00      	nop
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	200220b8 	.word	0x200220b8

0800a8cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8dc:	f001 fdb2 	bl	800c444 <vPortEnterCritical>
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8e6:	b25b      	sxtb	r3, r3
 800a8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ec:	d103      	bne.n	800a8f6 <vQueueWaitForMessageRestricted+0x2a>
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8fc:	b25b      	sxtb	r3, r3
 800a8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a902:	d103      	bne.n	800a90c <vQueueWaitForMessageRestricted+0x40>
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a90c:	f001 fdca 	bl	800c4a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a914:	2b00      	cmp	r3, #0
 800a916:	d106      	bne.n	800a926 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	3324      	adds	r3, #36	; 0x24
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	68b9      	ldr	r1, [r7, #8]
 800a920:	4618      	mov	r0, r3
 800a922:	f000 fcb1 	bl	800b288 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a926:	6978      	ldr	r0, [r7, #20]
 800a928:	f7ff ff26 	bl	800a778 <prvUnlockQueue>
	}
 800a92c:	bf00      	nop
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08e      	sub	sp, #56	; 0x38
 800a938:	af04      	add	r7, sp, #16
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10a      	bne.n	800a95e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	623b      	str	r3, [r7, #32]
}
 800a95a:	bf00      	nop
 800a95c:	e7fe      	b.n	800a95c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10a      	bne.n	800a97a <xTaskCreateStatic+0x46>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	61fb      	str	r3, [r7, #28]
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a97a:	2364      	movs	r3, #100	; 0x64
 800a97c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2b64      	cmp	r3, #100	; 0x64
 800a982:	d00a      	beq.n	800a99a <xTaskCreateStatic+0x66>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	61bb      	str	r3, [r7, #24]
}
 800a996:	bf00      	nop
 800a998:	e7fe      	b.n	800a998 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a99a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d01e      	beq.n	800a9e0 <xTaskCreateStatic+0xac>
 800a9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01b      	beq.n	800a9e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	9303      	str	r3, [sp, #12]
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	9302      	str	r3, [sp, #8]
 800a9c2:	f107 0314 	add.w	r3, r7, #20
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	68b9      	ldr	r1, [r7, #8]
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 f850 	bl	800aa78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9da:	f000 f8e3 	bl	800aba4 <prvAddNewTaskToReadyList>
 800a9de:	e001      	b.n	800a9e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9e4:	697b      	ldr	r3, [r7, #20]
	}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3728      	adds	r7, #40	; 0x28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b08c      	sub	sp, #48	; 0x30
 800a9f2:	af04      	add	r7, sp, #16
 800a9f4:	60f8      	str	r0, [r7, #12]
 800a9f6:	60b9      	str	r1, [r7, #8]
 800a9f8:	603b      	str	r3, [r7, #0]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9fe:	88fb      	ldrh	r3, [r7, #6]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f001 fe40 	bl	800c688 <pvPortMalloc>
 800aa08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00e      	beq.n	800aa2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa10:	2064      	movs	r0, #100	; 0x64
 800aa12:	f001 fe39 	bl	800c688 <pvPortMalloc>
 800aa16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	631a      	str	r2, [r3, #48]	; 0x30
 800aa24:	e005      	b.n	800aa32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa26:	6978      	ldr	r0, [r7, #20]
 800aa28:	f001 fef2 	bl	800c810 <vPortFree>
 800aa2c:	e001      	b.n	800aa32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d017      	beq.n	800aa68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa40:	88fa      	ldrh	r2, [r7, #6]
 800aa42:	2300      	movs	r3, #0
 800aa44:	9303      	str	r3, [sp, #12]
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	9302      	str	r3, [sp, #8]
 800aa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	68b9      	ldr	r1, [r7, #8]
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f000 f80e 	bl	800aa78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa5c:	69f8      	ldr	r0, [r7, #28]
 800aa5e:	f000 f8a1 	bl	800aba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa62:	2301      	movs	r3, #1
 800aa64:	61bb      	str	r3, [r7, #24]
 800aa66:	e002      	b.n	800aa6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa68:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
	}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3720      	adds	r7, #32
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b088      	sub	sp, #32
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	461a      	mov	r2, r3
 800aa90:	21a5      	movs	r1, #165	; 0xa5
 800aa92:	f002 fa21 	bl	800ced8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	f023 0307 	bic.w	r3, r3, #7
 800aaae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	f003 0307 	and.w	r3, r3, #7
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	617b      	str	r3, [r7, #20]
}
 800aacc:	bf00      	nop
 800aace:	e7fe      	b.n	800aace <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800aad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad2:	69ba      	ldr	r2, [r7, #24]
 800aad4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d01f      	beq.n	800ab1c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aadc:	2300      	movs	r3, #0
 800aade:	61fb      	str	r3, [r7, #28]
 800aae0:	e012      	b.n	800ab08 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	4413      	add	r3, r2
 800aae8:	7819      	ldrb	r1, [r3, #0]
 800aaea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	4413      	add	r3, r2
 800aaf0:	3334      	adds	r3, #52	; 0x34
 800aaf2:	460a      	mov	r2, r1
 800aaf4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	4413      	add	r3, r2
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d006      	beq.n	800ab10 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	3301      	adds	r3, #1
 800ab06:	61fb      	str	r3, [r7, #28]
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	2b0f      	cmp	r3, #15
 800ab0c:	d9e9      	bls.n	800aae2 <prvInitialiseNewTask+0x6a>
 800ab0e:	e000      	b.n	800ab12 <prvInitialiseNewTask+0x9a>
			{
				break;
 800ab10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab1a:	e003      	b.n	800ab24 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab26:	2b06      	cmp	r3, #6
 800ab28:	d901      	bls.n	800ab2e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab2a:	2306      	movs	r3, #6
 800ab2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab38:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	3304      	adds	r3, #4
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff f814 	bl	8009b72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	3318      	adds	r3, #24
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7ff f80f 	bl	8009b72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	f1c3 0207 	rsb	r2, r3, #7
 800ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	2200      	movs	r2, #0
 800ab74:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	68f9      	ldr	r1, [r7, #12]
 800ab82:	69b8      	ldr	r0, [r7, #24]
 800ab84:	f001 fb2e 	bl	800c1e4 <pxPortInitialiseStack>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab9a:	bf00      	nop
 800ab9c:	3720      	adds	r7, #32
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
	...

0800aba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abac:	f001 fc4a 	bl	800c444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abb0:	4b2c      	ldr	r3, [pc, #176]	; (800ac64 <prvAddNewTaskToReadyList+0xc0>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3301      	adds	r3, #1
 800abb6:	4a2b      	ldr	r2, [pc, #172]	; (800ac64 <prvAddNewTaskToReadyList+0xc0>)
 800abb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abba:	4b2b      	ldr	r3, [pc, #172]	; (800ac68 <prvAddNewTaskToReadyList+0xc4>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d109      	bne.n	800abd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abc2:	4a29      	ldr	r2, [pc, #164]	; (800ac68 <prvAddNewTaskToReadyList+0xc4>)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abc8:	4b26      	ldr	r3, [pc, #152]	; (800ac64 <prvAddNewTaskToReadyList+0xc0>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d110      	bne.n	800abf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abd0:	f000 fc84 	bl	800b4dc <prvInitialiseTaskLists>
 800abd4:	e00d      	b.n	800abf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abd6:	4b25      	ldr	r3, [pc, #148]	; (800ac6c <prvAddNewTaskToReadyList+0xc8>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d109      	bne.n	800abf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abde:	4b22      	ldr	r3, [pc, #136]	; (800ac68 <prvAddNewTaskToReadyList+0xc4>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	429a      	cmp	r2, r3
 800abea:	d802      	bhi.n	800abf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abec:	4a1e      	ldr	r2, [pc, #120]	; (800ac68 <prvAddNewTaskToReadyList+0xc4>)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abf2:	4b1f      	ldr	r3, [pc, #124]	; (800ac70 <prvAddNewTaskToReadyList+0xcc>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3301      	adds	r3, #1
 800abf8:	4a1d      	ldr	r2, [pc, #116]	; (800ac70 <prvAddNewTaskToReadyList+0xcc>)
 800abfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800abfc:	4b1c      	ldr	r3, [pc, #112]	; (800ac70 <prvAddNewTaskToReadyList+0xcc>)
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	2201      	movs	r2, #1
 800ac0a:	409a      	lsls	r2, r3
 800ac0c:	4b19      	ldr	r3, [pc, #100]	; (800ac74 <prvAddNewTaskToReadyList+0xd0>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	4a18      	ldr	r2, [pc, #96]	; (800ac74 <prvAddNewTaskToReadyList+0xd0>)
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4a15      	ldr	r2, [pc, #84]	; (800ac78 <prvAddNewTaskToReadyList+0xd4>)
 800ac24:	441a      	add	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3304      	adds	r3, #4
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	f7fe ffad 	bl	8009b8c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac32:	f001 fc37 	bl	800c4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac36:	4b0d      	ldr	r3, [pc, #52]	; (800ac6c <prvAddNewTaskToReadyList+0xc8>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00e      	beq.n	800ac5c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac3e:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <prvAddNewTaskToReadyList+0xc4>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d207      	bcs.n	800ac5c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac4c:	4b0b      	ldr	r3, [pc, #44]	; (800ac7c <prvAddNewTaskToReadyList+0xd8>)
 800ac4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	2000270c 	.word	0x2000270c
 800ac68:	2000260c 	.word	0x2000260c
 800ac6c:	20002718 	.word	0x20002718
 800ac70:	20002728 	.word	0x20002728
 800ac74:	20002714 	.word	0x20002714
 800ac78:	20002610 	.word	0x20002610
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ac88:	f001 fbdc 	bl	800c444 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d102      	bne.n	800ac98 <vTaskDelete+0x18>
 800ac92:	4b39      	ldr	r3, [pc, #228]	; (800ad78 <vTaskDelete+0xf8>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	e000      	b.n	800ac9a <vTaskDelete+0x1a>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fe ffd0 	bl	8009c46 <uxListRemove>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d115      	bne.n	800acd8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb0:	4932      	ldr	r1, [pc, #200]	; (800ad7c <vTaskDelete+0xfc>)
 800acb2:	4613      	mov	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4413      	add	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	440b      	add	r3, r1
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10a      	bne.n	800acd8 <vTaskDelete+0x58>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc6:	2201      	movs	r2, #1
 800acc8:	fa02 f303 	lsl.w	r3, r2, r3
 800accc:	43da      	mvns	r2, r3
 800acce:	4b2c      	ldr	r3, [pc, #176]	; (800ad80 <vTaskDelete+0x100>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4013      	ands	r3, r2
 800acd4:	4a2a      	ldr	r2, [pc, #168]	; (800ad80 <vTaskDelete+0x100>)
 800acd6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3318      	adds	r3, #24
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fe ffae 	bl	8009c46 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800acea:	4b26      	ldr	r3, [pc, #152]	; (800ad84 <vTaskDelete+0x104>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	3301      	adds	r3, #1
 800acf0:	4a24      	ldr	r2, [pc, #144]	; (800ad84 <vTaskDelete+0x104>)
 800acf2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800acf4:	4b20      	ldr	r3, [pc, #128]	; (800ad78 <vTaskDelete+0xf8>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d10b      	bne.n	800ad16 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3304      	adds	r3, #4
 800ad02:	4619      	mov	r1, r3
 800ad04:	4820      	ldr	r0, [pc, #128]	; (800ad88 <vTaskDelete+0x108>)
 800ad06:	f7fe ff41 	bl	8009b8c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ad0a:	4b20      	ldr	r3, [pc, #128]	; (800ad8c <vTaskDelete+0x10c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	4a1e      	ldr	r2, [pc, #120]	; (800ad8c <vTaskDelete+0x10c>)
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	e009      	b.n	800ad2a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ad16:	4b1e      	ldr	r3, [pc, #120]	; (800ad90 <vTaskDelete+0x110>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	4a1c      	ldr	r2, [pc, #112]	; (800ad90 <vTaskDelete+0x110>)
 800ad1e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 fc49 	bl	800b5b8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ad26:	f000 fc77 	bl	800b618 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800ad2a:	f001 fbbb 	bl	800c4a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ad2e:	4b19      	ldr	r3, [pc, #100]	; (800ad94 <vTaskDelete+0x114>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d01b      	beq.n	800ad6e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800ad36:	4b10      	ldr	r3, [pc, #64]	; (800ad78 <vTaskDelete+0xf8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d116      	bne.n	800ad6e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ad40:	4b15      	ldr	r3, [pc, #84]	; (800ad98 <vTaskDelete+0x118>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00a      	beq.n	800ad5e <vTaskDelete+0xde>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	60bb      	str	r3, [r7, #8]
}
 800ad5a:	bf00      	nop
 800ad5c:	e7fe      	b.n	800ad5c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800ad5e:	4b0f      	ldr	r3, [pc, #60]	; (800ad9c <vTaskDelete+0x11c>)
 800ad60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad64:	601a      	str	r2, [r3, #0]
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad6e:	bf00      	nop
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	2000260c 	.word	0x2000260c
 800ad7c:	20002610 	.word	0x20002610
 800ad80:	20002714 	.word	0x20002714
 800ad84:	20002728 	.word	0x20002728
 800ad88:	200026e0 	.word	0x200026e0
 800ad8c:	200026f4 	.word	0x200026f4
 800ad90:	2000270c 	.word	0x2000270c
 800ad94:	20002718 	.word	0x20002718
 800ad98:	20002734 	.word	0x20002734
 800ad9c:	e000ed04 	.word	0xe000ed04

0800ada0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b08a      	sub	sp, #40	; 0x28
 800ada4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ada6:	2300      	movs	r3, #0
 800ada8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800adaa:	2300      	movs	r3, #0
 800adac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800adae:	463a      	mov	r2, r7
 800adb0:	1d39      	adds	r1, r7, #4
 800adb2:	f107 0308 	add.w	r3, r7, #8
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7f6 f9e2 	bl	8001180 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	9202      	str	r2, [sp, #8]
 800adc4:	9301      	str	r3, [sp, #4]
 800adc6:	2300      	movs	r3, #0
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	2300      	movs	r3, #0
 800adcc:	460a      	mov	r2, r1
 800adce:	4922      	ldr	r1, [pc, #136]	; (800ae58 <vTaskStartScheduler+0xb8>)
 800add0:	4822      	ldr	r0, [pc, #136]	; (800ae5c <vTaskStartScheduler+0xbc>)
 800add2:	f7ff fdaf 	bl	800a934 <xTaskCreateStatic>
 800add6:	4603      	mov	r3, r0
 800add8:	4a21      	ldr	r2, [pc, #132]	; (800ae60 <vTaskStartScheduler+0xc0>)
 800adda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800addc:	4b20      	ldr	r3, [pc, #128]	; (800ae60 <vTaskStartScheduler+0xc0>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ade4:	2301      	movs	r3, #1
 800ade6:	617b      	str	r3, [r7, #20]
 800ade8:	e001      	b.n	800adee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adea:	2300      	movs	r3, #0
 800adec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d102      	bne.n	800adfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800adf4:	f000 fe68 	bl	800bac8 <xTimerCreateTimerTask>
 800adf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d118      	bne.n	800ae32 <vTaskStartScheduler+0x92>
	__asm volatile
 800ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	613b      	str	r3, [r7, #16]
}
 800ae12:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae14:	4b13      	ldr	r3, [pc, #76]	; (800ae64 <vTaskStartScheduler+0xc4>)
 800ae16:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae1c:	4b12      	ldr	r3, [pc, #72]	; (800ae68 <vTaskStartScheduler+0xc8>)
 800ae1e:	2201      	movs	r2, #1
 800ae20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae22:	4b12      	ldr	r3, [pc, #72]	; (800ae6c <vTaskStartScheduler+0xcc>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ae28:	f7f6 fd32 	bl	8001890 <RTOS_AppConfigureTimerForRuntimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae2c:	f001 fa68 	bl	800c300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae30:	e00e      	b.n	800ae50 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d10a      	bne.n	800ae50 <vTaskStartScheduler+0xb0>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	60fb      	str	r3, [r7, #12]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <vTaskStartScheduler+0xae>
}
 800ae50:	bf00      	nop
 800ae52:	3718      	adds	r7, #24
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	0800fb54 	.word	0x0800fb54
 800ae5c:	0800b4ad 	.word	0x0800b4ad
 800ae60:	20002730 	.word	0x20002730
 800ae64:	2000272c 	.word	0x2000272c
 800ae68:	20002718 	.word	0x20002718
 800ae6c:	20002710 	.word	0x20002710

0800ae70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae70:	b480      	push	{r7}
 800ae72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ae74:	4b04      	ldr	r3, [pc, #16]	; (800ae88 <vTaskSuspendAll+0x18>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	4a03      	ldr	r2, [pc, #12]	; (800ae88 <vTaskSuspendAll+0x18>)
 800ae7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ae7e:	bf00      	nop
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	20002734 	.word	0x20002734

0800ae8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae96:	2300      	movs	r3, #0
 800ae98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae9a:	4b41      	ldr	r3, [pc, #260]	; (800afa0 <xTaskResumeAll+0x114>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10a      	bne.n	800aeb8 <xTaskResumeAll+0x2c>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	603b      	str	r3, [r7, #0]
}
 800aeb4:	bf00      	nop
 800aeb6:	e7fe      	b.n	800aeb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aeb8:	f001 fac4 	bl	800c444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aebc:	4b38      	ldr	r3, [pc, #224]	; (800afa0 <xTaskResumeAll+0x114>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	4a37      	ldr	r2, [pc, #220]	; (800afa0 <xTaskResumeAll+0x114>)
 800aec4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aec6:	4b36      	ldr	r3, [pc, #216]	; (800afa0 <xTaskResumeAll+0x114>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d161      	bne.n	800af92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aece:	4b35      	ldr	r3, [pc, #212]	; (800afa4 <xTaskResumeAll+0x118>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d05d      	beq.n	800af92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aed6:	e02e      	b.n	800af36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aed8:	4b33      	ldr	r3, [pc, #204]	; (800afa8 <xTaskResumeAll+0x11c>)
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	3318      	adds	r3, #24
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fe feae 	bl	8009c46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3304      	adds	r3, #4
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fe fea9 	bl	8009c46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	2201      	movs	r2, #1
 800aefa:	409a      	lsls	r2, r3
 800aefc:	4b2b      	ldr	r3, [pc, #172]	; (800afac <xTaskResumeAll+0x120>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4313      	orrs	r3, r2
 800af02:	4a2a      	ldr	r2, [pc, #168]	; (800afac <xTaskResumeAll+0x120>)
 800af04:	6013      	str	r3, [r2, #0]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af0a:	4613      	mov	r3, r2
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4413      	add	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4a27      	ldr	r2, [pc, #156]	; (800afb0 <xTaskResumeAll+0x124>)
 800af14:	441a      	add	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	3304      	adds	r3, #4
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f7fe fe35 	bl	8009b8c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af26:	4b23      	ldr	r3, [pc, #140]	; (800afb4 <xTaskResumeAll+0x128>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d302      	bcc.n	800af36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800af30:	4b21      	ldr	r3, [pc, #132]	; (800afb8 <xTaskResumeAll+0x12c>)
 800af32:	2201      	movs	r2, #1
 800af34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af36:	4b1c      	ldr	r3, [pc, #112]	; (800afa8 <xTaskResumeAll+0x11c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1cc      	bne.n	800aed8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af44:	f000 fb68 	bl	800b618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800af48:	4b1c      	ldr	r3, [pc, #112]	; (800afbc <xTaskResumeAll+0x130>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d010      	beq.n	800af76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af54:	f000 f846 	bl	800afe4 <xTaskIncrementTick>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800af5e:	4b16      	ldr	r3, [pc, #88]	; (800afb8 <xTaskResumeAll+0x12c>)
 800af60:	2201      	movs	r2, #1
 800af62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	3b01      	subs	r3, #1
 800af68:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1f1      	bne.n	800af54 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800af70:	4b12      	ldr	r3, [pc, #72]	; (800afbc <xTaskResumeAll+0x130>)
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af76:	4b10      	ldr	r3, [pc, #64]	; (800afb8 <xTaskResumeAll+0x12c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d009      	beq.n	800af92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af7e:	2301      	movs	r3, #1
 800af80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af82:	4b0f      	ldr	r3, [pc, #60]	; (800afc0 <xTaskResumeAll+0x134>)
 800af84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af92:	f001 fa87 	bl	800c4a4 <vPortExitCritical>

	return xAlreadyYielded;
 800af96:	68bb      	ldr	r3, [r7, #8]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	20002734 	.word	0x20002734
 800afa4:	2000270c 	.word	0x2000270c
 800afa8:	200026cc 	.word	0x200026cc
 800afac:	20002714 	.word	0x20002714
 800afb0:	20002610 	.word	0x20002610
 800afb4:	2000260c 	.word	0x2000260c
 800afb8:	20002720 	.word	0x20002720
 800afbc:	2000271c 	.word	0x2000271c
 800afc0:	e000ed04 	.word	0xe000ed04

0800afc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afca:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <xTaskGetTickCount+0x1c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afd0:	687b      	ldr	r3, [r7, #4]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	20002710 	.word	0x20002710

0800afe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afee:	4b4e      	ldr	r3, [pc, #312]	; (800b128 <xTaskIncrementTick+0x144>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f040 8088 	bne.w	800b108 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aff8:	4b4c      	ldr	r3, [pc, #304]	; (800b12c <xTaskIncrementTick+0x148>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3301      	adds	r3, #1
 800affe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b000:	4a4a      	ldr	r2, [pc, #296]	; (800b12c <xTaskIncrementTick+0x148>)
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d120      	bne.n	800b04e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b00c:	4b48      	ldr	r3, [pc, #288]	; (800b130 <xTaskIncrementTick+0x14c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00a      	beq.n	800b02c <xTaskIncrementTick+0x48>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	603b      	str	r3, [r7, #0]
}
 800b028:	bf00      	nop
 800b02a:	e7fe      	b.n	800b02a <xTaskIncrementTick+0x46>
 800b02c:	4b40      	ldr	r3, [pc, #256]	; (800b130 <xTaskIncrementTick+0x14c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	60fb      	str	r3, [r7, #12]
 800b032:	4b40      	ldr	r3, [pc, #256]	; (800b134 <xTaskIncrementTick+0x150>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a3e      	ldr	r2, [pc, #248]	; (800b130 <xTaskIncrementTick+0x14c>)
 800b038:	6013      	str	r3, [r2, #0]
 800b03a:	4a3e      	ldr	r2, [pc, #248]	; (800b134 <xTaskIncrementTick+0x150>)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	4b3d      	ldr	r3, [pc, #244]	; (800b138 <xTaskIncrementTick+0x154>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3301      	adds	r3, #1
 800b046:	4a3c      	ldr	r2, [pc, #240]	; (800b138 <xTaskIncrementTick+0x154>)
 800b048:	6013      	str	r3, [r2, #0]
 800b04a:	f000 fae5 	bl	800b618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b04e:	4b3b      	ldr	r3, [pc, #236]	; (800b13c <xTaskIncrementTick+0x158>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	429a      	cmp	r2, r3
 800b056:	d348      	bcc.n	800b0ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b058:	4b35      	ldr	r3, [pc, #212]	; (800b130 <xTaskIncrementTick+0x14c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d104      	bne.n	800b06c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b062:	4b36      	ldr	r3, [pc, #216]	; (800b13c <xTaskIncrementTick+0x158>)
 800b064:	f04f 32ff 	mov.w	r2, #4294967295
 800b068:	601a      	str	r2, [r3, #0]
					break;
 800b06a:	e03e      	b.n	800b0ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b06c:	4b30      	ldr	r3, [pc, #192]	; (800b130 <xTaskIncrementTick+0x14c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b07c:	693a      	ldr	r2, [r7, #16]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	429a      	cmp	r2, r3
 800b082:	d203      	bcs.n	800b08c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b084:	4a2d      	ldr	r2, [pc, #180]	; (800b13c <xTaskIncrementTick+0x158>)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b08a:	e02e      	b.n	800b0ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	3304      	adds	r3, #4
 800b090:	4618      	mov	r0, r3
 800b092:	f7fe fdd8 	bl	8009c46 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d004      	beq.n	800b0a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	3318      	adds	r3, #24
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fe fdcf 	bl	8009c46 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	409a      	lsls	r2, r3
 800b0b0:	4b23      	ldr	r3, [pc, #140]	; (800b140 <xTaskIncrementTick+0x15c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	4a22      	ldr	r2, [pc, #136]	; (800b140 <xTaskIncrementTick+0x15c>)
 800b0b8:	6013      	str	r3, [r2, #0]
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0be:	4613      	mov	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4a1f      	ldr	r2, [pc, #124]	; (800b144 <xTaskIncrementTick+0x160>)
 800b0c8:	441a      	add	r2, r3
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	f7fe fd5b 	bl	8009b8c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0da:	4b1b      	ldr	r3, [pc, #108]	; (800b148 <xTaskIncrementTick+0x164>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d3b9      	bcc.n	800b058 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0e8:	e7b6      	b.n	800b058 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0ea:	4b17      	ldr	r3, [pc, #92]	; (800b148 <xTaskIncrementTick+0x164>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f0:	4914      	ldr	r1, [pc, #80]	; (800b144 <xTaskIncrementTick+0x160>)
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	440b      	add	r3, r1
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d907      	bls.n	800b112 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b102:	2301      	movs	r3, #1
 800b104:	617b      	str	r3, [r7, #20]
 800b106:	e004      	b.n	800b112 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b108:	4b10      	ldr	r3, [pc, #64]	; (800b14c <xTaskIncrementTick+0x168>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3301      	adds	r3, #1
 800b10e:	4a0f      	ldr	r2, [pc, #60]	; (800b14c <xTaskIncrementTick+0x168>)
 800b110:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b112:	4b0f      	ldr	r3, [pc, #60]	; (800b150 <xTaskIncrementTick+0x16c>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d001      	beq.n	800b11e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b11a:	2301      	movs	r3, #1
 800b11c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b11e:	697b      	ldr	r3, [r7, #20]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	20002734 	.word	0x20002734
 800b12c:	20002710 	.word	0x20002710
 800b130:	200026c4 	.word	0x200026c4
 800b134:	200026c8 	.word	0x200026c8
 800b138:	20002724 	.word	0x20002724
 800b13c:	2000272c 	.word	0x2000272c
 800b140:	20002714 	.word	0x20002714
 800b144:	20002610 	.word	0x20002610
 800b148:	2000260c 	.word	0x2000260c
 800b14c:	2000271c 	.word	0x2000271c
 800b150:	20002720 	.word	0x20002720

0800b154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b15a:	4b32      	ldr	r3, [pc, #200]	; (800b224 <vTaskSwitchContext+0xd0>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b162:	4b31      	ldr	r3, [pc, #196]	; (800b228 <vTaskSwitchContext+0xd4>)
 800b164:	2201      	movs	r2, #1
 800b166:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b168:	e058      	b.n	800b21c <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800b16a:	4b2f      	ldr	r3, [pc, #188]	; (800b228 <vTaskSwitchContext+0xd4>)
 800b16c:	2200      	movs	r2, #0
 800b16e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b170:	f7f6 fb9c 	bl	80018ac <RTOS_AppGetRuntimeCounterValueFromISR>
 800b174:	4603      	mov	r3, r0
 800b176:	4a2d      	ldr	r2, [pc, #180]	; (800b22c <vTaskSwitchContext+0xd8>)
 800b178:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b17a:	4b2c      	ldr	r3, [pc, #176]	; (800b22c <vTaskSwitchContext+0xd8>)
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	4b2c      	ldr	r3, [pc, #176]	; (800b230 <vTaskSwitchContext+0xdc>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	429a      	cmp	r2, r3
 800b184:	d909      	bls.n	800b19a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b186:	4b2b      	ldr	r3, [pc, #172]	; (800b234 <vTaskSwitchContext+0xe0>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800b18c:	4a27      	ldr	r2, [pc, #156]	; (800b22c <vTaskSwitchContext+0xd8>)
 800b18e:	6810      	ldr	r0, [r2, #0]
 800b190:	4a27      	ldr	r2, [pc, #156]	; (800b230 <vTaskSwitchContext+0xdc>)
 800b192:	6812      	ldr	r2, [r2, #0]
 800b194:	1a82      	subs	r2, r0, r2
 800b196:	440a      	add	r2, r1
 800b198:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b19a:	4b24      	ldr	r3, [pc, #144]	; (800b22c <vTaskSwitchContext+0xd8>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a24      	ldr	r2, [pc, #144]	; (800b230 <vTaskSwitchContext+0xdc>)
 800b1a0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a2:	4b25      	ldr	r3, [pc, #148]	; (800b238 <vTaskSwitchContext+0xe4>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	fab3 f383 	clz	r3, r3
 800b1ae:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b1b0:	7afb      	ldrb	r3, [r7, #11]
 800b1b2:	f1c3 031f 	rsb	r3, r3, #31
 800b1b6:	617b      	str	r3, [r7, #20]
 800b1b8:	4920      	ldr	r1, [pc, #128]	; (800b23c <vTaskSwitchContext+0xe8>)
 800b1ba:	697a      	ldr	r2, [r7, #20]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	440b      	add	r3, r1
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10a      	bne.n	800b1e2 <vTaskSwitchContext+0x8e>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	607b      	str	r3, [r7, #4]
}
 800b1de:	bf00      	nop
 800b1e0:	e7fe      	b.n	800b1e0 <vTaskSwitchContext+0x8c>
 800b1e2:	697a      	ldr	r2, [r7, #20]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4a13      	ldr	r2, [pc, #76]	; (800b23c <vTaskSwitchContext+0xe8>)
 800b1ee:	4413      	add	r3, r2
 800b1f0:	613b      	str	r3, [r7, #16]
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	605a      	str	r2, [r3, #4]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	3308      	adds	r3, #8
 800b204:	429a      	cmp	r2, r3
 800b206:	d104      	bne.n	800b212 <vTaskSwitchContext+0xbe>
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	605a      	str	r2, [r3, #4]
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	4a06      	ldr	r2, [pc, #24]	; (800b234 <vTaskSwitchContext+0xe0>)
 800b21a:	6013      	str	r3, [r2, #0]
}
 800b21c:	bf00      	nop
 800b21e:	3718      	adds	r7, #24
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	20002734 	.word	0x20002734
 800b228:	20002720 	.word	0x20002720
 800b22c:	2000273c 	.word	0x2000273c
 800b230:	20002738 	.word	0x20002738
 800b234:	2000260c 	.word	0x2000260c
 800b238:	20002714 	.word	0x20002714
 800b23c:	20002610 	.word	0x20002610

0800b240 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10a      	bne.n	800b266 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	60fb      	str	r3, [r7, #12]
}
 800b262:	bf00      	nop
 800b264:	e7fe      	b.n	800b264 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b266:	4b07      	ldr	r3, [pc, #28]	; (800b284 <vTaskPlaceOnEventList+0x44>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	3318      	adds	r3, #24
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7fe fcb0 	bl	8009bd4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b274:	2101      	movs	r1, #1
 800b276:	6838      	ldr	r0, [r7, #0]
 800b278:	f000 fbc0 	bl	800b9fc <prvAddCurrentTaskToDelayedList>
}
 800b27c:	bf00      	nop
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	2000260c 	.word	0x2000260c

0800b288 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10a      	bne.n	800b2b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	617b      	str	r3, [r7, #20]
}
 800b2ac:	bf00      	nop
 800b2ae:	e7fe      	b.n	800b2ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2b0:	4b0a      	ldr	r3, [pc, #40]	; (800b2dc <vTaskPlaceOnEventListRestricted+0x54>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3318      	adds	r3, #24
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f7fe fc67 	bl	8009b8c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2ca:	6879      	ldr	r1, [r7, #4]
 800b2cc:	68b8      	ldr	r0, [r7, #8]
 800b2ce:	f000 fb95 	bl	800b9fc <prvAddCurrentTaskToDelayedList>
	}
 800b2d2:	bf00      	nop
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	2000260c 	.word	0x2000260c

0800b2e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10a      	bne.n	800b30c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	60fb      	str	r3, [r7, #12]
}
 800b308:	bf00      	nop
 800b30a:	e7fe      	b.n	800b30a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	3318      	adds	r3, #24
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe fc98 	bl	8009c46 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b316:	4b1d      	ldr	r3, [pc, #116]	; (800b38c <xTaskRemoveFromEventList+0xac>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d11c      	bne.n	800b358 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	3304      	adds	r3, #4
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe fc8f 	bl	8009c46 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32c:	2201      	movs	r2, #1
 800b32e:	409a      	lsls	r2, r3
 800b330:	4b17      	ldr	r3, [pc, #92]	; (800b390 <xTaskRemoveFromEventList+0xb0>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4313      	orrs	r3, r2
 800b336:	4a16      	ldr	r2, [pc, #88]	; (800b390 <xTaskRemoveFromEventList+0xb0>)
 800b338:	6013      	str	r3, [r2, #0]
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b33e:	4613      	mov	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4a13      	ldr	r2, [pc, #76]	; (800b394 <xTaskRemoveFromEventList+0xb4>)
 800b348:	441a      	add	r2, r3
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	3304      	adds	r3, #4
 800b34e:	4619      	mov	r1, r3
 800b350:	4610      	mov	r0, r2
 800b352:	f7fe fc1b 	bl	8009b8c <vListInsertEnd>
 800b356:	e005      	b.n	800b364 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	3318      	adds	r3, #24
 800b35c:	4619      	mov	r1, r3
 800b35e:	480e      	ldr	r0, [pc, #56]	; (800b398 <xTaskRemoveFromEventList+0xb8>)
 800b360:	f7fe fc14 	bl	8009b8c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b368:	4b0c      	ldr	r3, [pc, #48]	; (800b39c <xTaskRemoveFromEventList+0xbc>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36e:	429a      	cmp	r2, r3
 800b370:	d905      	bls.n	800b37e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b372:	2301      	movs	r3, #1
 800b374:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b376:	4b0a      	ldr	r3, [pc, #40]	; (800b3a0 <xTaskRemoveFromEventList+0xc0>)
 800b378:	2201      	movs	r2, #1
 800b37a:	601a      	str	r2, [r3, #0]
 800b37c:	e001      	b.n	800b382 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b37e:	2300      	movs	r3, #0
 800b380:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b382:	697b      	ldr	r3, [r7, #20]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3718      	adds	r7, #24
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	20002734 	.word	0x20002734
 800b390:	20002714 	.word	0x20002714
 800b394:	20002610 	.word	0x20002610
 800b398:	200026cc 	.word	0x200026cc
 800b39c:	2000260c 	.word	0x2000260c
 800b3a0:	20002720 	.word	0x20002720

0800b3a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3ac:	4b06      	ldr	r3, [pc, #24]	; (800b3c8 <vTaskInternalSetTimeOutState+0x24>)
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3b4:	4b05      	ldr	r3, [pc, #20]	; (800b3cc <vTaskInternalSetTimeOutState+0x28>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	605a      	str	r2, [r3, #4]
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	20002724 	.word	0x20002724
 800b3cc:	20002710 	.word	0x20002710

0800b3d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10a      	bne.n	800b3f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	613b      	str	r3, [r7, #16]
}
 800b3f2:	bf00      	nop
 800b3f4:	e7fe      	b.n	800b3f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10a      	bne.n	800b412 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	60fb      	str	r3, [r7, #12]
}
 800b40e:	bf00      	nop
 800b410:	e7fe      	b.n	800b410 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b412:	f001 f817 	bl	800c444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b416:	4b1d      	ldr	r3, [pc, #116]	; (800b48c <xTaskCheckForTimeOut+0xbc>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	69ba      	ldr	r2, [r7, #24]
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42e:	d102      	bne.n	800b436 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b430:	2300      	movs	r3, #0
 800b432:	61fb      	str	r3, [r7, #28]
 800b434:	e023      	b.n	800b47e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	4b15      	ldr	r3, [pc, #84]	; (800b490 <xTaskCheckForTimeOut+0xc0>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d007      	beq.n	800b452 <xTaskCheckForTimeOut+0x82>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d302      	bcc.n	800b452 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b44c:	2301      	movs	r3, #1
 800b44e:	61fb      	str	r3, [r7, #28]
 800b450:	e015      	b.n	800b47e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d20b      	bcs.n	800b474 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	1ad2      	subs	r2, r2, r3
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff ff9b 	bl	800b3a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b46e:	2300      	movs	r3, #0
 800b470:	61fb      	str	r3, [r7, #28]
 800b472:	e004      	b.n	800b47e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2200      	movs	r2, #0
 800b478:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b47a:	2301      	movs	r3, #1
 800b47c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b47e:	f001 f811 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800b482:	69fb      	ldr	r3, [r7, #28]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3720      	adds	r7, #32
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	20002710 	.word	0x20002710
 800b490:	20002724 	.word	0x20002724

0800b494 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b494:	b480      	push	{r7}
 800b496:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b498:	4b03      	ldr	r3, [pc, #12]	; (800b4a8 <vTaskMissedYield+0x14>)
 800b49a:	2201      	movs	r2, #1
 800b49c:	601a      	str	r2, [r3, #0]
}
 800b49e:	bf00      	nop
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	20002720 	.word	0x20002720

0800b4ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4b4:	f000 f852 	bl	800b55c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4b8:	4b06      	ldr	r3, [pc, #24]	; (800b4d4 <prvIdleTask+0x28>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d9f9      	bls.n	800b4b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4c0:	4b05      	ldr	r3, [pc, #20]	; (800b4d8 <prvIdleTask+0x2c>)
 800b4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4d0:	e7f0      	b.n	800b4b4 <prvIdleTask+0x8>
 800b4d2:	bf00      	nop
 800b4d4:	20002610 	.word	0x20002610
 800b4d8:	e000ed04 	.word	0xe000ed04

0800b4dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	607b      	str	r3, [r7, #4]
 800b4e6:	e00c      	b.n	800b502 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4a12      	ldr	r2, [pc, #72]	; (800b53c <prvInitialiseTaskLists+0x60>)
 800b4f4:	4413      	add	r3, r2
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fe fb1b 	bl	8009b32 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3301      	adds	r3, #1
 800b500:	607b      	str	r3, [r7, #4]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b06      	cmp	r3, #6
 800b506:	d9ef      	bls.n	800b4e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b508:	480d      	ldr	r0, [pc, #52]	; (800b540 <prvInitialiseTaskLists+0x64>)
 800b50a:	f7fe fb12 	bl	8009b32 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b50e:	480d      	ldr	r0, [pc, #52]	; (800b544 <prvInitialiseTaskLists+0x68>)
 800b510:	f7fe fb0f 	bl	8009b32 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b514:	480c      	ldr	r0, [pc, #48]	; (800b548 <prvInitialiseTaskLists+0x6c>)
 800b516:	f7fe fb0c 	bl	8009b32 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b51a:	480c      	ldr	r0, [pc, #48]	; (800b54c <prvInitialiseTaskLists+0x70>)
 800b51c:	f7fe fb09 	bl	8009b32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b520:	480b      	ldr	r0, [pc, #44]	; (800b550 <prvInitialiseTaskLists+0x74>)
 800b522:	f7fe fb06 	bl	8009b32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b526:	4b0b      	ldr	r3, [pc, #44]	; (800b554 <prvInitialiseTaskLists+0x78>)
 800b528:	4a05      	ldr	r2, [pc, #20]	; (800b540 <prvInitialiseTaskLists+0x64>)
 800b52a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <prvInitialiseTaskLists+0x7c>)
 800b52e:	4a05      	ldr	r2, [pc, #20]	; (800b544 <prvInitialiseTaskLists+0x68>)
 800b530:	601a      	str	r2, [r3, #0]
}
 800b532:	bf00      	nop
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20002610 	.word	0x20002610
 800b540:	2000269c 	.word	0x2000269c
 800b544:	200026b0 	.word	0x200026b0
 800b548:	200026cc 	.word	0x200026cc
 800b54c:	200026e0 	.word	0x200026e0
 800b550:	200026f8 	.word	0x200026f8
 800b554:	200026c4 	.word	0x200026c4
 800b558:	200026c8 	.word	0x200026c8

0800b55c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b562:	e019      	b.n	800b598 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b564:	f000 ff6e 	bl	800c444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b568:	4b10      	ldr	r3, [pc, #64]	; (800b5ac <prvCheckTasksWaitingTermination+0x50>)
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3304      	adds	r3, #4
 800b574:	4618      	mov	r0, r3
 800b576:	f7fe fb66 	bl	8009c46 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b57a:	4b0d      	ldr	r3, [pc, #52]	; (800b5b0 <prvCheckTasksWaitingTermination+0x54>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3b01      	subs	r3, #1
 800b580:	4a0b      	ldr	r2, [pc, #44]	; (800b5b0 <prvCheckTasksWaitingTermination+0x54>)
 800b582:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b584:	4b0b      	ldr	r3, [pc, #44]	; (800b5b4 <prvCheckTasksWaitingTermination+0x58>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3b01      	subs	r3, #1
 800b58a:	4a0a      	ldr	r2, [pc, #40]	; (800b5b4 <prvCheckTasksWaitingTermination+0x58>)
 800b58c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b58e:	f000 ff89 	bl	800c4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f810 	bl	800b5b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b598:	4b06      	ldr	r3, [pc, #24]	; (800b5b4 <prvCheckTasksWaitingTermination+0x58>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1e1      	bne.n	800b564 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	3708      	adds	r7, #8
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	200026e0 	.word	0x200026e0
 800b5b0:	2000270c 	.word	0x2000270c
 800b5b4:	200026f4 	.word	0x200026f4

0800b5b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d108      	bne.n	800b5dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f001 f91e 	bl	800c810 <vPortFree>
				vPortFree( pxTCB );
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f001 f91b 	bl	800c810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5da:	e018      	b.n	800b60e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d103      	bne.n	800b5ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f001 f912 	bl	800c810 <vPortFree>
	}
 800b5ec:	e00f      	b.n	800b60e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d00a      	beq.n	800b60e <prvDeleteTCB+0x56>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	60fb      	str	r3, [r7, #12]
}
 800b60a:	bf00      	nop
 800b60c:	e7fe      	b.n	800b60c <prvDeleteTCB+0x54>
	}
 800b60e:	bf00      	nop
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
	...

0800b618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b61e:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <prvResetNextTaskUnblockTime+0x38>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d104      	bne.n	800b632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b628:	4b0a      	ldr	r3, [pc, #40]	; (800b654 <prvResetNextTaskUnblockTime+0x3c>)
 800b62a:	f04f 32ff 	mov.w	r2, #4294967295
 800b62e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b630:	e008      	b.n	800b644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b632:	4b07      	ldr	r3, [pc, #28]	; (800b650 <prvResetNextTaskUnblockTime+0x38>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	4a04      	ldr	r2, [pc, #16]	; (800b654 <prvResetNextTaskUnblockTime+0x3c>)
 800b642:	6013      	str	r3, [r2, #0]
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	200026c4 	.word	0x200026c4
 800b654:	2000272c 	.word	0x2000272c

0800b658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b65e:	4b0b      	ldr	r3, [pc, #44]	; (800b68c <xTaskGetSchedulerState+0x34>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d102      	bne.n	800b66c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b666:	2301      	movs	r3, #1
 800b668:	607b      	str	r3, [r7, #4]
 800b66a:	e008      	b.n	800b67e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b66c:	4b08      	ldr	r3, [pc, #32]	; (800b690 <xTaskGetSchedulerState+0x38>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d102      	bne.n	800b67a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b674:	2302      	movs	r3, #2
 800b676:	607b      	str	r3, [r7, #4]
 800b678:	e001      	b.n	800b67e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b67a:	2300      	movs	r3, #0
 800b67c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b67e:	687b      	ldr	r3, [r7, #4]
	}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	20002718 	.word	0x20002718
 800b690:	20002734 	.word	0x20002734

0800b694 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d069      	beq.n	800b77e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ae:	4b36      	ldr	r3, [pc, #216]	; (800b788 <xTaskPriorityInherit+0xf4>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d259      	bcs.n	800b76c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	699b      	ldr	r3, [r3, #24]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	db06      	blt.n	800b6ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c0:	4b31      	ldr	r3, [pc, #196]	; (800b788 <xTaskPriorityInherit+0xf4>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c6:	f1c3 0207 	rsb	r2, r3, #7
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	6959      	ldr	r1, [r3, #20]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4a2b      	ldr	r2, [pc, #172]	; (800b78c <xTaskPriorityInherit+0xf8>)
 800b6e0:	4413      	add	r3, r2
 800b6e2:	4299      	cmp	r1, r3
 800b6e4:	d13a      	bne.n	800b75c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fe faab 	bl	8009c46 <uxListRemove>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d115      	bne.n	800b722 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fa:	4924      	ldr	r1, [pc, #144]	; (800b78c <xTaskPriorityInherit+0xf8>)
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4413      	add	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	440b      	add	r3, r1
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <xTaskPriorityInherit+0x8e>
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b710:	2201      	movs	r2, #1
 800b712:	fa02 f303 	lsl.w	r3, r2, r3
 800b716:	43da      	mvns	r2, r3
 800b718:	4b1d      	ldr	r3, [pc, #116]	; (800b790 <xTaskPriorityInherit+0xfc>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4013      	ands	r3, r2
 800b71e:	4a1c      	ldr	r2, [pc, #112]	; (800b790 <xTaskPriorityInherit+0xfc>)
 800b720:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b722:	4b19      	ldr	r3, [pc, #100]	; (800b788 <xTaskPriorityInherit+0xf4>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b730:	2201      	movs	r2, #1
 800b732:	409a      	lsls	r2, r3
 800b734:	4b16      	ldr	r3, [pc, #88]	; (800b790 <xTaskPriorityInherit+0xfc>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4313      	orrs	r3, r2
 800b73a:	4a15      	ldr	r2, [pc, #84]	; (800b790 <xTaskPriorityInherit+0xfc>)
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4a10      	ldr	r2, [pc, #64]	; (800b78c <xTaskPriorityInherit+0xf8>)
 800b74c:	441a      	add	r2, r3
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	3304      	adds	r3, #4
 800b752:	4619      	mov	r1, r3
 800b754:	4610      	mov	r0, r2
 800b756:	f7fe fa19 	bl	8009b8c <vListInsertEnd>
 800b75a:	e004      	b.n	800b766 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b75c:	4b0a      	ldr	r3, [pc, #40]	; (800b788 <xTaskPriorityInherit+0xf4>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b766:	2301      	movs	r3, #1
 800b768:	60fb      	str	r3, [r7, #12]
 800b76a:	e008      	b.n	800b77e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b770:	4b05      	ldr	r3, [pc, #20]	; (800b788 <xTaskPriorityInherit+0xf4>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	429a      	cmp	r2, r3
 800b778:	d201      	bcs.n	800b77e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b77a:	2301      	movs	r3, #1
 800b77c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b77e:	68fb      	ldr	r3, [r7, #12]
	}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	2000260c 	.word	0x2000260c
 800b78c:	20002610 	.word	0x20002610
 800b790:	20002714 	.word	0x20002714

0800b794 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d06e      	beq.n	800b888 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7aa:	4b3a      	ldr	r3, [pc, #232]	; (800b894 <xTaskPriorityDisinherit+0x100>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d00a      	beq.n	800b7ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	60fb      	str	r3, [r7, #12]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10a      	bne.n	800b7e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	60bb      	str	r3, [r7, #8]
}
 800b7e4:	bf00      	nop
 800b7e6:	e7fe      	b.n	800b7e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ec:	1e5a      	subs	r2, r3, #1
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d044      	beq.n	800b888 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b802:	2b00      	cmp	r3, #0
 800b804:	d140      	bne.n	800b888 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	3304      	adds	r3, #4
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe fa1b 	bl	8009c46 <uxListRemove>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d115      	bne.n	800b842 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81a:	491f      	ldr	r1, [pc, #124]	; (800b898 <xTaskPriorityDisinherit+0x104>)
 800b81c:	4613      	mov	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	440b      	add	r3, r1
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10a      	bne.n	800b842 <xTaskPriorityDisinherit+0xae>
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	2201      	movs	r2, #1
 800b832:	fa02 f303 	lsl.w	r3, r2, r3
 800b836:	43da      	mvns	r2, r3
 800b838:	4b18      	ldr	r3, [pc, #96]	; (800b89c <xTaskPriorityDisinherit+0x108>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4013      	ands	r3, r2
 800b83e:	4a17      	ldr	r2, [pc, #92]	; (800b89c <xTaskPriorityDisinherit+0x108>)
 800b840:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84e:	f1c3 0207 	rsb	r2, r3, #7
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	2201      	movs	r2, #1
 800b85c:	409a      	lsls	r2, r3
 800b85e:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <xTaskPriorityDisinherit+0x108>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4313      	orrs	r3, r2
 800b864:	4a0d      	ldr	r2, [pc, #52]	; (800b89c <xTaskPriorityDisinherit+0x108>)
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86c:	4613      	mov	r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4a08      	ldr	r2, [pc, #32]	; (800b898 <xTaskPriorityDisinherit+0x104>)
 800b876:	441a      	add	r2, r3
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	3304      	adds	r3, #4
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	f7fe f984 	bl	8009b8c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b884:	2301      	movs	r3, #1
 800b886:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b888:	697b      	ldr	r3, [r7, #20]
	}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	2000260c 	.word	0x2000260c
 800b898:	20002610 	.word	0x20002610
 800b89c:	20002714 	.word	0x20002714

0800b8a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b088      	sub	sp, #32
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f000 8083 	beq.w	800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10a      	bne.n	800b8d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	60fb      	str	r3, [r7, #12]
}
 800b8d4:	bf00      	nop
 800b8d6:	e7fe      	b.n	800b8d6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d902      	bls.n	800b8e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	61fb      	str	r3, [r7, #28]
 800b8e6:	e002      	b.n	800b8ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f2:	69fa      	ldr	r2, [r7, #28]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d063      	beq.n	800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d15e      	bne.n	800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b902:	4b31      	ldr	r3, [pc, #196]	; (800b9c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	69ba      	ldr	r2, [r7, #24]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d10a      	bne.n	800b922 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	60bb      	str	r3, [r7, #8]
}
 800b91e:	bf00      	nop
 800b920:	e7fe      	b.n	800b920 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	69fa      	ldr	r2, [r7, #28]
 800b92c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	699b      	ldr	r3, [r3, #24]
 800b932:	2b00      	cmp	r3, #0
 800b934:	db04      	blt.n	800b940 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	f1c3 0207 	rsb	r2, r3, #7
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	6959      	ldr	r1, [r3, #20]
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	4613      	mov	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4a1f      	ldr	r2, [pc, #124]	; (800b9cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b950:	4413      	add	r3, r2
 800b952:	4299      	cmp	r1, r3
 800b954:	d134      	bne.n	800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	3304      	adds	r3, #4
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fe f973 	bl	8009c46 <uxListRemove>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d115      	bne.n	800b992 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96a:	4918      	ldr	r1, [pc, #96]	; (800b9cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	440b      	add	r3, r1
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b980:	2201      	movs	r2, #1
 800b982:	fa02 f303 	lsl.w	r3, r2, r3
 800b986:	43da      	mvns	r2, r3
 800b988:	4b11      	ldr	r3, [pc, #68]	; (800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4013      	ands	r3, r2
 800b98e:	4a10      	ldr	r2, [pc, #64]	; (800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b990:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b996:	2201      	movs	r2, #1
 800b998:	409a      	lsls	r2, r3
 800b99a:	4b0d      	ldr	r3, [pc, #52]	; (800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	4a0b      	ldr	r2, [pc, #44]	; (800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b9a2:	6013      	str	r3, [r2, #0]
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4a06      	ldr	r2, [pc, #24]	; (800b9cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b9b2:	441a      	add	r2, r3
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	4610      	mov	r0, r2
 800b9bc:	f7fe f8e6 	bl	8009b8c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9c0:	bf00      	nop
 800b9c2:	3720      	adds	r7, #32
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	2000260c 	.word	0x2000260c
 800b9cc:	20002610 	.word	0x20002610
 800b9d0:	20002714 	.word	0x20002714

0800b9d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b9d4:	b480      	push	{r7}
 800b9d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b9d8:	4b07      	ldr	r3, [pc, #28]	; (800b9f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d004      	beq.n	800b9ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b9e0:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9e6:	3201      	adds	r2, #1
 800b9e8:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800b9ea:	4b03      	ldr	r3, [pc, #12]	; (800b9f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
	}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	2000260c 	.word	0x2000260c

0800b9fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba06:	4b29      	ldr	r3, [pc, #164]	; (800baac <prvAddCurrentTaskToDelayedList+0xb0>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba0c:	4b28      	ldr	r3, [pc, #160]	; (800bab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3304      	adds	r3, #4
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fe f917 	bl	8009c46 <uxListRemove>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10b      	bne.n	800ba36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ba1e:	4b24      	ldr	r3, [pc, #144]	; (800bab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba24:	2201      	movs	r2, #1
 800ba26:	fa02 f303 	lsl.w	r3, r2, r3
 800ba2a:	43da      	mvns	r2, r3
 800ba2c:	4b21      	ldr	r3, [pc, #132]	; (800bab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4013      	ands	r3, r2
 800ba32:	4a20      	ldr	r2, [pc, #128]	; (800bab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba3c:	d10a      	bne.n	800ba54 <prvAddCurrentTaskToDelayedList+0x58>
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d007      	beq.n	800ba54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba44:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3304      	adds	r3, #4
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	481a      	ldr	r0, [pc, #104]	; (800bab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ba4e:	f7fe f89d 	bl	8009b8c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba52:	e026      	b.n	800baa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4413      	add	r3, r2
 800ba5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba5c:	4b14      	ldr	r3, [pc, #80]	; (800bab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d209      	bcs.n	800ba80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba6c:	4b13      	ldr	r3, [pc, #76]	; (800babc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	4b0f      	ldr	r3, [pc, #60]	; (800bab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3304      	adds	r3, #4
 800ba76:	4619      	mov	r1, r3
 800ba78:	4610      	mov	r0, r2
 800ba7a:	f7fe f8ab 	bl	8009bd4 <vListInsert>
}
 800ba7e:	e010      	b.n	800baa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba80:	4b0f      	ldr	r3, [pc, #60]	; (800bac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	4b0a      	ldr	r3, [pc, #40]	; (800bab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	f7fe f8a1 	bl	8009bd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba92:	4b0c      	ldr	r3, [pc, #48]	; (800bac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d202      	bcs.n	800baa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ba9c:	4a09      	ldr	r2, [pc, #36]	; (800bac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	6013      	str	r3, [r2, #0]
}
 800baa2:	bf00      	nop
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	20002710 	.word	0x20002710
 800bab0:	2000260c 	.word	0x2000260c
 800bab4:	20002714 	.word	0x20002714
 800bab8:	200026f8 	.word	0x200026f8
 800babc:	200026c8 	.word	0x200026c8
 800bac0:	200026c4 	.word	0x200026c4
 800bac4:	2000272c 	.word	0x2000272c

0800bac8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08a      	sub	sp, #40	; 0x28
 800bacc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bace:	2300      	movs	r3, #0
 800bad0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bad2:	f000 fb47 	bl	800c164 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bad6:	4b1c      	ldr	r3, [pc, #112]	; (800bb48 <xTimerCreateTimerTask+0x80>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d021      	beq.n	800bb22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bae6:	1d3a      	adds	r2, r7, #4
 800bae8:	f107 0108 	add.w	r1, r7, #8
 800baec:	f107 030c 	add.w	r3, r7, #12
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7f5 fb2b 	bl	800114c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	9202      	str	r2, [sp, #8]
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	2307      	movs	r3, #7
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	2300      	movs	r3, #0
 800bb06:	460a      	mov	r2, r1
 800bb08:	4910      	ldr	r1, [pc, #64]	; (800bb4c <xTimerCreateTimerTask+0x84>)
 800bb0a:	4811      	ldr	r0, [pc, #68]	; (800bb50 <xTimerCreateTimerTask+0x88>)
 800bb0c:	f7fe ff12 	bl	800a934 <xTaskCreateStatic>
 800bb10:	4603      	mov	r3, r0
 800bb12:	4a10      	ldr	r2, [pc, #64]	; (800bb54 <xTimerCreateTimerTask+0x8c>)
 800bb14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb16:	4b0f      	ldr	r3, [pc, #60]	; (800bb54 <xTimerCreateTimerTask+0x8c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10a      	bne.n	800bb3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	613b      	str	r3, [r7, #16]
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb3e:	697b      	ldr	r3, [r7, #20]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20002770 	.word	0x20002770
 800bb4c:	0800fb94 	.word	0x0800fb94
 800bb50:	0800bd45 	.word	0x0800bd45
 800bb54:	20002774 	.word	0x20002774

0800bb58 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af02      	add	r7, sp, #8
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bb66:	202c      	movs	r0, #44	; 0x2c
 800bb68:	f000 fd8e 	bl	800c688 <pvPortMalloc>
 800bb6c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00d      	beq.n	800bb90 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	9301      	str	r3, [sp, #4]
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	68b9      	ldr	r1, [r7, #8]
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f000 f805 	bl	800bb9a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800bb90:	697b      	ldr	r3, [r7, #20]
	}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b086      	sub	sp, #24
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	60f8      	str	r0, [r7, #12]
 800bba2:	60b9      	str	r1, [r7, #8]
 800bba4:	607a      	str	r2, [r7, #4]
 800bba6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10a      	bne.n	800bbc4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800bbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	617b      	str	r3, [r7, #20]
}
 800bbc0:	bf00      	nop
 800bbc2:	e7fe      	b.n	800bbc2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800bbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d01e      	beq.n	800bc08 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800bbca:	f000 facb 	bl	800c164 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe2:	6a3a      	ldr	r2, [r7, #32]
 800bbe4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fd ffc1 	bl	8009b72 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d008      	beq.n	800bc08 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbfc:	f043 0304 	orr.w	r3, r3, #4
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800bc08:	bf00      	nop
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08a      	sub	sp, #40	; 0x28
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
 800bc1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <xTimerGenericCommand+0x2e>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	f383 8811 	msr	BASEPRI, r3
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	623b      	str	r3, [r7, #32]
}
 800bc3a:	bf00      	nop
 800bc3c:	e7fe      	b.n	800bc3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc3e:	4b1a      	ldr	r3, [pc, #104]	; (800bca8 <xTimerGenericCommand+0x98>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d02a      	beq.n	800bc9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2b05      	cmp	r3, #5
 800bc56:	dc18      	bgt.n	800bc8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc58:	f7ff fcfe 	bl	800b658 <xTaskGetSchedulerState>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d109      	bne.n	800bc76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc62:	4b11      	ldr	r3, [pc, #68]	; (800bca8 <xTimerGenericCommand+0x98>)
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	f107 0114 	add.w	r1, r7, #20
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc6e:	f7fe f959 	bl	8009f24 <xQueueGenericSend>
 800bc72:	6278      	str	r0, [r7, #36]	; 0x24
 800bc74:	e012      	b.n	800bc9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc76:	4b0c      	ldr	r3, [pc, #48]	; (800bca8 <xTimerGenericCommand+0x98>)
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	f107 0114 	add.w	r1, r7, #20
 800bc7e:	2300      	movs	r3, #0
 800bc80:	2200      	movs	r2, #0
 800bc82:	f7fe f94f 	bl	8009f24 <xQueueGenericSend>
 800bc86:	6278      	str	r0, [r7, #36]	; 0x24
 800bc88:	e008      	b.n	800bc9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc8a:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <xTimerGenericCommand+0x98>)
 800bc8c:	6818      	ldr	r0, [r3, #0]
 800bc8e:	f107 0114 	add.w	r1, r7, #20
 800bc92:	2300      	movs	r3, #0
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	f7fe fa43 	bl	800a120 <xQueueGenericSendFromISR>
 800bc9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3728      	adds	r7, #40	; 0x28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20002770 	.word	0x20002770

0800bcac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af02      	add	r7, sp, #8
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcb6:	4b22      	ldr	r3, [pc, #136]	; (800bd40 <prvProcessExpiredTimer+0x94>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fd ffbe 	bl	8009c46 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcd0:	f003 0304 	and.w	r3, r3, #4
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d022      	beq.n	800bd1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	699a      	ldr	r2, [r3, #24]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	18d1      	adds	r1, r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	6978      	ldr	r0, [r7, #20]
 800bce6:	f000 f8d1 	bl	800be8c <prvInsertTimerInActiveList>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d01f      	beq.n	800bd30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	6978      	ldr	r0, [r7, #20]
 800bcfc:	f7ff ff88 	bl	800bc10 <xTimerGenericCommand>
 800bd00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d113      	bne.n	800bd30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	60fb      	str	r3, [r7, #12]
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd24:	f023 0301 	bic.w	r3, r3, #1
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	6978      	ldr	r0, [r7, #20]
 800bd36:	4798      	blx	r3
}
 800bd38:	bf00      	nop
 800bd3a:	3718      	adds	r7, #24
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	20002768 	.word	0x20002768

0800bd44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd4c:	f107 0308 	add.w	r3, r7, #8
 800bd50:	4618      	mov	r0, r3
 800bd52:	f000 f857 	bl	800be04 <prvGetNextExpireTime>
 800bd56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f000 f803 	bl	800bd68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd62:	f000 f8d5 	bl	800bf10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd66:	e7f1      	b.n	800bd4c <prvTimerTask+0x8>

0800bd68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd72:	f7ff f87d 	bl	800ae70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd76:	f107 0308 	add.w	r3, r7, #8
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 f866 	bl	800be4c <prvSampleTimeNow>
 800bd80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d130      	bne.n	800bdea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d10a      	bne.n	800bda4 <prvProcessTimerOrBlockTask+0x3c>
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d806      	bhi.n	800bda4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd96:	f7ff f879 	bl	800ae8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd9a:	68f9      	ldr	r1, [r7, #12]
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7ff ff85 	bl	800bcac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bda2:	e024      	b.n	800bdee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d008      	beq.n	800bdbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bdaa:	4b13      	ldr	r3, [pc, #76]	; (800bdf8 <prvProcessTimerOrBlockTask+0x90>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d101      	bne.n	800bdb8 <prvProcessTimerOrBlockTask+0x50>
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e000      	b.n	800bdba <prvProcessTimerOrBlockTask+0x52>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bdbc:	4b0f      	ldr	r3, [pc, #60]	; (800bdfc <prvProcessTimerOrBlockTask+0x94>)
 800bdbe:	6818      	ldr	r0, [r3, #0]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	4619      	mov	r1, r3
 800bdca:	f7fe fd7f 	bl	800a8cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bdce:	f7ff f85d 	bl	800ae8c <xTaskResumeAll>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d10a      	bne.n	800bdee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bdd8:	4b09      	ldr	r3, [pc, #36]	; (800be00 <prvProcessTimerOrBlockTask+0x98>)
 800bdda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	f3bf 8f6f 	isb	sy
}
 800bde8:	e001      	b.n	800bdee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bdea:	f7ff f84f 	bl	800ae8c <xTaskResumeAll>
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	2000276c 	.word	0x2000276c
 800bdfc:	20002770 	.word	0x20002770
 800be00:	e000ed04 	.word	0xe000ed04

0800be04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be0c:	4b0e      	ldr	r3, [pc, #56]	; (800be48 <prvGetNextExpireTime+0x44>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <prvGetNextExpireTime+0x16>
 800be16:	2201      	movs	r2, #1
 800be18:	e000      	b.n	800be1c <prvGetNextExpireTime+0x18>
 800be1a:	2200      	movs	r2, #0
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d105      	bne.n	800be34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be28:	4b07      	ldr	r3, [pc, #28]	; (800be48 <prvGetNextExpireTime+0x44>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	60fb      	str	r3, [r7, #12]
 800be32:	e001      	b.n	800be38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be34:	2300      	movs	r3, #0
 800be36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be38:	68fb      	ldr	r3, [r7, #12]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	20002768 	.word	0x20002768

0800be4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be54:	f7ff f8b6 	bl	800afc4 <xTaskGetTickCount>
 800be58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be5a:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <prvSampleTimeNow+0x3c>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	429a      	cmp	r2, r3
 800be62:	d205      	bcs.n	800be70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be64:	f000 f91a 	bl	800c09c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	e002      	b.n	800be76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be76:	4a04      	ldr	r2, [pc, #16]	; (800be88 <prvSampleTimeNow+0x3c>)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be7c:	68fb      	ldr	r3, [r7, #12]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20002778 	.word	0x20002778

0800be8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
 800be98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be9a:	2300      	movs	r3, #0
 800be9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	68ba      	ldr	r2, [r7, #8]
 800bea2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d812      	bhi.n	800bed8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	1ad2      	subs	r2, r2, r3
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d302      	bcc.n	800bec6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bec0:	2301      	movs	r3, #1
 800bec2:	617b      	str	r3, [r7, #20]
 800bec4:	e01b      	b.n	800befe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bec6:	4b10      	ldr	r3, [pc, #64]	; (800bf08 <prvInsertTimerInActiveList+0x7c>)
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3304      	adds	r3, #4
 800bece:	4619      	mov	r1, r3
 800bed0:	4610      	mov	r0, r2
 800bed2:	f7fd fe7f 	bl	8009bd4 <vListInsert>
 800bed6:	e012      	b.n	800befe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d206      	bcs.n	800beee <prvInsertTimerInActiveList+0x62>
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d302      	bcc.n	800beee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bee8:	2301      	movs	r3, #1
 800beea:	617b      	str	r3, [r7, #20]
 800beec:	e007      	b.n	800befe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800beee:	4b07      	ldr	r3, [pc, #28]	; (800bf0c <prvInsertTimerInActiveList+0x80>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	3304      	adds	r3, #4
 800bef6:	4619      	mov	r1, r3
 800bef8:	4610      	mov	r0, r2
 800befa:	f7fd fe6b 	bl	8009bd4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800befe:	697b      	ldr	r3, [r7, #20]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3718      	adds	r7, #24
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	2000276c 	.word	0x2000276c
 800bf0c:	20002768 	.word	0x20002768

0800bf10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b08c      	sub	sp, #48	; 0x30
 800bf14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf16:	e0ae      	b.n	800c076 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f2c0 80aa 	blt.w	800c074 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf26:	695b      	ldr	r3, [r3, #20]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d004      	beq.n	800bf36 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	3304      	adds	r3, #4
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fd fe88 	bl	8009c46 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf36:	1d3b      	adds	r3, r7, #4
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff ff87 	bl	800be4c <prvSampleTimeNow>
 800bf3e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	2b09      	cmp	r3, #9
 800bf44:	f200 8097 	bhi.w	800c076 <prvProcessReceivedCommands+0x166>
 800bf48:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <prvProcessReceivedCommands+0x40>)
 800bf4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4e:	bf00      	nop
 800bf50:	0800bf79 	.word	0x0800bf79
 800bf54:	0800bf79 	.word	0x0800bf79
 800bf58:	0800bf79 	.word	0x0800bf79
 800bf5c:	0800bfed 	.word	0x0800bfed
 800bf60:	0800c001 	.word	0x0800c001
 800bf64:	0800c04b 	.word	0x0800c04b
 800bf68:	0800bf79 	.word	0x0800bf79
 800bf6c:	0800bf79 	.word	0x0800bf79
 800bf70:	0800bfed 	.word	0x0800bfed
 800bf74:	0800c001 	.word	0x0800c001
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf7e:	f043 0301 	orr.w	r3, r3, #1
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	18d1      	adds	r1, r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6a3a      	ldr	r2, [r7, #32]
 800bf96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf98:	f7ff ff78 	bl	800be8c <prvInsertTimerInActiveList>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d069      	beq.n	800c076 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfa8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfb0:	f003 0304 	and.w	r3, r3, #4
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d05e      	beq.n	800c076 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	441a      	add	r2, r3
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfca:	f7ff fe21 	bl	800bc10 <xTimerGenericCommand>
 800bfce:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d14f      	bne.n	800c076 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	61bb      	str	r3, [r7, #24]
}
 800bfe8:	bf00      	nop
 800bfea:	e7fe      	b.n	800bfea <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bff2:	f023 0301 	bic.w	r3, r3, #1
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bffe:	e03a      	b.n	800c076 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c006:	f043 0301 	orr.w	r3, r3, #1
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c016:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	617b      	str	r3, [r7, #20]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c038:	699a      	ldr	r2, [r3, #24]
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	18d1      	adds	r1, r2, r3
 800c03e:	6a3b      	ldr	r3, [r7, #32]
 800c040:	6a3a      	ldr	r2, [r7, #32]
 800c042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c044:	f7ff ff22 	bl	800be8c <prvInsertTimerInActiveList>
					break;
 800c048:	e015      	b.n	800c076 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c050:	f003 0302 	and.w	r3, r3, #2
 800c054:	2b00      	cmp	r3, #0
 800c056:	d103      	bne.n	800c060 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800c058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c05a:	f000 fbd9 	bl	800c810 <vPortFree>
 800c05e:	e00a      	b.n	800c076 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c066:	f023 0301 	bic.w	r3, r3, #1
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c072:	e000      	b.n	800c076 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c074:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c076:	4b08      	ldr	r3, [pc, #32]	; (800c098 <prvProcessReceivedCommands+0x188>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f107 0108 	add.w	r1, r7, #8
 800c07e:	2200      	movs	r2, #0
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe f8e5 	bl	800a250 <xQueueReceive>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f47f af45 	bne.w	800bf18 <prvProcessReceivedCommands+0x8>
	}
}
 800c08e:	bf00      	nop
 800c090:	bf00      	nop
 800c092:	3728      	adds	r7, #40	; 0x28
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	20002770 	.word	0x20002770

0800c09c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0a2:	e048      	b.n	800c136 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0a4:	4b2d      	ldr	r3, [pc, #180]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ae:	4b2b      	ldr	r3, [pc, #172]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fd fdc2 	bl	8009c46 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0d0:	f003 0304 	and.w	r3, r3, #4
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d02e      	beq.n	800c136 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	4413      	add	r3, r2
 800c0e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d90e      	bls.n	800c108 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0f6:	4b19      	ldr	r3, [pc, #100]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	4619      	mov	r1, r3
 800c100:	4610      	mov	r0, r2
 800c102:	f7fd fd67 	bl	8009bd4 <vListInsert>
 800c106:	e016      	b.n	800c136 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c108:	2300      	movs	r3, #0
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	2300      	movs	r3, #0
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	2100      	movs	r1, #0
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f7ff fd7c 	bl	800bc10 <xTimerGenericCommand>
 800c118:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10a      	bne.n	800c136 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	603b      	str	r3, [r7, #0]
}
 800c132:	bf00      	nop
 800c134:	e7fe      	b.n	800c134 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c136:	4b09      	ldr	r3, [pc, #36]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1b1      	bne.n	800c0a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c140:	4b06      	ldr	r3, [pc, #24]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c146:	4b06      	ldr	r3, [pc, #24]	; (800c160 <prvSwitchTimerLists+0xc4>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a04      	ldr	r2, [pc, #16]	; (800c15c <prvSwitchTimerLists+0xc0>)
 800c14c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c14e:	4a04      	ldr	r2, [pc, #16]	; (800c160 <prvSwitchTimerLists+0xc4>)
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	6013      	str	r3, [r2, #0]
}
 800c154:	bf00      	nop
 800c156:	3718      	adds	r7, #24
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	20002768 	.word	0x20002768
 800c160:	2000276c 	.word	0x2000276c

0800c164 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c16a:	f000 f96b 	bl	800c444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c16e:	4b15      	ldr	r3, [pc, #84]	; (800c1c4 <prvCheckForValidListAndQueue+0x60>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d120      	bne.n	800c1b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c176:	4814      	ldr	r0, [pc, #80]	; (800c1c8 <prvCheckForValidListAndQueue+0x64>)
 800c178:	f7fd fcdb 	bl	8009b32 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c17c:	4813      	ldr	r0, [pc, #76]	; (800c1cc <prvCheckForValidListAndQueue+0x68>)
 800c17e:	f7fd fcd8 	bl	8009b32 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c182:	4b13      	ldr	r3, [pc, #76]	; (800c1d0 <prvCheckForValidListAndQueue+0x6c>)
 800c184:	4a10      	ldr	r2, [pc, #64]	; (800c1c8 <prvCheckForValidListAndQueue+0x64>)
 800c186:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c188:	4b12      	ldr	r3, [pc, #72]	; (800c1d4 <prvCheckForValidListAndQueue+0x70>)
 800c18a:	4a10      	ldr	r2, [pc, #64]	; (800c1cc <prvCheckForValidListAndQueue+0x68>)
 800c18c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c18e:	2300      	movs	r3, #0
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	4b11      	ldr	r3, [pc, #68]	; (800c1d8 <prvCheckForValidListAndQueue+0x74>)
 800c194:	4a11      	ldr	r2, [pc, #68]	; (800c1dc <prvCheckForValidListAndQueue+0x78>)
 800c196:	210c      	movs	r1, #12
 800c198:	200a      	movs	r0, #10
 800c19a:	f7fd fde7 	bl	8009d6c <xQueueGenericCreateStatic>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	4a08      	ldr	r2, [pc, #32]	; (800c1c4 <prvCheckForValidListAndQueue+0x60>)
 800c1a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c1a4:	4b07      	ldr	r3, [pc, #28]	; (800c1c4 <prvCheckForValidListAndQueue+0x60>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d005      	beq.n	800c1b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c1ac:	4b05      	ldr	r3, [pc, #20]	; (800c1c4 <prvCheckForValidListAndQueue+0x60>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	490b      	ldr	r1, [pc, #44]	; (800c1e0 <prvCheckForValidListAndQueue+0x7c>)
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fe fb60 	bl	800a878 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1b8:	f000 f974 	bl	800c4a4 <vPortExitCritical>
}
 800c1bc:	bf00      	nop
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20002770 	.word	0x20002770
 800c1c8:	20002740 	.word	0x20002740
 800c1cc:	20002754 	.word	0x20002754
 800c1d0:	20002768 	.word	0x20002768
 800c1d4:	2000276c 	.word	0x2000276c
 800c1d8:	200027f4 	.word	0x200027f4
 800c1dc:	2000277c 	.word	0x2000277c
 800c1e0:	0800fb9c 	.word	0x0800fb9c

0800c1e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	3b04      	subs	r3, #4
 800c1f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3b04      	subs	r3, #4
 800c202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	f023 0201 	bic.w	r2, r3, #1
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3b04      	subs	r3, #4
 800c212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c214:	4a0c      	ldr	r2, [pc, #48]	; (800c248 <pxPortInitialiseStack+0x64>)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	3b14      	subs	r3, #20
 800c21e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3b04      	subs	r3, #4
 800c22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f06f 0202 	mvn.w	r2, #2
 800c232:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	3b20      	subs	r3, #32
 800c238:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c23a:	68fb      	ldr	r3, [r7, #12]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	0800c24d 	.word	0x0800c24d

0800c24c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c256:	4b12      	ldr	r3, [pc, #72]	; (800c2a0 <prvTaskExitError+0x54>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25e:	d00a      	beq.n	800c276 <prvTaskExitError+0x2a>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	60fb      	str	r3, [r7, #12]
}
 800c272:	bf00      	nop
 800c274:	e7fe      	b.n	800c274 <prvTaskExitError+0x28>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	60bb      	str	r3, [r7, #8]
}
 800c288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c28a:	bf00      	nop
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d0fc      	beq.n	800c28c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c292:	bf00      	nop
 800c294:	bf00      	nop
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	20000064 	.word	0x20000064
	...

0800c2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2b0:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <pxCurrentTCBConst2>)
 800c2b2:	6819      	ldr	r1, [r3, #0]
 800c2b4:	6808      	ldr	r0, [r1, #0]
 800c2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ba:	f380 8809 	msr	PSP, r0
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	f04f 0000 	mov.w	r0, #0
 800c2c6:	f380 8811 	msr	BASEPRI, r0
 800c2ca:	4770      	bx	lr
 800c2cc:	f3af 8000 	nop.w

0800c2d0 <pxCurrentTCBConst2>:
 800c2d0:	2000260c 	.word	0x2000260c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop

0800c2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2d8:	4808      	ldr	r0, [pc, #32]	; (800c2fc <prvPortStartFirstTask+0x24>)
 800c2da:	6800      	ldr	r0, [r0, #0]
 800c2dc:	6800      	ldr	r0, [r0, #0]
 800c2de:	f380 8808 	msr	MSP, r0
 800c2e2:	f04f 0000 	mov.w	r0, #0
 800c2e6:	f380 8814 	msr	CONTROL, r0
 800c2ea:	b662      	cpsie	i
 800c2ec:	b661      	cpsie	f
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	df00      	svc	0
 800c2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2fa:	bf00      	nop
 800c2fc:	e000ed08 	.word	0xe000ed08

0800c300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c306:	4b46      	ldr	r3, [pc, #280]	; (800c420 <xPortStartScheduler+0x120>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a46      	ldr	r2, [pc, #280]	; (800c424 <xPortStartScheduler+0x124>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d10a      	bne.n	800c326 <xPortStartScheduler+0x26>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	613b      	str	r3, [r7, #16]
}
 800c322:	bf00      	nop
 800c324:	e7fe      	b.n	800c324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c326:	4b3e      	ldr	r3, [pc, #248]	; (800c420 <xPortStartScheduler+0x120>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a3f      	ldr	r2, [pc, #252]	; (800c428 <xPortStartScheduler+0x128>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d10a      	bne.n	800c346 <xPortStartScheduler+0x46>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	60fb      	str	r3, [r7, #12]
}
 800c342:	bf00      	nop
 800c344:	e7fe      	b.n	800c344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c346:	4b39      	ldr	r3, [pc, #228]	; (800c42c <xPortStartScheduler+0x12c>)
 800c348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	22ff      	movs	r2, #255	; 0xff
 800c356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c360:	78fb      	ldrb	r3, [r7, #3]
 800c362:	b2db      	uxtb	r3, r3
 800c364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	4b31      	ldr	r3, [pc, #196]	; (800c430 <xPortStartScheduler+0x130>)
 800c36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c36e:	4b31      	ldr	r3, [pc, #196]	; (800c434 <xPortStartScheduler+0x134>)
 800c370:	2207      	movs	r2, #7
 800c372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c374:	e009      	b.n	800c38a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c376:	4b2f      	ldr	r3, [pc, #188]	; (800c434 <xPortStartScheduler+0x134>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	4a2d      	ldr	r2, [pc, #180]	; (800c434 <xPortStartScheduler+0x134>)
 800c37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c380:	78fb      	ldrb	r3, [r7, #3]
 800c382:	b2db      	uxtb	r3, r3
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	b2db      	uxtb	r3, r3
 800c388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c38a:	78fb      	ldrb	r3, [r7, #3]
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c392:	2b80      	cmp	r3, #128	; 0x80
 800c394:	d0ef      	beq.n	800c376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c396:	4b27      	ldr	r3, [pc, #156]	; (800c434 <xPortStartScheduler+0x134>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f1c3 0307 	rsb	r3, r3, #7
 800c39e:	2b04      	cmp	r3, #4
 800c3a0:	d00a      	beq.n	800c3b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	60bb      	str	r3, [r7, #8]
}
 800c3b4:	bf00      	nop
 800c3b6:	e7fe      	b.n	800c3b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3b8:	4b1e      	ldr	r3, [pc, #120]	; (800c434 <xPortStartScheduler+0x134>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	021b      	lsls	r3, r3, #8
 800c3be:	4a1d      	ldr	r2, [pc, #116]	; (800c434 <xPortStartScheduler+0x134>)
 800c3c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3c2:	4b1c      	ldr	r3, [pc, #112]	; (800c434 <xPortStartScheduler+0x134>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3ca:	4a1a      	ldr	r2, [pc, #104]	; (800c434 <xPortStartScheduler+0x134>)
 800c3cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	b2da      	uxtb	r2, r3
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3d6:	4b18      	ldr	r3, [pc, #96]	; (800c438 <xPortStartScheduler+0x138>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a17      	ldr	r2, [pc, #92]	; (800c438 <xPortStartScheduler+0x138>)
 800c3dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3e2:	4b15      	ldr	r3, [pc, #84]	; (800c438 <xPortStartScheduler+0x138>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a14      	ldr	r2, [pc, #80]	; (800c438 <xPortStartScheduler+0x138>)
 800c3e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3ee:	f000 f8dd 	bl	800c5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3f2:	4b12      	ldr	r3, [pc, #72]	; (800c43c <xPortStartScheduler+0x13c>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3f8:	f000 f8fc 	bl	800c5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3fc:	4b10      	ldr	r3, [pc, #64]	; (800c440 <xPortStartScheduler+0x140>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a0f      	ldr	r2, [pc, #60]	; (800c440 <xPortStartScheduler+0x140>)
 800c402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c408:	f7ff ff66 	bl	800c2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c40c:	f7fe fea2 	bl	800b154 <vTaskSwitchContext>
	prvTaskExitError();
 800c410:	f7ff ff1c 	bl	800c24c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3718      	adds	r7, #24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	e000ed00 	.word	0xe000ed00
 800c424:	410fc271 	.word	0x410fc271
 800c428:	410fc270 	.word	0x410fc270
 800c42c:	e000e400 	.word	0xe000e400
 800c430:	20002844 	.word	0x20002844
 800c434:	20002848 	.word	0x20002848
 800c438:	e000ed20 	.word	0xe000ed20
 800c43c:	20000064 	.word	0x20000064
 800c440:	e000ef34 	.word	0xe000ef34

0800c444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
	__asm volatile
 800c44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	607b      	str	r3, [r7, #4]
}
 800c45c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c45e:	4b0f      	ldr	r3, [pc, #60]	; (800c49c <vPortEnterCritical+0x58>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	3301      	adds	r3, #1
 800c464:	4a0d      	ldr	r2, [pc, #52]	; (800c49c <vPortEnterCritical+0x58>)
 800c466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c468:	4b0c      	ldr	r3, [pc, #48]	; (800c49c <vPortEnterCritical+0x58>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d10f      	bne.n	800c490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c470:	4b0b      	ldr	r3, [pc, #44]	; (800c4a0 <vPortEnterCritical+0x5c>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	b2db      	uxtb	r3, r3
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00a      	beq.n	800c490 <vPortEnterCritical+0x4c>
	__asm volatile
 800c47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	603b      	str	r3, [r7, #0]
}
 800c48c:	bf00      	nop
 800c48e:	e7fe      	b.n	800c48e <vPortEnterCritical+0x4a>
	}
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	20000064 	.word	0x20000064
 800c4a0:	e000ed04 	.word	0xe000ed04

0800c4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4aa:	4b12      	ldr	r3, [pc, #72]	; (800c4f4 <vPortExitCritical+0x50>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10a      	bne.n	800c4c8 <vPortExitCritical+0x24>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	607b      	str	r3, [r7, #4]
}
 800c4c4:	bf00      	nop
 800c4c6:	e7fe      	b.n	800c4c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c4c8:	4b0a      	ldr	r3, [pc, #40]	; (800c4f4 <vPortExitCritical+0x50>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	4a09      	ldr	r2, [pc, #36]	; (800c4f4 <vPortExitCritical+0x50>)
 800c4d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4d2:	4b08      	ldr	r3, [pc, #32]	; (800c4f4 <vPortExitCritical+0x50>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d105      	bne.n	800c4e6 <vPortExitCritical+0x42>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	f383 8811 	msr	BASEPRI, r3
}
 800c4e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4e6:	bf00      	nop
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	20000064 	.word	0x20000064
	...

0800c500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c500:	f3ef 8009 	mrs	r0, PSP
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	4b15      	ldr	r3, [pc, #84]	; (800c560 <pxCurrentTCBConst>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	f01e 0f10 	tst.w	lr, #16
 800c510:	bf08      	it	eq
 800c512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51a:	6010      	str	r0, [r2, #0]
 800c51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c524:	f380 8811 	msr	BASEPRI, r0
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f7fe fe10 	bl	800b154 <vTaskSwitchContext>
 800c534:	f04f 0000 	mov.w	r0, #0
 800c538:	f380 8811 	msr	BASEPRI, r0
 800c53c:	bc09      	pop	{r0, r3}
 800c53e:	6819      	ldr	r1, [r3, #0]
 800c540:	6808      	ldr	r0, [r1, #0]
 800c542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c546:	f01e 0f10 	tst.w	lr, #16
 800c54a:	bf08      	it	eq
 800c54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c550:	f380 8809 	msr	PSP, r0
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	f3af 8000 	nop.w

0800c560 <pxCurrentTCBConst>:
 800c560:	2000260c 	.word	0x2000260c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop

0800c568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	607b      	str	r3, [r7, #4]
}
 800c580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c582:	f7fe fd2f 	bl	800afe4 <xTaskIncrementTick>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d003      	beq.n	800c594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c58c:	4b06      	ldr	r3, [pc, #24]	; (800c5a8 <SysTick_Handler+0x40>)
 800c58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c592:	601a      	str	r2, [r3, #0]
 800c594:	2300      	movs	r3, #0
 800c596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	f383 8811 	msr	BASEPRI, r3
}
 800c59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c5a0:	bf00      	nop
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5b0:	4b0b      	ldr	r3, [pc, #44]	; (800c5e0 <vPortSetupTimerInterrupt+0x34>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5b6:	4b0b      	ldr	r3, [pc, #44]	; (800c5e4 <vPortSetupTimerInterrupt+0x38>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <vPortSetupTimerInterrupt+0x3c>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a0a      	ldr	r2, [pc, #40]	; (800c5ec <vPortSetupTimerInterrupt+0x40>)
 800c5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c6:	099b      	lsrs	r3, r3, #6
 800c5c8:	4a09      	ldr	r2, [pc, #36]	; (800c5f0 <vPortSetupTimerInterrupt+0x44>)
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5ce:	4b04      	ldr	r3, [pc, #16]	; (800c5e0 <vPortSetupTimerInterrupt+0x34>)
 800c5d0:	2207      	movs	r2, #7
 800c5d2:	601a      	str	r2, [r3, #0]
}
 800c5d4:	bf00      	nop
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	e000e010 	.word	0xe000e010
 800c5e4:	e000e018 	.word	0xe000e018
 800c5e8:	20000000 	.word	0x20000000
 800c5ec:	10624dd3 	.word	0x10624dd3
 800c5f0:	e000e014 	.word	0xe000e014

0800c5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c604 <vPortEnableVFP+0x10>
 800c5f8:	6801      	ldr	r1, [r0, #0]
 800c5fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c5fe:	6001      	str	r1, [r0, #0]
 800c600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c602:	bf00      	nop
 800c604:	e000ed88 	.word	0xe000ed88

0800c608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c60e:	f3ef 8305 	mrs	r3, IPSR
 800c612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b0f      	cmp	r3, #15
 800c618:	d914      	bls.n	800c644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c61a:	4a17      	ldr	r2, [pc, #92]	; (800c678 <vPortValidateInterruptPriority+0x70>)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	4413      	add	r3, r2
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c624:	4b15      	ldr	r3, [pc, #84]	; (800c67c <vPortValidateInterruptPriority+0x74>)
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	7afa      	ldrb	r2, [r7, #11]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d20a      	bcs.n	800c644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	607b      	str	r3, [r7, #4]
}
 800c640:	bf00      	nop
 800c642:	e7fe      	b.n	800c642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c644:	4b0e      	ldr	r3, [pc, #56]	; (800c680 <vPortValidateInterruptPriority+0x78>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c64c:	4b0d      	ldr	r3, [pc, #52]	; (800c684 <vPortValidateInterruptPriority+0x7c>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	429a      	cmp	r2, r3
 800c652:	d90a      	bls.n	800c66a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	603b      	str	r3, [r7, #0]
}
 800c666:	bf00      	nop
 800c668:	e7fe      	b.n	800c668 <vPortValidateInterruptPriority+0x60>
	}
 800c66a:	bf00      	nop
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	e000e3f0 	.word	0xe000e3f0
 800c67c:	20002844 	.word	0x20002844
 800c680:	e000ed0c 	.word	0xe000ed0c
 800c684:	20002848 	.word	0x20002848

0800c688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b08a      	sub	sp, #40	; 0x28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c690:	2300      	movs	r3, #0
 800c692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c694:	f7fe fbec 	bl	800ae70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c698:	4b58      	ldr	r3, [pc, #352]	; (800c7fc <pvPortMalloc+0x174>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c6a0:	f000 f910 	bl	800c8c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c6a4:	4b56      	ldr	r3, [pc, #344]	; (800c800 <pvPortMalloc+0x178>)
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f040 808e 	bne.w	800c7ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d01d      	beq.n	800c6f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c6b8:	2208      	movs	r2, #8
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4413      	add	r3, r2
 800c6be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f003 0307 	and.w	r3, r3, #7
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d014      	beq.n	800c6f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f023 0307 	bic.w	r3, r3, #7
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f003 0307 	and.w	r3, r3, #7
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <pvPortMalloc+0x6c>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	617b      	str	r3, [r7, #20]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d069      	beq.n	800c7ce <pvPortMalloc+0x146>
 800c6fa:	4b42      	ldr	r3, [pc, #264]	; (800c804 <pvPortMalloc+0x17c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	429a      	cmp	r2, r3
 800c702:	d864      	bhi.n	800c7ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c704:	4b40      	ldr	r3, [pc, #256]	; (800c808 <pvPortMalloc+0x180>)
 800c706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c708:	4b3f      	ldr	r3, [pc, #252]	; (800c808 <pvPortMalloc+0x180>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c70e:	e004      	b.n	800c71a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	429a      	cmp	r2, r3
 800c722:	d903      	bls.n	800c72c <pvPortMalloc+0xa4>
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1f1      	bne.n	800c710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c72c:	4b33      	ldr	r3, [pc, #204]	; (800c7fc <pvPortMalloc+0x174>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c732:	429a      	cmp	r2, r3
 800c734:	d04b      	beq.n	800c7ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c736:	6a3b      	ldr	r3, [r7, #32]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2208      	movs	r2, #8
 800c73c:	4413      	add	r3, r2
 800c73e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	6a3b      	ldr	r3, [r7, #32]
 800c746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	1ad2      	subs	r2, r2, r3
 800c750:	2308      	movs	r3, #8
 800c752:	005b      	lsls	r3, r3, #1
 800c754:	429a      	cmp	r2, r3
 800c756:	d91f      	bls.n	800c798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4413      	add	r3, r2
 800c75e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	f003 0307 	and.w	r3, r3, #7
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00a      	beq.n	800c780 <pvPortMalloc+0xf8>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	613b      	str	r3, [r7, #16]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	685a      	ldr	r2, [r3, #4]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	1ad2      	subs	r2, r2, r3
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c792:	69b8      	ldr	r0, [r7, #24]
 800c794:	f000 f8f8 	bl	800c988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c798:	4b1a      	ldr	r3, [pc, #104]	; (800c804 <pvPortMalloc+0x17c>)
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	4a18      	ldr	r2, [pc, #96]	; (800c804 <pvPortMalloc+0x17c>)
 800c7a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c7a6:	4b17      	ldr	r3, [pc, #92]	; (800c804 <pvPortMalloc+0x17c>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	4b18      	ldr	r3, [pc, #96]	; (800c80c <pvPortMalloc+0x184>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d203      	bcs.n	800c7ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c7b2:	4b14      	ldr	r3, [pc, #80]	; (800c804 <pvPortMalloc+0x17c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a15      	ldr	r2, [pc, #84]	; (800c80c <pvPortMalloc+0x184>)
 800c7b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	4b10      	ldr	r3, [pc, #64]	; (800c800 <pvPortMalloc+0x178>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	431a      	orrs	r2, r3
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7ce:	f7fe fb5d 	bl	800ae8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	f003 0307 	and.w	r3, r3, #7
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00a      	beq.n	800c7f2 <pvPortMalloc+0x16a>
	__asm volatile
 800c7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e0:	f383 8811 	msr	BASEPRI, r3
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	f3bf 8f4f 	dsb	sy
 800c7ec:	60fb      	str	r3, [r7, #12]
}
 800c7ee:	bf00      	nop
 800c7f0:	e7fe      	b.n	800c7f0 <pvPortMalloc+0x168>
	return pvReturn;
 800c7f2:	69fb      	ldr	r3, [r7, #28]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3728      	adds	r7, #40	; 0x28
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20021c54 	.word	0x20021c54
 800c800:	20021c60 	.word	0x20021c60
 800c804:	20021c58 	.word	0x20021c58
 800c808:	20021c4c 	.word	0x20021c4c
 800c80c:	20021c5c 	.word	0x20021c5c

0800c810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d048      	beq.n	800c8b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c822:	2308      	movs	r3, #8
 800c824:	425b      	negs	r3, r3
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	4413      	add	r3, r2
 800c82a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	685a      	ldr	r2, [r3, #4]
 800c834:	4b21      	ldr	r3, [pc, #132]	; (800c8bc <vPortFree+0xac>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4013      	ands	r3, r2
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10a      	bne.n	800c854 <vPortFree+0x44>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	60fb      	str	r3, [r7, #12]
}
 800c850:	bf00      	nop
 800c852:	e7fe      	b.n	800c852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00a      	beq.n	800c872 <vPortFree+0x62>
	__asm volatile
 800c85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c860:	f383 8811 	msr	BASEPRI, r3
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	60bb      	str	r3, [r7, #8]
}
 800c86e:	bf00      	nop
 800c870:	e7fe      	b.n	800c870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	685a      	ldr	r2, [r3, #4]
 800c876:	4b11      	ldr	r3, [pc, #68]	; (800c8bc <vPortFree+0xac>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4013      	ands	r3, r2
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d019      	beq.n	800c8b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d115      	bne.n	800c8b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	4b0b      	ldr	r3, [pc, #44]	; (800c8bc <vPortFree+0xac>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	43db      	mvns	r3, r3
 800c892:	401a      	ands	r2, r3
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c898:	f7fe faea 	bl	800ae70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	685a      	ldr	r2, [r3, #4]
 800c8a0:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <vPortFree+0xb0>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	4a06      	ldr	r2, [pc, #24]	; (800c8c0 <vPortFree+0xb0>)
 800c8a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c8aa:	6938      	ldr	r0, [r7, #16]
 800c8ac:	f000 f86c 	bl	800c988 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c8b0:	f7fe faec 	bl	800ae8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8b4:	bf00      	nop
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20021c60 	.word	0x20021c60
 800c8c0:	20021c58 	.word	0x20021c58

0800c8c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8ca:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800c8ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8d0:	4b27      	ldr	r3, [pc, #156]	; (800c970 <prvHeapInit+0xac>)
 800c8d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f003 0307 	and.w	r3, r3, #7
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00c      	beq.n	800c8f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	3307      	adds	r3, #7
 800c8e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f023 0307 	bic.w	r3, r3, #7
 800c8ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	4a1f      	ldr	r2, [pc, #124]	; (800c970 <prvHeapInit+0xac>)
 800c8f4:	4413      	add	r3, r2
 800c8f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8fc:	4a1d      	ldr	r2, [pc, #116]	; (800c974 <prvHeapInit+0xb0>)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c902:	4b1c      	ldr	r3, [pc, #112]	; (800c974 <prvHeapInit+0xb0>)
 800c904:	2200      	movs	r2, #0
 800c906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	4413      	add	r3, r2
 800c90e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c910:	2208      	movs	r2, #8
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	1a9b      	subs	r3, r3, r2
 800c916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f023 0307 	bic.w	r3, r3, #7
 800c91e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	4a15      	ldr	r2, [pc, #84]	; (800c978 <prvHeapInit+0xb4>)
 800c924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c926:	4b14      	ldr	r3, [pc, #80]	; (800c978 <prvHeapInit+0xb4>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2200      	movs	r2, #0
 800c92c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c92e:	4b12      	ldr	r3, [pc, #72]	; (800c978 <prvHeapInit+0xb4>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	1ad2      	subs	r2, r2, r3
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c944:	4b0c      	ldr	r3, [pc, #48]	; (800c978 <prvHeapInit+0xb4>)
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	4a0a      	ldr	r2, [pc, #40]	; (800c97c <prvHeapInit+0xb8>)
 800c952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	4a09      	ldr	r2, [pc, #36]	; (800c980 <prvHeapInit+0xbc>)
 800c95a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c95c:	4b09      	ldr	r3, [pc, #36]	; (800c984 <prvHeapInit+0xc0>)
 800c95e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c962:	601a      	str	r2, [r3, #0]
}
 800c964:	bf00      	nop
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	2000284c 	.word	0x2000284c
 800c974:	20021c4c 	.word	0x20021c4c
 800c978:	20021c54 	.word	0x20021c54
 800c97c:	20021c5c 	.word	0x20021c5c
 800c980:	20021c58 	.word	0x20021c58
 800c984:	20021c60 	.word	0x20021c60

0800c988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c990:	4b28      	ldr	r3, [pc, #160]	; (800ca34 <prvInsertBlockIntoFreeList+0xac>)
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	e002      	b.n	800c99c <prvInsertBlockIntoFreeList+0x14>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d8f7      	bhi.n	800c996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d108      	bne.n	800c9ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	441a      	add	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	441a      	add	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d118      	bne.n	800ca10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	4b15      	ldr	r3, [pc, #84]	; (800ca38 <prvInsertBlockIntoFreeList+0xb0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d00d      	beq.n	800ca06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	441a      	add	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	e008      	b.n	800ca18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca06:	4b0c      	ldr	r3, [pc, #48]	; (800ca38 <prvInsertBlockIntoFreeList+0xb0>)
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	e003      	b.n	800ca18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d002      	beq.n	800ca26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca26:	bf00      	nop
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	20021c4c 	.word	0x20021c4c
 800ca38:	20021c54 	.word	0x20021c54

0800ca3c <I2C_Scan>:
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
 800ca46:	2300      	movs	r3, #0
 800ca48:	81fb      	strh	r3, [r7, #14]
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	737b      	strb	r3, [r7, #13]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	81fb      	strh	r3, [r7, #14]
 800ca52:	e014      	b.n	800ca7e <I2C_Scan+0x42>
 800ca54:	89f9      	ldrh	r1, [r7, #14]
 800ca56:	2314      	movs	r3, #20
 800ca58:	2201      	movs	r2, #1
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7f8 fec2 	bl	80057e4 <HAL_I2C_IsDeviceReady>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d108      	bne.n	800ca78 <I2C_Scan+0x3c>
 800ca66:	7b7b      	ldrb	r3, [r7, #13]
 800ca68:	683a      	ldr	r2, [r7, #0]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	89fa      	ldrh	r2, [r7, #14]
 800ca6e:	b2d2      	uxtb	r2, r2
 800ca70:	701a      	strb	r2, [r3, #0]
 800ca72:	7b7b      	ldrb	r3, [r7, #13]
 800ca74:	3301      	adds	r3, #1
 800ca76:	737b      	strb	r3, [r7, #13]
 800ca78:	89fb      	ldrh	r3, [r7, #14]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	81fb      	strh	r3, [r7, #14]
 800ca7e:	89fb      	ldrh	r3, [r7, #14]
 800ca80:	2bff      	cmp	r3, #255	; 0xff
 800ca82:	d9e7      	bls.n	800ca54 <I2C_Scan+0x18>
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <Init>:
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b088      	sub	sp, #32
 800ca92:	af04      	add	r7, sp, #16
 800ca94:	6078      	str	r0, [r7, #4]
 800ca96:	2380      	movs	r3, #128	; 0x80
 800ca98:	733b      	strb	r3, [r7, #12]
 800ca9a:	2332      	movs	r3, #50	; 0x32
 800ca9c:	9302      	str	r3, [sp, #8]
 800ca9e:	2301      	movs	r3, #1
 800caa0:	9301      	str	r3, [sp, #4]
 800caa2:	f107 030c 	add.w	r3, r7, #12
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	2301      	movs	r3, #1
 800caaa:	226b      	movs	r2, #107	; 0x6b
 800caac:	21d0      	movs	r1, #208	; 0xd0
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7f8 fb78 	bl	80051a4 <HAL_I2C_Mem_Write>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d001      	beq.n	800cabe <Init+0x30>
 800caba:	f7f5 f895 	bl	8001be8 <Error_Handler>
 800cabe:	2064      	movs	r0, #100	; 0x64
 800cac0:	f7f7 f8d8 	bl	8003c74 <HAL_Delay>
 800cac4:	2301      	movs	r3, #1
 800cac6:	733b      	strb	r3, [r7, #12]
 800cac8:	2332      	movs	r3, #50	; 0x32
 800caca:	9302      	str	r3, [sp, #8]
 800cacc:	2301      	movs	r3, #1
 800cace:	9301      	str	r3, [sp, #4]
 800cad0:	f107 030c 	add.w	r3, r7, #12
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	2301      	movs	r3, #1
 800cad8:	226b      	movs	r2, #107	; 0x6b
 800cada:	21d0      	movs	r1, #208	; 0xd0
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7f8 fb61 	bl	80051a4 <HAL_I2C_Mem_Write>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <Init+0x5e>
 800cae8:	f7f5 f87e 	bl	8001be8 <Error_Handler>
 800caec:	2302      	movs	r3, #2
 800caee:	733b      	strb	r3, [r7, #12]
 800caf0:	2332      	movs	r3, #50	; 0x32
 800caf2:	9302      	str	r3, [sp, #8]
 800caf4:	2301      	movs	r3, #1
 800caf6:	9301      	str	r3, [sp, #4]
 800caf8:	f107 030c 	add.w	r3, r7, #12
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	2301      	movs	r3, #1
 800cb00:	2237      	movs	r2, #55	; 0x37
 800cb02:	21d0      	movs	r1, #208	; 0xd0
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7f8 fb4d 	bl	80051a4 <HAL_I2C_Mem_Write>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d001      	beq.n	800cb14 <Init+0x86>
 800cb10:	f7f5 f86a 	bl	8001be8 <Error_Handler>
 800cb14:	2316      	movs	r3, #22
 800cb16:	733b      	strb	r3, [r7, #12]
 800cb18:	2332      	movs	r3, #50	; 0x32
 800cb1a:	9302      	str	r3, [sp, #8]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	9301      	str	r3, [sp, #4]
 800cb20:	f107 030c 	add.w	r3, r7, #12
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	2301      	movs	r3, #1
 800cb28:	220a      	movs	r2, #10
 800cb2a:	2118      	movs	r1, #24
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7f8 fb39 	bl	80051a4 <HAL_I2C_Mem_Write>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d001      	beq.n	800cb3c <Init+0xae>
 800cb38:	f7f5 f856 	bl	8001be8 <Error_Handler>
 800cb3c:	bf00      	nop
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <Init_BMP280>:
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af04      	add	r7, sp, #16
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	23b6      	movs	r3, #182	; 0xb6
 800cb4e:	733b      	strb	r3, [r7, #12]
 800cb50:	2332      	movs	r3, #50	; 0x32
 800cb52:	9302      	str	r3, [sp, #8]
 800cb54:	2301      	movs	r3, #1
 800cb56:	9301      	str	r3, [sp, #4]
 800cb58:	f107 030c 	add.w	r3, r7, #12
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	2301      	movs	r3, #1
 800cb60:	22e0      	movs	r2, #224	; 0xe0
 800cb62:	21ee      	movs	r1, #238	; 0xee
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7f8 fb1d 	bl	80051a4 <HAL_I2C_Mem_Write>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <Init_BMP280+0x30>
 800cb70:	f7f5 f83a 	bl	8001be8 <Error_Handler>
 800cb74:	20fa      	movs	r0, #250	; 0xfa
 800cb76:	f7f7 f87d 	bl	8003c74 <HAL_Delay>
 800cb7a:	232f      	movs	r3, #47	; 0x2f
 800cb7c:	733b      	strb	r3, [r7, #12]
 800cb7e:	2332      	movs	r3, #50	; 0x32
 800cb80:	9302      	str	r3, [sp, #8]
 800cb82:	2301      	movs	r3, #1
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	f107 030c 	add.w	r3, r7, #12
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	22f4      	movs	r2, #244	; 0xf4
 800cb90:	21ee      	movs	r1, #238	; 0xee
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f7f8 fb06 	bl	80051a4 <HAL_I2C_Mem_Write>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <Init_BMP280+0x5e>
 800cb9e:	f7f5 f823 	bl	8001be8 <Error_Handler>
 800cba2:	bf00      	nop
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	0000      	movs	r0, r0
 800cbac:	0000      	movs	r0, r0
	...

0800cbb0 <MeasureA>:
 800cbb0:	b5b0      	push	{r4, r5, r7, lr}
 800cbb2:	b08a      	sub	sp, #40	; 0x28
 800cbb4:	af04      	add	r7, sp, #16
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	75fb      	strb	r3, [r7, #23]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	82bb      	strh	r3, [r7, #20]
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	75bb      	strb	r3, [r7, #22]
 800cbc6:	2332      	movs	r3, #50	; 0x32
 800cbc8:	9302      	str	r3, [sp, #8]
 800cbca:	2301      	movs	r3, #1
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	f107 030c 	add.w	r3, r7, #12
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	221c      	movs	r2, #28
 800cbd8:	21d0      	movs	r1, #208	; 0xd0
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7f8 fbdc 	bl	8005398 <HAL_I2C_Mem_Read>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d001      	beq.n	800cbea <MeasureA+0x3a>
 800cbe6:	f7f4 ffff 	bl	8001be8 <Error_Handler>
 800cbea:	7b3b      	ldrb	r3, [r7, #12]
 800cbec:	10db      	asrs	r3, r3, #3
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	f003 0303 	and.w	r3, r3, #3
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	82bb      	strh	r3, [r7, #20]
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	75fb      	strb	r3, [r7, #23]
 800cc00:	e005      	b.n	800cc0e <MeasureA+0x5e>
 800cc02:	7dbb      	ldrb	r3, [r7, #22]
 800cc04:	005b      	lsls	r3, r3, #1
 800cc06:	75bb      	strb	r3, [r7, #22]
 800cc08:	7dfb      	ldrb	r3, [r7, #23]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	75fb      	strb	r3, [r7, #23]
 800cc0e:	7dfa      	ldrb	r2, [r7, #23]
 800cc10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	dbf4      	blt.n	800cc02 <MeasureA+0x52>
 800cc18:	2332      	movs	r3, #50	; 0x32
 800cc1a:	9302      	str	r3, [sp, #8]
 800cc1c:	2306      	movs	r3, #6
 800cc1e:	9301      	str	r3, [sp, #4]
 800cc20:	f107 030c 	add.w	r3, r7, #12
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	2301      	movs	r3, #1
 800cc28:	223b      	movs	r2, #59	; 0x3b
 800cc2a:	21d0      	movs	r1, #208	; 0xd0
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7f8 fbb3 	bl	8005398 <HAL_I2C_Mem_Read>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d001      	beq.n	800cc3c <MeasureA+0x8c>
 800cc38:	f7f4 ffd6 	bl	8001be8 <Error_Handler>
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	75fb      	strb	r3, [r7, #23]
 800cc40:	e03a      	b.n	800ccb8 <MeasureA+0x108>
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	f107 0218 	add.w	r2, r7, #24
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	021b      	lsls	r3, r3, #8
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	005b      	lsls	r3, r3, #1
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	f107 0118 	add.w	r1, r7, #24
 800cc60:	440b      	add	r3, r1
 800cc62:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	4413      	add	r3, r2
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	82bb      	strh	r3, [r7, #20]
 800cc6e:	7dbb      	ldrb	r3, [r7, #22]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7f3 fc67 	bl	8000544 <__aeabi_i2d>
 800cc76:	4604      	mov	r4, r0
 800cc78:	460d      	mov	r5, r1
 800cc7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7f3 fc60 	bl	8000544 <__aeabi_i2d>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4620      	mov	r0, r4
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	f7f3 fcc4 	bl	8000618 <__aeabi_dmul>
 800cc90:	4602      	mov	r2, r0
 800cc92:	460b      	mov	r3, r1
 800cc94:	4610      	mov	r0, r2
 800cc96:	4619      	mov	r1, r3
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	18d4      	adds	r4, r2, r3
 800cca0:	a309      	add	r3, pc, #36	; (adr r3, 800ccc8 <MeasureA+0x118>)
 800cca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca6:	f7f3 fde1 	bl	800086c <__aeabi_ddiv>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	e9c4 2300 	strd	r2, r3, [r4]
 800ccb2:	7dfb      	ldrb	r3, [r7, #23]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	75fb      	strb	r3, [r7, #23]
 800ccb8:	7dfb      	ldrb	r3, [r7, #23]
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d9c1      	bls.n	800cc42 <MeasureA+0x92>
 800ccbe:	bf00      	nop
 800ccc0:	bf00      	nop
 800ccc2:	3718      	adds	r7, #24
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bdb0      	pop	{r4, r5, r7, pc}
 800ccc8:	00000000 	.word	0x00000000
 800cccc:	40dfffc0 	.word	0x40dfffc0

0800ccd0 <MeasureG>:
 800ccd0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800ccd4:	b08b      	sub	sp, #44	; 0x2c
 800ccd6:	af04      	add	r7, sp, #16
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	6039      	str	r1, [r7, #0]
 800ccdc:	2300      	movs	r3, #0
 800ccde:	75fb      	strb	r3, [r7, #23]
 800cce0:	2300      	movs	r3, #0
 800cce2:	82bb      	strh	r3, [r7, #20]
 800cce4:	2301      	movs	r3, #1
 800cce6:	75bb      	strb	r3, [r7, #22]
 800cce8:	2332      	movs	r3, #50	; 0x32
 800ccea:	9302      	str	r3, [sp, #8]
 800ccec:	2301      	movs	r3, #1
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	f107 030c 	add.w	r3, r7, #12
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	221b      	movs	r2, #27
 800ccfa:	21d0      	movs	r1, #208	; 0xd0
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7f8 fb4b 	bl	8005398 <HAL_I2C_Mem_Read>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <MeasureG+0x3c>
 800cd08:	f7f4 ff6e 	bl	8001be8 <Error_Handler>
 800cd0c:	7b3b      	ldrb	r3, [r7, #12]
 800cd0e:	10db      	asrs	r3, r3, #3
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	f003 0303 	and.w	r3, r3, #3
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	3301      	adds	r3, #1
 800cd1a:	82bb      	strh	r3, [r7, #20]
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	75fb      	strb	r3, [r7, #23]
 800cd20:	e008      	b.n	800cd34 <MeasureG+0x64>
 800cd22:	7dbb      	ldrb	r3, [r7, #22]
 800cd24:	461a      	mov	r2, r3
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	005b      	lsls	r3, r3, #1
 800cd2c:	75bb      	strb	r3, [r7, #22]
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	3301      	adds	r3, #1
 800cd32:	75fb      	strb	r3, [r7, #23]
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	8aba      	ldrh	r2, [r7, #20]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d8f1      	bhi.n	800cd22 <MeasureG+0x52>
 800cd3e:	2332      	movs	r3, #50	; 0x32
 800cd40:	9302      	str	r3, [sp, #8]
 800cd42:	2306      	movs	r3, #6
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	f107 030c 	add.w	r3, r7, #12
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	2243      	movs	r2, #67	; 0x43
 800cd50:	21d0      	movs	r1, #208	; 0xd0
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7f8 fb20 	bl	8005398 <HAL_I2C_Mem_Read>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <MeasureG+0x92>
 800cd5e:	f7f4 ff43 	bl	8001be8 <Error_Handler>
 800cd62:	2300      	movs	r3, #0
 800cd64:	75fb      	strb	r3, [r7, #23]
 800cd66:	e05d      	b.n	800ce24 <MeasureG+0x154>
 800cd68:	7dfb      	ldrb	r3, [r7, #23]
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	f107 0218 	add.w	r2, r7, #24
 800cd70:	4413      	add	r3, r2
 800cd72:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	021b      	lsls	r3, r3, #8
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	7dfb      	ldrb	r3, [r7, #23]
 800cd7e:	005b      	lsls	r3, r3, #1
 800cd80:	3301      	adds	r3, #1
 800cd82:	f107 0118 	add.w	r1, r7, #24
 800cd86:	440b      	add	r3, r1
 800cd88:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	4413      	add	r3, r2
 800cd90:	82bb      	strh	r3, [r7, #20]
 800cd92:	7dfb      	ldrb	r3, [r7, #23]
 800cd94:	00db      	lsls	r3, r3, #3
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	18d4      	adds	r4, r2, r3
 800cd9a:	8abb      	ldrh	r3, [r7, #20]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7f3 fbc1 	bl	8000524 <__aeabi_ui2d>
 800cda2:	4602      	mov	r2, r0
 800cda4:	460b      	mov	r3, r1
 800cda6:	e9c4 2300 	strd	r2, r3, [r4]
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	f107 0218 	add.w	r2, r7, #24
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cdb8:	09db      	lsrs	r3, r3, #7
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d10f      	bne.n	800cde0 <MeasureG+0x110>
 800cdc0:	8abb      	ldrh	r3, [r7, #20]
 800cdc2:	425b      	negs	r3, r3
 800cdc4:	82bb      	strh	r3, [r7, #20]
 800cdc6:	8abb      	ldrh	r3, [r7, #20]
 800cdc8:	4259      	negs	r1, r3
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	00db      	lsls	r3, r3, #3
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	18d4      	adds	r4, r2, r3
 800cdd2:	4608      	mov	r0, r1
 800cdd4:	f7f3 fbb6 	bl	8000544 <__aeabi_i2d>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	460b      	mov	r3, r1
 800cddc:	e9c4 2300 	strd	r2, r3, [r4]
 800cde0:	7dbb      	ldrb	r3, [r7, #22]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f3 fb9e 	bl	8000524 <__aeabi_ui2d>
 800cde8:	a313      	add	r3, pc, #76	; (adr r3, 800ce38 <MeasureG+0x168>)
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	f7f3 fd3d 	bl	800086c <__aeabi_ddiv>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	4690      	mov	r8, r2
 800cdf8:	4699      	mov	r9, r3
 800cdfa:	7dfb      	ldrb	r3, [r7, #23]
 800cdfc:	00db      	lsls	r3, r3, #3
 800cdfe:	683a      	ldr	r2, [r7, #0]
 800ce00:	4413      	add	r3, r2
 800ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce06:	7df9      	ldrb	r1, [r7, #23]
 800ce08:	00c9      	lsls	r1, r1, #3
 800ce0a:	6838      	ldr	r0, [r7, #0]
 800ce0c:	1844      	adds	r4, r0, r1
 800ce0e:	4640      	mov	r0, r8
 800ce10:	4649      	mov	r1, r9
 800ce12:	f7f3 fc01 	bl	8000618 <__aeabi_dmul>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	e9c4 2300 	strd	r2, r3, [r4]
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
 800ce20:	3301      	adds	r3, #1
 800ce22:	75fb      	strb	r3, [r7, #23]
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	d99e      	bls.n	800cd68 <MeasureG+0x98>
 800ce2a:	bf00      	nop
 800ce2c:	bf00      	nop
 800ce2e:	371c      	adds	r7, #28
 800ce30:	46bd      	mov	sp, r7
 800ce32:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800ce36:	bf00      	nop
 800ce38:	00000000 	.word	0x00000000
 800ce3c:	40dfffc0 	.word	0x40dfffc0

0800ce40 <__errno>:
 800ce40:	4b01      	ldr	r3, [pc, #4]	; (800ce48 <__errno+0x8>)
 800ce42:	6818      	ldr	r0, [r3, #0]
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	20000068 	.word	0x20000068

0800ce4c <exit>:
 800ce4c:	b508      	push	{r3, lr}
 800ce4e:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <exit+0x20>)
 800ce50:	4604      	mov	r4, r0
 800ce52:	b113      	cbz	r3, 800ce5a <exit+0xe>
 800ce54:	2100      	movs	r1, #0
 800ce56:	f3af 8000 	nop.w
 800ce5a:	4b05      	ldr	r3, [pc, #20]	; (800ce70 <exit+0x24>)
 800ce5c:	6818      	ldr	r0, [r3, #0]
 800ce5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ce60:	b103      	cbz	r3, 800ce64 <exit+0x18>
 800ce62:	4798      	blx	r3
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7f5 f85d 	bl	8001f24 <_exit>
 800ce6a:	bf00      	nop
 800ce6c:	00000000 	.word	0x00000000
 800ce70:	080126d0 	.word	0x080126d0

0800ce74 <__libc_init_array>:
 800ce74:	b570      	push	{r4, r5, r6, lr}
 800ce76:	4d0d      	ldr	r5, [pc, #52]	; (800ceac <__libc_init_array+0x38>)
 800ce78:	4c0d      	ldr	r4, [pc, #52]	; (800ceb0 <__libc_init_array+0x3c>)
 800ce7a:	1b64      	subs	r4, r4, r5
 800ce7c:	10a4      	asrs	r4, r4, #2
 800ce7e:	2600      	movs	r6, #0
 800ce80:	42a6      	cmp	r6, r4
 800ce82:	d109      	bne.n	800ce98 <__libc_init_array+0x24>
 800ce84:	4d0b      	ldr	r5, [pc, #44]	; (800ceb4 <__libc_init_array+0x40>)
 800ce86:	4c0c      	ldr	r4, [pc, #48]	; (800ceb8 <__libc_init_array+0x44>)
 800ce88:	f002 fd7e 	bl	800f988 <_init>
 800ce8c:	1b64      	subs	r4, r4, r5
 800ce8e:	10a4      	asrs	r4, r4, #2
 800ce90:	2600      	movs	r6, #0
 800ce92:	42a6      	cmp	r6, r4
 800ce94:	d105      	bne.n	800cea2 <__libc_init_array+0x2e>
 800ce96:	bd70      	pop	{r4, r5, r6, pc}
 800ce98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce9c:	4798      	blx	r3
 800ce9e:	3601      	adds	r6, #1
 800cea0:	e7ee      	b.n	800ce80 <__libc_init_array+0xc>
 800cea2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cea6:	4798      	blx	r3
 800cea8:	3601      	adds	r6, #1
 800ceaa:	e7f2      	b.n	800ce92 <__libc_init_array+0x1e>
 800ceac:	08012abc 	.word	0x08012abc
 800ceb0:	08012abc 	.word	0x08012abc
 800ceb4:	08012abc 	.word	0x08012abc
 800ceb8:	08012ac0 	.word	0x08012ac0

0800cebc <memcpy>:
 800cebc:	440a      	add	r2, r1
 800cebe:	4291      	cmp	r1, r2
 800cec0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cec4:	d100      	bne.n	800cec8 <memcpy+0xc>
 800cec6:	4770      	bx	lr
 800cec8:	b510      	push	{r4, lr}
 800ceca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cece:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ced2:	4291      	cmp	r1, r2
 800ced4:	d1f9      	bne.n	800ceca <memcpy+0xe>
 800ced6:	bd10      	pop	{r4, pc}

0800ced8 <memset>:
 800ced8:	4402      	add	r2, r0
 800ceda:	4603      	mov	r3, r0
 800cedc:	4293      	cmp	r3, r2
 800cede:	d100      	bne.n	800cee2 <memset+0xa>
 800cee0:	4770      	bx	lr
 800cee2:	f803 1b01 	strb.w	r1, [r3], #1
 800cee6:	e7f9      	b.n	800cedc <memset+0x4>

0800cee8 <__cvt>:
 800cee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ceec:	ec55 4b10 	vmov	r4, r5, d0
 800cef0:	2d00      	cmp	r5, #0
 800cef2:	460e      	mov	r6, r1
 800cef4:	4619      	mov	r1, r3
 800cef6:	462b      	mov	r3, r5
 800cef8:	bfbb      	ittet	lt
 800cefa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cefe:	461d      	movlt	r5, r3
 800cf00:	2300      	movge	r3, #0
 800cf02:	232d      	movlt	r3, #45	; 0x2d
 800cf04:	700b      	strb	r3, [r1, #0]
 800cf06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cf0c:	4691      	mov	r9, r2
 800cf0e:	f023 0820 	bic.w	r8, r3, #32
 800cf12:	bfbc      	itt	lt
 800cf14:	4622      	movlt	r2, r4
 800cf16:	4614      	movlt	r4, r2
 800cf18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf1c:	d005      	beq.n	800cf2a <__cvt+0x42>
 800cf1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cf22:	d100      	bne.n	800cf26 <__cvt+0x3e>
 800cf24:	3601      	adds	r6, #1
 800cf26:	2102      	movs	r1, #2
 800cf28:	e000      	b.n	800cf2c <__cvt+0x44>
 800cf2a:	2103      	movs	r1, #3
 800cf2c:	ab03      	add	r3, sp, #12
 800cf2e:	9301      	str	r3, [sp, #4]
 800cf30:	ab02      	add	r3, sp, #8
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	ec45 4b10 	vmov	d0, r4, r5
 800cf38:	4653      	mov	r3, sl
 800cf3a:	4632      	mov	r2, r6
 800cf3c:	f000 fe18 	bl	800db70 <_dtoa_r>
 800cf40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cf44:	4607      	mov	r7, r0
 800cf46:	d102      	bne.n	800cf4e <__cvt+0x66>
 800cf48:	f019 0f01 	tst.w	r9, #1
 800cf4c:	d022      	beq.n	800cf94 <__cvt+0xac>
 800cf4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf52:	eb07 0906 	add.w	r9, r7, r6
 800cf56:	d110      	bne.n	800cf7a <__cvt+0x92>
 800cf58:	783b      	ldrb	r3, [r7, #0]
 800cf5a:	2b30      	cmp	r3, #48	; 0x30
 800cf5c:	d10a      	bne.n	800cf74 <__cvt+0x8c>
 800cf5e:	2200      	movs	r2, #0
 800cf60:	2300      	movs	r3, #0
 800cf62:	4620      	mov	r0, r4
 800cf64:	4629      	mov	r1, r5
 800cf66:	f7f3 fdbf 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf6a:	b918      	cbnz	r0, 800cf74 <__cvt+0x8c>
 800cf6c:	f1c6 0601 	rsb	r6, r6, #1
 800cf70:	f8ca 6000 	str.w	r6, [sl]
 800cf74:	f8da 3000 	ldr.w	r3, [sl]
 800cf78:	4499      	add	r9, r3
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4620      	mov	r0, r4
 800cf80:	4629      	mov	r1, r5
 800cf82:	f7f3 fdb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf86:	b108      	cbz	r0, 800cf8c <__cvt+0xa4>
 800cf88:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf8c:	2230      	movs	r2, #48	; 0x30
 800cf8e:	9b03      	ldr	r3, [sp, #12]
 800cf90:	454b      	cmp	r3, r9
 800cf92:	d307      	bcc.n	800cfa4 <__cvt+0xbc>
 800cf94:	9b03      	ldr	r3, [sp, #12]
 800cf96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf98:	1bdb      	subs	r3, r3, r7
 800cf9a:	4638      	mov	r0, r7
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	b004      	add	sp, #16
 800cfa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfa4:	1c59      	adds	r1, r3, #1
 800cfa6:	9103      	str	r1, [sp, #12]
 800cfa8:	701a      	strb	r2, [r3, #0]
 800cfaa:	e7f0      	b.n	800cf8e <__cvt+0xa6>

0800cfac <__exponent>:
 800cfac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2900      	cmp	r1, #0
 800cfb2:	bfb8      	it	lt
 800cfb4:	4249      	neglt	r1, r1
 800cfb6:	f803 2b02 	strb.w	r2, [r3], #2
 800cfba:	bfb4      	ite	lt
 800cfbc:	222d      	movlt	r2, #45	; 0x2d
 800cfbe:	222b      	movge	r2, #43	; 0x2b
 800cfc0:	2909      	cmp	r1, #9
 800cfc2:	7042      	strb	r2, [r0, #1]
 800cfc4:	dd2a      	ble.n	800d01c <__exponent+0x70>
 800cfc6:	f10d 0407 	add.w	r4, sp, #7
 800cfca:	46a4      	mov	ip, r4
 800cfcc:	270a      	movs	r7, #10
 800cfce:	46a6      	mov	lr, r4
 800cfd0:	460a      	mov	r2, r1
 800cfd2:	fb91 f6f7 	sdiv	r6, r1, r7
 800cfd6:	fb07 1516 	mls	r5, r7, r6, r1
 800cfda:	3530      	adds	r5, #48	; 0x30
 800cfdc:	2a63      	cmp	r2, #99	; 0x63
 800cfde:	f104 34ff 	add.w	r4, r4, #4294967295
 800cfe2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	dcf1      	bgt.n	800cfce <__exponent+0x22>
 800cfea:	3130      	adds	r1, #48	; 0x30
 800cfec:	f1ae 0502 	sub.w	r5, lr, #2
 800cff0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cff4:	1c44      	adds	r4, r0, #1
 800cff6:	4629      	mov	r1, r5
 800cff8:	4561      	cmp	r1, ip
 800cffa:	d30a      	bcc.n	800d012 <__exponent+0x66>
 800cffc:	f10d 0209 	add.w	r2, sp, #9
 800d000:	eba2 020e 	sub.w	r2, r2, lr
 800d004:	4565      	cmp	r5, ip
 800d006:	bf88      	it	hi
 800d008:	2200      	movhi	r2, #0
 800d00a:	4413      	add	r3, r2
 800d00c:	1a18      	subs	r0, r3, r0
 800d00e:	b003      	add	sp, #12
 800d010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d012:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d016:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d01a:	e7ed      	b.n	800cff8 <__exponent+0x4c>
 800d01c:	2330      	movs	r3, #48	; 0x30
 800d01e:	3130      	adds	r1, #48	; 0x30
 800d020:	7083      	strb	r3, [r0, #2]
 800d022:	70c1      	strb	r1, [r0, #3]
 800d024:	1d03      	adds	r3, r0, #4
 800d026:	e7f1      	b.n	800d00c <__exponent+0x60>

0800d028 <_printf_float>:
 800d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02c:	ed2d 8b02 	vpush	{d8}
 800d030:	b08d      	sub	sp, #52	; 0x34
 800d032:	460c      	mov	r4, r1
 800d034:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d038:	4616      	mov	r6, r2
 800d03a:	461f      	mov	r7, r3
 800d03c:	4605      	mov	r5, r0
 800d03e:	f001 fd3b 	bl	800eab8 <_localeconv_r>
 800d042:	f8d0 a000 	ldr.w	sl, [r0]
 800d046:	4650      	mov	r0, sl
 800d048:	f7f3 f8d2 	bl	80001f0 <strlen>
 800d04c:	2300      	movs	r3, #0
 800d04e:	930a      	str	r3, [sp, #40]	; 0x28
 800d050:	6823      	ldr	r3, [r4, #0]
 800d052:	9305      	str	r3, [sp, #20]
 800d054:	f8d8 3000 	ldr.w	r3, [r8]
 800d058:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d05c:	3307      	adds	r3, #7
 800d05e:	f023 0307 	bic.w	r3, r3, #7
 800d062:	f103 0208 	add.w	r2, r3, #8
 800d066:	f8c8 2000 	str.w	r2, [r8]
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d072:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d076:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d07a:	9307      	str	r3, [sp, #28]
 800d07c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d080:	ee08 0a10 	vmov	s16, r0
 800d084:	4b9f      	ldr	r3, [pc, #636]	; (800d304 <_printf_float+0x2dc>)
 800d086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d08a:	f04f 32ff 	mov.w	r2, #4294967295
 800d08e:	f7f3 fd5d 	bl	8000b4c <__aeabi_dcmpun>
 800d092:	bb88      	cbnz	r0, 800d0f8 <_printf_float+0xd0>
 800d094:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d098:	4b9a      	ldr	r3, [pc, #616]	; (800d304 <_printf_float+0x2dc>)
 800d09a:	f04f 32ff 	mov.w	r2, #4294967295
 800d09e:	f7f3 fd37 	bl	8000b10 <__aeabi_dcmple>
 800d0a2:	bb48      	cbnz	r0, 800d0f8 <_printf_float+0xd0>
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	4640      	mov	r0, r8
 800d0aa:	4649      	mov	r1, r9
 800d0ac:	f7f3 fd26 	bl	8000afc <__aeabi_dcmplt>
 800d0b0:	b110      	cbz	r0, 800d0b8 <_printf_float+0x90>
 800d0b2:	232d      	movs	r3, #45	; 0x2d
 800d0b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0b8:	4b93      	ldr	r3, [pc, #588]	; (800d308 <_printf_float+0x2e0>)
 800d0ba:	4894      	ldr	r0, [pc, #592]	; (800d30c <_printf_float+0x2e4>)
 800d0bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d0c0:	bf94      	ite	ls
 800d0c2:	4698      	movls	r8, r3
 800d0c4:	4680      	movhi	r8, r0
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	6123      	str	r3, [r4, #16]
 800d0ca:	9b05      	ldr	r3, [sp, #20]
 800d0cc:	f023 0204 	bic.w	r2, r3, #4
 800d0d0:	6022      	str	r2, [r4, #0]
 800d0d2:	f04f 0900 	mov.w	r9, #0
 800d0d6:	9700      	str	r7, [sp, #0]
 800d0d8:	4633      	mov	r3, r6
 800d0da:	aa0b      	add	r2, sp, #44	; 0x2c
 800d0dc:	4621      	mov	r1, r4
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f000 f9d8 	bl	800d494 <_printf_common>
 800d0e4:	3001      	adds	r0, #1
 800d0e6:	f040 8090 	bne.w	800d20a <_printf_float+0x1e2>
 800d0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ee:	b00d      	add	sp, #52	; 0x34
 800d0f0:	ecbd 8b02 	vpop	{d8}
 800d0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f8:	4642      	mov	r2, r8
 800d0fa:	464b      	mov	r3, r9
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	4649      	mov	r1, r9
 800d100:	f7f3 fd24 	bl	8000b4c <__aeabi_dcmpun>
 800d104:	b140      	cbz	r0, 800d118 <_printf_float+0xf0>
 800d106:	464b      	mov	r3, r9
 800d108:	2b00      	cmp	r3, #0
 800d10a:	bfbc      	itt	lt
 800d10c:	232d      	movlt	r3, #45	; 0x2d
 800d10e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d112:	487f      	ldr	r0, [pc, #508]	; (800d310 <_printf_float+0x2e8>)
 800d114:	4b7f      	ldr	r3, [pc, #508]	; (800d314 <_printf_float+0x2ec>)
 800d116:	e7d1      	b.n	800d0bc <_printf_float+0x94>
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d11e:	9206      	str	r2, [sp, #24]
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	d13f      	bne.n	800d1a4 <_printf_float+0x17c>
 800d124:	2306      	movs	r3, #6
 800d126:	6063      	str	r3, [r4, #4]
 800d128:	9b05      	ldr	r3, [sp, #20]
 800d12a:	6861      	ldr	r1, [r4, #4]
 800d12c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d130:	2300      	movs	r3, #0
 800d132:	9303      	str	r3, [sp, #12]
 800d134:	ab0a      	add	r3, sp, #40	; 0x28
 800d136:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d13a:	ab09      	add	r3, sp, #36	; 0x24
 800d13c:	ec49 8b10 	vmov	d0, r8, r9
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	6022      	str	r2, [r4, #0]
 800d144:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d148:	4628      	mov	r0, r5
 800d14a:	f7ff fecd 	bl	800cee8 <__cvt>
 800d14e:	9b06      	ldr	r3, [sp, #24]
 800d150:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d152:	2b47      	cmp	r3, #71	; 0x47
 800d154:	4680      	mov	r8, r0
 800d156:	d108      	bne.n	800d16a <_printf_float+0x142>
 800d158:	1cc8      	adds	r0, r1, #3
 800d15a:	db02      	blt.n	800d162 <_printf_float+0x13a>
 800d15c:	6863      	ldr	r3, [r4, #4]
 800d15e:	4299      	cmp	r1, r3
 800d160:	dd41      	ble.n	800d1e6 <_printf_float+0x1be>
 800d162:	f1ab 0b02 	sub.w	fp, fp, #2
 800d166:	fa5f fb8b 	uxtb.w	fp, fp
 800d16a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d16e:	d820      	bhi.n	800d1b2 <_printf_float+0x18a>
 800d170:	3901      	subs	r1, #1
 800d172:	465a      	mov	r2, fp
 800d174:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d178:	9109      	str	r1, [sp, #36]	; 0x24
 800d17a:	f7ff ff17 	bl	800cfac <__exponent>
 800d17e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d180:	1813      	adds	r3, r2, r0
 800d182:	2a01      	cmp	r2, #1
 800d184:	4681      	mov	r9, r0
 800d186:	6123      	str	r3, [r4, #16]
 800d188:	dc02      	bgt.n	800d190 <_printf_float+0x168>
 800d18a:	6822      	ldr	r2, [r4, #0]
 800d18c:	07d2      	lsls	r2, r2, #31
 800d18e:	d501      	bpl.n	800d194 <_printf_float+0x16c>
 800d190:	3301      	adds	r3, #1
 800d192:	6123      	str	r3, [r4, #16]
 800d194:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d09c      	beq.n	800d0d6 <_printf_float+0xae>
 800d19c:	232d      	movs	r3, #45	; 0x2d
 800d19e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1a2:	e798      	b.n	800d0d6 <_printf_float+0xae>
 800d1a4:	9a06      	ldr	r2, [sp, #24]
 800d1a6:	2a47      	cmp	r2, #71	; 0x47
 800d1a8:	d1be      	bne.n	800d128 <_printf_float+0x100>
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1bc      	bne.n	800d128 <_printf_float+0x100>
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e7b9      	b.n	800d126 <_printf_float+0xfe>
 800d1b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d1b6:	d118      	bne.n	800d1ea <_printf_float+0x1c2>
 800d1b8:	2900      	cmp	r1, #0
 800d1ba:	6863      	ldr	r3, [r4, #4]
 800d1bc:	dd0b      	ble.n	800d1d6 <_printf_float+0x1ae>
 800d1be:	6121      	str	r1, [r4, #16]
 800d1c0:	b913      	cbnz	r3, 800d1c8 <_printf_float+0x1a0>
 800d1c2:	6822      	ldr	r2, [r4, #0]
 800d1c4:	07d0      	lsls	r0, r2, #31
 800d1c6:	d502      	bpl.n	800d1ce <_printf_float+0x1a6>
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	440b      	add	r3, r1
 800d1cc:	6123      	str	r3, [r4, #16]
 800d1ce:	65a1      	str	r1, [r4, #88]	; 0x58
 800d1d0:	f04f 0900 	mov.w	r9, #0
 800d1d4:	e7de      	b.n	800d194 <_printf_float+0x16c>
 800d1d6:	b913      	cbnz	r3, 800d1de <_printf_float+0x1b6>
 800d1d8:	6822      	ldr	r2, [r4, #0]
 800d1da:	07d2      	lsls	r2, r2, #31
 800d1dc:	d501      	bpl.n	800d1e2 <_printf_float+0x1ba>
 800d1de:	3302      	adds	r3, #2
 800d1e0:	e7f4      	b.n	800d1cc <_printf_float+0x1a4>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e7f2      	b.n	800d1cc <_printf_float+0x1a4>
 800d1e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1ec:	4299      	cmp	r1, r3
 800d1ee:	db05      	blt.n	800d1fc <_printf_float+0x1d4>
 800d1f0:	6823      	ldr	r3, [r4, #0]
 800d1f2:	6121      	str	r1, [r4, #16]
 800d1f4:	07d8      	lsls	r0, r3, #31
 800d1f6:	d5ea      	bpl.n	800d1ce <_printf_float+0x1a6>
 800d1f8:	1c4b      	adds	r3, r1, #1
 800d1fa:	e7e7      	b.n	800d1cc <_printf_float+0x1a4>
 800d1fc:	2900      	cmp	r1, #0
 800d1fe:	bfd4      	ite	le
 800d200:	f1c1 0202 	rsble	r2, r1, #2
 800d204:	2201      	movgt	r2, #1
 800d206:	4413      	add	r3, r2
 800d208:	e7e0      	b.n	800d1cc <_printf_float+0x1a4>
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	055a      	lsls	r2, r3, #21
 800d20e:	d407      	bmi.n	800d220 <_printf_float+0x1f8>
 800d210:	6923      	ldr	r3, [r4, #16]
 800d212:	4642      	mov	r2, r8
 800d214:	4631      	mov	r1, r6
 800d216:	4628      	mov	r0, r5
 800d218:	47b8      	blx	r7
 800d21a:	3001      	adds	r0, #1
 800d21c:	d12c      	bne.n	800d278 <_printf_float+0x250>
 800d21e:	e764      	b.n	800d0ea <_printf_float+0xc2>
 800d220:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d224:	f240 80e0 	bls.w	800d3e8 <_printf_float+0x3c0>
 800d228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d22c:	2200      	movs	r2, #0
 800d22e:	2300      	movs	r3, #0
 800d230:	f7f3 fc5a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d234:	2800      	cmp	r0, #0
 800d236:	d034      	beq.n	800d2a2 <_printf_float+0x27a>
 800d238:	4a37      	ldr	r2, [pc, #220]	; (800d318 <_printf_float+0x2f0>)
 800d23a:	2301      	movs	r3, #1
 800d23c:	4631      	mov	r1, r6
 800d23e:	4628      	mov	r0, r5
 800d240:	47b8      	blx	r7
 800d242:	3001      	adds	r0, #1
 800d244:	f43f af51 	beq.w	800d0ea <_printf_float+0xc2>
 800d248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d24c:	429a      	cmp	r2, r3
 800d24e:	db02      	blt.n	800d256 <_printf_float+0x22e>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	07d8      	lsls	r0, r3, #31
 800d254:	d510      	bpl.n	800d278 <_printf_float+0x250>
 800d256:	ee18 3a10 	vmov	r3, s16
 800d25a:	4652      	mov	r2, sl
 800d25c:	4631      	mov	r1, r6
 800d25e:	4628      	mov	r0, r5
 800d260:	47b8      	blx	r7
 800d262:	3001      	adds	r0, #1
 800d264:	f43f af41 	beq.w	800d0ea <_printf_float+0xc2>
 800d268:	f04f 0800 	mov.w	r8, #0
 800d26c:	f104 091a 	add.w	r9, r4, #26
 800d270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d272:	3b01      	subs	r3, #1
 800d274:	4543      	cmp	r3, r8
 800d276:	dc09      	bgt.n	800d28c <_printf_float+0x264>
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	079b      	lsls	r3, r3, #30
 800d27c:	f100 8105 	bmi.w	800d48a <_printf_float+0x462>
 800d280:	68e0      	ldr	r0, [r4, #12]
 800d282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d284:	4298      	cmp	r0, r3
 800d286:	bfb8      	it	lt
 800d288:	4618      	movlt	r0, r3
 800d28a:	e730      	b.n	800d0ee <_printf_float+0xc6>
 800d28c:	2301      	movs	r3, #1
 800d28e:	464a      	mov	r2, r9
 800d290:	4631      	mov	r1, r6
 800d292:	4628      	mov	r0, r5
 800d294:	47b8      	blx	r7
 800d296:	3001      	adds	r0, #1
 800d298:	f43f af27 	beq.w	800d0ea <_printf_float+0xc2>
 800d29c:	f108 0801 	add.w	r8, r8, #1
 800d2a0:	e7e6      	b.n	800d270 <_printf_float+0x248>
 800d2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	dc39      	bgt.n	800d31c <_printf_float+0x2f4>
 800d2a8:	4a1b      	ldr	r2, [pc, #108]	; (800d318 <_printf_float+0x2f0>)
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	47b8      	blx	r7
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	f43f af19 	beq.w	800d0ea <_printf_float+0xc2>
 800d2b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	d102      	bne.n	800d2c6 <_printf_float+0x29e>
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	07d9      	lsls	r1, r3, #31
 800d2c4:	d5d8      	bpl.n	800d278 <_printf_float+0x250>
 800d2c6:	ee18 3a10 	vmov	r3, s16
 800d2ca:	4652      	mov	r2, sl
 800d2cc:	4631      	mov	r1, r6
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	47b8      	blx	r7
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	f43f af09 	beq.w	800d0ea <_printf_float+0xc2>
 800d2d8:	f04f 0900 	mov.w	r9, #0
 800d2dc:	f104 0a1a 	add.w	sl, r4, #26
 800d2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e2:	425b      	negs	r3, r3
 800d2e4:	454b      	cmp	r3, r9
 800d2e6:	dc01      	bgt.n	800d2ec <_printf_float+0x2c4>
 800d2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ea:	e792      	b.n	800d212 <_printf_float+0x1ea>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	4652      	mov	r2, sl
 800d2f0:	4631      	mov	r1, r6
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	47b8      	blx	r7
 800d2f6:	3001      	adds	r0, #1
 800d2f8:	f43f aef7 	beq.w	800d0ea <_printf_float+0xc2>
 800d2fc:	f109 0901 	add.w	r9, r9, #1
 800d300:	e7ee      	b.n	800d2e0 <_printf_float+0x2b8>
 800d302:	bf00      	nop
 800d304:	7fefffff 	.word	0x7fefffff
 800d308:	080126d4 	.word	0x080126d4
 800d30c:	080126d8 	.word	0x080126d8
 800d310:	080126e0 	.word	0x080126e0
 800d314:	080126dc 	.word	0x080126dc
 800d318:	080126e4 	.word	0x080126e4
 800d31c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d31e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d320:	429a      	cmp	r2, r3
 800d322:	bfa8      	it	ge
 800d324:	461a      	movge	r2, r3
 800d326:	2a00      	cmp	r2, #0
 800d328:	4691      	mov	r9, r2
 800d32a:	dc37      	bgt.n	800d39c <_printf_float+0x374>
 800d32c:	f04f 0b00 	mov.w	fp, #0
 800d330:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d334:	f104 021a 	add.w	r2, r4, #26
 800d338:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d33a:	9305      	str	r3, [sp, #20]
 800d33c:	eba3 0309 	sub.w	r3, r3, r9
 800d340:	455b      	cmp	r3, fp
 800d342:	dc33      	bgt.n	800d3ac <_printf_float+0x384>
 800d344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d348:	429a      	cmp	r2, r3
 800d34a:	db3b      	blt.n	800d3c4 <_printf_float+0x39c>
 800d34c:	6823      	ldr	r3, [r4, #0]
 800d34e:	07da      	lsls	r2, r3, #31
 800d350:	d438      	bmi.n	800d3c4 <_printf_float+0x39c>
 800d352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d354:	9b05      	ldr	r3, [sp, #20]
 800d356:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d358:	1ad3      	subs	r3, r2, r3
 800d35a:	eba2 0901 	sub.w	r9, r2, r1
 800d35e:	4599      	cmp	r9, r3
 800d360:	bfa8      	it	ge
 800d362:	4699      	movge	r9, r3
 800d364:	f1b9 0f00 	cmp.w	r9, #0
 800d368:	dc35      	bgt.n	800d3d6 <_printf_float+0x3ae>
 800d36a:	f04f 0800 	mov.w	r8, #0
 800d36e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d372:	f104 0a1a 	add.w	sl, r4, #26
 800d376:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d37a:	1a9b      	subs	r3, r3, r2
 800d37c:	eba3 0309 	sub.w	r3, r3, r9
 800d380:	4543      	cmp	r3, r8
 800d382:	f77f af79 	ble.w	800d278 <_printf_float+0x250>
 800d386:	2301      	movs	r3, #1
 800d388:	4652      	mov	r2, sl
 800d38a:	4631      	mov	r1, r6
 800d38c:	4628      	mov	r0, r5
 800d38e:	47b8      	blx	r7
 800d390:	3001      	adds	r0, #1
 800d392:	f43f aeaa 	beq.w	800d0ea <_printf_float+0xc2>
 800d396:	f108 0801 	add.w	r8, r8, #1
 800d39a:	e7ec      	b.n	800d376 <_printf_float+0x34e>
 800d39c:	4613      	mov	r3, r2
 800d39e:	4631      	mov	r1, r6
 800d3a0:	4642      	mov	r2, r8
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	47b8      	blx	r7
 800d3a6:	3001      	adds	r0, #1
 800d3a8:	d1c0      	bne.n	800d32c <_printf_float+0x304>
 800d3aa:	e69e      	b.n	800d0ea <_printf_float+0xc2>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	4631      	mov	r1, r6
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	9205      	str	r2, [sp, #20]
 800d3b4:	47b8      	blx	r7
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	f43f ae97 	beq.w	800d0ea <_printf_float+0xc2>
 800d3bc:	9a05      	ldr	r2, [sp, #20]
 800d3be:	f10b 0b01 	add.w	fp, fp, #1
 800d3c2:	e7b9      	b.n	800d338 <_printf_float+0x310>
 800d3c4:	ee18 3a10 	vmov	r3, s16
 800d3c8:	4652      	mov	r2, sl
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	47b8      	blx	r7
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	d1be      	bne.n	800d352 <_printf_float+0x32a>
 800d3d4:	e689      	b.n	800d0ea <_printf_float+0xc2>
 800d3d6:	9a05      	ldr	r2, [sp, #20]
 800d3d8:	464b      	mov	r3, r9
 800d3da:	4442      	add	r2, r8
 800d3dc:	4631      	mov	r1, r6
 800d3de:	4628      	mov	r0, r5
 800d3e0:	47b8      	blx	r7
 800d3e2:	3001      	adds	r0, #1
 800d3e4:	d1c1      	bne.n	800d36a <_printf_float+0x342>
 800d3e6:	e680      	b.n	800d0ea <_printf_float+0xc2>
 800d3e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3ea:	2a01      	cmp	r2, #1
 800d3ec:	dc01      	bgt.n	800d3f2 <_printf_float+0x3ca>
 800d3ee:	07db      	lsls	r3, r3, #31
 800d3f0:	d538      	bpl.n	800d464 <_printf_float+0x43c>
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	4642      	mov	r2, r8
 800d3f6:	4631      	mov	r1, r6
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	47b8      	blx	r7
 800d3fc:	3001      	adds	r0, #1
 800d3fe:	f43f ae74 	beq.w	800d0ea <_printf_float+0xc2>
 800d402:	ee18 3a10 	vmov	r3, s16
 800d406:	4652      	mov	r2, sl
 800d408:	4631      	mov	r1, r6
 800d40a:	4628      	mov	r0, r5
 800d40c:	47b8      	blx	r7
 800d40e:	3001      	adds	r0, #1
 800d410:	f43f ae6b 	beq.w	800d0ea <_printf_float+0xc2>
 800d414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d418:	2200      	movs	r2, #0
 800d41a:	2300      	movs	r3, #0
 800d41c:	f7f3 fb64 	bl	8000ae8 <__aeabi_dcmpeq>
 800d420:	b9d8      	cbnz	r0, 800d45a <_printf_float+0x432>
 800d422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d424:	f108 0201 	add.w	r2, r8, #1
 800d428:	3b01      	subs	r3, #1
 800d42a:	4631      	mov	r1, r6
 800d42c:	4628      	mov	r0, r5
 800d42e:	47b8      	blx	r7
 800d430:	3001      	adds	r0, #1
 800d432:	d10e      	bne.n	800d452 <_printf_float+0x42a>
 800d434:	e659      	b.n	800d0ea <_printf_float+0xc2>
 800d436:	2301      	movs	r3, #1
 800d438:	4652      	mov	r2, sl
 800d43a:	4631      	mov	r1, r6
 800d43c:	4628      	mov	r0, r5
 800d43e:	47b8      	blx	r7
 800d440:	3001      	adds	r0, #1
 800d442:	f43f ae52 	beq.w	800d0ea <_printf_float+0xc2>
 800d446:	f108 0801 	add.w	r8, r8, #1
 800d44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d44c:	3b01      	subs	r3, #1
 800d44e:	4543      	cmp	r3, r8
 800d450:	dcf1      	bgt.n	800d436 <_printf_float+0x40e>
 800d452:	464b      	mov	r3, r9
 800d454:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d458:	e6dc      	b.n	800d214 <_printf_float+0x1ec>
 800d45a:	f04f 0800 	mov.w	r8, #0
 800d45e:	f104 0a1a 	add.w	sl, r4, #26
 800d462:	e7f2      	b.n	800d44a <_printf_float+0x422>
 800d464:	2301      	movs	r3, #1
 800d466:	4642      	mov	r2, r8
 800d468:	e7df      	b.n	800d42a <_printf_float+0x402>
 800d46a:	2301      	movs	r3, #1
 800d46c:	464a      	mov	r2, r9
 800d46e:	4631      	mov	r1, r6
 800d470:	4628      	mov	r0, r5
 800d472:	47b8      	blx	r7
 800d474:	3001      	adds	r0, #1
 800d476:	f43f ae38 	beq.w	800d0ea <_printf_float+0xc2>
 800d47a:	f108 0801 	add.w	r8, r8, #1
 800d47e:	68e3      	ldr	r3, [r4, #12]
 800d480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d482:	1a5b      	subs	r3, r3, r1
 800d484:	4543      	cmp	r3, r8
 800d486:	dcf0      	bgt.n	800d46a <_printf_float+0x442>
 800d488:	e6fa      	b.n	800d280 <_printf_float+0x258>
 800d48a:	f04f 0800 	mov.w	r8, #0
 800d48e:	f104 0919 	add.w	r9, r4, #25
 800d492:	e7f4      	b.n	800d47e <_printf_float+0x456>

0800d494 <_printf_common>:
 800d494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d498:	4616      	mov	r6, r2
 800d49a:	4699      	mov	r9, r3
 800d49c:	688a      	ldr	r2, [r1, #8]
 800d49e:	690b      	ldr	r3, [r1, #16]
 800d4a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	bfb8      	it	lt
 800d4a8:	4613      	movlt	r3, r2
 800d4aa:	6033      	str	r3, [r6, #0]
 800d4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	460c      	mov	r4, r1
 800d4b4:	b10a      	cbz	r2, 800d4ba <_printf_common+0x26>
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	6033      	str	r3, [r6, #0]
 800d4ba:	6823      	ldr	r3, [r4, #0]
 800d4bc:	0699      	lsls	r1, r3, #26
 800d4be:	bf42      	ittt	mi
 800d4c0:	6833      	ldrmi	r3, [r6, #0]
 800d4c2:	3302      	addmi	r3, #2
 800d4c4:	6033      	strmi	r3, [r6, #0]
 800d4c6:	6825      	ldr	r5, [r4, #0]
 800d4c8:	f015 0506 	ands.w	r5, r5, #6
 800d4cc:	d106      	bne.n	800d4dc <_printf_common+0x48>
 800d4ce:	f104 0a19 	add.w	sl, r4, #25
 800d4d2:	68e3      	ldr	r3, [r4, #12]
 800d4d4:	6832      	ldr	r2, [r6, #0]
 800d4d6:	1a9b      	subs	r3, r3, r2
 800d4d8:	42ab      	cmp	r3, r5
 800d4da:	dc26      	bgt.n	800d52a <_printf_common+0x96>
 800d4dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4e0:	1e13      	subs	r3, r2, #0
 800d4e2:	6822      	ldr	r2, [r4, #0]
 800d4e4:	bf18      	it	ne
 800d4e6:	2301      	movne	r3, #1
 800d4e8:	0692      	lsls	r2, r2, #26
 800d4ea:	d42b      	bmi.n	800d544 <_printf_common+0xb0>
 800d4ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	47c0      	blx	r8
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	d01e      	beq.n	800d538 <_printf_common+0xa4>
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	68e5      	ldr	r5, [r4, #12]
 800d4fe:	6832      	ldr	r2, [r6, #0]
 800d500:	f003 0306 	and.w	r3, r3, #6
 800d504:	2b04      	cmp	r3, #4
 800d506:	bf08      	it	eq
 800d508:	1aad      	subeq	r5, r5, r2
 800d50a:	68a3      	ldr	r3, [r4, #8]
 800d50c:	6922      	ldr	r2, [r4, #16]
 800d50e:	bf0c      	ite	eq
 800d510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d514:	2500      	movne	r5, #0
 800d516:	4293      	cmp	r3, r2
 800d518:	bfc4      	itt	gt
 800d51a:	1a9b      	subgt	r3, r3, r2
 800d51c:	18ed      	addgt	r5, r5, r3
 800d51e:	2600      	movs	r6, #0
 800d520:	341a      	adds	r4, #26
 800d522:	42b5      	cmp	r5, r6
 800d524:	d11a      	bne.n	800d55c <_printf_common+0xc8>
 800d526:	2000      	movs	r0, #0
 800d528:	e008      	b.n	800d53c <_printf_common+0xa8>
 800d52a:	2301      	movs	r3, #1
 800d52c:	4652      	mov	r2, sl
 800d52e:	4649      	mov	r1, r9
 800d530:	4638      	mov	r0, r7
 800d532:	47c0      	blx	r8
 800d534:	3001      	adds	r0, #1
 800d536:	d103      	bne.n	800d540 <_printf_common+0xac>
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d540:	3501      	adds	r5, #1
 800d542:	e7c6      	b.n	800d4d2 <_printf_common+0x3e>
 800d544:	18e1      	adds	r1, r4, r3
 800d546:	1c5a      	adds	r2, r3, #1
 800d548:	2030      	movs	r0, #48	; 0x30
 800d54a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d54e:	4422      	add	r2, r4
 800d550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d558:	3302      	adds	r3, #2
 800d55a:	e7c7      	b.n	800d4ec <_printf_common+0x58>
 800d55c:	2301      	movs	r3, #1
 800d55e:	4622      	mov	r2, r4
 800d560:	4649      	mov	r1, r9
 800d562:	4638      	mov	r0, r7
 800d564:	47c0      	blx	r8
 800d566:	3001      	adds	r0, #1
 800d568:	d0e6      	beq.n	800d538 <_printf_common+0xa4>
 800d56a:	3601      	adds	r6, #1
 800d56c:	e7d9      	b.n	800d522 <_printf_common+0x8e>
	...

0800d570 <_printf_i>:
 800d570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d574:	460c      	mov	r4, r1
 800d576:	4691      	mov	r9, r2
 800d578:	7e27      	ldrb	r7, [r4, #24]
 800d57a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d57c:	2f78      	cmp	r7, #120	; 0x78
 800d57e:	4680      	mov	r8, r0
 800d580:	469a      	mov	sl, r3
 800d582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d586:	d807      	bhi.n	800d598 <_printf_i+0x28>
 800d588:	2f62      	cmp	r7, #98	; 0x62
 800d58a:	d80a      	bhi.n	800d5a2 <_printf_i+0x32>
 800d58c:	2f00      	cmp	r7, #0
 800d58e:	f000 80d8 	beq.w	800d742 <_printf_i+0x1d2>
 800d592:	2f58      	cmp	r7, #88	; 0x58
 800d594:	f000 80a3 	beq.w	800d6de <_printf_i+0x16e>
 800d598:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d59c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5a0:	e03a      	b.n	800d618 <_printf_i+0xa8>
 800d5a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5a6:	2b15      	cmp	r3, #21
 800d5a8:	d8f6      	bhi.n	800d598 <_printf_i+0x28>
 800d5aa:	a001      	add	r0, pc, #4	; (adr r0, 800d5b0 <_printf_i+0x40>)
 800d5ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d5b0:	0800d609 	.word	0x0800d609
 800d5b4:	0800d61d 	.word	0x0800d61d
 800d5b8:	0800d599 	.word	0x0800d599
 800d5bc:	0800d599 	.word	0x0800d599
 800d5c0:	0800d599 	.word	0x0800d599
 800d5c4:	0800d599 	.word	0x0800d599
 800d5c8:	0800d61d 	.word	0x0800d61d
 800d5cc:	0800d599 	.word	0x0800d599
 800d5d0:	0800d599 	.word	0x0800d599
 800d5d4:	0800d599 	.word	0x0800d599
 800d5d8:	0800d599 	.word	0x0800d599
 800d5dc:	0800d729 	.word	0x0800d729
 800d5e0:	0800d64d 	.word	0x0800d64d
 800d5e4:	0800d70b 	.word	0x0800d70b
 800d5e8:	0800d599 	.word	0x0800d599
 800d5ec:	0800d599 	.word	0x0800d599
 800d5f0:	0800d74b 	.word	0x0800d74b
 800d5f4:	0800d599 	.word	0x0800d599
 800d5f8:	0800d64d 	.word	0x0800d64d
 800d5fc:	0800d599 	.word	0x0800d599
 800d600:	0800d599 	.word	0x0800d599
 800d604:	0800d713 	.word	0x0800d713
 800d608:	680b      	ldr	r3, [r1, #0]
 800d60a:	1d1a      	adds	r2, r3, #4
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	600a      	str	r2, [r1, #0]
 800d610:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d618:	2301      	movs	r3, #1
 800d61a:	e0a3      	b.n	800d764 <_printf_i+0x1f4>
 800d61c:	6825      	ldr	r5, [r4, #0]
 800d61e:	6808      	ldr	r0, [r1, #0]
 800d620:	062e      	lsls	r6, r5, #24
 800d622:	f100 0304 	add.w	r3, r0, #4
 800d626:	d50a      	bpl.n	800d63e <_printf_i+0xce>
 800d628:	6805      	ldr	r5, [r0, #0]
 800d62a:	600b      	str	r3, [r1, #0]
 800d62c:	2d00      	cmp	r5, #0
 800d62e:	da03      	bge.n	800d638 <_printf_i+0xc8>
 800d630:	232d      	movs	r3, #45	; 0x2d
 800d632:	426d      	negs	r5, r5
 800d634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d638:	485e      	ldr	r0, [pc, #376]	; (800d7b4 <_printf_i+0x244>)
 800d63a:	230a      	movs	r3, #10
 800d63c:	e019      	b.n	800d672 <_printf_i+0x102>
 800d63e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d642:	6805      	ldr	r5, [r0, #0]
 800d644:	600b      	str	r3, [r1, #0]
 800d646:	bf18      	it	ne
 800d648:	b22d      	sxthne	r5, r5
 800d64a:	e7ef      	b.n	800d62c <_printf_i+0xbc>
 800d64c:	680b      	ldr	r3, [r1, #0]
 800d64e:	6825      	ldr	r5, [r4, #0]
 800d650:	1d18      	adds	r0, r3, #4
 800d652:	6008      	str	r0, [r1, #0]
 800d654:	0628      	lsls	r0, r5, #24
 800d656:	d501      	bpl.n	800d65c <_printf_i+0xec>
 800d658:	681d      	ldr	r5, [r3, #0]
 800d65a:	e002      	b.n	800d662 <_printf_i+0xf2>
 800d65c:	0669      	lsls	r1, r5, #25
 800d65e:	d5fb      	bpl.n	800d658 <_printf_i+0xe8>
 800d660:	881d      	ldrh	r5, [r3, #0]
 800d662:	4854      	ldr	r0, [pc, #336]	; (800d7b4 <_printf_i+0x244>)
 800d664:	2f6f      	cmp	r7, #111	; 0x6f
 800d666:	bf0c      	ite	eq
 800d668:	2308      	moveq	r3, #8
 800d66a:	230a      	movne	r3, #10
 800d66c:	2100      	movs	r1, #0
 800d66e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d672:	6866      	ldr	r6, [r4, #4]
 800d674:	60a6      	str	r6, [r4, #8]
 800d676:	2e00      	cmp	r6, #0
 800d678:	bfa2      	ittt	ge
 800d67a:	6821      	ldrge	r1, [r4, #0]
 800d67c:	f021 0104 	bicge.w	r1, r1, #4
 800d680:	6021      	strge	r1, [r4, #0]
 800d682:	b90d      	cbnz	r5, 800d688 <_printf_i+0x118>
 800d684:	2e00      	cmp	r6, #0
 800d686:	d04d      	beq.n	800d724 <_printf_i+0x1b4>
 800d688:	4616      	mov	r6, r2
 800d68a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d68e:	fb03 5711 	mls	r7, r3, r1, r5
 800d692:	5dc7      	ldrb	r7, [r0, r7]
 800d694:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d698:	462f      	mov	r7, r5
 800d69a:	42bb      	cmp	r3, r7
 800d69c:	460d      	mov	r5, r1
 800d69e:	d9f4      	bls.n	800d68a <_printf_i+0x11a>
 800d6a0:	2b08      	cmp	r3, #8
 800d6a2:	d10b      	bne.n	800d6bc <_printf_i+0x14c>
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	07df      	lsls	r7, r3, #31
 800d6a8:	d508      	bpl.n	800d6bc <_printf_i+0x14c>
 800d6aa:	6923      	ldr	r3, [r4, #16]
 800d6ac:	6861      	ldr	r1, [r4, #4]
 800d6ae:	4299      	cmp	r1, r3
 800d6b0:	bfde      	ittt	le
 800d6b2:	2330      	movle	r3, #48	; 0x30
 800d6b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d6bc:	1b92      	subs	r2, r2, r6
 800d6be:	6122      	str	r2, [r4, #16]
 800d6c0:	f8cd a000 	str.w	sl, [sp]
 800d6c4:	464b      	mov	r3, r9
 800d6c6:	aa03      	add	r2, sp, #12
 800d6c8:	4621      	mov	r1, r4
 800d6ca:	4640      	mov	r0, r8
 800d6cc:	f7ff fee2 	bl	800d494 <_printf_common>
 800d6d0:	3001      	adds	r0, #1
 800d6d2:	d14c      	bne.n	800d76e <_printf_i+0x1fe>
 800d6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d8:	b004      	add	sp, #16
 800d6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6de:	4835      	ldr	r0, [pc, #212]	; (800d7b4 <_printf_i+0x244>)
 800d6e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	680e      	ldr	r6, [r1, #0]
 800d6e8:	061f      	lsls	r7, r3, #24
 800d6ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800d6ee:	600e      	str	r6, [r1, #0]
 800d6f0:	d514      	bpl.n	800d71c <_printf_i+0x1ac>
 800d6f2:	07d9      	lsls	r1, r3, #31
 800d6f4:	bf44      	itt	mi
 800d6f6:	f043 0320 	orrmi.w	r3, r3, #32
 800d6fa:	6023      	strmi	r3, [r4, #0]
 800d6fc:	b91d      	cbnz	r5, 800d706 <_printf_i+0x196>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	f023 0320 	bic.w	r3, r3, #32
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	2310      	movs	r3, #16
 800d708:	e7b0      	b.n	800d66c <_printf_i+0xfc>
 800d70a:	6823      	ldr	r3, [r4, #0]
 800d70c:	f043 0320 	orr.w	r3, r3, #32
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	2378      	movs	r3, #120	; 0x78
 800d714:	4828      	ldr	r0, [pc, #160]	; (800d7b8 <_printf_i+0x248>)
 800d716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d71a:	e7e3      	b.n	800d6e4 <_printf_i+0x174>
 800d71c:	065e      	lsls	r6, r3, #25
 800d71e:	bf48      	it	mi
 800d720:	b2ad      	uxthmi	r5, r5
 800d722:	e7e6      	b.n	800d6f2 <_printf_i+0x182>
 800d724:	4616      	mov	r6, r2
 800d726:	e7bb      	b.n	800d6a0 <_printf_i+0x130>
 800d728:	680b      	ldr	r3, [r1, #0]
 800d72a:	6826      	ldr	r6, [r4, #0]
 800d72c:	6960      	ldr	r0, [r4, #20]
 800d72e:	1d1d      	adds	r5, r3, #4
 800d730:	600d      	str	r5, [r1, #0]
 800d732:	0635      	lsls	r5, r6, #24
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	d501      	bpl.n	800d73c <_printf_i+0x1cc>
 800d738:	6018      	str	r0, [r3, #0]
 800d73a:	e002      	b.n	800d742 <_printf_i+0x1d2>
 800d73c:	0671      	lsls	r1, r6, #25
 800d73e:	d5fb      	bpl.n	800d738 <_printf_i+0x1c8>
 800d740:	8018      	strh	r0, [r3, #0]
 800d742:	2300      	movs	r3, #0
 800d744:	6123      	str	r3, [r4, #16]
 800d746:	4616      	mov	r6, r2
 800d748:	e7ba      	b.n	800d6c0 <_printf_i+0x150>
 800d74a:	680b      	ldr	r3, [r1, #0]
 800d74c:	1d1a      	adds	r2, r3, #4
 800d74e:	600a      	str	r2, [r1, #0]
 800d750:	681e      	ldr	r6, [r3, #0]
 800d752:	6862      	ldr	r2, [r4, #4]
 800d754:	2100      	movs	r1, #0
 800d756:	4630      	mov	r0, r6
 800d758:	f7f2 fd52 	bl	8000200 <memchr>
 800d75c:	b108      	cbz	r0, 800d762 <_printf_i+0x1f2>
 800d75e:	1b80      	subs	r0, r0, r6
 800d760:	6060      	str	r0, [r4, #4]
 800d762:	6863      	ldr	r3, [r4, #4]
 800d764:	6123      	str	r3, [r4, #16]
 800d766:	2300      	movs	r3, #0
 800d768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d76c:	e7a8      	b.n	800d6c0 <_printf_i+0x150>
 800d76e:	6923      	ldr	r3, [r4, #16]
 800d770:	4632      	mov	r2, r6
 800d772:	4649      	mov	r1, r9
 800d774:	4640      	mov	r0, r8
 800d776:	47d0      	blx	sl
 800d778:	3001      	adds	r0, #1
 800d77a:	d0ab      	beq.n	800d6d4 <_printf_i+0x164>
 800d77c:	6823      	ldr	r3, [r4, #0]
 800d77e:	079b      	lsls	r3, r3, #30
 800d780:	d413      	bmi.n	800d7aa <_printf_i+0x23a>
 800d782:	68e0      	ldr	r0, [r4, #12]
 800d784:	9b03      	ldr	r3, [sp, #12]
 800d786:	4298      	cmp	r0, r3
 800d788:	bfb8      	it	lt
 800d78a:	4618      	movlt	r0, r3
 800d78c:	e7a4      	b.n	800d6d8 <_printf_i+0x168>
 800d78e:	2301      	movs	r3, #1
 800d790:	4632      	mov	r2, r6
 800d792:	4649      	mov	r1, r9
 800d794:	4640      	mov	r0, r8
 800d796:	47d0      	blx	sl
 800d798:	3001      	adds	r0, #1
 800d79a:	d09b      	beq.n	800d6d4 <_printf_i+0x164>
 800d79c:	3501      	adds	r5, #1
 800d79e:	68e3      	ldr	r3, [r4, #12]
 800d7a0:	9903      	ldr	r1, [sp, #12]
 800d7a2:	1a5b      	subs	r3, r3, r1
 800d7a4:	42ab      	cmp	r3, r5
 800d7a6:	dcf2      	bgt.n	800d78e <_printf_i+0x21e>
 800d7a8:	e7eb      	b.n	800d782 <_printf_i+0x212>
 800d7aa:	2500      	movs	r5, #0
 800d7ac:	f104 0619 	add.w	r6, r4, #25
 800d7b0:	e7f5      	b.n	800d79e <_printf_i+0x22e>
 800d7b2:	bf00      	nop
 800d7b4:	080126e6 	.word	0x080126e6
 800d7b8:	080126f7 	.word	0x080126f7

0800d7bc <iprintf>:
 800d7bc:	b40f      	push	{r0, r1, r2, r3}
 800d7be:	4b0a      	ldr	r3, [pc, #40]	; (800d7e8 <iprintf+0x2c>)
 800d7c0:	b513      	push	{r0, r1, r4, lr}
 800d7c2:	681c      	ldr	r4, [r3, #0]
 800d7c4:	b124      	cbz	r4, 800d7d0 <iprintf+0x14>
 800d7c6:	69a3      	ldr	r3, [r4, #24]
 800d7c8:	b913      	cbnz	r3, 800d7d0 <iprintf+0x14>
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f001 f8d6 	bl	800e97c <__sinit>
 800d7d0:	ab05      	add	r3, sp, #20
 800d7d2:	9a04      	ldr	r2, [sp, #16]
 800d7d4:	68a1      	ldr	r1, [r4, #8]
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f001 fe43 	bl	800f464 <_vfiprintf_r>
 800d7de:	b002      	add	sp, #8
 800d7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7e4:	b004      	add	sp, #16
 800d7e6:	4770      	bx	lr
 800d7e8:	20000068 	.word	0x20000068

0800d7ec <_puts_r>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	460e      	mov	r6, r1
 800d7f0:	4605      	mov	r5, r0
 800d7f2:	b118      	cbz	r0, 800d7fc <_puts_r+0x10>
 800d7f4:	6983      	ldr	r3, [r0, #24]
 800d7f6:	b90b      	cbnz	r3, 800d7fc <_puts_r+0x10>
 800d7f8:	f001 f8c0 	bl	800e97c <__sinit>
 800d7fc:	69ab      	ldr	r3, [r5, #24]
 800d7fe:	68ac      	ldr	r4, [r5, #8]
 800d800:	b913      	cbnz	r3, 800d808 <_puts_r+0x1c>
 800d802:	4628      	mov	r0, r5
 800d804:	f001 f8ba 	bl	800e97c <__sinit>
 800d808:	4b2c      	ldr	r3, [pc, #176]	; (800d8bc <_puts_r+0xd0>)
 800d80a:	429c      	cmp	r4, r3
 800d80c:	d120      	bne.n	800d850 <_puts_r+0x64>
 800d80e:	686c      	ldr	r4, [r5, #4]
 800d810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d812:	07db      	lsls	r3, r3, #31
 800d814:	d405      	bmi.n	800d822 <_puts_r+0x36>
 800d816:	89a3      	ldrh	r3, [r4, #12]
 800d818:	0598      	lsls	r0, r3, #22
 800d81a:	d402      	bmi.n	800d822 <_puts_r+0x36>
 800d81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d81e:	f001 f950 	bl	800eac2 <__retarget_lock_acquire_recursive>
 800d822:	89a3      	ldrh	r3, [r4, #12]
 800d824:	0719      	lsls	r1, r3, #28
 800d826:	d51d      	bpl.n	800d864 <_puts_r+0x78>
 800d828:	6923      	ldr	r3, [r4, #16]
 800d82a:	b1db      	cbz	r3, 800d864 <_puts_r+0x78>
 800d82c:	3e01      	subs	r6, #1
 800d82e:	68a3      	ldr	r3, [r4, #8]
 800d830:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d834:	3b01      	subs	r3, #1
 800d836:	60a3      	str	r3, [r4, #8]
 800d838:	bb39      	cbnz	r1, 800d88a <_puts_r+0x9e>
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	da38      	bge.n	800d8b0 <_puts_r+0xc4>
 800d83e:	4622      	mov	r2, r4
 800d840:	210a      	movs	r1, #10
 800d842:	4628      	mov	r0, r5
 800d844:	f000 f848 	bl	800d8d8 <__swbuf_r>
 800d848:	3001      	adds	r0, #1
 800d84a:	d011      	beq.n	800d870 <_puts_r+0x84>
 800d84c:	250a      	movs	r5, #10
 800d84e:	e011      	b.n	800d874 <_puts_r+0x88>
 800d850:	4b1b      	ldr	r3, [pc, #108]	; (800d8c0 <_puts_r+0xd4>)
 800d852:	429c      	cmp	r4, r3
 800d854:	d101      	bne.n	800d85a <_puts_r+0x6e>
 800d856:	68ac      	ldr	r4, [r5, #8]
 800d858:	e7da      	b.n	800d810 <_puts_r+0x24>
 800d85a:	4b1a      	ldr	r3, [pc, #104]	; (800d8c4 <_puts_r+0xd8>)
 800d85c:	429c      	cmp	r4, r3
 800d85e:	bf08      	it	eq
 800d860:	68ec      	ldreq	r4, [r5, #12]
 800d862:	e7d5      	b.n	800d810 <_puts_r+0x24>
 800d864:	4621      	mov	r1, r4
 800d866:	4628      	mov	r0, r5
 800d868:	f000 f888 	bl	800d97c <__swsetup_r>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d0dd      	beq.n	800d82c <_puts_r+0x40>
 800d870:	f04f 35ff 	mov.w	r5, #4294967295
 800d874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d876:	07da      	lsls	r2, r3, #31
 800d878:	d405      	bmi.n	800d886 <_puts_r+0x9a>
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	059b      	lsls	r3, r3, #22
 800d87e:	d402      	bmi.n	800d886 <_puts_r+0x9a>
 800d880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d882:	f001 f91f 	bl	800eac4 <__retarget_lock_release_recursive>
 800d886:	4628      	mov	r0, r5
 800d888:	bd70      	pop	{r4, r5, r6, pc}
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	da04      	bge.n	800d898 <_puts_r+0xac>
 800d88e:	69a2      	ldr	r2, [r4, #24]
 800d890:	429a      	cmp	r2, r3
 800d892:	dc06      	bgt.n	800d8a2 <_puts_r+0xb6>
 800d894:	290a      	cmp	r1, #10
 800d896:	d004      	beq.n	800d8a2 <_puts_r+0xb6>
 800d898:	6823      	ldr	r3, [r4, #0]
 800d89a:	1c5a      	adds	r2, r3, #1
 800d89c:	6022      	str	r2, [r4, #0]
 800d89e:	7019      	strb	r1, [r3, #0]
 800d8a0:	e7c5      	b.n	800d82e <_puts_r+0x42>
 800d8a2:	4622      	mov	r2, r4
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f000 f817 	bl	800d8d8 <__swbuf_r>
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	d1bf      	bne.n	800d82e <_puts_r+0x42>
 800d8ae:	e7df      	b.n	800d870 <_puts_r+0x84>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	250a      	movs	r5, #10
 800d8b4:	1c5a      	adds	r2, r3, #1
 800d8b6:	6022      	str	r2, [r4, #0]
 800d8b8:	701d      	strb	r5, [r3, #0]
 800d8ba:	e7db      	b.n	800d874 <_puts_r+0x88>
 800d8bc:	080127bc 	.word	0x080127bc
 800d8c0:	080127dc 	.word	0x080127dc
 800d8c4:	0801279c 	.word	0x0801279c

0800d8c8 <puts>:
 800d8c8:	4b02      	ldr	r3, [pc, #8]	; (800d8d4 <puts+0xc>)
 800d8ca:	4601      	mov	r1, r0
 800d8cc:	6818      	ldr	r0, [r3, #0]
 800d8ce:	f7ff bf8d 	b.w	800d7ec <_puts_r>
 800d8d2:	bf00      	nop
 800d8d4:	20000068 	.word	0x20000068

0800d8d8 <__swbuf_r>:
 800d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8da:	460e      	mov	r6, r1
 800d8dc:	4614      	mov	r4, r2
 800d8de:	4605      	mov	r5, r0
 800d8e0:	b118      	cbz	r0, 800d8ea <__swbuf_r+0x12>
 800d8e2:	6983      	ldr	r3, [r0, #24]
 800d8e4:	b90b      	cbnz	r3, 800d8ea <__swbuf_r+0x12>
 800d8e6:	f001 f849 	bl	800e97c <__sinit>
 800d8ea:	4b21      	ldr	r3, [pc, #132]	; (800d970 <__swbuf_r+0x98>)
 800d8ec:	429c      	cmp	r4, r3
 800d8ee:	d12b      	bne.n	800d948 <__swbuf_r+0x70>
 800d8f0:	686c      	ldr	r4, [r5, #4]
 800d8f2:	69a3      	ldr	r3, [r4, #24]
 800d8f4:	60a3      	str	r3, [r4, #8]
 800d8f6:	89a3      	ldrh	r3, [r4, #12]
 800d8f8:	071a      	lsls	r2, r3, #28
 800d8fa:	d52f      	bpl.n	800d95c <__swbuf_r+0x84>
 800d8fc:	6923      	ldr	r3, [r4, #16]
 800d8fe:	b36b      	cbz	r3, 800d95c <__swbuf_r+0x84>
 800d900:	6923      	ldr	r3, [r4, #16]
 800d902:	6820      	ldr	r0, [r4, #0]
 800d904:	1ac0      	subs	r0, r0, r3
 800d906:	6963      	ldr	r3, [r4, #20]
 800d908:	b2f6      	uxtb	r6, r6
 800d90a:	4283      	cmp	r3, r0
 800d90c:	4637      	mov	r7, r6
 800d90e:	dc04      	bgt.n	800d91a <__swbuf_r+0x42>
 800d910:	4621      	mov	r1, r4
 800d912:	4628      	mov	r0, r5
 800d914:	f000 ff9e 	bl	800e854 <_fflush_r>
 800d918:	bb30      	cbnz	r0, 800d968 <__swbuf_r+0x90>
 800d91a:	68a3      	ldr	r3, [r4, #8]
 800d91c:	3b01      	subs	r3, #1
 800d91e:	60a3      	str	r3, [r4, #8]
 800d920:	6823      	ldr	r3, [r4, #0]
 800d922:	1c5a      	adds	r2, r3, #1
 800d924:	6022      	str	r2, [r4, #0]
 800d926:	701e      	strb	r6, [r3, #0]
 800d928:	6963      	ldr	r3, [r4, #20]
 800d92a:	3001      	adds	r0, #1
 800d92c:	4283      	cmp	r3, r0
 800d92e:	d004      	beq.n	800d93a <__swbuf_r+0x62>
 800d930:	89a3      	ldrh	r3, [r4, #12]
 800d932:	07db      	lsls	r3, r3, #31
 800d934:	d506      	bpl.n	800d944 <__swbuf_r+0x6c>
 800d936:	2e0a      	cmp	r6, #10
 800d938:	d104      	bne.n	800d944 <__swbuf_r+0x6c>
 800d93a:	4621      	mov	r1, r4
 800d93c:	4628      	mov	r0, r5
 800d93e:	f000 ff89 	bl	800e854 <_fflush_r>
 800d942:	b988      	cbnz	r0, 800d968 <__swbuf_r+0x90>
 800d944:	4638      	mov	r0, r7
 800d946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d948:	4b0a      	ldr	r3, [pc, #40]	; (800d974 <__swbuf_r+0x9c>)
 800d94a:	429c      	cmp	r4, r3
 800d94c:	d101      	bne.n	800d952 <__swbuf_r+0x7a>
 800d94e:	68ac      	ldr	r4, [r5, #8]
 800d950:	e7cf      	b.n	800d8f2 <__swbuf_r+0x1a>
 800d952:	4b09      	ldr	r3, [pc, #36]	; (800d978 <__swbuf_r+0xa0>)
 800d954:	429c      	cmp	r4, r3
 800d956:	bf08      	it	eq
 800d958:	68ec      	ldreq	r4, [r5, #12]
 800d95a:	e7ca      	b.n	800d8f2 <__swbuf_r+0x1a>
 800d95c:	4621      	mov	r1, r4
 800d95e:	4628      	mov	r0, r5
 800d960:	f000 f80c 	bl	800d97c <__swsetup_r>
 800d964:	2800      	cmp	r0, #0
 800d966:	d0cb      	beq.n	800d900 <__swbuf_r+0x28>
 800d968:	f04f 37ff 	mov.w	r7, #4294967295
 800d96c:	e7ea      	b.n	800d944 <__swbuf_r+0x6c>
 800d96e:	bf00      	nop
 800d970:	080127bc 	.word	0x080127bc
 800d974:	080127dc 	.word	0x080127dc
 800d978:	0801279c 	.word	0x0801279c

0800d97c <__swsetup_r>:
 800d97c:	4b32      	ldr	r3, [pc, #200]	; (800da48 <__swsetup_r+0xcc>)
 800d97e:	b570      	push	{r4, r5, r6, lr}
 800d980:	681d      	ldr	r5, [r3, #0]
 800d982:	4606      	mov	r6, r0
 800d984:	460c      	mov	r4, r1
 800d986:	b125      	cbz	r5, 800d992 <__swsetup_r+0x16>
 800d988:	69ab      	ldr	r3, [r5, #24]
 800d98a:	b913      	cbnz	r3, 800d992 <__swsetup_r+0x16>
 800d98c:	4628      	mov	r0, r5
 800d98e:	f000 fff5 	bl	800e97c <__sinit>
 800d992:	4b2e      	ldr	r3, [pc, #184]	; (800da4c <__swsetup_r+0xd0>)
 800d994:	429c      	cmp	r4, r3
 800d996:	d10f      	bne.n	800d9b8 <__swsetup_r+0x3c>
 800d998:	686c      	ldr	r4, [r5, #4]
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9a0:	0719      	lsls	r1, r3, #28
 800d9a2:	d42c      	bmi.n	800d9fe <__swsetup_r+0x82>
 800d9a4:	06dd      	lsls	r5, r3, #27
 800d9a6:	d411      	bmi.n	800d9cc <__swsetup_r+0x50>
 800d9a8:	2309      	movs	r3, #9
 800d9aa:	6033      	str	r3, [r6, #0]
 800d9ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9b0:	81a3      	strh	r3, [r4, #12]
 800d9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b6:	e03e      	b.n	800da36 <__swsetup_r+0xba>
 800d9b8:	4b25      	ldr	r3, [pc, #148]	; (800da50 <__swsetup_r+0xd4>)
 800d9ba:	429c      	cmp	r4, r3
 800d9bc:	d101      	bne.n	800d9c2 <__swsetup_r+0x46>
 800d9be:	68ac      	ldr	r4, [r5, #8]
 800d9c0:	e7eb      	b.n	800d99a <__swsetup_r+0x1e>
 800d9c2:	4b24      	ldr	r3, [pc, #144]	; (800da54 <__swsetup_r+0xd8>)
 800d9c4:	429c      	cmp	r4, r3
 800d9c6:	bf08      	it	eq
 800d9c8:	68ec      	ldreq	r4, [r5, #12]
 800d9ca:	e7e6      	b.n	800d99a <__swsetup_r+0x1e>
 800d9cc:	0758      	lsls	r0, r3, #29
 800d9ce:	d512      	bpl.n	800d9f6 <__swsetup_r+0x7a>
 800d9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9d2:	b141      	cbz	r1, 800d9e6 <__swsetup_r+0x6a>
 800d9d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9d8:	4299      	cmp	r1, r3
 800d9da:	d002      	beq.n	800d9e2 <__swsetup_r+0x66>
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f001 fc6d 	bl	800f2bc <_free_r>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	6363      	str	r3, [r4, #52]	; 0x34
 800d9e6:	89a3      	ldrh	r3, [r4, #12]
 800d9e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d9ec:	81a3      	strh	r3, [r4, #12]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	6063      	str	r3, [r4, #4]
 800d9f2:	6923      	ldr	r3, [r4, #16]
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	89a3      	ldrh	r3, [r4, #12]
 800d9f8:	f043 0308 	orr.w	r3, r3, #8
 800d9fc:	81a3      	strh	r3, [r4, #12]
 800d9fe:	6923      	ldr	r3, [r4, #16]
 800da00:	b94b      	cbnz	r3, 800da16 <__swsetup_r+0x9a>
 800da02:	89a3      	ldrh	r3, [r4, #12]
 800da04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da0c:	d003      	beq.n	800da16 <__swsetup_r+0x9a>
 800da0e:	4621      	mov	r1, r4
 800da10:	4630      	mov	r0, r6
 800da12:	f001 f87d 	bl	800eb10 <__smakebuf_r>
 800da16:	89a0      	ldrh	r0, [r4, #12]
 800da18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da1c:	f010 0301 	ands.w	r3, r0, #1
 800da20:	d00a      	beq.n	800da38 <__swsetup_r+0xbc>
 800da22:	2300      	movs	r3, #0
 800da24:	60a3      	str	r3, [r4, #8]
 800da26:	6963      	ldr	r3, [r4, #20]
 800da28:	425b      	negs	r3, r3
 800da2a:	61a3      	str	r3, [r4, #24]
 800da2c:	6923      	ldr	r3, [r4, #16]
 800da2e:	b943      	cbnz	r3, 800da42 <__swsetup_r+0xc6>
 800da30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da34:	d1ba      	bne.n	800d9ac <__swsetup_r+0x30>
 800da36:	bd70      	pop	{r4, r5, r6, pc}
 800da38:	0781      	lsls	r1, r0, #30
 800da3a:	bf58      	it	pl
 800da3c:	6963      	ldrpl	r3, [r4, #20]
 800da3e:	60a3      	str	r3, [r4, #8]
 800da40:	e7f4      	b.n	800da2c <__swsetup_r+0xb0>
 800da42:	2000      	movs	r0, #0
 800da44:	e7f7      	b.n	800da36 <__swsetup_r+0xba>
 800da46:	bf00      	nop
 800da48:	20000068 	.word	0x20000068
 800da4c:	080127bc 	.word	0x080127bc
 800da50:	080127dc 	.word	0x080127dc
 800da54:	0801279c 	.word	0x0801279c

0800da58 <quorem>:
 800da58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	6903      	ldr	r3, [r0, #16]
 800da5e:	690c      	ldr	r4, [r1, #16]
 800da60:	42a3      	cmp	r3, r4
 800da62:	4607      	mov	r7, r0
 800da64:	f2c0 8081 	blt.w	800db6a <quorem+0x112>
 800da68:	3c01      	subs	r4, #1
 800da6a:	f101 0814 	add.w	r8, r1, #20
 800da6e:	f100 0514 	add.w	r5, r0, #20
 800da72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da76:	9301      	str	r3, [sp, #4]
 800da78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da80:	3301      	adds	r3, #1
 800da82:	429a      	cmp	r2, r3
 800da84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800da88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800da90:	d331      	bcc.n	800daf6 <quorem+0x9e>
 800da92:	f04f 0e00 	mov.w	lr, #0
 800da96:	4640      	mov	r0, r8
 800da98:	46ac      	mov	ip, r5
 800da9a:	46f2      	mov	sl, lr
 800da9c:	f850 2b04 	ldr.w	r2, [r0], #4
 800daa0:	b293      	uxth	r3, r2
 800daa2:	fb06 e303 	mla	r3, r6, r3, lr
 800daa6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800daaa:	b29b      	uxth	r3, r3
 800daac:	ebaa 0303 	sub.w	r3, sl, r3
 800dab0:	0c12      	lsrs	r2, r2, #16
 800dab2:	f8dc a000 	ldr.w	sl, [ip]
 800dab6:	fb06 e202 	mla	r2, r6, r2, lr
 800daba:	fa13 f38a 	uxtah	r3, r3, sl
 800dabe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dac2:	fa1f fa82 	uxth.w	sl, r2
 800dac6:	f8dc 2000 	ldr.w	r2, [ip]
 800daca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800dace:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dad8:	4581      	cmp	r9, r0
 800dada:	f84c 3b04 	str.w	r3, [ip], #4
 800dade:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dae2:	d2db      	bcs.n	800da9c <quorem+0x44>
 800dae4:	f855 300b 	ldr.w	r3, [r5, fp]
 800dae8:	b92b      	cbnz	r3, 800daf6 <quorem+0x9e>
 800daea:	9b01      	ldr	r3, [sp, #4]
 800daec:	3b04      	subs	r3, #4
 800daee:	429d      	cmp	r5, r3
 800daf0:	461a      	mov	r2, r3
 800daf2:	d32e      	bcc.n	800db52 <quorem+0xfa>
 800daf4:	613c      	str	r4, [r7, #16]
 800daf6:	4638      	mov	r0, r7
 800daf8:	f001 fad0 	bl	800f09c <__mcmp>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	db24      	blt.n	800db4a <quorem+0xf2>
 800db00:	3601      	adds	r6, #1
 800db02:	4628      	mov	r0, r5
 800db04:	f04f 0c00 	mov.w	ip, #0
 800db08:	f858 2b04 	ldr.w	r2, [r8], #4
 800db0c:	f8d0 e000 	ldr.w	lr, [r0]
 800db10:	b293      	uxth	r3, r2
 800db12:	ebac 0303 	sub.w	r3, ip, r3
 800db16:	0c12      	lsrs	r2, r2, #16
 800db18:	fa13 f38e 	uxtah	r3, r3, lr
 800db1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800db20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db24:	b29b      	uxth	r3, r3
 800db26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db2a:	45c1      	cmp	r9, r8
 800db2c:	f840 3b04 	str.w	r3, [r0], #4
 800db30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800db34:	d2e8      	bcs.n	800db08 <quorem+0xb0>
 800db36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db3e:	b922      	cbnz	r2, 800db4a <quorem+0xf2>
 800db40:	3b04      	subs	r3, #4
 800db42:	429d      	cmp	r5, r3
 800db44:	461a      	mov	r2, r3
 800db46:	d30a      	bcc.n	800db5e <quorem+0x106>
 800db48:	613c      	str	r4, [r7, #16]
 800db4a:	4630      	mov	r0, r6
 800db4c:	b003      	add	sp, #12
 800db4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db52:	6812      	ldr	r2, [r2, #0]
 800db54:	3b04      	subs	r3, #4
 800db56:	2a00      	cmp	r2, #0
 800db58:	d1cc      	bne.n	800daf4 <quorem+0x9c>
 800db5a:	3c01      	subs	r4, #1
 800db5c:	e7c7      	b.n	800daee <quorem+0x96>
 800db5e:	6812      	ldr	r2, [r2, #0]
 800db60:	3b04      	subs	r3, #4
 800db62:	2a00      	cmp	r2, #0
 800db64:	d1f0      	bne.n	800db48 <quorem+0xf0>
 800db66:	3c01      	subs	r4, #1
 800db68:	e7eb      	b.n	800db42 <quorem+0xea>
 800db6a:	2000      	movs	r0, #0
 800db6c:	e7ee      	b.n	800db4c <quorem+0xf4>
	...

0800db70 <_dtoa_r>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	ed2d 8b02 	vpush	{d8}
 800db78:	ec57 6b10 	vmov	r6, r7, d0
 800db7c:	b095      	sub	sp, #84	; 0x54
 800db7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800db84:	9105      	str	r1, [sp, #20]
 800db86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800db8a:	4604      	mov	r4, r0
 800db8c:	9209      	str	r2, [sp, #36]	; 0x24
 800db8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db90:	b975      	cbnz	r5, 800dbb0 <_dtoa_r+0x40>
 800db92:	2010      	movs	r0, #16
 800db94:	f000 fffc 	bl	800eb90 <malloc>
 800db98:	4602      	mov	r2, r0
 800db9a:	6260      	str	r0, [r4, #36]	; 0x24
 800db9c:	b920      	cbnz	r0, 800dba8 <_dtoa_r+0x38>
 800db9e:	4bb2      	ldr	r3, [pc, #712]	; (800de68 <_dtoa_r+0x2f8>)
 800dba0:	21ea      	movs	r1, #234	; 0xea
 800dba2:	48b2      	ldr	r0, [pc, #712]	; (800de6c <_dtoa_r+0x2fc>)
 800dba4:	f001 fdf4 	bl	800f790 <__assert_func>
 800dba8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dbac:	6005      	str	r5, [r0, #0]
 800dbae:	60c5      	str	r5, [r0, #12]
 800dbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbb2:	6819      	ldr	r1, [r3, #0]
 800dbb4:	b151      	cbz	r1, 800dbcc <_dtoa_r+0x5c>
 800dbb6:	685a      	ldr	r2, [r3, #4]
 800dbb8:	604a      	str	r2, [r1, #4]
 800dbba:	2301      	movs	r3, #1
 800dbbc:	4093      	lsls	r3, r2
 800dbbe:	608b      	str	r3, [r1, #8]
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f001 f82d 	bl	800ec20 <_Bfree>
 800dbc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbc8:	2200      	movs	r2, #0
 800dbca:	601a      	str	r2, [r3, #0]
 800dbcc:	1e3b      	subs	r3, r7, #0
 800dbce:	bfb9      	ittee	lt
 800dbd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dbd4:	9303      	strlt	r3, [sp, #12]
 800dbd6:	2300      	movge	r3, #0
 800dbd8:	f8c8 3000 	strge.w	r3, [r8]
 800dbdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dbe0:	4ba3      	ldr	r3, [pc, #652]	; (800de70 <_dtoa_r+0x300>)
 800dbe2:	bfbc      	itt	lt
 800dbe4:	2201      	movlt	r2, #1
 800dbe6:	f8c8 2000 	strlt.w	r2, [r8]
 800dbea:	ea33 0309 	bics.w	r3, r3, r9
 800dbee:	d11b      	bne.n	800dc28 <_dtoa_r+0xb8>
 800dbf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dbf2:	f242 730f 	movw	r3, #9999	; 0x270f
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbfc:	4333      	orrs	r3, r6
 800dbfe:	f000 857a 	beq.w	800e6f6 <_dtoa_r+0xb86>
 800dc02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc04:	b963      	cbnz	r3, 800dc20 <_dtoa_r+0xb0>
 800dc06:	4b9b      	ldr	r3, [pc, #620]	; (800de74 <_dtoa_r+0x304>)
 800dc08:	e024      	b.n	800dc54 <_dtoa_r+0xe4>
 800dc0a:	4b9b      	ldr	r3, [pc, #620]	; (800de78 <_dtoa_r+0x308>)
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	3308      	adds	r3, #8
 800dc10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc12:	6013      	str	r3, [r2, #0]
 800dc14:	9800      	ldr	r0, [sp, #0]
 800dc16:	b015      	add	sp, #84	; 0x54
 800dc18:	ecbd 8b02 	vpop	{d8}
 800dc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc20:	4b94      	ldr	r3, [pc, #592]	; (800de74 <_dtoa_r+0x304>)
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	3303      	adds	r3, #3
 800dc26:	e7f3      	b.n	800dc10 <_dtoa_r+0xa0>
 800dc28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	ec51 0b17 	vmov	r0, r1, d7
 800dc32:	2300      	movs	r3, #0
 800dc34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dc38:	f7f2 ff56 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc3c:	4680      	mov	r8, r0
 800dc3e:	b158      	cbz	r0, 800dc58 <_dtoa_r+0xe8>
 800dc40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc42:	2301      	movs	r3, #1
 800dc44:	6013      	str	r3, [r2, #0]
 800dc46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f000 8551 	beq.w	800e6f0 <_dtoa_r+0xb80>
 800dc4e:	488b      	ldr	r0, [pc, #556]	; (800de7c <_dtoa_r+0x30c>)
 800dc50:	6018      	str	r0, [r3, #0]
 800dc52:	1e43      	subs	r3, r0, #1
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	e7dd      	b.n	800dc14 <_dtoa_r+0xa4>
 800dc58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dc5c:	aa12      	add	r2, sp, #72	; 0x48
 800dc5e:	a913      	add	r1, sp, #76	; 0x4c
 800dc60:	4620      	mov	r0, r4
 800dc62:	f001 fabf 	bl	800f1e4 <__d2b>
 800dc66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc6a:	4683      	mov	fp, r0
 800dc6c:	2d00      	cmp	r5, #0
 800dc6e:	d07c      	beq.n	800dd6a <_dtoa_r+0x1fa>
 800dc70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800dc76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800dc7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dc82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dc86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dc8a:	4b7d      	ldr	r3, [pc, #500]	; (800de80 <_dtoa_r+0x310>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4630      	mov	r0, r6
 800dc90:	4639      	mov	r1, r7
 800dc92:	f7f2 fb09 	bl	80002a8 <__aeabi_dsub>
 800dc96:	a36e      	add	r3, pc, #440	; (adr r3, 800de50 <_dtoa_r+0x2e0>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	f7f2 fcbc 	bl	8000618 <__aeabi_dmul>
 800dca0:	a36d      	add	r3, pc, #436	; (adr r3, 800de58 <_dtoa_r+0x2e8>)
 800dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca6:	f7f2 fb01 	bl	80002ac <__adddf3>
 800dcaa:	4606      	mov	r6, r0
 800dcac:	4628      	mov	r0, r5
 800dcae:	460f      	mov	r7, r1
 800dcb0:	f7f2 fc48 	bl	8000544 <__aeabi_i2d>
 800dcb4:	a36a      	add	r3, pc, #424	; (adr r3, 800de60 <_dtoa_r+0x2f0>)
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	f7f2 fcad 	bl	8000618 <__aeabi_dmul>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	4639      	mov	r1, r7
 800dcc6:	f7f2 faf1 	bl	80002ac <__adddf3>
 800dcca:	4606      	mov	r6, r0
 800dccc:	460f      	mov	r7, r1
 800dcce:	f7f2 ff53 	bl	8000b78 <__aeabi_d2iz>
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	4682      	mov	sl, r0
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	4630      	mov	r0, r6
 800dcda:	4639      	mov	r1, r7
 800dcdc:	f7f2 ff0e 	bl	8000afc <__aeabi_dcmplt>
 800dce0:	b148      	cbz	r0, 800dcf6 <_dtoa_r+0x186>
 800dce2:	4650      	mov	r0, sl
 800dce4:	f7f2 fc2e 	bl	8000544 <__aeabi_i2d>
 800dce8:	4632      	mov	r2, r6
 800dcea:	463b      	mov	r3, r7
 800dcec:	f7f2 fefc 	bl	8000ae8 <__aeabi_dcmpeq>
 800dcf0:	b908      	cbnz	r0, 800dcf6 <_dtoa_r+0x186>
 800dcf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcf6:	f1ba 0f16 	cmp.w	sl, #22
 800dcfa:	d854      	bhi.n	800dda6 <_dtoa_r+0x236>
 800dcfc:	4b61      	ldr	r3, [pc, #388]	; (800de84 <_dtoa_r+0x314>)
 800dcfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd0a:	f7f2 fef7 	bl	8000afc <__aeabi_dcmplt>
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	d04b      	beq.n	800ddaa <_dtoa_r+0x23a>
 800dd12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd16:	2300      	movs	r3, #0
 800dd18:	930e      	str	r3, [sp, #56]	; 0x38
 800dd1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd1c:	1b5d      	subs	r5, r3, r5
 800dd1e:	1e6b      	subs	r3, r5, #1
 800dd20:	9304      	str	r3, [sp, #16]
 800dd22:	bf43      	ittte	mi
 800dd24:	2300      	movmi	r3, #0
 800dd26:	f1c5 0801 	rsbmi	r8, r5, #1
 800dd2a:	9304      	strmi	r3, [sp, #16]
 800dd2c:	f04f 0800 	movpl.w	r8, #0
 800dd30:	f1ba 0f00 	cmp.w	sl, #0
 800dd34:	db3b      	blt.n	800ddae <_dtoa_r+0x23e>
 800dd36:	9b04      	ldr	r3, [sp, #16]
 800dd38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dd3c:	4453      	add	r3, sl
 800dd3e:	9304      	str	r3, [sp, #16]
 800dd40:	2300      	movs	r3, #0
 800dd42:	9306      	str	r3, [sp, #24]
 800dd44:	9b05      	ldr	r3, [sp, #20]
 800dd46:	2b09      	cmp	r3, #9
 800dd48:	d869      	bhi.n	800de1e <_dtoa_r+0x2ae>
 800dd4a:	2b05      	cmp	r3, #5
 800dd4c:	bfc4      	itt	gt
 800dd4e:	3b04      	subgt	r3, #4
 800dd50:	9305      	strgt	r3, [sp, #20]
 800dd52:	9b05      	ldr	r3, [sp, #20]
 800dd54:	f1a3 0302 	sub.w	r3, r3, #2
 800dd58:	bfcc      	ite	gt
 800dd5a:	2500      	movgt	r5, #0
 800dd5c:	2501      	movle	r5, #1
 800dd5e:	2b03      	cmp	r3, #3
 800dd60:	d869      	bhi.n	800de36 <_dtoa_r+0x2c6>
 800dd62:	e8df f003 	tbb	[pc, r3]
 800dd66:	4e2c      	.short	0x4e2c
 800dd68:	5a4c      	.short	0x5a4c
 800dd6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dd6e:	441d      	add	r5, r3
 800dd70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dd74:	2b20      	cmp	r3, #32
 800dd76:	bfc1      	itttt	gt
 800dd78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dd7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dd80:	fa09 f303 	lslgt.w	r3, r9, r3
 800dd84:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dd88:	bfda      	itte	le
 800dd8a:	f1c3 0320 	rsble	r3, r3, #32
 800dd8e:	fa06 f003 	lslle.w	r0, r6, r3
 800dd92:	4318      	orrgt	r0, r3
 800dd94:	f7f2 fbc6 	bl	8000524 <__aeabi_ui2d>
 800dd98:	2301      	movs	r3, #1
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dda0:	3d01      	subs	r5, #1
 800dda2:	9310      	str	r3, [sp, #64]	; 0x40
 800dda4:	e771      	b.n	800dc8a <_dtoa_r+0x11a>
 800dda6:	2301      	movs	r3, #1
 800dda8:	e7b6      	b.n	800dd18 <_dtoa_r+0x1a8>
 800ddaa:	900e      	str	r0, [sp, #56]	; 0x38
 800ddac:	e7b5      	b.n	800dd1a <_dtoa_r+0x1aa>
 800ddae:	f1ca 0300 	rsb	r3, sl, #0
 800ddb2:	9306      	str	r3, [sp, #24]
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	eba8 080a 	sub.w	r8, r8, sl
 800ddba:	930d      	str	r3, [sp, #52]	; 0x34
 800ddbc:	e7c2      	b.n	800dd44 <_dtoa_r+0x1d4>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	9308      	str	r3, [sp, #32]
 800ddc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	dc39      	bgt.n	800de3c <_dtoa_r+0x2cc>
 800ddc8:	f04f 0901 	mov.w	r9, #1
 800ddcc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ddd0:	464b      	mov	r3, r9
 800ddd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ddd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ddd8:	2200      	movs	r2, #0
 800ddda:	6042      	str	r2, [r0, #4]
 800dddc:	2204      	movs	r2, #4
 800ddde:	f102 0614 	add.w	r6, r2, #20
 800dde2:	429e      	cmp	r6, r3
 800dde4:	6841      	ldr	r1, [r0, #4]
 800dde6:	d92f      	bls.n	800de48 <_dtoa_r+0x2d8>
 800dde8:	4620      	mov	r0, r4
 800ddea:	f000 fed9 	bl	800eba0 <_Balloc>
 800ddee:	9000      	str	r0, [sp, #0]
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d14b      	bne.n	800de8c <_dtoa_r+0x31c>
 800ddf4:	4b24      	ldr	r3, [pc, #144]	; (800de88 <_dtoa_r+0x318>)
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ddfc:	e6d1      	b.n	800dba2 <_dtoa_r+0x32>
 800ddfe:	2301      	movs	r3, #1
 800de00:	e7de      	b.n	800ddc0 <_dtoa_r+0x250>
 800de02:	2300      	movs	r3, #0
 800de04:	9308      	str	r3, [sp, #32]
 800de06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de08:	eb0a 0903 	add.w	r9, sl, r3
 800de0c:	f109 0301 	add.w	r3, r9, #1
 800de10:	2b01      	cmp	r3, #1
 800de12:	9301      	str	r3, [sp, #4]
 800de14:	bfb8      	it	lt
 800de16:	2301      	movlt	r3, #1
 800de18:	e7dd      	b.n	800ddd6 <_dtoa_r+0x266>
 800de1a:	2301      	movs	r3, #1
 800de1c:	e7f2      	b.n	800de04 <_dtoa_r+0x294>
 800de1e:	2501      	movs	r5, #1
 800de20:	2300      	movs	r3, #0
 800de22:	9305      	str	r3, [sp, #20]
 800de24:	9508      	str	r5, [sp, #32]
 800de26:	f04f 39ff 	mov.w	r9, #4294967295
 800de2a:	2200      	movs	r2, #0
 800de2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800de30:	2312      	movs	r3, #18
 800de32:	9209      	str	r2, [sp, #36]	; 0x24
 800de34:	e7cf      	b.n	800ddd6 <_dtoa_r+0x266>
 800de36:	2301      	movs	r3, #1
 800de38:	9308      	str	r3, [sp, #32]
 800de3a:	e7f4      	b.n	800de26 <_dtoa_r+0x2b6>
 800de3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800de40:	f8cd 9004 	str.w	r9, [sp, #4]
 800de44:	464b      	mov	r3, r9
 800de46:	e7c6      	b.n	800ddd6 <_dtoa_r+0x266>
 800de48:	3101      	adds	r1, #1
 800de4a:	6041      	str	r1, [r0, #4]
 800de4c:	0052      	lsls	r2, r2, #1
 800de4e:	e7c6      	b.n	800ddde <_dtoa_r+0x26e>
 800de50:	636f4361 	.word	0x636f4361
 800de54:	3fd287a7 	.word	0x3fd287a7
 800de58:	8b60c8b3 	.word	0x8b60c8b3
 800de5c:	3fc68a28 	.word	0x3fc68a28
 800de60:	509f79fb 	.word	0x509f79fb
 800de64:	3fd34413 	.word	0x3fd34413
 800de68:	08012715 	.word	0x08012715
 800de6c:	0801272c 	.word	0x0801272c
 800de70:	7ff00000 	.word	0x7ff00000
 800de74:	08012711 	.word	0x08012711
 800de78:	08012708 	.word	0x08012708
 800de7c:	080126e5 	.word	0x080126e5
 800de80:	3ff80000 	.word	0x3ff80000
 800de84:	08012888 	.word	0x08012888
 800de88:	0801278b 	.word	0x0801278b
 800de8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de8e:	9a00      	ldr	r2, [sp, #0]
 800de90:	601a      	str	r2, [r3, #0]
 800de92:	9b01      	ldr	r3, [sp, #4]
 800de94:	2b0e      	cmp	r3, #14
 800de96:	f200 80ad 	bhi.w	800dff4 <_dtoa_r+0x484>
 800de9a:	2d00      	cmp	r5, #0
 800de9c:	f000 80aa 	beq.w	800dff4 <_dtoa_r+0x484>
 800dea0:	f1ba 0f00 	cmp.w	sl, #0
 800dea4:	dd36      	ble.n	800df14 <_dtoa_r+0x3a4>
 800dea6:	4ac3      	ldr	r2, [pc, #780]	; (800e1b4 <_dtoa_r+0x644>)
 800dea8:	f00a 030f 	and.w	r3, sl, #15
 800deac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800deb0:	ed93 7b00 	vldr	d7, [r3]
 800deb4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800deb8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800debc:	eeb0 8a47 	vmov.f32	s16, s14
 800dec0:	eef0 8a67 	vmov.f32	s17, s15
 800dec4:	d016      	beq.n	800def4 <_dtoa_r+0x384>
 800dec6:	4bbc      	ldr	r3, [pc, #752]	; (800e1b8 <_dtoa_r+0x648>)
 800dec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800decc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ded0:	f7f2 fccc 	bl	800086c <__aeabi_ddiv>
 800ded4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ded8:	f007 070f 	and.w	r7, r7, #15
 800dedc:	2503      	movs	r5, #3
 800dede:	4eb6      	ldr	r6, [pc, #728]	; (800e1b8 <_dtoa_r+0x648>)
 800dee0:	b957      	cbnz	r7, 800def8 <_dtoa_r+0x388>
 800dee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dee6:	ec53 2b18 	vmov	r2, r3, d8
 800deea:	f7f2 fcbf 	bl	800086c <__aeabi_ddiv>
 800deee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800def2:	e029      	b.n	800df48 <_dtoa_r+0x3d8>
 800def4:	2502      	movs	r5, #2
 800def6:	e7f2      	b.n	800dede <_dtoa_r+0x36e>
 800def8:	07f9      	lsls	r1, r7, #31
 800defa:	d508      	bpl.n	800df0e <_dtoa_r+0x39e>
 800defc:	ec51 0b18 	vmov	r0, r1, d8
 800df00:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df04:	f7f2 fb88 	bl	8000618 <__aeabi_dmul>
 800df08:	ec41 0b18 	vmov	d8, r0, r1
 800df0c:	3501      	adds	r5, #1
 800df0e:	107f      	asrs	r7, r7, #1
 800df10:	3608      	adds	r6, #8
 800df12:	e7e5      	b.n	800dee0 <_dtoa_r+0x370>
 800df14:	f000 80a6 	beq.w	800e064 <_dtoa_r+0x4f4>
 800df18:	f1ca 0600 	rsb	r6, sl, #0
 800df1c:	4ba5      	ldr	r3, [pc, #660]	; (800e1b4 <_dtoa_r+0x644>)
 800df1e:	4fa6      	ldr	r7, [pc, #664]	; (800e1b8 <_dtoa_r+0x648>)
 800df20:	f006 020f 	and.w	r2, r6, #15
 800df24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df30:	f7f2 fb72 	bl	8000618 <__aeabi_dmul>
 800df34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df38:	1136      	asrs	r6, r6, #4
 800df3a:	2300      	movs	r3, #0
 800df3c:	2502      	movs	r5, #2
 800df3e:	2e00      	cmp	r6, #0
 800df40:	f040 8085 	bne.w	800e04e <_dtoa_r+0x4de>
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1d2      	bne.n	800deee <_dtoa_r+0x37e>
 800df48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f000 808c 	beq.w	800e068 <_dtoa_r+0x4f8>
 800df50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df54:	4b99      	ldr	r3, [pc, #612]	; (800e1bc <_dtoa_r+0x64c>)
 800df56:	2200      	movs	r2, #0
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f2 fdce 	bl	8000afc <__aeabi_dcmplt>
 800df60:	2800      	cmp	r0, #0
 800df62:	f000 8081 	beq.w	800e068 <_dtoa_r+0x4f8>
 800df66:	9b01      	ldr	r3, [sp, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d07d      	beq.n	800e068 <_dtoa_r+0x4f8>
 800df6c:	f1b9 0f00 	cmp.w	r9, #0
 800df70:	dd3c      	ble.n	800dfec <_dtoa_r+0x47c>
 800df72:	f10a 33ff 	add.w	r3, sl, #4294967295
 800df76:	9307      	str	r3, [sp, #28]
 800df78:	2200      	movs	r2, #0
 800df7a:	4b91      	ldr	r3, [pc, #580]	; (800e1c0 <_dtoa_r+0x650>)
 800df7c:	4630      	mov	r0, r6
 800df7e:	4639      	mov	r1, r7
 800df80:	f7f2 fb4a 	bl	8000618 <__aeabi_dmul>
 800df84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df88:	3501      	adds	r5, #1
 800df8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800df8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df92:	4628      	mov	r0, r5
 800df94:	f7f2 fad6 	bl	8000544 <__aeabi_i2d>
 800df98:	4632      	mov	r2, r6
 800df9a:	463b      	mov	r3, r7
 800df9c:	f7f2 fb3c 	bl	8000618 <__aeabi_dmul>
 800dfa0:	4b88      	ldr	r3, [pc, #544]	; (800e1c4 <_dtoa_r+0x654>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f7f2 f982 	bl	80002ac <__adddf3>
 800dfa8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dfac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfb0:	9303      	str	r3, [sp, #12]
 800dfb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d15c      	bne.n	800e072 <_dtoa_r+0x502>
 800dfb8:	4b83      	ldr	r3, [pc, #524]	; (800e1c8 <_dtoa_r+0x658>)
 800dfba:	2200      	movs	r2, #0
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	4639      	mov	r1, r7
 800dfc0:	f7f2 f972 	bl	80002a8 <__aeabi_dsub>
 800dfc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfc8:	4606      	mov	r6, r0
 800dfca:	460f      	mov	r7, r1
 800dfcc:	f7f2 fdb4 	bl	8000b38 <__aeabi_dcmpgt>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	f040 8296 	bne.w	800e502 <_dtoa_r+0x992>
 800dfd6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfe0:	4639      	mov	r1, r7
 800dfe2:	f7f2 fd8b 	bl	8000afc <__aeabi_dcmplt>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	f040 8288 	bne.w	800e4fc <_dtoa_r+0x98c>
 800dfec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dff0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	f2c0 8158 	blt.w	800e2ac <_dtoa_r+0x73c>
 800dffc:	f1ba 0f0e 	cmp.w	sl, #14
 800e000:	f300 8154 	bgt.w	800e2ac <_dtoa_r+0x73c>
 800e004:	4b6b      	ldr	r3, [pc, #428]	; (800e1b4 <_dtoa_r+0x644>)
 800e006:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e00a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e010:	2b00      	cmp	r3, #0
 800e012:	f280 80e3 	bge.w	800e1dc <_dtoa_r+0x66c>
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f300 80df 	bgt.w	800e1dc <_dtoa_r+0x66c>
 800e01e:	f040 826d 	bne.w	800e4fc <_dtoa_r+0x98c>
 800e022:	4b69      	ldr	r3, [pc, #420]	; (800e1c8 <_dtoa_r+0x658>)
 800e024:	2200      	movs	r2, #0
 800e026:	4640      	mov	r0, r8
 800e028:	4649      	mov	r1, r9
 800e02a:	f7f2 faf5 	bl	8000618 <__aeabi_dmul>
 800e02e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e032:	f7f2 fd77 	bl	8000b24 <__aeabi_dcmpge>
 800e036:	9e01      	ldr	r6, [sp, #4]
 800e038:	4637      	mov	r7, r6
 800e03a:	2800      	cmp	r0, #0
 800e03c:	f040 8243 	bne.w	800e4c6 <_dtoa_r+0x956>
 800e040:	9d00      	ldr	r5, [sp, #0]
 800e042:	2331      	movs	r3, #49	; 0x31
 800e044:	f805 3b01 	strb.w	r3, [r5], #1
 800e048:	f10a 0a01 	add.w	sl, sl, #1
 800e04c:	e23f      	b.n	800e4ce <_dtoa_r+0x95e>
 800e04e:	07f2      	lsls	r2, r6, #31
 800e050:	d505      	bpl.n	800e05e <_dtoa_r+0x4ee>
 800e052:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e056:	f7f2 fadf 	bl	8000618 <__aeabi_dmul>
 800e05a:	3501      	adds	r5, #1
 800e05c:	2301      	movs	r3, #1
 800e05e:	1076      	asrs	r6, r6, #1
 800e060:	3708      	adds	r7, #8
 800e062:	e76c      	b.n	800df3e <_dtoa_r+0x3ce>
 800e064:	2502      	movs	r5, #2
 800e066:	e76f      	b.n	800df48 <_dtoa_r+0x3d8>
 800e068:	9b01      	ldr	r3, [sp, #4]
 800e06a:	f8cd a01c 	str.w	sl, [sp, #28]
 800e06e:	930c      	str	r3, [sp, #48]	; 0x30
 800e070:	e78d      	b.n	800df8e <_dtoa_r+0x41e>
 800e072:	9900      	ldr	r1, [sp, #0]
 800e074:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e078:	4b4e      	ldr	r3, [pc, #312]	; (800e1b4 <_dtoa_r+0x644>)
 800e07a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e07e:	4401      	add	r1, r0
 800e080:	9102      	str	r1, [sp, #8]
 800e082:	9908      	ldr	r1, [sp, #32]
 800e084:	eeb0 8a47 	vmov.f32	s16, s14
 800e088:	eef0 8a67 	vmov.f32	s17, s15
 800e08c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e090:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e094:	2900      	cmp	r1, #0
 800e096:	d045      	beq.n	800e124 <_dtoa_r+0x5b4>
 800e098:	494c      	ldr	r1, [pc, #304]	; (800e1cc <_dtoa_r+0x65c>)
 800e09a:	2000      	movs	r0, #0
 800e09c:	f7f2 fbe6 	bl	800086c <__aeabi_ddiv>
 800e0a0:	ec53 2b18 	vmov	r2, r3, d8
 800e0a4:	f7f2 f900 	bl	80002a8 <__aeabi_dsub>
 800e0a8:	9d00      	ldr	r5, [sp, #0]
 800e0aa:	ec41 0b18 	vmov	d8, r0, r1
 800e0ae:	4639      	mov	r1, r7
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f7f2 fd61 	bl	8000b78 <__aeabi_d2iz>
 800e0b6:	900c      	str	r0, [sp, #48]	; 0x30
 800e0b8:	f7f2 fa44 	bl	8000544 <__aeabi_i2d>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	4639      	mov	r1, r7
 800e0c4:	f7f2 f8f0 	bl	80002a8 <__aeabi_dsub>
 800e0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0ca:	3330      	adds	r3, #48	; 0x30
 800e0cc:	f805 3b01 	strb.w	r3, [r5], #1
 800e0d0:	ec53 2b18 	vmov	r2, r3, d8
 800e0d4:	4606      	mov	r6, r0
 800e0d6:	460f      	mov	r7, r1
 800e0d8:	f7f2 fd10 	bl	8000afc <__aeabi_dcmplt>
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d165      	bne.n	800e1ac <_dtoa_r+0x63c>
 800e0e0:	4632      	mov	r2, r6
 800e0e2:	463b      	mov	r3, r7
 800e0e4:	4935      	ldr	r1, [pc, #212]	; (800e1bc <_dtoa_r+0x64c>)
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	f7f2 f8de 	bl	80002a8 <__aeabi_dsub>
 800e0ec:	ec53 2b18 	vmov	r2, r3, d8
 800e0f0:	f7f2 fd04 	bl	8000afc <__aeabi_dcmplt>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	f040 80b9 	bne.w	800e26c <_dtoa_r+0x6fc>
 800e0fa:	9b02      	ldr	r3, [sp, #8]
 800e0fc:	429d      	cmp	r5, r3
 800e0fe:	f43f af75 	beq.w	800dfec <_dtoa_r+0x47c>
 800e102:	4b2f      	ldr	r3, [pc, #188]	; (800e1c0 <_dtoa_r+0x650>)
 800e104:	ec51 0b18 	vmov	r0, r1, d8
 800e108:	2200      	movs	r2, #0
 800e10a:	f7f2 fa85 	bl	8000618 <__aeabi_dmul>
 800e10e:	4b2c      	ldr	r3, [pc, #176]	; (800e1c0 <_dtoa_r+0x650>)
 800e110:	ec41 0b18 	vmov	d8, r0, r1
 800e114:	2200      	movs	r2, #0
 800e116:	4630      	mov	r0, r6
 800e118:	4639      	mov	r1, r7
 800e11a:	f7f2 fa7d 	bl	8000618 <__aeabi_dmul>
 800e11e:	4606      	mov	r6, r0
 800e120:	460f      	mov	r7, r1
 800e122:	e7c4      	b.n	800e0ae <_dtoa_r+0x53e>
 800e124:	ec51 0b17 	vmov	r0, r1, d7
 800e128:	f7f2 fa76 	bl	8000618 <__aeabi_dmul>
 800e12c:	9b02      	ldr	r3, [sp, #8]
 800e12e:	9d00      	ldr	r5, [sp, #0]
 800e130:	930c      	str	r3, [sp, #48]	; 0x30
 800e132:	ec41 0b18 	vmov	d8, r0, r1
 800e136:	4639      	mov	r1, r7
 800e138:	4630      	mov	r0, r6
 800e13a:	f7f2 fd1d 	bl	8000b78 <__aeabi_d2iz>
 800e13e:	9011      	str	r0, [sp, #68]	; 0x44
 800e140:	f7f2 fa00 	bl	8000544 <__aeabi_i2d>
 800e144:	4602      	mov	r2, r0
 800e146:	460b      	mov	r3, r1
 800e148:	4630      	mov	r0, r6
 800e14a:	4639      	mov	r1, r7
 800e14c:	f7f2 f8ac 	bl	80002a8 <__aeabi_dsub>
 800e150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e152:	3330      	adds	r3, #48	; 0x30
 800e154:	f805 3b01 	strb.w	r3, [r5], #1
 800e158:	9b02      	ldr	r3, [sp, #8]
 800e15a:	429d      	cmp	r5, r3
 800e15c:	4606      	mov	r6, r0
 800e15e:	460f      	mov	r7, r1
 800e160:	f04f 0200 	mov.w	r2, #0
 800e164:	d134      	bne.n	800e1d0 <_dtoa_r+0x660>
 800e166:	4b19      	ldr	r3, [pc, #100]	; (800e1cc <_dtoa_r+0x65c>)
 800e168:	ec51 0b18 	vmov	r0, r1, d8
 800e16c:	f7f2 f89e 	bl	80002ac <__adddf3>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	4630      	mov	r0, r6
 800e176:	4639      	mov	r1, r7
 800e178:	f7f2 fcde 	bl	8000b38 <__aeabi_dcmpgt>
 800e17c:	2800      	cmp	r0, #0
 800e17e:	d175      	bne.n	800e26c <_dtoa_r+0x6fc>
 800e180:	ec53 2b18 	vmov	r2, r3, d8
 800e184:	4911      	ldr	r1, [pc, #68]	; (800e1cc <_dtoa_r+0x65c>)
 800e186:	2000      	movs	r0, #0
 800e188:	f7f2 f88e 	bl	80002a8 <__aeabi_dsub>
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	4630      	mov	r0, r6
 800e192:	4639      	mov	r1, r7
 800e194:	f7f2 fcb2 	bl	8000afc <__aeabi_dcmplt>
 800e198:	2800      	cmp	r0, #0
 800e19a:	f43f af27 	beq.w	800dfec <_dtoa_r+0x47c>
 800e19e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e1a0:	1e6b      	subs	r3, r5, #1
 800e1a2:	930c      	str	r3, [sp, #48]	; 0x30
 800e1a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1a8:	2b30      	cmp	r3, #48	; 0x30
 800e1aa:	d0f8      	beq.n	800e19e <_dtoa_r+0x62e>
 800e1ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e1b0:	e04a      	b.n	800e248 <_dtoa_r+0x6d8>
 800e1b2:	bf00      	nop
 800e1b4:	08012888 	.word	0x08012888
 800e1b8:	08012860 	.word	0x08012860
 800e1bc:	3ff00000 	.word	0x3ff00000
 800e1c0:	40240000 	.word	0x40240000
 800e1c4:	401c0000 	.word	0x401c0000
 800e1c8:	40140000 	.word	0x40140000
 800e1cc:	3fe00000 	.word	0x3fe00000
 800e1d0:	4baf      	ldr	r3, [pc, #700]	; (800e490 <_dtoa_r+0x920>)
 800e1d2:	f7f2 fa21 	bl	8000618 <__aeabi_dmul>
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	460f      	mov	r7, r1
 800e1da:	e7ac      	b.n	800e136 <_dtoa_r+0x5c6>
 800e1dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e1e0:	9d00      	ldr	r5, [sp, #0]
 800e1e2:	4642      	mov	r2, r8
 800e1e4:	464b      	mov	r3, r9
 800e1e6:	4630      	mov	r0, r6
 800e1e8:	4639      	mov	r1, r7
 800e1ea:	f7f2 fb3f 	bl	800086c <__aeabi_ddiv>
 800e1ee:	f7f2 fcc3 	bl	8000b78 <__aeabi_d2iz>
 800e1f2:	9002      	str	r0, [sp, #8]
 800e1f4:	f7f2 f9a6 	bl	8000544 <__aeabi_i2d>
 800e1f8:	4642      	mov	r2, r8
 800e1fa:	464b      	mov	r3, r9
 800e1fc:	f7f2 fa0c 	bl	8000618 <__aeabi_dmul>
 800e200:	4602      	mov	r2, r0
 800e202:	460b      	mov	r3, r1
 800e204:	4630      	mov	r0, r6
 800e206:	4639      	mov	r1, r7
 800e208:	f7f2 f84e 	bl	80002a8 <__aeabi_dsub>
 800e20c:	9e02      	ldr	r6, [sp, #8]
 800e20e:	9f01      	ldr	r7, [sp, #4]
 800e210:	3630      	adds	r6, #48	; 0x30
 800e212:	f805 6b01 	strb.w	r6, [r5], #1
 800e216:	9e00      	ldr	r6, [sp, #0]
 800e218:	1bae      	subs	r6, r5, r6
 800e21a:	42b7      	cmp	r7, r6
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	d137      	bne.n	800e292 <_dtoa_r+0x722>
 800e222:	f7f2 f843 	bl	80002ac <__adddf3>
 800e226:	4642      	mov	r2, r8
 800e228:	464b      	mov	r3, r9
 800e22a:	4606      	mov	r6, r0
 800e22c:	460f      	mov	r7, r1
 800e22e:	f7f2 fc83 	bl	8000b38 <__aeabi_dcmpgt>
 800e232:	b9c8      	cbnz	r0, 800e268 <_dtoa_r+0x6f8>
 800e234:	4642      	mov	r2, r8
 800e236:	464b      	mov	r3, r9
 800e238:	4630      	mov	r0, r6
 800e23a:	4639      	mov	r1, r7
 800e23c:	f7f2 fc54 	bl	8000ae8 <__aeabi_dcmpeq>
 800e240:	b110      	cbz	r0, 800e248 <_dtoa_r+0x6d8>
 800e242:	9b02      	ldr	r3, [sp, #8]
 800e244:	07d9      	lsls	r1, r3, #31
 800e246:	d40f      	bmi.n	800e268 <_dtoa_r+0x6f8>
 800e248:	4620      	mov	r0, r4
 800e24a:	4659      	mov	r1, fp
 800e24c:	f000 fce8 	bl	800ec20 <_Bfree>
 800e250:	2300      	movs	r3, #0
 800e252:	702b      	strb	r3, [r5, #0]
 800e254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e256:	f10a 0001 	add.w	r0, sl, #1
 800e25a:	6018      	str	r0, [r3, #0]
 800e25c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f43f acd8 	beq.w	800dc14 <_dtoa_r+0xa4>
 800e264:	601d      	str	r5, [r3, #0]
 800e266:	e4d5      	b.n	800dc14 <_dtoa_r+0xa4>
 800e268:	f8cd a01c 	str.w	sl, [sp, #28]
 800e26c:	462b      	mov	r3, r5
 800e26e:	461d      	mov	r5, r3
 800e270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e274:	2a39      	cmp	r2, #57	; 0x39
 800e276:	d108      	bne.n	800e28a <_dtoa_r+0x71a>
 800e278:	9a00      	ldr	r2, [sp, #0]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d1f7      	bne.n	800e26e <_dtoa_r+0x6fe>
 800e27e:	9a07      	ldr	r2, [sp, #28]
 800e280:	9900      	ldr	r1, [sp, #0]
 800e282:	3201      	adds	r2, #1
 800e284:	9207      	str	r2, [sp, #28]
 800e286:	2230      	movs	r2, #48	; 0x30
 800e288:	700a      	strb	r2, [r1, #0]
 800e28a:	781a      	ldrb	r2, [r3, #0]
 800e28c:	3201      	adds	r2, #1
 800e28e:	701a      	strb	r2, [r3, #0]
 800e290:	e78c      	b.n	800e1ac <_dtoa_r+0x63c>
 800e292:	4b7f      	ldr	r3, [pc, #508]	; (800e490 <_dtoa_r+0x920>)
 800e294:	2200      	movs	r2, #0
 800e296:	f7f2 f9bf 	bl	8000618 <__aeabi_dmul>
 800e29a:	2200      	movs	r2, #0
 800e29c:	2300      	movs	r3, #0
 800e29e:	4606      	mov	r6, r0
 800e2a0:	460f      	mov	r7, r1
 800e2a2:	f7f2 fc21 	bl	8000ae8 <__aeabi_dcmpeq>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d09b      	beq.n	800e1e2 <_dtoa_r+0x672>
 800e2aa:	e7cd      	b.n	800e248 <_dtoa_r+0x6d8>
 800e2ac:	9a08      	ldr	r2, [sp, #32]
 800e2ae:	2a00      	cmp	r2, #0
 800e2b0:	f000 80c4 	beq.w	800e43c <_dtoa_r+0x8cc>
 800e2b4:	9a05      	ldr	r2, [sp, #20]
 800e2b6:	2a01      	cmp	r2, #1
 800e2b8:	f300 80a8 	bgt.w	800e40c <_dtoa_r+0x89c>
 800e2bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e2be:	2a00      	cmp	r2, #0
 800e2c0:	f000 80a0 	beq.w	800e404 <_dtoa_r+0x894>
 800e2c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e2c8:	9e06      	ldr	r6, [sp, #24]
 800e2ca:	4645      	mov	r5, r8
 800e2cc:	9a04      	ldr	r2, [sp, #16]
 800e2ce:	2101      	movs	r1, #1
 800e2d0:	441a      	add	r2, r3
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	4498      	add	r8, r3
 800e2d6:	9204      	str	r2, [sp, #16]
 800e2d8:	f000 fd5e 	bl	800ed98 <__i2b>
 800e2dc:	4607      	mov	r7, r0
 800e2de:	2d00      	cmp	r5, #0
 800e2e0:	dd0b      	ble.n	800e2fa <_dtoa_r+0x78a>
 800e2e2:	9b04      	ldr	r3, [sp, #16]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	dd08      	ble.n	800e2fa <_dtoa_r+0x78a>
 800e2e8:	42ab      	cmp	r3, r5
 800e2ea:	9a04      	ldr	r2, [sp, #16]
 800e2ec:	bfa8      	it	ge
 800e2ee:	462b      	movge	r3, r5
 800e2f0:	eba8 0803 	sub.w	r8, r8, r3
 800e2f4:	1aed      	subs	r5, r5, r3
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	9304      	str	r3, [sp, #16]
 800e2fa:	9b06      	ldr	r3, [sp, #24]
 800e2fc:	b1fb      	cbz	r3, 800e33e <_dtoa_r+0x7ce>
 800e2fe:	9b08      	ldr	r3, [sp, #32]
 800e300:	2b00      	cmp	r3, #0
 800e302:	f000 809f 	beq.w	800e444 <_dtoa_r+0x8d4>
 800e306:	2e00      	cmp	r6, #0
 800e308:	dd11      	ble.n	800e32e <_dtoa_r+0x7be>
 800e30a:	4639      	mov	r1, r7
 800e30c:	4632      	mov	r2, r6
 800e30e:	4620      	mov	r0, r4
 800e310:	f000 fdfe 	bl	800ef10 <__pow5mult>
 800e314:	465a      	mov	r2, fp
 800e316:	4601      	mov	r1, r0
 800e318:	4607      	mov	r7, r0
 800e31a:	4620      	mov	r0, r4
 800e31c:	f000 fd52 	bl	800edc4 <__multiply>
 800e320:	4659      	mov	r1, fp
 800e322:	9007      	str	r0, [sp, #28]
 800e324:	4620      	mov	r0, r4
 800e326:	f000 fc7b 	bl	800ec20 <_Bfree>
 800e32a:	9b07      	ldr	r3, [sp, #28]
 800e32c:	469b      	mov	fp, r3
 800e32e:	9b06      	ldr	r3, [sp, #24]
 800e330:	1b9a      	subs	r2, r3, r6
 800e332:	d004      	beq.n	800e33e <_dtoa_r+0x7ce>
 800e334:	4659      	mov	r1, fp
 800e336:	4620      	mov	r0, r4
 800e338:	f000 fdea 	bl	800ef10 <__pow5mult>
 800e33c:	4683      	mov	fp, r0
 800e33e:	2101      	movs	r1, #1
 800e340:	4620      	mov	r0, r4
 800e342:	f000 fd29 	bl	800ed98 <__i2b>
 800e346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e348:	2b00      	cmp	r3, #0
 800e34a:	4606      	mov	r6, r0
 800e34c:	dd7c      	ble.n	800e448 <_dtoa_r+0x8d8>
 800e34e:	461a      	mov	r2, r3
 800e350:	4601      	mov	r1, r0
 800e352:	4620      	mov	r0, r4
 800e354:	f000 fddc 	bl	800ef10 <__pow5mult>
 800e358:	9b05      	ldr	r3, [sp, #20]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	4606      	mov	r6, r0
 800e35e:	dd76      	ble.n	800e44e <_dtoa_r+0x8de>
 800e360:	2300      	movs	r3, #0
 800e362:	9306      	str	r3, [sp, #24]
 800e364:	6933      	ldr	r3, [r6, #16]
 800e366:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e36a:	6918      	ldr	r0, [r3, #16]
 800e36c:	f000 fcc4 	bl	800ecf8 <__hi0bits>
 800e370:	f1c0 0020 	rsb	r0, r0, #32
 800e374:	9b04      	ldr	r3, [sp, #16]
 800e376:	4418      	add	r0, r3
 800e378:	f010 001f 	ands.w	r0, r0, #31
 800e37c:	f000 8086 	beq.w	800e48c <_dtoa_r+0x91c>
 800e380:	f1c0 0320 	rsb	r3, r0, #32
 800e384:	2b04      	cmp	r3, #4
 800e386:	dd7f      	ble.n	800e488 <_dtoa_r+0x918>
 800e388:	f1c0 001c 	rsb	r0, r0, #28
 800e38c:	9b04      	ldr	r3, [sp, #16]
 800e38e:	4403      	add	r3, r0
 800e390:	4480      	add	r8, r0
 800e392:	4405      	add	r5, r0
 800e394:	9304      	str	r3, [sp, #16]
 800e396:	f1b8 0f00 	cmp.w	r8, #0
 800e39a:	dd05      	ble.n	800e3a8 <_dtoa_r+0x838>
 800e39c:	4659      	mov	r1, fp
 800e39e:	4642      	mov	r2, r8
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f000 fe0f 	bl	800efc4 <__lshift>
 800e3a6:	4683      	mov	fp, r0
 800e3a8:	9b04      	ldr	r3, [sp, #16]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	dd05      	ble.n	800e3ba <_dtoa_r+0x84a>
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f000 fe06 	bl	800efc4 <__lshift>
 800e3b8:	4606      	mov	r6, r0
 800e3ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d069      	beq.n	800e494 <_dtoa_r+0x924>
 800e3c0:	4631      	mov	r1, r6
 800e3c2:	4658      	mov	r0, fp
 800e3c4:	f000 fe6a 	bl	800f09c <__mcmp>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	da63      	bge.n	800e494 <_dtoa_r+0x924>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4659      	mov	r1, fp
 800e3d0:	220a      	movs	r2, #10
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f000 fc46 	bl	800ec64 <__multadd>
 800e3d8:	9b08      	ldr	r3, [sp, #32]
 800e3da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3de:	4683      	mov	fp, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 818f 	beq.w	800e704 <_dtoa_r+0xb94>
 800e3e6:	4639      	mov	r1, r7
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	220a      	movs	r2, #10
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f000 fc39 	bl	800ec64 <__multadd>
 800e3f2:	f1b9 0f00 	cmp.w	r9, #0
 800e3f6:	4607      	mov	r7, r0
 800e3f8:	f300 808e 	bgt.w	800e518 <_dtoa_r+0x9a8>
 800e3fc:	9b05      	ldr	r3, [sp, #20]
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	dc50      	bgt.n	800e4a4 <_dtoa_r+0x934>
 800e402:	e089      	b.n	800e518 <_dtoa_r+0x9a8>
 800e404:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e40a:	e75d      	b.n	800e2c8 <_dtoa_r+0x758>
 800e40c:	9b01      	ldr	r3, [sp, #4]
 800e40e:	1e5e      	subs	r6, r3, #1
 800e410:	9b06      	ldr	r3, [sp, #24]
 800e412:	42b3      	cmp	r3, r6
 800e414:	bfbf      	itttt	lt
 800e416:	9b06      	ldrlt	r3, [sp, #24]
 800e418:	9606      	strlt	r6, [sp, #24]
 800e41a:	1af2      	sublt	r2, r6, r3
 800e41c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e41e:	bfb6      	itet	lt
 800e420:	189b      	addlt	r3, r3, r2
 800e422:	1b9e      	subge	r6, r3, r6
 800e424:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	bfb8      	it	lt
 800e42a:	2600      	movlt	r6, #0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	bfb5      	itete	lt
 800e430:	eba8 0503 	sublt.w	r5, r8, r3
 800e434:	9b01      	ldrge	r3, [sp, #4]
 800e436:	2300      	movlt	r3, #0
 800e438:	4645      	movge	r5, r8
 800e43a:	e747      	b.n	800e2cc <_dtoa_r+0x75c>
 800e43c:	9e06      	ldr	r6, [sp, #24]
 800e43e:	9f08      	ldr	r7, [sp, #32]
 800e440:	4645      	mov	r5, r8
 800e442:	e74c      	b.n	800e2de <_dtoa_r+0x76e>
 800e444:	9a06      	ldr	r2, [sp, #24]
 800e446:	e775      	b.n	800e334 <_dtoa_r+0x7c4>
 800e448:	9b05      	ldr	r3, [sp, #20]
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	dc18      	bgt.n	800e480 <_dtoa_r+0x910>
 800e44e:	9b02      	ldr	r3, [sp, #8]
 800e450:	b9b3      	cbnz	r3, 800e480 <_dtoa_r+0x910>
 800e452:	9b03      	ldr	r3, [sp, #12]
 800e454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e458:	b9a3      	cbnz	r3, 800e484 <_dtoa_r+0x914>
 800e45a:	9b03      	ldr	r3, [sp, #12]
 800e45c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e460:	0d1b      	lsrs	r3, r3, #20
 800e462:	051b      	lsls	r3, r3, #20
 800e464:	b12b      	cbz	r3, 800e472 <_dtoa_r+0x902>
 800e466:	9b04      	ldr	r3, [sp, #16]
 800e468:	3301      	adds	r3, #1
 800e46a:	9304      	str	r3, [sp, #16]
 800e46c:	f108 0801 	add.w	r8, r8, #1
 800e470:	2301      	movs	r3, #1
 800e472:	9306      	str	r3, [sp, #24]
 800e474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e476:	2b00      	cmp	r3, #0
 800e478:	f47f af74 	bne.w	800e364 <_dtoa_r+0x7f4>
 800e47c:	2001      	movs	r0, #1
 800e47e:	e779      	b.n	800e374 <_dtoa_r+0x804>
 800e480:	2300      	movs	r3, #0
 800e482:	e7f6      	b.n	800e472 <_dtoa_r+0x902>
 800e484:	9b02      	ldr	r3, [sp, #8]
 800e486:	e7f4      	b.n	800e472 <_dtoa_r+0x902>
 800e488:	d085      	beq.n	800e396 <_dtoa_r+0x826>
 800e48a:	4618      	mov	r0, r3
 800e48c:	301c      	adds	r0, #28
 800e48e:	e77d      	b.n	800e38c <_dtoa_r+0x81c>
 800e490:	40240000 	.word	0x40240000
 800e494:	9b01      	ldr	r3, [sp, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	dc38      	bgt.n	800e50c <_dtoa_r+0x99c>
 800e49a:	9b05      	ldr	r3, [sp, #20]
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	dd35      	ble.n	800e50c <_dtoa_r+0x99c>
 800e4a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e4a4:	f1b9 0f00 	cmp.w	r9, #0
 800e4a8:	d10d      	bne.n	800e4c6 <_dtoa_r+0x956>
 800e4aa:	4631      	mov	r1, r6
 800e4ac:	464b      	mov	r3, r9
 800e4ae:	2205      	movs	r2, #5
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f000 fbd7 	bl	800ec64 <__multadd>
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	4606      	mov	r6, r0
 800e4ba:	4658      	mov	r0, fp
 800e4bc:	f000 fdee 	bl	800f09c <__mcmp>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	f73f adbd 	bgt.w	800e040 <_dtoa_r+0x4d0>
 800e4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4c8:	9d00      	ldr	r5, [sp, #0]
 800e4ca:	ea6f 0a03 	mvn.w	sl, r3
 800e4ce:	f04f 0800 	mov.w	r8, #0
 800e4d2:	4631      	mov	r1, r6
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f000 fba3 	bl	800ec20 <_Bfree>
 800e4da:	2f00      	cmp	r7, #0
 800e4dc:	f43f aeb4 	beq.w	800e248 <_dtoa_r+0x6d8>
 800e4e0:	f1b8 0f00 	cmp.w	r8, #0
 800e4e4:	d005      	beq.n	800e4f2 <_dtoa_r+0x982>
 800e4e6:	45b8      	cmp	r8, r7
 800e4e8:	d003      	beq.n	800e4f2 <_dtoa_r+0x982>
 800e4ea:	4641      	mov	r1, r8
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f000 fb97 	bl	800ec20 <_Bfree>
 800e4f2:	4639      	mov	r1, r7
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f000 fb93 	bl	800ec20 <_Bfree>
 800e4fa:	e6a5      	b.n	800e248 <_dtoa_r+0x6d8>
 800e4fc:	2600      	movs	r6, #0
 800e4fe:	4637      	mov	r7, r6
 800e500:	e7e1      	b.n	800e4c6 <_dtoa_r+0x956>
 800e502:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e504:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e508:	4637      	mov	r7, r6
 800e50a:	e599      	b.n	800e040 <_dtoa_r+0x4d0>
 800e50c:	9b08      	ldr	r3, [sp, #32]
 800e50e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	f000 80fd 	beq.w	800e712 <_dtoa_r+0xba2>
 800e518:	2d00      	cmp	r5, #0
 800e51a:	dd05      	ble.n	800e528 <_dtoa_r+0x9b8>
 800e51c:	4639      	mov	r1, r7
 800e51e:	462a      	mov	r2, r5
 800e520:	4620      	mov	r0, r4
 800e522:	f000 fd4f 	bl	800efc4 <__lshift>
 800e526:	4607      	mov	r7, r0
 800e528:	9b06      	ldr	r3, [sp, #24]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d05c      	beq.n	800e5e8 <_dtoa_r+0xa78>
 800e52e:	6879      	ldr	r1, [r7, #4]
 800e530:	4620      	mov	r0, r4
 800e532:	f000 fb35 	bl	800eba0 <_Balloc>
 800e536:	4605      	mov	r5, r0
 800e538:	b928      	cbnz	r0, 800e546 <_dtoa_r+0x9d6>
 800e53a:	4b80      	ldr	r3, [pc, #512]	; (800e73c <_dtoa_r+0xbcc>)
 800e53c:	4602      	mov	r2, r0
 800e53e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e542:	f7ff bb2e 	b.w	800dba2 <_dtoa_r+0x32>
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	3202      	adds	r2, #2
 800e54a:	0092      	lsls	r2, r2, #2
 800e54c:	f107 010c 	add.w	r1, r7, #12
 800e550:	300c      	adds	r0, #12
 800e552:	f7fe fcb3 	bl	800cebc <memcpy>
 800e556:	2201      	movs	r2, #1
 800e558:	4629      	mov	r1, r5
 800e55a:	4620      	mov	r0, r4
 800e55c:	f000 fd32 	bl	800efc4 <__lshift>
 800e560:	9b00      	ldr	r3, [sp, #0]
 800e562:	3301      	adds	r3, #1
 800e564:	9301      	str	r3, [sp, #4]
 800e566:	9b00      	ldr	r3, [sp, #0]
 800e568:	444b      	add	r3, r9
 800e56a:	9307      	str	r3, [sp, #28]
 800e56c:	9b02      	ldr	r3, [sp, #8]
 800e56e:	f003 0301 	and.w	r3, r3, #1
 800e572:	46b8      	mov	r8, r7
 800e574:	9306      	str	r3, [sp, #24]
 800e576:	4607      	mov	r7, r0
 800e578:	9b01      	ldr	r3, [sp, #4]
 800e57a:	4631      	mov	r1, r6
 800e57c:	3b01      	subs	r3, #1
 800e57e:	4658      	mov	r0, fp
 800e580:	9302      	str	r3, [sp, #8]
 800e582:	f7ff fa69 	bl	800da58 <quorem>
 800e586:	4603      	mov	r3, r0
 800e588:	3330      	adds	r3, #48	; 0x30
 800e58a:	9004      	str	r0, [sp, #16]
 800e58c:	4641      	mov	r1, r8
 800e58e:	4658      	mov	r0, fp
 800e590:	9308      	str	r3, [sp, #32]
 800e592:	f000 fd83 	bl	800f09c <__mcmp>
 800e596:	463a      	mov	r2, r7
 800e598:	4681      	mov	r9, r0
 800e59a:	4631      	mov	r1, r6
 800e59c:	4620      	mov	r0, r4
 800e59e:	f000 fd99 	bl	800f0d4 <__mdiff>
 800e5a2:	68c2      	ldr	r2, [r0, #12]
 800e5a4:	9b08      	ldr	r3, [sp, #32]
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	bb02      	cbnz	r2, 800e5ec <_dtoa_r+0xa7c>
 800e5aa:	4601      	mov	r1, r0
 800e5ac:	4658      	mov	r0, fp
 800e5ae:	f000 fd75 	bl	800f09c <__mcmp>
 800e5b2:	9b08      	ldr	r3, [sp, #32]
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e5be:	f000 fb2f 	bl	800ec20 <_Bfree>
 800e5c2:	9b05      	ldr	r3, [sp, #20]
 800e5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5c6:	9d01      	ldr	r5, [sp, #4]
 800e5c8:	ea43 0102 	orr.w	r1, r3, r2
 800e5cc:	9b06      	ldr	r3, [sp, #24]
 800e5ce:	430b      	orrs	r3, r1
 800e5d0:	9b08      	ldr	r3, [sp, #32]
 800e5d2:	d10d      	bne.n	800e5f0 <_dtoa_r+0xa80>
 800e5d4:	2b39      	cmp	r3, #57	; 0x39
 800e5d6:	d029      	beq.n	800e62c <_dtoa_r+0xabc>
 800e5d8:	f1b9 0f00 	cmp.w	r9, #0
 800e5dc:	dd01      	ble.n	800e5e2 <_dtoa_r+0xa72>
 800e5de:	9b04      	ldr	r3, [sp, #16]
 800e5e0:	3331      	adds	r3, #49	; 0x31
 800e5e2:	9a02      	ldr	r2, [sp, #8]
 800e5e4:	7013      	strb	r3, [r2, #0]
 800e5e6:	e774      	b.n	800e4d2 <_dtoa_r+0x962>
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	e7b9      	b.n	800e560 <_dtoa_r+0x9f0>
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	e7e2      	b.n	800e5b6 <_dtoa_r+0xa46>
 800e5f0:	f1b9 0f00 	cmp.w	r9, #0
 800e5f4:	db06      	blt.n	800e604 <_dtoa_r+0xa94>
 800e5f6:	9905      	ldr	r1, [sp, #20]
 800e5f8:	ea41 0909 	orr.w	r9, r1, r9
 800e5fc:	9906      	ldr	r1, [sp, #24]
 800e5fe:	ea59 0101 	orrs.w	r1, r9, r1
 800e602:	d120      	bne.n	800e646 <_dtoa_r+0xad6>
 800e604:	2a00      	cmp	r2, #0
 800e606:	ddec      	ble.n	800e5e2 <_dtoa_r+0xa72>
 800e608:	4659      	mov	r1, fp
 800e60a:	2201      	movs	r2, #1
 800e60c:	4620      	mov	r0, r4
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	f000 fcd8 	bl	800efc4 <__lshift>
 800e614:	4631      	mov	r1, r6
 800e616:	4683      	mov	fp, r0
 800e618:	f000 fd40 	bl	800f09c <__mcmp>
 800e61c:	2800      	cmp	r0, #0
 800e61e:	9b01      	ldr	r3, [sp, #4]
 800e620:	dc02      	bgt.n	800e628 <_dtoa_r+0xab8>
 800e622:	d1de      	bne.n	800e5e2 <_dtoa_r+0xa72>
 800e624:	07da      	lsls	r2, r3, #31
 800e626:	d5dc      	bpl.n	800e5e2 <_dtoa_r+0xa72>
 800e628:	2b39      	cmp	r3, #57	; 0x39
 800e62a:	d1d8      	bne.n	800e5de <_dtoa_r+0xa6e>
 800e62c:	9a02      	ldr	r2, [sp, #8]
 800e62e:	2339      	movs	r3, #57	; 0x39
 800e630:	7013      	strb	r3, [r2, #0]
 800e632:	462b      	mov	r3, r5
 800e634:	461d      	mov	r5, r3
 800e636:	3b01      	subs	r3, #1
 800e638:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e63c:	2a39      	cmp	r2, #57	; 0x39
 800e63e:	d050      	beq.n	800e6e2 <_dtoa_r+0xb72>
 800e640:	3201      	adds	r2, #1
 800e642:	701a      	strb	r2, [r3, #0]
 800e644:	e745      	b.n	800e4d2 <_dtoa_r+0x962>
 800e646:	2a00      	cmp	r2, #0
 800e648:	dd03      	ble.n	800e652 <_dtoa_r+0xae2>
 800e64a:	2b39      	cmp	r3, #57	; 0x39
 800e64c:	d0ee      	beq.n	800e62c <_dtoa_r+0xabc>
 800e64e:	3301      	adds	r3, #1
 800e650:	e7c7      	b.n	800e5e2 <_dtoa_r+0xa72>
 800e652:	9a01      	ldr	r2, [sp, #4]
 800e654:	9907      	ldr	r1, [sp, #28]
 800e656:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e65a:	428a      	cmp	r2, r1
 800e65c:	d02a      	beq.n	800e6b4 <_dtoa_r+0xb44>
 800e65e:	4659      	mov	r1, fp
 800e660:	2300      	movs	r3, #0
 800e662:	220a      	movs	r2, #10
 800e664:	4620      	mov	r0, r4
 800e666:	f000 fafd 	bl	800ec64 <__multadd>
 800e66a:	45b8      	cmp	r8, r7
 800e66c:	4683      	mov	fp, r0
 800e66e:	f04f 0300 	mov.w	r3, #0
 800e672:	f04f 020a 	mov.w	r2, #10
 800e676:	4641      	mov	r1, r8
 800e678:	4620      	mov	r0, r4
 800e67a:	d107      	bne.n	800e68c <_dtoa_r+0xb1c>
 800e67c:	f000 faf2 	bl	800ec64 <__multadd>
 800e680:	4680      	mov	r8, r0
 800e682:	4607      	mov	r7, r0
 800e684:	9b01      	ldr	r3, [sp, #4]
 800e686:	3301      	adds	r3, #1
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	e775      	b.n	800e578 <_dtoa_r+0xa08>
 800e68c:	f000 faea 	bl	800ec64 <__multadd>
 800e690:	4639      	mov	r1, r7
 800e692:	4680      	mov	r8, r0
 800e694:	2300      	movs	r3, #0
 800e696:	220a      	movs	r2, #10
 800e698:	4620      	mov	r0, r4
 800e69a:	f000 fae3 	bl	800ec64 <__multadd>
 800e69e:	4607      	mov	r7, r0
 800e6a0:	e7f0      	b.n	800e684 <_dtoa_r+0xb14>
 800e6a2:	f1b9 0f00 	cmp.w	r9, #0
 800e6a6:	9a00      	ldr	r2, [sp, #0]
 800e6a8:	bfcc      	ite	gt
 800e6aa:	464d      	movgt	r5, r9
 800e6ac:	2501      	movle	r5, #1
 800e6ae:	4415      	add	r5, r2
 800e6b0:	f04f 0800 	mov.w	r8, #0
 800e6b4:	4659      	mov	r1, fp
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	9301      	str	r3, [sp, #4]
 800e6bc:	f000 fc82 	bl	800efc4 <__lshift>
 800e6c0:	4631      	mov	r1, r6
 800e6c2:	4683      	mov	fp, r0
 800e6c4:	f000 fcea 	bl	800f09c <__mcmp>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	dcb2      	bgt.n	800e632 <_dtoa_r+0xac2>
 800e6cc:	d102      	bne.n	800e6d4 <_dtoa_r+0xb64>
 800e6ce:	9b01      	ldr	r3, [sp, #4]
 800e6d0:	07db      	lsls	r3, r3, #31
 800e6d2:	d4ae      	bmi.n	800e632 <_dtoa_r+0xac2>
 800e6d4:	462b      	mov	r3, r5
 800e6d6:	461d      	mov	r5, r3
 800e6d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6dc:	2a30      	cmp	r2, #48	; 0x30
 800e6de:	d0fa      	beq.n	800e6d6 <_dtoa_r+0xb66>
 800e6e0:	e6f7      	b.n	800e4d2 <_dtoa_r+0x962>
 800e6e2:	9a00      	ldr	r2, [sp, #0]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d1a5      	bne.n	800e634 <_dtoa_r+0xac4>
 800e6e8:	f10a 0a01 	add.w	sl, sl, #1
 800e6ec:	2331      	movs	r3, #49	; 0x31
 800e6ee:	e779      	b.n	800e5e4 <_dtoa_r+0xa74>
 800e6f0:	4b13      	ldr	r3, [pc, #76]	; (800e740 <_dtoa_r+0xbd0>)
 800e6f2:	f7ff baaf 	b.w	800dc54 <_dtoa_r+0xe4>
 800e6f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f47f aa86 	bne.w	800dc0a <_dtoa_r+0x9a>
 800e6fe:	4b11      	ldr	r3, [pc, #68]	; (800e744 <_dtoa_r+0xbd4>)
 800e700:	f7ff baa8 	b.w	800dc54 <_dtoa_r+0xe4>
 800e704:	f1b9 0f00 	cmp.w	r9, #0
 800e708:	dc03      	bgt.n	800e712 <_dtoa_r+0xba2>
 800e70a:	9b05      	ldr	r3, [sp, #20]
 800e70c:	2b02      	cmp	r3, #2
 800e70e:	f73f aec9 	bgt.w	800e4a4 <_dtoa_r+0x934>
 800e712:	9d00      	ldr	r5, [sp, #0]
 800e714:	4631      	mov	r1, r6
 800e716:	4658      	mov	r0, fp
 800e718:	f7ff f99e 	bl	800da58 <quorem>
 800e71c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e720:	f805 3b01 	strb.w	r3, [r5], #1
 800e724:	9a00      	ldr	r2, [sp, #0]
 800e726:	1aaa      	subs	r2, r5, r2
 800e728:	4591      	cmp	r9, r2
 800e72a:	ddba      	ble.n	800e6a2 <_dtoa_r+0xb32>
 800e72c:	4659      	mov	r1, fp
 800e72e:	2300      	movs	r3, #0
 800e730:	220a      	movs	r2, #10
 800e732:	4620      	mov	r0, r4
 800e734:	f000 fa96 	bl	800ec64 <__multadd>
 800e738:	4683      	mov	fp, r0
 800e73a:	e7eb      	b.n	800e714 <_dtoa_r+0xba4>
 800e73c:	0801278b 	.word	0x0801278b
 800e740:	080126e4 	.word	0x080126e4
 800e744:	08012708 	.word	0x08012708

0800e748 <__sflush_r>:
 800e748:	898a      	ldrh	r2, [r1, #12]
 800e74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74e:	4605      	mov	r5, r0
 800e750:	0710      	lsls	r0, r2, #28
 800e752:	460c      	mov	r4, r1
 800e754:	d458      	bmi.n	800e808 <__sflush_r+0xc0>
 800e756:	684b      	ldr	r3, [r1, #4]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	dc05      	bgt.n	800e768 <__sflush_r+0x20>
 800e75c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e75e:	2b00      	cmp	r3, #0
 800e760:	dc02      	bgt.n	800e768 <__sflush_r+0x20>
 800e762:	2000      	movs	r0, #0
 800e764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e76a:	2e00      	cmp	r6, #0
 800e76c:	d0f9      	beq.n	800e762 <__sflush_r+0x1a>
 800e76e:	2300      	movs	r3, #0
 800e770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e774:	682f      	ldr	r7, [r5, #0]
 800e776:	602b      	str	r3, [r5, #0]
 800e778:	d032      	beq.n	800e7e0 <__sflush_r+0x98>
 800e77a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e77c:	89a3      	ldrh	r3, [r4, #12]
 800e77e:	075a      	lsls	r2, r3, #29
 800e780:	d505      	bpl.n	800e78e <__sflush_r+0x46>
 800e782:	6863      	ldr	r3, [r4, #4]
 800e784:	1ac0      	subs	r0, r0, r3
 800e786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e788:	b10b      	cbz	r3, 800e78e <__sflush_r+0x46>
 800e78a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e78c:	1ac0      	subs	r0, r0, r3
 800e78e:	2300      	movs	r3, #0
 800e790:	4602      	mov	r2, r0
 800e792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e794:	6a21      	ldr	r1, [r4, #32]
 800e796:	4628      	mov	r0, r5
 800e798:	47b0      	blx	r6
 800e79a:	1c43      	adds	r3, r0, #1
 800e79c:	89a3      	ldrh	r3, [r4, #12]
 800e79e:	d106      	bne.n	800e7ae <__sflush_r+0x66>
 800e7a0:	6829      	ldr	r1, [r5, #0]
 800e7a2:	291d      	cmp	r1, #29
 800e7a4:	d82c      	bhi.n	800e800 <__sflush_r+0xb8>
 800e7a6:	4a2a      	ldr	r2, [pc, #168]	; (800e850 <__sflush_r+0x108>)
 800e7a8:	40ca      	lsrs	r2, r1
 800e7aa:	07d6      	lsls	r6, r2, #31
 800e7ac:	d528      	bpl.n	800e800 <__sflush_r+0xb8>
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	6062      	str	r2, [r4, #4]
 800e7b2:	04d9      	lsls	r1, r3, #19
 800e7b4:	6922      	ldr	r2, [r4, #16]
 800e7b6:	6022      	str	r2, [r4, #0]
 800e7b8:	d504      	bpl.n	800e7c4 <__sflush_r+0x7c>
 800e7ba:	1c42      	adds	r2, r0, #1
 800e7bc:	d101      	bne.n	800e7c2 <__sflush_r+0x7a>
 800e7be:	682b      	ldr	r3, [r5, #0]
 800e7c0:	b903      	cbnz	r3, 800e7c4 <__sflush_r+0x7c>
 800e7c2:	6560      	str	r0, [r4, #84]	; 0x54
 800e7c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7c6:	602f      	str	r7, [r5, #0]
 800e7c8:	2900      	cmp	r1, #0
 800e7ca:	d0ca      	beq.n	800e762 <__sflush_r+0x1a>
 800e7cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7d0:	4299      	cmp	r1, r3
 800e7d2:	d002      	beq.n	800e7da <__sflush_r+0x92>
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	f000 fd71 	bl	800f2bc <_free_r>
 800e7da:	2000      	movs	r0, #0
 800e7dc:	6360      	str	r0, [r4, #52]	; 0x34
 800e7de:	e7c1      	b.n	800e764 <__sflush_r+0x1c>
 800e7e0:	6a21      	ldr	r1, [r4, #32]
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	47b0      	blx	r6
 800e7e8:	1c41      	adds	r1, r0, #1
 800e7ea:	d1c7      	bne.n	800e77c <__sflush_r+0x34>
 800e7ec:	682b      	ldr	r3, [r5, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d0c4      	beq.n	800e77c <__sflush_r+0x34>
 800e7f2:	2b1d      	cmp	r3, #29
 800e7f4:	d001      	beq.n	800e7fa <__sflush_r+0xb2>
 800e7f6:	2b16      	cmp	r3, #22
 800e7f8:	d101      	bne.n	800e7fe <__sflush_r+0xb6>
 800e7fa:	602f      	str	r7, [r5, #0]
 800e7fc:	e7b1      	b.n	800e762 <__sflush_r+0x1a>
 800e7fe:	89a3      	ldrh	r3, [r4, #12]
 800e800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e804:	81a3      	strh	r3, [r4, #12]
 800e806:	e7ad      	b.n	800e764 <__sflush_r+0x1c>
 800e808:	690f      	ldr	r7, [r1, #16]
 800e80a:	2f00      	cmp	r7, #0
 800e80c:	d0a9      	beq.n	800e762 <__sflush_r+0x1a>
 800e80e:	0793      	lsls	r3, r2, #30
 800e810:	680e      	ldr	r6, [r1, #0]
 800e812:	bf08      	it	eq
 800e814:	694b      	ldreq	r3, [r1, #20]
 800e816:	600f      	str	r7, [r1, #0]
 800e818:	bf18      	it	ne
 800e81a:	2300      	movne	r3, #0
 800e81c:	eba6 0807 	sub.w	r8, r6, r7
 800e820:	608b      	str	r3, [r1, #8]
 800e822:	f1b8 0f00 	cmp.w	r8, #0
 800e826:	dd9c      	ble.n	800e762 <__sflush_r+0x1a>
 800e828:	6a21      	ldr	r1, [r4, #32]
 800e82a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e82c:	4643      	mov	r3, r8
 800e82e:	463a      	mov	r2, r7
 800e830:	4628      	mov	r0, r5
 800e832:	47b0      	blx	r6
 800e834:	2800      	cmp	r0, #0
 800e836:	dc06      	bgt.n	800e846 <__sflush_r+0xfe>
 800e838:	89a3      	ldrh	r3, [r4, #12]
 800e83a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e83e:	81a3      	strh	r3, [r4, #12]
 800e840:	f04f 30ff 	mov.w	r0, #4294967295
 800e844:	e78e      	b.n	800e764 <__sflush_r+0x1c>
 800e846:	4407      	add	r7, r0
 800e848:	eba8 0800 	sub.w	r8, r8, r0
 800e84c:	e7e9      	b.n	800e822 <__sflush_r+0xda>
 800e84e:	bf00      	nop
 800e850:	20400001 	.word	0x20400001

0800e854 <_fflush_r>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	690b      	ldr	r3, [r1, #16]
 800e858:	4605      	mov	r5, r0
 800e85a:	460c      	mov	r4, r1
 800e85c:	b913      	cbnz	r3, 800e864 <_fflush_r+0x10>
 800e85e:	2500      	movs	r5, #0
 800e860:	4628      	mov	r0, r5
 800e862:	bd38      	pop	{r3, r4, r5, pc}
 800e864:	b118      	cbz	r0, 800e86e <_fflush_r+0x1a>
 800e866:	6983      	ldr	r3, [r0, #24]
 800e868:	b90b      	cbnz	r3, 800e86e <_fflush_r+0x1a>
 800e86a:	f000 f887 	bl	800e97c <__sinit>
 800e86e:	4b14      	ldr	r3, [pc, #80]	; (800e8c0 <_fflush_r+0x6c>)
 800e870:	429c      	cmp	r4, r3
 800e872:	d11b      	bne.n	800e8ac <_fflush_r+0x58>
 800e874:	686c      	ldr	r4, [r5, #4]
 800e876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d0ef      	beq.n	800e85e <_fflush_r+0xa>
 800e87e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e880:	07d0      	lsls	r0, r2, #31
 800e882:	d404      	bmi.n	800e88e <_fflush_r+0x3a>
 800e884:	0599      	lsls	r1, r3, #22
 800e886:	d402      	bmi.n	800e88e <_fflush_r+0x3a>
 800e888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e88a:	f000 f91a 	bl	800eac2 <__retarget_lock_acquire_recursive>
 800e88e:	4628      	mov	r0, r5
 800e890:	4621      	mov	r1, r4
 800e892:	f7ff ff59 	bl	800e748 <__sflush_r>
 800e896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e898:	07da      	lsls	r2, r3, #31
 800e89a:	4605      	mov	r5, r0
 800e89c:	d4e0      	bmi.n	800e860 <_fflush_r+0xc>
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	059b      	lsls	r3, r3, #22
 800e8a2:	d4dd      	bmi.n	800e860 <_fflush_r+0xc>
 800e8a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8a6:	f000 f90d 	bl	800eac4 <__retarget_lock_release_recursive>
 800e8aa:	e7d9      	b.n	800e860 <_fflush_r+0xc>
 800e8ac:	4b05      	ldr	r3, [pc, #20]	; (800e8c4 <_fflush_r+0x70>)
 800e8ae:	429c      	cmp	r4, r3
 800e8b0:	d101      	bne.n	800e8b6 <_fflush_r+0x62>
 800e8b2:	68ac      	ldr	r4, [r5, #8]
 800e8b4:	e7df      	b.n	800e876 <_fflush_r+0x22>
 800e8b6:	4b04      	ldr	r3, [pc, #16]	; (800e8c8 <_fflush_r+0x74>)
 800e8b8:	429c      	cmp	r4, r3
 800e8ba:	bf08      	it	eq
 800e8bc:	68ec      	ldreq	r4, [r5, #12]
 800e8be:	e7da      	b.n	800e876 <_fflush_r+0x22>
 800e8c0:	080127bc 	.word	0x080127bc
 800e8c4:	080127dc 	.word	0x080127dc
 800e8c8:	0801279c 	.word	0x0801279c

0800e8cc <std>:
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	b510      	push	{r4, lr}
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	e9c0 3300 	strd	r3, r3, [r0]
 800e8d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8da:	6083      	str	r3, [r0, #8]
 800e8dc:	8181      	strh	r1, [r0, #12]
 800e8de:	6643      	str	r3, [r0, #100]	; 0x64
 800e8e0:	81c2      	strh	r2, [r0, #14]
 800e8e2:	6183      	str	r3, [r0, #24]
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	2208      	movs	r2, #8
 800e8e8:	305c      	adds	r0, #92	; 0x5c
 800e8ea:	f7fe faf5 	bl	800ced8 <memset>
 800e8ee:	4b05      	ldr	r3, [pc, #20]	; (800e904 <std+0x38>)
 800e8f0:	6263      	str	r3, [r4, #36]	; 0x24
 800e8f2:	4b05      	ldr	r3, [pc, #20]	; (800e908 <std+0x3c>)
 800e8f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8f6:	4b05      	ldr	r3, [pc, #20]	; (800e90c <std+0x40>)
 800e8f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8fa:	4b05      	ldr	r3, [pc, #20]	; (800e910 <std+0x44>)
 800e8fc:	6224      	str	r4, [r4, #32]
 800e8fe:	6323      	str	r3, [r4, #48]	; 0x30
 800e900:	bd10      	pop	{r4, pc}
 800e902:	bf00      	nop
 800e904:	0800f6e5 	.word	0x0800f6e5
 800e908:	0800f707 	.word	0x0800f707
 800e90c:	0800f73f 	.word	0x0800f73f
 800e910:	0800f763 	.word	0x0800f763

0800e914 <_cleanup_r>:
 800e914:	4901      	ldr	r1, [pc, #4]	; (800e91c <_cleanup_r+0x8>)
 800e916:	f000 b8af 	b.w	800ea78 <_fwalk_reent>
 800e91a:	bf00      	nop
 800e91c:	0800e855 	.word	0x0800e855

0800e920 <__sfmoreglue>:
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	1e4a      	subs	r2, r1, #1
 800e924:	2568      	movs	r5, #104	; 0x68
 800e926:	4355      	muls	r5, r2
 800e928:	460e      	mov	r6, r1
 800e92a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e92e:	f000 fd15 	bl	800f35c <_malloc_r>
 800e932:	4604      	mov	r4, r0
 800e934:	b140      	cbz	r0, 800e948 <__sfmoreglue+0x28>
 800e936:	2100      	movs	r1, #0
 800e938:	e9c0 1600 	strd	r1, r6, [r0]
 800e93c:	300c      	adds	r0, #12
 800e93e:	60a0      	str	r0, [r4, #8]
 800e940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e944:	f7fe fac8 	bl	800ced8 <memset>
 800e948:	4620      	mov	r0, r4
 800e94a:	bd70      	pop	{r4, r5, r6, pc}

0800e94c <__sfp_lock_acquire>:
 800e94c:	4801      	ldr	r0, [pc, #4]	; (800e954 <__sfp_lock_acquire+0x8>)
 800e94e:	f000 b8b8 	b.w	800eac2 <__retarget_lock_acquire_recursive>
 800e952:	bf00      	nop
 800e954:	20022120 	.word	0x20022120

0800e958 <__sfp_lock_release>:
 800e958:	4801      	ldr	r0, [pc, #4]	; (800e960 <__sfp_lock_release+0x8>)
 800e95a:	f000 b8b3 	b.w	800eac4 <__retarget_lock_release_recursive>
 800e95e:	bf00      	nop
 800e960:	20022120 	.word	0x20022120

0800e964 <__sinit_lock_acquire>:
 800e964:	4801      	ldr	r0, [pc, #4]	; (800e96c <__sinit_lock_acquire+0x8>)
 800e966:	f000 b8ac 	b.w	800eac2 <__retarget_lock_acquire_recursive>
 800e96a:	bf00      	nop
 800e96c:	2002211b 	.word	0x2002211b

0800e970 <__sinit_lock_release>:
 800e970:	4801      	ldr	r0, [pc, #4]	; (800e978 <__sinit_lock_release+0x8>)
 800e972:	f000 b8a7 	b.w	800eac4 <__retarget_lock_release_recursive>
 800e976:	bf00      	nop
 800e978:	2002211b 	.word	0x2002211b

0800e97c <__sinit>:
 800e97c:	b510      	push	{r4, lr}
 800e97e:	4604      	mov	r4, r0
 800e980:	f7ff fff0 	bl	800e964 <__sinit_lock_acquire>
 800e984:	69a3      	ldr	r3, [r4, #24]
 800e986:	b11b      	cbz	r3, 800e990 <__sinit+0x14>
 800e988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e98c:	f7ff bff0 	b.w	800e970 <__sinit_lock_release>
 800e990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e994:	6523      	str	r3, [r4, #80]	; 0x50
 800e996:	4b13      	ldr	r3, [pc, #76]	; (800e9e4 <__sinit+0x68>)
 800e998:	4a13      	ldr	r2, [pc, #76]	; (800e9e8 <__sinit+0x6c>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e99e:	42a3      	cmp	r3, r4
 800e9a0:	bf04      	itt	eq
 800e9a2:	2301      	moveq	r3, #1
 800e9a4:	61a3      	streq	r3, [r4, #24]
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f000 f820 	bl	800e9ec <__sfp>
 800e9ac:	6060      	str	r0, [r4, #4]
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f000 f81c 	bl	800e9ec <__sfp>
 800e9b4:	60a0      	str	r0, [r4, #8]
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f000 f818 	bl	800e9ec <__sfp>
 800e9bc:	2200      	movs	r2, #0
 800e9be:	60e0      	str	r0, [r4, #12]
 800e9c0:	2104      	movs	r1, #4
 800e9c2:	6860      	ldr	r0, [r4, #4]
 800e9c4:	f7ff ff82 	bl	800e8cc <std>
 800e9c8:	68a0      	ldr	r0, [r4, #8]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	2109      	movs	r1, #9
 800e9ce:	f7ff ff7d 	bl	800e8cc <std>
 800e9d2:	68e0      	ldr	r0, [r4, #12]
 800e9d4:	2202      	movs	r2, #2
 800e9d6:	2112      	movs	r1, #18
 800e9d8:	f7ff ff78 	bl	800e8cc <std>
 800e9dc:	2301      	movs	r3, #1
 800e9de:	61a3      	str	r3, [r4, #24]
 800e9e0:	e7d2      	b.n	800e988 <__sinit+0xc>
 800e9e2:	bf00      	nop
 800e9e4:	080126d0 	.word	0x080126d0
 800e9e8:	0800e915 	.word	0x0800e915

0800e9ec <__sfp>:
 800e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ee:	4607      	mov	r7, r0
 800e9f0:	f7ff ffac 	bl	800e94c <__sfp_lock_acquire>
 800e9f4:	4b1e      	ldr	r3, [pc, #120]	; (800ea70 <__sfp+0x84>)
 800e9f6:	681e      	ldr	r6, [r3, #0]
 800e9f8:	69b3      	ldr	r3, [r6, #24]
 800e9fa:	b913      	cbnz	r3, 800ea02 <__sfp+0x16>
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	f7ff ffbd 	bl	800e97c <__sinit>
 800ea02:	3648      	adds	r6, #72	; 0x48
 800ea04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	d503      	bpl.n	800ea14 <__sfp+0x28>
 800ea0c:	6833      	ldr	r3, [r6, #0]
 800ea0e:	b30b      	cbz	r3, 800ea54 <__sfp+0x68>
 800ea10:	6836      	ldr	r6, [r6, #0]
 800ea12:	e7f7      	b.n	800ea04 <__sfp+0x18>
 800ea14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea18:	b9d5      	cbnz	r5, 800ea50 <__sfp+0x64>
 800ea1a:	4b16      	ldr	r3, [pc, #88]	; (800ea74 <__sfp+0x88>)
 800ea1c:	60e3      	str	r3, [r4, #12]
 800ea1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea22:	6665      	str	r5, [r4, #100]	; 0x64
 800ea24:	f000 f84c 	bl	800eac0 <__retarget_lock_init_recursive>
 800ea28:	f7ff ff96 	bl	800e958 <__sfp_lock_release>
 800ea2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea34:	6025      	str	r5, [r4, #0]
 800ea36:	61a5      	str	r5, [r4, #24]
 800ea38:	2208      	movs	r2, #8
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea40:	f7fe fa4a 	bl	800ced8 <memset>
 800ea44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea50:	3468      	adds	r4, #104	; 0x68
 800ea52:	e7d9      	b.n	800ea08 <__sfp+0x1c>
 800ea54:	2104      	movs	r1, #4
 800ea56:	4638      	mov	r0, r7
 800ea58:	f7ff ff62 	bl	800e920 <__sfmoreglue>
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	6030      	str	r0, [r6, #0]
 800ea60:	2800      	cmp	r0, #0
 800ea62:	d1d5      	bne.n	800ea10 <__sfp+0x24>
 800ea64:	f7ff ff78 	bl	800e958 <__sfp_lock_release>
 800ea68:	230c      	movs	r3, #12
 800ea6a:	603b      	str	r3, [r7, #0]
 800ea6c:	e7ee      	b.n	800ea4c <__sfp+0x60>
 800ea6e:	bf00      	nop
 800ea70:	080126d0 	.word	0x080126d0
 800ea74:	ffff0001 	.word	0xffff0001

0800ea78 <_fwalk_reent>:
 800ea78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	4688      	mov	r8, r1
 800ea80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea84:	2700      	movs	r7, #0
 800ea86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea8a:	f1b9 0901 	subs.w	r9, r9, #1
 800ea8e:	d505      	bpl.n	800ea9c <_fwalk_reent+0x24>
 800ea90:	6824      	ldr	r4, [r4, #0]
 800ea92:	2c00      	cmp	r4, #0
 800ea94:	d1f7      	bne.n	800ea86 <_fwalk_reent+0xe>
 800ea96:	4638      	mov	r0, r7
 800ea98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea9c:	89ab      	ldrh	r3, [r5, #12]
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d907      	bls.n	800eab2 <_fwalk_reent+0x3a>
 800eaa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	d003      	beq.n	800eab2 <_fwalk_reent+0x3a>
 800eaaa:	4629      	mov	r1, r5
 800eaac:	4630      	mov	r0, r6
 800eaae:	47c0      	blx	r8
 800eab0:	4307      	orrs	r7, r0
 800eab2:	3568      	adds	r5, #104	; 0x68
 800eab4:	e7e9      	b.n	800ea8a <_fwalk_reent+0x12>
	...

0800eab8 <_localeconv_r>:
 800eab8:	4800      	ldr	r0, [pc, #0]	; (800eabc <_localeconv_r+0x4>)
 800eaba:	4770      	bx	lr
 800eabc:	200001bc 	.word	0x200001bc

0800eac0 <__retarget_lock_init_recursive>:
 800eac0:	4770      	bx	lr

0800eac2 <__retarget_lock_acquire_recursive>:
 800eac2:	4770      	bx	lr

0800eac4 <__retarget_lock_release_recursive>:
 800eac4:	4770      	bx	lr

0800eac6 <__swhatbuf_r>:
 800eac6:	b570      	push	{r4, r5, r6, lr}
 800eac8:	460e      	mov	r6, r1
 800eaca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eace:	2900      	cmp	r1, #0
 800ead0:	b096      	sub	sp, #88	; 0x58
 800ead2:	4614      	mov	r4, r2
 800ead4:	461d      	mov	r5, r3
 800ead6:	da07      	bge.n	800eae8 <__swhatbuf_r+0x22>
 800ead8:	2300      	movs	r3, #0
 800eada:	602b      	str	r3, [r5, #0]
 800eadc:	89b3      	ldrh	r3, [r6, #12]
 800eade:	061a      	lsls	r2, r3, #24
 800eae0:	d410      	bmi.n	800eb04 <__swhatbuf_r+0x3e>
 800eae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eae6:	e00e      	b.n	800eb06 <__swhatbuf_r+0x40>
 800eae8:	466a      	mov	r2, sp
 800eaea:	f000 fe91 	bl	800f810 <_fstat_r>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	dbf2      	blt.n	800ead8 <__swhatbuf_r+0x12>
 800eaf2:	9a01      	ldr	r2, [sp, #4]
 800eaf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eaf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eafc:	425a      	negs	r2, r3
 800eafe:	415a      	adcs	r2, r3
 800eb00:	602a      	str	r2, [r5, #0]
 800eb02:	e7ee      	b.n	800eae2 <__swhatbuf_r+0x1c>
 800eb04:	2340      	movs	r3, #64	; 0x40
 800eb06:	2000      	movs	r0, #0
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	b016      	add	sp, #88	; 0x58
 800eb0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb10 <__smakebuf_r>:
 800eb10:	898b      	ldrh	r3, [r1, #12]
 800eb12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb14:	079d      	lsls	r5, r3, #30
 800eb16:	4606      	mov	r6, r0
 800eb18:	460c      	mov	r4, r1
 800eb1a:	d507      	bpl.n	800eb2c <__smakebuf_r+0x1c>
 800eb1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb20:	6023      	str	r3, [r4, #0]
 800eb22:	6123      	str	r3, [r4, #16]
 800eb24:	2301      	movs	r3, #1
 800eb26:	6163      	str	r3, [r4, #20]
 800eb28:	b002      	add	sp, #8
 800eb2a:	bd70      	pop	{r4, r5, r6, pc}
 800eb2c:	ab01      	add	r3, sp, #4
 800eb2e:	466a      	mov	r2, sp
 800eb30:	f7ff ffc9 	bl	800eac6 <__swhatbuf_r>
 800eb34:	9900      	ldr	r1, [sp, #0]
 800eb36:	4605      	mov	r5, r0
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f000 fc0f 	bl	800f35c <_malloc_r>
 800eb3e:	b948      	cbnz	r0, 800eb54 <__smakebuf_r+0x44>
 800eb40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb44:	059a      	lsls	r2, r3, #22
 800eb46:	d4ef      	bmi.n	800eb28 <__smakebuf_r+0x18>
 800eb48:	f023 0303 	bic.w	r3, r3, #3
 800eb4c:	f043 0302 	orr.w	r3, r3, #2
 800eb50:	81a3      	strh	r3, [r4, #12]
 800eb52:	e7e3      	b.n	800eb1c <__smakebuf_r+0xc>
 800eb54:	4b0d      	ldr	r3, [pc, #52]	; (800eb8c <__smakebuf_r+0x7c>)
 800eb56:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	6020      	str	r0, [r4, #0]
 800eb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb60:	81a3      	strh	r3, [r4, #12]
 800eb62:	9b00      	ldr	r3, [sp, #0]
 800eb64:	6163      	str	r3, [r4, #20]
 800eb66:	9b01      	ldr	r3, [sp, #4]
 800eb68:	6120      	str	r0, [r4, #16]
 800eb6a:	b15b      	cbz	r3, 800eb84 <__smakebuf_r+0x74>
 800eb6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb70:	4630      	mov	r0, r6
 800eb72:	f000 fe5f 	bl	800f834 <_isatty_r>
 800eb76:	b128      	cbz	r0, 800eb84 <__smakebuf_r+0x74>
 800eb78:	89a3      	ldrh	r3, [r4, #12]
 800eb7a:	f023 0303 	bic.w	r3, r3, #3
 800eb7e:	f043 0301 	orr.w	r3, r3, #1
 800eb82:	81a3      	strh	r3, [r4, #12]
 800eb84:	89a0      	ldrh	r0, [r4, #12]
 800eb86:	4305      	orrs	r5, r0
 800eb88:	81a5      	strh	r5, [r4, #12]
 800eb8a:	e7cd      	b.n	800eb28 <__smakebuf_r+0x18>
 800eb8c:	0800e915 	.word	0x0800e915

0800eb90 <malloc>:
 800eb90:	4b02      	ldr	r3, [pc, #8]	; (800eb9c <malloc+0xc>)
 800eb92:	4601      	mov	r1, r0
 800eb94:	6818      	ldr	r0, [r3, #0]
 800eb96:	f000 bbe1 	b.w	800f35c <_malloc_r>
 800eb9a:	bf00      	nop
 800eb9c:	20000068 	.word	0x20000068

0800eba0 <_Balloc>:
 800eba0:	b570      	push	{r4, r5, r6, lr}
 800eba2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eba4:	4604      	mov	r4, r0
 800eba6:	460d      	mov	r5, r1
 800eba8:	b976      	cbnz	r6, 800ebc8 <_Balloc+0x28>
 800ebaa:	2010      	movs	r0, #16
 800ebac:	f7ff fff0 	bl	800eb90 <malloc>
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	6260      	str	r0, [r4, #36]	; 0x24
 800ebb4:	b920      	cbnz	r0, 800ebc0 <_Balloc+0x20>
 800ebb6:	4b18      	ldr	r3, [pc, #96]	; (800ec18 <_Balloc+0x78>)
 800ebb8:	4818      	ldr	r0, [pc, #96]	; (800ec1c <_Balloc+0x7c>)
 800ebba:	2166      	movs	r1, #102	; 0x66
 800ebbc:	f000 fde8 	bl	800f790 <__assert_func>
 800ebc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ebc4:	6006      	str	r6, [r0, #0]
 800ebc6:	60c6      	str	r6, [r0, #12]
 800ebc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ebca:	68f3      	ldr	r3, [r6, #12]
 800ebcc:	b183      	cbz	r3, 800ebf0 <_Balloc+0x50>
 800ebce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ebd6:	b9b8      	cbnz	r0, 800ec08 <_Balloc+0x68>
 800ebd8:	2101      	movs	r1, #1
 800ebda:	fa01 f605 	lsl.w	r6, r1, r5
 800ebde:	1d72      	adds	r2, r6, #5
 800ebe0:	0092      	lsls	r2, r2, #2
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 fb5a 	bl	800f29c <_calloc_r>
 800ebe8:	b160      	cbz	r0, 800ec04 <_Balloc+0x64>
 800ebea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ebee:	e00e      	b.n	800ec0e <_Balloc+0x6e>
 800ebf0:	2221      	movs	r2, #33	; 0x21
 800ebf2:	2104      	movs	r1, #4
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f000 fb51 	bl	800f29c <_calloc_r>
 800ebfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebfc:	60f0      	str	r0, [r6, #12]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1e4      	bne.n	800ebce <_Balloc+0x2e>
 800ec04:	2000      	movs	r0, #0
 800ec06:	bd70      	pop	{r4, r5, r6, pc}
 800ec08:	6802      	ldr	r2, [r0, #0]
 800ec0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec0e:	2300      	movs	r3, #0
 800ec10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec14:	e7f7      	b.n	800ec06 <_Balloc+0x66>
 800ec16:	bf00      	nop
 800ec18:	08012715 	.word	0x08012715
 800ec1c:	080127fc 	.word	0x080127fc

0800ec20 <_Bfree>:
 800ec20:	b570      	push	{r4, r5, r6, lr}
 800ec22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec24:	4605      	mov	r5, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	b976      	cbnz	r6, 800ec48 <_Bfree+0x28>
 800ec2a:	2010      	movs	r0, #16
 800ec2c:	f7ff ffb0 	bl	800eb90 <malloc>
 800ec30:	4602      	mov	r2, r0
 800ec32:	6268      	str	r0, [r5, #36]	; 0x24
 800ec34:	b920      	cbnz	r0, 800ec40 <_Bfree+0x20>
 800ec36:	4b09      	ldr	r3, [pc, #36]	; (800ec5c <_Bfree+0x3c>)
 800ec38:	4809      	ldr	r0, [pc, #36]	; (800ec60 <_Bfree+0x40>)
 800ec3a:	218a      	movs	r1, #138	; 0x8a
 800ec3c:	f000 fda8 	bl	800f790 <__assert_func>
 800ec40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec44:	6006      	str	r6, [r0, #0]
 800ec46:	60c6      	str	r6, [r0, #12]
 800ec48:	b13c      	cbz	r4, 800ec5a <_Bfree+0x3a>
 800ec4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ec4c:	6862      	ldr	r2, [r4, #4]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec54:	6021      	str	r1, [r4, #0]
 800ec56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec5a:	bd70      	pop	{r4, r5, r6, pc}
 800ec5c:	08012715 	.word	0x08012715
 800ec60:	080127fc 	.word	0x080127fc

0800ec64 <__multadd>:
 800ec64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec68:	690e      	ldr	r6, [r1, #16]
 800ec6a:	4607      	mov	r7, r0
 800ec6c:	4698      	mov	r8, r3
 800ec6e:	460c      	mov	r4, r1
 800ec70:	f101 0014 	add.w	r0, r1, #20
 800ec74:	2300      	movs	r3, #0
 800ec76:	6805      	ldr	r5, [r0, #0]
 800ec78:	b2a9      	uxth	r1, r5
 800ec7a:	fb02 8101 	mla	r1, r2, r1, r8
 800ec7e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ec82:	0c2d      	lsrs	r5, r5, #16
 800ec84:	fb02 c505 	mla	r5, r2, r5, ip
 800ec88:	b289      	uxth	r1, r1
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ec90:	429e      	cmp	r6, r3
 800ec92:	f840 1b04 	str.w	r1, [r0], #4
 800ec96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ec9a:	dcec      	bgt.n	800ec76 <__multadd+0x12>
 800ec9c:	f1b8 0f00 	cmp.w	r8, #0
 800eca0:	d022      	beq.n	800ece8 <__multadd+0x84>
 800eca2:	68a3      	ldr	r3, [r4, #8]
 800eca4:	42b3      	cmp	r3, r6
 800eca6:	dc19      	bgt.n	800ecdc <__multadd+0x78>
 800eca8:	6861      	ldr	r1, [r4, #4]
 800ecaa:	4638      	mov	r0, r7
 800ecac:	3101      	adds	r1, #1
 800ecae:	f7ff ff77 	bl	800eba0 <_Balloc>
 800ecb2:	4605      	mov	r5, r0
 800ecb4:	b928      	cbnz	r0, 800ecc2 <__multadd+0x5e>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	4b0d      	ldr	r3, [pc, #52]	; (800ecf0 <__multadd+0x8c>)
 800ecba:	480e      	ldr	r0, [pc, #56]	; (800ecf4 <__multadd+0x90>)
 800ecbc:	21b5      	movs	r1, #181	; 0xb5
 800ecbe:	f000 fd67 	bl	800f790 <__assert_func>
 800ecc2:	6922      	ldr	r2, [r4, #16]
 800ecc4:	3202      	adds	r2, #2
 800ecc6:	f104 010c 	add.w	r1, r4, #12
 800ecca:	0092      	lsls	r2, r2, #2
 800eccc:	300c      	adds	r0, #12
 800ecce:	f7fe f8f5 	bl	800cebc <memcpy>
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	f7ff ffa3 	bl	800ec20 <_Bfree>
 800ecda:	462c      	mov	r4, r5
 800ecdc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ece0:	3601      	adds	r6, #1
 800ece2:	f8c3 8014 	str.w	r8, [r3, #20]
 800ece6:	6126      	str	r6, [r4, #16]
 800ece8:	4620      	mov	r0, r4
 800ecea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecee:	bf00      	nop
 800ecf0:	0801278b 	.word	0x0801278b
 800ecf4:	080127fc 	.word	0x080127fc

0800ecf8 <__hi0bits>:
 800ecf8:	0c03      	lsrs	r3, r0, #16
 800ecfa:	041b      	lsls	r3, r3, #16
 800ecfc:	b9d3      	cbnz	r3, 800ed34 <__hi0bits+0x3c>
 800ecfe:	0400      	lsls	r0, r0, #16
 800ed00:	2310      	movs	r3, #16
 800ed02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ed06:	bf04      	itt	eq
 800ed08:	0200      	lsleq	r0, r0, #8
 800ed0a:	3308      	addeq	r3, #8
 800ed0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ed10:	bf04      	itt	eq
 800ed12:	0100      	lsleq	r0, r0, #4
 800ed14:	3304      	addeq	r3, #4
 800ed16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ed1a:	bf04      	itt	eq
 800ed1c:	0080      	lsleq	r0, r0, #2
 800ed1e:	3302      	addeq	r3, #2
 800ed20:	2800      	cmp	r0, #0
 800ed22:	db05      	blt.n	800ed30 <__hi0bits+0x38>
 800ed24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ed28:	f103 0301 	add.w	r3, r3, #1
 800ed2c:	bf08      	it	eq
 800ed2e:	2320      	moveq	r3, #32
 800ed30:	4618      	mov	r0, r3
 800ed32:	4770      	bx	lr
 800ed34:	2300      	movs	r3, #0
 800ed36:	e7e4      	b.n	800ed02 <__hi0bits+0xa>

0800ed38 <__lo0bits>:
 800ed38:	6803      	ldr	r3, [r0, #0]
 800ed3a:	f013 0207 	ands.w	r2, r3, #7
 800ed3e:	4601      	mov	r1, r0
 800ed40:	d00b      	beq.n	800ed5a <__lo0bits+0x22>
 800ed42:	07da      	lsls	r2, r3, #31
 800ed44:	d424      	bmi.n	800ed90 <__lo0bits+0x58>
 800ed46:	0798      	lsls	r0, r3, #30
 800ed48:	bf49      	itett	mi
 800ed4a:	085b      	lsrmi	r3, r3, #1
 800ed4c:	089b      	lsrpl	r3, r3, #2
 800ed4e:	2001      	movmi	r0, #1
 800ed50:	600b      	strmi	r3, [r1, #0]
 800ed52:	bf5c      	itt	pl
 800ed54:	600b      	strpl	r3, [r1, #0]
 800ed56:	2002      	movpl	r0, #2
 800ed58:	4770      	bx	lr
 800ed5a:	b298      	uxth	r0, r3
 800ed5c:	b9b0      	cbnz	r0, 800ed8c <__lo0bits+0x54>
 800ed5e:	0c1b      	lsrs	r3, r3, #16
 800ed60:	2010      	movs	r0, #16
 800ed62:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ed66:	bf04      	itt	eq
 800ed68:	0a1b      	lsreq	r3, r3, #8
 800ed6a:	3008      	addeq	r0, #8
 800ed6c:	071a      	lsls	r2, r3, #28
 800ed6e:	bf04      	itt	eq
 800ed70:	091b      	lsreq	r3, r3, #4
 800ed72:	3004      	addeq	r0, #4
 800ed74:	079a      	lsls	r2, r3, #30
 800ed76:	bf04      	itt	eq
 800ed78:	089b      	lsreq	r3, r3, #2
 800ed7a:	3002      	addeq	r0, #2
 800ed7c:	07da      	lsls	r2, r3, #31
 800ed7e:	d403      	bmi.n	800ed88 <__lo0bits+0x50>
 800ed80:	085b      	lsrs	r3, r3, #1
 800ed82:	f100 0001 	add.w	r0, r0, #1
 800ed86:	d005      	beq.n	800ed94 <__lo0bits+0x5c>
 800ed88:	600b      	str	r3, [r1, #0]
 800ed8a:	4770      	bx	lr
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	e7e8      	b.n	800ed62 <__lo0bits+0x2a>
 800ed90:	2000      	movs	r0, #0
 800ed92:	4770      	bx	lr
 800ed94:	2020      	movs	r0, #32
 800ed96:	4770      	bx	lr

0800ed98 <__i2b>:
 800ed98:	b510      	push	{r4, lr}
 800ed9a:	460c      	mov	r4, r1
 800ed9c:	2101      	movs	r1, #1
 800ed9e:	f7ff feff 	bl	800eba0 <_Balloc>
 800eda2:	4602      	mov	r2, r0
 800eda4:	b928      	cbnz	r0, 800edb2 <__i2b+0x1a>
 800eda6:	4b05      	ldr	r3, [pc, #20]	; (800edbc <__i2b+0x24>)
 800eda8:	4805      	ldr	r0, [pc, #20]	; (800edc0 <__i2b+0x28>)
 800edaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800edae:	f000 fcef 	bl	800f790 <__assert_func>
 800edb2:	2301      	movs	r3, #1
 800edb4:	6144      	str	r4, [r0, #20]
 800edb6:	6103      	str	r3, [r0, #16]
 800edb8:	bd10      	pop	{r4, pc}
 800edba:	bf00      	nop
 800edbc:	0801278b 	.word	0x0801278b
 800edc0:	080127fc 	.word	0x080127fc

0800edc4 <__multiply>:
 800edc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc8:	4614      	mov	r4, r2
 800edca:	690a      	ldr	r2, [r1, #16]
 800edcc:	6923      	ldr	r3, [r4, #16]
 800edce:	429a      	cmp	r2, r3
 800edd0:	bfb8      	it	lt
 800edd2:	460b      	movlt	r3, r1
 800edd4:	460d      	mov	r5, r1
 800edd6:	bfbc      	itt	lt
 800edd8:	4625      	movlt	r5, r4
 800edda:	461c      	movlt	r4, r3
 800eddc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ede0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ede4:	68ab      	ldr	r3, [r5, #8]
 800ede6:	6869      	ldr	r1, [r5, #4]
 800ede8:	eb0a 0709 	add.w	r7, sl, r9
 800edec:	42bb      	cmp	r3, r7
 800edee:	b085      	sub	sp, #20
 800edf0:	bfb8      	it	lt
 800edf2:	3101      	addlt	r1, #1
 800edf4:	f7ff fed4 	bl	800eba0 <_Balloc>
 800edf8:	b930      	cbnz	r0, 800ee08 <__multiply+0x44>
 800edfa:	4602      	mov	r2, r0
 800edfc:	4b42      	ldr	r3, [pc, #264]	; (800ef08 <__multiply+0x144>)
 800edfe:	4843      	ldr	r0, [pc, #268]	; (800ef0c <__multiply+0x148>)
 800ee00:	f240 115d 	movw	r1, #349	; 0x15d
 800ee04:	f000 fcc4 	bl	800f790 <__assert_func>
 800ee08:	f100 0614 	add.w	r6, r0, #20
 800ee0c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ee10:	4633      	mov	r3, r6
 800ee12:	2200      	movs	r2, #0
 800ee14:	4543      	cmp	r3, r8
 800ee16:	d31e      	bcc.n	800ee56 <__multiply+0x92>
 800ee18:	f105 0c14 	add.w	ip, r5, #20
 800ee1c:	f104 0314 	add.w	r3, r4, #20
 800ee20:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ee24:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ee28:	9202      	str	r2, [sp, #8]
 800ee2a:	ebac 0205 	sub.w	r2, ip, r5
 800ee2e:	3a15      	subs	r2, #21
 800ee30:	f022 0203 	bic.w	r2, r2, #3
 800ee34:	3204      	adds	r2, #4
 800ee36:	f105 0115 	add.w	r1, r5, #21
 800ee3a:	458c      	cmp	ip, r1
 800ee3c:	bf38      	it	cc
 800ee3e:	2204      	movcc	r2, #4
 800ee40:	9201      	str	r2, [sp, #4]
 800ee42:	9a02      	ldr	r2, [sp, #8]
 800ee44:	9303      	str	r3, [sp, #12]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d808      	bhi.n	800ee5c <__multiply+0x98>
 800ee4a:	2f00      	cmp	r7, #0
 800ee4c:	dc55      	bgt.n	800eefa <__multiply+0x136>
 800ee4e:	6107      	str	r7, [r0, #16]
 800ee50:	b005      	add	sp, #20
 800ee52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee56:	f843 2b04 	str.w	r2, [r3], #4
 800ee5a:	e7db      	b.n	800ee14 <__multiply+0x50>
 800ee5c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ee60:	f1ba 0f00 	cmp.w	sl, #0
 800ee64:	d020      	beq.n	800eea8 <__multiply+0xe4>
 800ee66:	f105 0e14 	add.w	lr, r5, #20
 800ee6a:	46b1      	mov	r9, r6
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ee72:	f8d9 b000 	ldr.w	fp, [r9]
 800ee76:	b2a1      	uxth	r1, r4
 800ee78:	fa1f fb8b 	uxth.w	fp, fp
 800ee7c:	fb0a b101 	mla	r1, sl, r1, fp
 800ee80:	4411      	add	r1, r2
 800ee82:	f8d9 2000 	ldr.w	r2, [r9]
 800ee86:	0c24      	lsrs	r4, r4, #16
 800ee88:	0c12      	lsrs	r2, r2, #16
 800ee8a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ee8e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ee92:	b289      	uxth	r1, r1
 800ee94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ee98:	45f4      	cmp	ip, lr
 800ee9a:	f849 1b04 	str.w	r1, [r9], #4
 800ee9e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800eea2:	d8e4      	bhi.n	800ee6e <__multiply+0xaa>
 800eea4:	9901      	ldr	r1, [sp, #4]
 800eea6:	5072      	str	r2, [r6, r1]
 800eea8:	9a03      	ldr	r2, [sp, #12]
 800eeaa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eeae:	3304      	adds	r3, #4
 800eeb0:	f1b9 0f00 	cmp.w	r9, #0
 800eeb4:	d01f      	beq.n	800eef6 <__multiply+0x132>
 800eeb6:	6834      	ldr	r4, [r6, #0]
 800eeb8:	f105 0114 	add.w	r1, r5, #20
 800eebc:	46b6      	mov	lr, r6
 800eebe:	f04f 0a00 	mov.w	sl, #0
 800eec2:	880a      	ldrh	r2, [r1, #0]
 800eec4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800eec8:	fb09 b202 	mla	r2, r9, r2, fp
 800eecc:	4492      	add	sl, r2
 800eece:	b2a4      	uxth	r4, r4
 800eed0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800eed4:	f84e 4b04 	str.w	r4, [lr], #4
 800eed8:	f851 4b04 	ldr.w	r4, [r1], #4
 800eedc:	f8be 2000 	ldrh.w	r2, [lr]
 800eee0:	0c24      	lsrs	r4, r4, #16
 800eee2:	fb09 2404 	mla	r4, r9, r4, r2
 800eee6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800eeea:	458c      	cmp	ip, r1
 800eeec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eef0:	d8e7      	bhi.n	800eec2 <__multiply+0xfe>
 800eef2:	9a01      	ldr	r2, [sp, #4]
 800eef4:	50b4      	str	r4, [r6, r2]
 800eef6:	3604      	adds	r6, #4
 800eef8:	e7a3      	b.n	800ee42 <__multiply+0x7e>
 800eefa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1a5      	bne.n	800ee4e <__multiply+0x8a>
 800ef02:	3f01      	subs	r7, #1
 800ef04:	e7a1      	b.n	800ee4a <__multiply+0x86>
 800ef06:	bf00      	nop
 800ef08:	0801278b 	.word	0x0801278b
 800ef0c:	080127fc 	.word	0x080127fc

0800ef10 <__pow5mult>:
 800ef10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef14:	4615      	mov	r5, r2
 800ef16:	f012 0203 	ands.w	r2, r2, #3
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	460f      	mov	r7, r1
 800ef1e:	d007      	beq.n	800ef30 <__pow5mult+0x20>
 800ef20:	4c25      	ldr	r4, [pc, #148]	; (800efb8 <__pow5mult+0xa8>)
 800ef22:	3a01      	subs	r2, #1
 800ef24:	2300      	movs	r3, #0
 800ef26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef2a:	f7ff fe9b 	bl	800ec64 <__multadd>
 800ef2e:	4607      	mov	r7, r0
 800ef30:	10ad      	asrs	r5, r5, #2
 800ef32:	d03d      	beq.n	800efb0 <__pow5mult+0xa0>
 800ef34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ef36:	b97c      	cbnz	r4, 800ef58 <__pow5mult+0x48>
 800ef38:	2010      	movs	r0, #16
 800ef3a:	f7ff fe29 	bl	800eb90 <malloc>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	6270      	str	r0, [r6, #36]	; 0x24
 800ef42:	b928      	cbnz	r0, 800ef50 <__pow5mult+0x40>
 800ef44:	4b1d      	ldr	r3, [pc, #116]	; (800efbc <__pow5mult+0xac>)
 800ef46:	481e      	ldr	r0, [pc, #120]	; (800efc0 <__pow5mult+0xb0>)
 800ef48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ef4c:	f000 fc20 	bl	800f790 <__assert_func>
 800ef50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef54:	6004      	str	r4, [r0, #0]
 800ef56:	60c4      	str	r4, [r0, #12]
 800ef58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ef5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef60:	b94c      	cbnz	r4, 800ef76 <__pow5mult+0x66>
 800ef62:	f240 2171 	movw	r1, #625	; 0x271
 800ef66:	4630      	mov	r0, r6
 800ef68:	f7ff ff16 	bl	800ed98 <__i2b>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef72:	4604      	mov	r4, r0
 800ef74:	6003      	str	r3, [r0, #0]
 800ef76:	f04f 0900 	mov.w	r9, #0
 800ef7a:	07eb      	lsls	r3, r5, #31
 800ef7c:	d50a      	bpl.n	800ef94 <__pow5mult+0x84>
 800ef7e:	4639      	mov	r1, r7
 800ef80:	4622      	mov	r2, r4
 800ef82:	4630      	mov	r0, r6
 800ef84:	f7ff ff1e 	bl	800edc4 <__multiply>
 800ef88:	4639      	mov	r1, r7
 800ef8a:	4680      	mov	r8, r0
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	f7ff fe47 	bl	800ec20 <_Bfree>
 800ef92:	4647      	mov	r7, r8
 800ef94:	106d      	asrs	r5, r5, #1
 800ef96:	d00b      	beq.n	800efb0 <__pow5mult+0xa0>
 800ef98:	6820      	ldr	r0, [r4, #0]
 800ef9a:	b938      	cbnz	r0, 800efac <__pow5mult+0x9c>
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4630      	mov	r0, r6
 800efa2:	f7ff ff0f 	bl	800edc4 <__multiply>
 800efa6:	6020      	str	r0, [r4, #0]
 800efa8:	f8c0 9000 	str.w	r9, [r0]
 800efac:	4604      	mov	r4, r0
 800efae:	e7e4      	b.n	800ef7a <__pow5mult+0x6a>
 800efb0:	4638      	mov	r0, r7
 800efb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efb6:	bf00      	nop
 800efb8:	08012950 	.word	0x08012950
 800efbc:	08012715 	.word	0x08012715
 800efc0:	080127fc 	.word	0x080127fc

0800efc4 <__lshift>:
 800efc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efc8:	460c      	mov	r4, r1
 800efca:	6849      	ldr	r1, [r1, #4]
 800efcc:	6923      	ldr	r3, [r4, #16]
 800efce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800efd2:	68a3      	ldr	r3, [r4, #8]
 800efd4:	4607      	mov	r7, r0
 800efd6:	4691      	mov	r9, r2
 800efd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800efdc:	f108 0601 	add.w	r6, r8, #1
 800efe0:	42b3      	cmp	r3, r6
 800efe2:	db0b      	blt.n	800effc <__lshift+0x38>
 800efe4:	4638      	mov	r0, r7
 800efe6:	f7ff fddb 	bl	800eba0 <_Balloc>
 800efea:	4605      	mov	r5, r0
 800efec:	b948      	cbnz	r0, 800f002 <__lshift+0x3e>
 800efee:	4602      	mov	r2, r0
 800eff0:	4b28      	ldr	r3, [pc, #160]	; (800f094 <__lshift+0xd0>)
 800eff2:	4829      	ldr	r0, [pc, #164]	; (800f098 <__lshift+0xd4>)
 800eff4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eff8:	f000 fbca 	bl	800f790 <__assert_func>
 800effc:	3101      	adds	r1, #1
 800effe:	005b      	lsls	r3, r3, #1
 800f000:	e7ee      	b.n	800efe0 <__lshift+0x1c>
 800f002:	2300      	movs	r3, #0
 800f004:	f100 0114 	add.w	r1, r0, #20
 800f008:	f100 0210 	add.w	r2, r0, #16
 800f00c:	4618      	mov	r0, r3
 800f00e:	4553      	cmp	r3, sl
 800f010:	db33      	blt.n	800f07a <__lshift+0xb6>
 800f012:	6920      	ldr	r0, [r4, #16]
 800f014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f018:	f104 0314 	add.w	r3, r4, #20
 800f01c:	f019 091f 	ands.w	r9, r9, #31
 800f020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f024:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f028:	d02b      	beq.n	800f082 <__lshift+0xbe>
 800f02a:	f1c9 0e20 	rsb	lr, r9, #32
 800f02e:	468a      	mov	sl, r1
 800f030:	2200      	movs	r2, #0
 800f032:	6818      	ldr	r0, [r3, #0]
 800f034:	fa00 f009 	lsl.w	r0, r0, r9
 800f038:	4302      	orrs	r2, r0
 800f03a:	f84a 2b04 	str.w	r2, [sl], #4
 800f03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f042:	459c      	cmp	ip, r3
 800f044:	fa22 f20e 	lsr.w	r2, r2, lr
 800f048:	d8f3      	bhi.n	800f032 <__lshift+0x6e>
 800f04a:	ebac 0304 	sub.w	r3, ip, r4
 800f04e:	3b15      	subs	r3, #21
 800f050:	f023 0303 	bic.w	r3, r3, #3
 800f054:	3304      	adds	r3, #4
 800f056:	f104 0015 	add.w	r0, r4, #21
 800f05a:	4584      	cmp	ip, r0
 800f05c:	bf38      	it	cc
 800f05e:	2304      	movcc	r3, #4
 800f060:	50ca      	str	r2, [r1, r3]
 800f062:	b10a      	cbz	r2, 800f068 <__lshift+0xa4>
 800f064:	f108 0602 	add.w	r6, r8, #2
 800f068:	3e01      	subs	r6, #1
 800f06a:	4638      	mov	r0, r7
 800f06c:	612e      	str	r6, [r5, #16]
 800f06e:	4621      	mov	r1, r4
 800f070:	f7ff fdd6 	bl	800ec20 <_Bfree>
 800f074:	4628      	mov	r0, r5
 800f076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f07a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f07e:	3301      	adds	r3, #1
 800f080:	e7c5      	b.n	800f00e <__lshift+0x4a>
 800f082:	3904      	subs	r1, #4
 800f084:	f853 2b04 	ldr.w	r2, [r3], #4
 800f088:	f841 2f04 	str.w	r2, [r1, #4]!
 800f08c:	459c      	cmp	ip, r3
 800f08e:	d8f9      	bhi.n	800f084 <__lshift+0xc0>
 800f090:	e7ea      	b.n	800f068 <__lshift+0xa4>
 800f092:	bf00      	nop
 800f094:	0801278b 	.word	0x0801278b
 800f098:	080127fc 	.word	0x080127fc

0800f09c <__mcmp>:
 800f09c:	b530      	push	{r4, r5, lr}
 800f09e:	6902      	ldr	r2, [r0, #16]
 800f0a0:	690c      	ldr	r4, [r1, #16]
 800f0a2:	1b12      	subs	r2, r2, r4
 800f0a4:	d10e      	bne.n	800f0c4 <__mcmp+0x28>
 800f0a6:	f100 0314 	add.w	r3, r0, #20
 800f0aa:	3114      	adds	r1, #20
 800f0ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f0b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f0b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f0b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f0bc:	42a5      	cmp	r5, r4
 800f0be:	d003      	beq.n	800f0c8 <__mcmp+0x2c>
 800f0c0:	d305      	bcc.n	800f0ce <__mcmp+0x32>
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	4610      	mov	r0, r2
 800f0c6:	bd30      	pop	{r4, r5, pc}
 800f0c8:	4283      	cmp	r3, r0
 800f0ca:	d3f3      	bcc.n	800f0b4 <__mcmp+0x18>
 800f0cc:	e7fa      	b.n	800f0c4 <__mcmp+0x28>
 800f0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f0d2:	e7f7      	b.n	800f0c4 <__mcmp+0x28>

0800f0d4 <__mdiff>:
 800f0d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d8:	460c      	mov	r4, r1
 800f0da:	4606      	mov	r6, r0
 800f0dc:	4611      	mov	r1, r2
 800f0de:	4620      	mov	r0, r4
 800f0e0:	4617      	mov	r7, r2
 800f0e2:	f7ff ffdb 	bl	800f09c <__mcmp>
 800f0e6:	1e05      	subs	r5, r0, #0
 800f0e8:	d110      	bne.n	800f10c <__mdiff+0x38>
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	f7ff fd57 	bl	800eba0 <_Balloc>
 800f0f2:	b930      	cbnz	r0, 800f102 <__mdiff+0x2e>
 800f0f4:	4b39      	ldr	r3, [pc, #228]	; (800f1dc <__mdiff+0x108>)
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	f240 2132 	movw	r1, #562	; 0x232
 800f0fc:	4838      	ldr	r0, [pc, #224]	; (800f1e0 <__mdiff+0x10c>)
 800f0fe:	f000 fb47 	bl	800f790 <__assert_func>
 800f102:	2301      	movs	r3, #1
 800f104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10c:	bfa4      	itt	ge
 800f10e:	463b      	movge	r3, r7
 800f110:	4627      	movge	r7, r4
 800f112:	4630      	mov	r0, r6
 800f114:	6879      	ldr	r1, [r7, #4]
 800f116:	bfa6      	itte	ge
 800f118:	461c      	movge	r4, r3
 800f11a:	2500      	movge	r5, #0
 800f11c:	2501      	movlt	r5, #1
 800f11e:	f7ff fd3f 	bl	800eba0 <_Balloc>
 800f122:	b920      	cbnz	r0, 800f12e <__mdiff+0x5a>
 800f124:	4b2d      	ldr	r3, [pc, #180]	; (800f1dc <__mdiff+0x108>)
 800f126:	4602      	mov	r2, r0
 800f128:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f12c:	e7e6      	b.n	800f0fc <__mdiff+0x28>
 800f12e:	693e      	ldr	r6, [r7, #16]
 800f130:	60c5      	str	r5, [r0, #12]
 800f132:	6925      	ldr	r5, [r4, #16]
 800f134:	f107 0114 	add.w	r1, r7, #20
 800f138:	f104 0914 	add.w	r9, r4, #20
 800f13c:	f100 0e14 	add.w	lr, r0, #20
 800f140:	f107 0210 	add.w	r2, r7, #16
 800f144:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f148:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f14c:	46f2      	mov	sl, lr
 800f14e:	2700      	movs	r7, #0
 800f150:	f859 3b04 	ldr.w	r3, [r9], #4
 800f154:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f158:	fa1f f883 	uxth.w	r8, r3
 800f15c:	fa17 f78b 	uxtah	r7, r7, fp
 800f160:	0c1b      	lsrs	r3, r3, #16
 800f162:	eba7 0808 	sub.w	r8, r7, r8
 800f166:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f16a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f16e:	fa1f f888 	uxth.w	r8, r8
 800f172:	141f      	asrs	r7, r3, #16
 800f174:	454d      	cmp	r5, r9
 800f176:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f17a:	f84a 3b04 	str.w	r3, [sl], #4
 800f17e:	d8e7      	bhi.n	800f150 <__mdiff+0x7c>
 800f180:	1b2b      	subs	r3, r5, r4
 800f182:	3b15      	subs	r3, #21
 800f184:	f023 0303 	bic.w	r3, r3, #3
 800f188:	3304      	adds	r3, #4
 800f18a:	3415      	adds	r4, #21
 800f18c:	42a5      	cmp	r5, r4
 800f18e:	bf38      	it	cc
 800f190:	2304      	movcc	r3, #4
 800f192:	4419      	add	r1, r3
 800f194:	4473      	add	r3, lr
 800f196:	469e      	mov	lr, r3
 800f198:	460d      	mov	r5, r1
 800f19a:	4565      	cmp	r5, ip
 800f19c:	d30e      	bcc.n	800f1bc <__mdiff+0xe8>
 800f19e:	f10c 0203 	add.w	r2, ip, #3
 800f1a2:	1a52      	subs	r2, r2, r1
 800f1a4:	f022 0203 	bic.w	r2, r2, #3
 800f1a8:	3903      	subs	r1, #3
 800f1aa:	458c      	cmp	ip, r1
 800f1ac:	bf38      	it	cc
 800f1ae:	2200      	movcc	r2, #0
 800f1b0:	441a      	add	r2, r3
 800f1b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f1b6:	b17b      	cbz	r3, 800f1d8 <__mdiff+0x104>
 800f1b8:	6106      	str	r6, [r0, #16]
 800f1ba:	e7a5      	b.n	800f108 <__mdiff+0x34>
 800f1bc:	f855 8b04 	ldr.w	r8, [r5], #4
 800f1c0:	fa17 f488 	uxtah	r4, r7, r8
 800f1c4:	1422      	asrs	r2, r4, #16
 800f1c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f1ca:	b2a4      	uxth	r4, r4
 800f1cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f1d0:	f84e 4b04 	str.w	r4, [lr], #4
 800f1d4:	1417      	asrs	r7, r2, #16
 800f1d6:	e7e0      	b.n	800f19a <__mdiff+0xc6>
 800f1d8:	3e01      	subs	r6, #1
 800f1da:	e7ea      	b.n	800f1b2 <__mdiff+0xde>
 800f1dc:	0801278b 	.word	0x0801278b
 800f1e0:	080127fc 	.word	0x080127fc

0800f1e4 <__d2b>:
 800f1e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1e8:	4689      	mov	r9, r1
 800f1ea:	2101      	movs	r1, #1
 800f1ec:	ec57 6b10 	vmov	r6, r7, d0
 800f1f0:	4690      	mov	r8, r2
 800f1f2:	f7ff fcd5 	bl	800eba0 <_Balloc>
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	b930      	cbnz	r0, 800f208 <__d2b+0x24>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	4b25      	ldr	r3, [pc, #148]	; (800f294 <__d2b+0xb0>)
 800f1fe:	4826      	ldr	r0, [pc, #152]	; (800f298 <__d2b+0xb4>)
 800f200:	f240 310a 	movw	r1, #778	; 0x30a
 800f204:	f000 fac4 	bl	800f790 <__assert_func>
 800f208:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f20c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f210:	bb35      	cbnz	r5, 800f260 <__d2b+0x7c>
 800f212:	2e00      	cmp	r6, #0
 800f214:	9301      	str	r3, [sp, #4]
 800f216:	d028      	beq.n	800f26a <__d2b+0x86>
 800f218:	4668      	mov	r0, sp
 800f21a:	9600      	str	r6, [sp, #0]
 800f21c:	f7ff fd8c 	bl	800ed38 <__lo0bits>
 800f220:	9900      	ldr	r1, [sp, #0]
 800f222:	b300      	cbz	r0, 800f266 <__d2b+0x82>
 800f224:	9a01      	ldr	r2, [sp, #4]
 800f226:	f1c0 0320 	rsb	r3, r0, #32
 800f22a:	fa02 f303 	lsl.w	r3, r2, r3
 800f22e:	430b      	orrs	r3, r1
 800f230:	40c2      	lsrs	r2, r0
 800f232:	6163      	str	r3, [r4, #20]
 800f234:	9201      	str	r2, [sp, #4]
 800f236:	9b01      	ldr	r3, [sp, #4]
 800f238:	61a3      	str	r3, [r4, #24]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	bf14      	ite	ne
 800f23e:	2202      	movne	r2, #2
 800f240:	2201      	moveq	r2, #1
 800f242:	6122      	str	r2, [r4, #16]
 800f244:	b1d5      	cbz	r5, 800f27c <__d2b+0x98>
 800f246:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f24a:	4405      	add	r5, r0
 800f24c:	f8c9 5000 	str.w	r5, [r9]
 800f250:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f254:	f8c8 0000 	str.w	r0, [r8]
 800f258:	4620      	mov	r0, r4
 800f25a:	b003      	add	sp, #12
 800f25c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f264:	e7d5      	b.n	800f212 <__d2b+0x2e>
 800f266:	6161      	str	r1, [r4, #20]
 800f268:	e7e5      	b.n	800f236 <__d2b+0x52>
 800f26a:	a801      	add	r0, sp, #4
 800f26c:	f7ff fd64 	bl	800ed38 <__lo0bits>
 800f270:	9b01      	ldr	r3, [sp, #4]
 800f272:	6163      	str	r3, [r4, #20]
 800f274:	2201      	movs	r2, #1
 800f276:	6122      	str	r2, [r4, #16]
 800f278:	3020      	adds	r0, #32
 800f27a:	e7e3      	b.n	800f244 <__d2b+0x60>
 800f27c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f280:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f284:	f8c9 0000 	str.w	r0, [r9]
 800f288:	6918      	ldr	r0, [r3, #16]
 800f28a:	f7ff fd35 	bl	800ecf8 <__hi0bits>
 800f28e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f292:	e7df      	b.n	800f254 <__d2b+0x70>
 800f294:	0801278b 	.word	0x0801278b
 800f298:	080127fc 	.word	0x080127fc

0800f29c <_calloc_r>:
 800f29c:	b513      	push	{r0, r1, r4, lr}
 800f29e:	434a      	muls	r2, r1
 800f2a0:	4611      	mov	r1, r2
 800f2a2:	9201      	str	r2, [sp, #4]
 800f2a4:	f000 f85a 	bl	800f35c <_malloc_r>
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	b118      	cbz	r0, 800f2b4 <_calloc_r+0x18>
 800f2ac:	9a01      	ldr	r2, [sp, #4]
 800f2ae:	2100      	movs	r1, #0
 800f2b0:	f7fd fe12 	bl	800ced8 <memset>
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	b002      	add	sp, #8
 800f2b8:	bd10      	pop	{r4, pc}
	...

0800f2bc <_free_r>:
 800f2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2be:	2900      	cmp	r1, #0
 800f2c0:	d048      	beq.n	800f354 <_free_r+0x98>
 800f2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2c6:	9001      	str	r0, [sp, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f1a1 0404 	sub.w	r4, r1, #4
 800f2ce:	bfb8      	it	lt
 800f2d0:	18e4      	addlt	r4, r4, r3
 800f2d2:	f000 fae3 	bl	800f89c <__malloc_lock>
 800f2d6:	4a20      	ldr	r2, [pc, #128]	; (800f358 <_free_r+0x9c>)
 800f2d8:	9801      	ldr	r0, [sp, #4]
 800f2da:	6813      	ldr	r3, [r2, #0]
 800f2dc:	4615      	mov	r5, r2
 800f2de:	b933      	cbnz	r3, 800f2ee <_free_r+0x32>
 800f2e0:	6063      	str	r3, [r4, #4]
 800f2e2:	6014      	str	r4, [r2, #0]
 800f2e4:	b003      	add	sp, #12
 800f2e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2ea:	f000 badd 	b.w	800f8a8 <__malloc_unlock>
 800f2ee:	42a3      	cmp	r3, r4
 800f2f0:	d90b      	bls.n	800f30a <_free_r+0x4e>
 800f2f2:	6821      	ldr	r1, [r4, #0]
 800f2f4:	1862      	adds	r2, r4, r1
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	bf04      	itt	eq
 800f2fa:	681a      	ldreq	r2, [r3, #0]
 800f2fc:	685b      	ldreq	r3, [r3, #4]
 800f2fe:	6063      	str	r3, [r4, #4]
 800f300:	bf04      	itt	eq
 800f302:	1852      	addeq	r2, r2, r1
 800f304:	6022      	streq	r2, [r4, #0]
 800f306:	602c      	str	r4, [r5, #0]
 800f308:	e7ec      	b.n	800f2e4 <_free_r+0x28>
 800f30a:	461a      	mov	r2, r3
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	b10b      	cbz	r3, 800f314 <_free_r+0x58>
 800f310:	42a3      	cmp	r3, r4
 800f312:	d9fa      	bls.n	800f30a <_free_r+0x4e>
 800f314:	6811      	ldr	r1, [r2, #0]
 800f316:	1855      	adds	r5, r2, r1
 800f318:	42a5      	cmp	r5, r4
 800f31a:	d10b      	bne.n	800f334 <_free_r+0x78>
 800f31c:	6824      	ldr	r4, [r4, #0]
 800f31e:	4421      	add	r1, r4
 800f320:	1854      	adds	r4, r2, r1
 800f322:	42a3      	cmp	r3, r4
 800f324:	6011      	str	r1, [r2, #0]
 800f326:	d1dd      	bne.n	800f2e4 <_free_r+0x28>
 800f328:	681c      	ldr	r4, [r3, #0]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	6053      	str	r3, [r2, #4]
 800f32e:	4421      	add	r1, r4
 800f330:	6011      	str	r1, [r2, #0]
 800f332:	e7d7      	b.n	800f2e4 <_free_r+0x28>
 800f334:	d902      	bls.n	800f33c <_free_r+0x80>
 800f336:	230c      	movs	r3, #12
 800f338:	6003      	str	r3, [r0, #0]
 800f33a:	e7d3      	b.n	800f2e4 <_free_r+0x28>
 800f33c:	6825      	ldr	r5, [r4, #0]
 800f33e:	1961      	adds	r1, r4, r5
 800f340:	428b      	cmp	r3, r1
 800f342:	bf04      	itt	eq
 800f344:	6819      	ldreq	r1, [r3, #0]
 800f346:	685b      	ldreq	r3, [r3, #4]
 800f348:	6063      	str	r3, [r4, #4]
 800f34a:	bf04      	itt	eq
 800f34c:	1949      	addeq	r1, r1, r5
 800f34e:	6021      	streq	r1, [r4, #0]
 800f350:	6054      	str	r4, [r2, #4]
 800f352:	e7c7      	b.n	800f2e4 <_free_r+0x28>
 800f354:	b003      	add	sp, #12
 800f356:	bd30      	pop	{r4, r5, pc}
 800f358:	20021c64 	.word	0x20021c64

0800f35c <_malloc_r>:
 800f35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f35e:	1ccd      	adds	r5, r1, #3
 800f360:	f025 0503 	bic.w	r5, r5, #3
 800f364:	3508      	adds	r5, #8
 800f366:	2d0c      	cmp	r5, #12
 800f368:	bf38      	it	cc
 800f36a:	250c      	movcc	r5, #12
 800f36c:	2d00      	cmp	r5, #0
 800f36e:	4606      	mov	r6, r0
 800f370:	db01      	blt.n	800f376 <_malloc_r+0x1a>
 800f372:	42a9      	cmp	r1, r5
 800f374:	d903      	bls.n	800f37e <_malloc_r+0x22>
 800f376:	230c      	movs	r3, #12
 800f378:	6033      	str	r3, [r6, #0]
 800f37a:	2000      	movs	r0, #0
 800f37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f37e:	f000 fa8d 	bl	800f89c <__malloc_lock>
 800f382:	4921      	ldr	r1, [pc, #132]	; (800f408 <_malloc_r+0xac>)
 800f384:	680a      	ldr	r2, [r1, #0]
 800f386:	4614      	mov	r4, r2
 800f388:	b99c      	cbnz	r4, 800f3b2 <_malloc_r+0x56>
 800f38a:	4f20      	ldr	r7, [pc, #128]	; (800f40c <_malloc_r+0xb0>)
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	b923      	cbnz	r3, 800f39a <_malloc_r+0x3e>
 800f390:	4621      	mov	r1, r4
 800f392:	4630      	mov	r0, r6
 800f394:	f000 f996 	bl	800f6c4 <_sbrk_r>
 800f398:	6038      	str	r0, [r7, #0]
 800f39a:	4629      	mov	r1, r5
 800f39c:	4630      	mov	r0, r6
 800f39e:	f000 f991 	bl	800f6c4 <_sbrk_r>
 800f3a2:	1c43      	adds	r3, r0, #1
 800f3a4:	d123      	bne.n	800f3ee <_malloc_r+0x92>
 800f3a6:	230c      	movs	r3, #12
 800f3a8:	6033      	str	r3, [r6, #0]
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	f000 fa7c 	bl	800f8a8 <__malloc_unlock>
 800f3b0:	e7e3      	b.n	800f37a <_malloc_r+0x1e>
 800f3b2:	6823      	ldr	r3, [r4, #0]
 800f3b4:	1b5b      	subs	r3, r3, r5
 800f3b6:	d417      	bmi.n	800f3e8 <_malloc_r+0x8c>
 800f3b8:	2b0b      	cmp	r3, #11
 800f3ba:	d903      	bls.n	800f3c4 <_malloc_r+0x68>
 800f3bc:	6023      	str	r3, [r4, #0]
 800f3be:	441c      	add	r4, r3
 800f3c0:	6025      	str	r5, [r4, #0]
 800f3c2:	e004      	b.n	800f3ce <_malloc_r+0x72>
 800f3c4:	6863      	ldr	r3, [r4, #4]
 800f3c6:	42a2      	cmp	r2, r4
 800f3c8:	bf0c      	ite	eq
 800f3ca:	600b      	streq	r3, [r1, #0]
 800f3cc:	6053      	strne	r3, [r2, #4]
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	f000 fa6a 	bl	800f8a8 <__malloc_unlock>
 800f3d4:	f104 000b 	add.w	r0, r4, #11
 800f3d8:	1d23      	adds	r3, r4, #4
 800f3da:	f020 0007 	bic.w	r0, r0, #7
 800f3de:	1ac2      	subs	r2, r0, r3
 800f3e0:	d0cc      	beq.n	800f37c <_malloc_r+0x20>
 800f3e2:	1a1b      	subs	r3, r3, r0
 800f3e4:	50a3      	str	r3, [r4, r2]
 800f3e6:	e7c9      	b.n	800f37c <_malloc_r+0x20>
 800f3e8:	4622      	mov	r2, r4
 800f3ea:	6864      	ldr	r4, [r4, #4]
 800f3ec:	e7cc      	b.n	800f388 <_malloc_r+0x2c>
 800f3ee:	1cc4      	adds	r4, r0, #3
 800f3f0:	f024 0403 	bic.w	r4, r4, #3
 800f3f4:	42a0      	cmp	r0, r4
 800f3f6:	d0e3      	beq.n	800f3c0 <_malloc_r+0x64>
 800f3f8:	1a21      	subs	r1, r4, r0
 800f3fa:	4630      	mov	r0, r6
 800f3fc:	f000 f962 	bl	800f6c4 <_sbrk_r>
 800f400:	3001      	adds	r0, #1
 800f402:	d1dd      	bne.n	800f3c0 <_malloc_r+0x64>
 800f404:	e7cf      	b.n	800f3a6 <_malloc_r+0x4a>
 800f406:	bf00      	nop
 800f408:	20021c64 	.word	0x20021c64
 800f40c:	20021c68 	.word	0x20021c68

0800f410 <__sfputc_r>:
 800f410:	6893      	ldr	r3, [r2, #8]
 800f412:	3b01      	subs	r3, #1
 800f414:	2b00      	cmp	r3, #0
 800f416:	b410      	push	{r4}
 800f418:	6093      	str	r3, [r2, #8]
 800f41a:	da08      	bge.n	800f42e <__sfputc_r+0x1e>
 800f41c:	6994      	ldr	r4, [r2, #24]
 800f41e:	42a3      	cmp	r3, r4
 800f420:	db01      	blt.n	800f426 <__sfputc_r+0x16>
 800f422:	290a      	cmp	r1, #10
 800f424:	d103      	bne.n	800f42e <__sfputc_r+0x1e>
 800f426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f42a:	f7fe ba55 	b.w	800d8d8 <__swbuf_r>
 800f42e:	6813      	ldr	r3, [r2, #0]
 800f430:	1c58      	adds	r0, r3, #1
 800f432:	6010      	str	r0, [r2, #0]
 800f434:	7019      	strb	r1, [r3, #0]
 800f436:	4608      	mov	r0, r1
 800f438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f43c:	4770      	bx	lr

0800f43e <__sfputs_r>:
 800f43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f440:	4606      	mov	r6, r0
 800f442:	460f      	mov	r7, r1
 800f444:	4614      	mov	r4, r2
 800f446:	18d5      	adds	r5, r2, r3
 800f448:	42ac      	cmp	r4, r5
 800f44a:	d101      	bne.n	800f450 <__sfputs_r+0x12>
 800f44c:	2000      	movs	r0, #0
 800f44e:	e007      	b.n	800f460 <__sfputs_r+0x22>
 800f450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f454:	463a      	mov	r2, r7
 800f456:	4630      	mov	r0, r6
 800f458:	f7ff ffda 	bl	800f410 <__sfputc_r>
 800f45c:	1c43      	adds	r3, r0, #1
 800f45e:	d1f3      	bne.n	800f448 <__sfputs_r+0xa>
 800f460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f464 <_vfiprintf_r>:
 800f464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f468:	460d      	mov	r5, r1
 800f46a:	b09d      	sub	sp, #116	; 0x74
 800f46c:	4614      	mov	r4, r2
 800f46e:	4698      	mov	r8, r3
 800f470:	4606      	mov	r6, r0
 800f472:	b118      	cbz	r0, 800f47c <_vfiprintf_r+0x18>
 800f474:	6983      	ldr	r3, [r0, #24]
 800f476:	b90b      	cbnz	r3, 800f47c <_vfiprintf_r+0x18>
 800f478:	f7ff fa80 	bl	800e97c <__sinit>
 800f47c:	4b89      	ldr	r3, [pc, #548]	; (800f6a4 <_vfiprintf_r+0x240>)
 800f47e:	429d      	cmp	r5, r3
 800f480:	d11b      	bne.n	800f4ba <_vfiprintf_r+0x56>
 800f482:	6875      	ldr	r5, [r6, #4]
 800f484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f486:	07d9      	lsls	r1, r3, #31
 800f488:	d405      	bmi.n	800f496 <_vfiprintf_r+0x32>
 800f48a:	89ab      	ldrh	r3, [r5, #12]
 800f48c:	059a      	lsls	r2, r3, #22
 800f48e:	d402      	bmi.n	800f496 <_vfiprintf_r+0x32>
 800f490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f492:	f7ff fb16 	bl	800eac2 <__retarget_lock_acquire_recursive>
 800f496:	89ab      	ldrh	r3, [r5, #12]
 800f498:	071b      	lsls	r3, r3, #28
 800f49a:	d501      	bpl.n	800f4a0 <_vfiprintf_r+0x3c>
 800f49c:	692b      	ldr	r3, [r5, #16]
 800f49e:	b9eb      	cbnz	r3, 800f4dc <_vfiprintf_r+0x78>
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f7fe fa6a 	bl	800d97c <__swsetup_r>
 800f4a8:	b1c0      	cbz	r0, 800f4dc <_vfiprintf_r+0x78>
 800f4aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4ac:	07dc      	lsls	r4, r3, #31
 800f4ae:	d50e      	bpl.n	800f4ce <_vfiprintf_r+0x6a>
 800f4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b4:	b01d      	add	sp, #116	; 0x74
 800f4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ba:	4b7b      	ldr	r3, [pc, #492]	; (800f6a8 <_vfiprintf_r+0x244>)
 800f4bc:	429d      	cmp	r5, r3
 800f4be:	d101      	bne.n	800f4c4 <_vfiprintf_r+0x60>
 800f4c0:	68b5      	ldr	r5, [r6, #8]
 800f4c2:	e7df      	b.n	800f484 <_vfiprintf_r+0x20>
 800f4c4:	4b79      	ldr	r3, [pc, #484]	; (800f6ac <_vfiprintf_r+0x248>)
 800f4c6:	429d      	cmp	r5, r3
 800f4c8:	bf08      	it	eq
 800f4ca:	68f5      	ldreq	r5, [r6, #12]
 800f4cc:	e7da      	b.n	800f484 <_vfiprintf_r+0x20>
 800f4ce:	89ab      	ldrh	r3, [r5, #12]
 800f4d0:	0598      	lsls	r0, r3, #22
 800f4d2:	d4ed      	bmi.n	800f4b0 <_vfiprintf_r+0x4c>
 800f4d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4d6:	f7ff faf5 	bl	800eac4 <__retarget_lock_release_recursive>
 800f4da:	e7e9      	b.n	800f4b0 <_vfiprintf_r+0x4c>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	9309      	str	r3, [sp, #36]	; 0x24
 800f4e0:	2320      	movs	r3, #32
 800f4e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4ea:	2330      	movs	r3, #48	; 0x30
 800f4ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f6b0 <_vfiprintf_r+0x24c>
 800f4f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4f4:	f04f 0901 	mov.w	r9, #1
 800f4f8:	4623      	mov	r3, r4
 800f4fa:	469a      	mov	sl, r3
 800f4fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f500:	b10a      	cbz	r2, 800f506 <_vfiprintf_r+0xa2>
 800f502:	2a25      	cmp	r2, #37	; 0x25
 800f504:	d1f9      	bne.n	800f4fa <_vfiprintf_r+0x96>
 800f506:	ebba 0b04 	subs.w	fp, sl, r4
 800f50a:	d00b      	beq.n	800f524 <_vfiprintf_r+0xc0>
 800f50c:	465b      	mov	r3, fp
 800f50e:	4622      	mov	r2, r4
 800f510:	4629      	mov	r1, r5
 800f512:	4630      	mov	r0, r6
 800f514:	f7ff ff93 	bl	800f43e <__sfputs_r>
 800f518:	3001      	adds	r0, #1
 800f51a:	f000 80aa 	beq.w	800f672 <_vfiprintf_r+0x20e>
 800f51e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f520:	445a      	add	r2, fp
 800f522:	9209      	str	r2, [sp, #36]	; 0x24
 800f524:	f89a 3000 	ldrb.w	r3, [sl]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f000 80a2 	beq.w	800f672 <_vfiprintf_r+0x20e>
 800f52e:	2300      	movs	r3, #0
 800f530:	f04f 32ff 	mov.w	r2, #4294967295
 800f534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f538:	f10a 0a01 	add.w	sl, sl, #1
 800f53c:	9304      	str	r3, [sp, #16]
 800f53e:	9307      	str	r3, [sp, #28]
 800f540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f544:	931a      	str	r3, [sp, #104]	; 0x68
 800f546:	4654      	mov	r4, sl
 800f548:	2205      	movs	r2, #5
 800f54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f54e:	4858      	ldr	r0, [pc, #352]	; (800f6b0 <_vfiprintf_r+0x24c>)
 800f550:	f7f0 fe56 	bl	8000200 <memchr>
 800f554:	9a04      	ldr	r2, [sp, #16]
 800f556:	b9d8      	cbnz	r0, 800f590 <_vfiprintf_r+0x12c>
 800f558:	06d1      	lsls	r1, r2, #27
 800f55a:	bf44      	itt	mi
 800f55c:	2320      	movmi	r3, #32
 800f55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f562:	0713      	lsls	r3, r2, #28
 800f564:	bf44      	itt	mi
 800f566:	232b      	movmi	r3, #43	; 0x2b
 800f568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f56c:	f89a 3000 	ldrb.w	r3, [sl]
 800f570:	2b2a      	cmp	r3, #42	; 0x2a
 800f572:	d015      	beq.n	800f5a0 <_vfiprintf_r+0x13c>
 800f574:	9a07      	ldr	r2, [sp, #28]
 800f576:	4654      	mov	r4, sl
 800f578:	2000      	movs	r0, #0
 800f57a:	f04f 0c0a 	mov.w	ip, #10
 800f57e:	4621      	mov	r1, r4
 800f580:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f584:	3b30      	subs	r3, #48	; 0x30
 800f586:	2b09      	cmp	r3, #9
 800f588:	d94e      	bls.n	800f628 <_vfiprintf_r+0x1c4>
 800f58a:	b1b0      	cbz	r0, 800f5ba <_vfiprintf_r+0x156>
 800f58c:	9207      	str	r2, [sp, #28]
 800f58e:	e014      	b.n	800f5ba <_vfiprintf_r+0x156>
 800f590:	eba0 0308 	sub.w	r3, r0, r8
 800f594:	fa09 f303 	lsl.w	r3, r9, r3
 800f598:	4313      	orrs	r3, r2
 800f59a:	9304      	str	r3, [sp, #16]
 800f59c:	46a2      	mov	sl, r4
 800f59e:	e7d2      	b.n	800f546 <_vfiprintf_r+0xe2>
 800f5a0:	9b03      	ldr	r3, [sp, #12]
 800f5a2:	1d19      	adds	r1, r3, #4
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	9103      	str	r1, [sp, #12]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	bfbb      	ittet	lt
 800f5ac:	425b      	neglt	r3, r3
 800f5ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f5b2:	9307      	strge	r3, [sp, #28]
 800f5b4:	9307      	strlt	r3, [sp, #28]
 800f5b6:	bfb8      	it	lt
 800f5b8:	9204      	strlt	r2, [sp, #16]
 800f5ba:	7823      	ldrb	r3, [r4, #0]
 800f5bc:	2b2e      	cmp	r3, #46	; 0x2e
 800f5be:	d10c      	bne.n	800f5da <_vfiprintf_r+0x176>
 800f5c0:	7863      	ldrb	r3, [r4, #1]
 800f5c2:	2b2a      	cmp	r3, #42	; 0x2a
 800f5c4:	d135      	bne.n	800f632 <_vfiprintf_r+0x1ce>
 800f5c6:	9b03      	ldr	r3, [sp, #12]
 800f5c8:	1d1a      	adds	r2, r3, #4
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	9203      	str	r2, [sp, #12]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	bfb8      	it	lt
 800f5d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5d6:	3402      	adds	r4, #2
 800f5d8:	9305      	str	r3, [sp, #20]
 800f5da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f6c0 <_vfiprintf_r+0x25c>
 800f5de:	7821      	ldrb	r1, [r4, #0]
 800f5e0:	2203      	movs	r2, #3
 800f5e2:	4650      	mov	r0, sl
 800f5e4:	f7f0 fe0c 	bl	8000200 <memchr>
 800f5e8:	b140      	cbz	r0, 800f5fc <_vfiprintf_r+0x198>
 800f5ea:	2340      	movs	r3, #64	; 0x40
 800f5ec:	eba0 000a 	sub.w	r0, r0, sl
 800f5f0:	fa03 f000 	lsl.w	r0, r3, r0
 800f5f4:	9b04      	ldr	r3, [sp, #16]
 800f5f6:	4303      	orrs	r3, r0
 800f5f8:	3401      	adds	r4, #1
 800f5fa:	9304      	str	r3, [sp, #16]
 800f5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f600:	482c      	ldr	r0, [pc, #176]	; (800f6b4 <_vfiprintf_r+0x250>)
 800f602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f606:	2206      	movs	r2, #6
 800f608:	f7f0 fdfa 	bl	8000200 <memchr>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d03f      	beq.n	800f690 <_vfiprintf_r+0x22c>
 800f610:	4b29      	ldr	r3, [pc, #164]	; (800f6b8 <_vfiprintf_r+0x254>)
 800f612:	bb1b      	cbnz	r3, 800f65c <_vfiprintf_r+0x1f8>
 800f614:	9b03      	ldr	r3, [sp, #12]
 800f616:	3307      	adds	r3, #7
 800f618:	f023 0307 	bic.w	r3, r3, #7
 800f61c:	3308      	adds	r3, #8
 800f61e:	9303      	str	r3, [sp, #12]
 800f620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f622:	443b      	add	r3, r7
 800f624:	9309      	str	r3, [sp, #36]	; 0x24
 800f626:	e767      	b.n	800f4f8 <_vfiprintf_r+0x94>
 800f628:	fb0c 3202 	mla	r2, ip, r2, r3
 800f62c:	460c      	mov	r4, r1
 800f62e:	2001      	movs	r0, #1
 800f630:	e7a5      	b.n	800f57e <_vfiprintf_r+0x11a>
 800f632:	2300      	movs	r3, #0
 800f634:	3401      	adds	r4, #1
 800f636:	9305      	str	r3, [sp, #20]
 800f638:	4619      	mov	r1, r3
 800f63a:	f04f 0c0a 	mov.w	ip, #10
 800f63e:	4620      	mov	r0, r4
 800f640:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f644:	3a30      	subs	r2, #48	; 0x30
 800f646:	2a09      	cmp	r2, #9
 800f648:	d903      	bls.n	800f652 <_vfiprintf_r+0x1ee>
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d0c5      	beq.n	800f5da <_vfiprintf_r+0x176>
 800f64e:	9105      	str	r1, [sp, #20]
 800f650:	e7c3      	b.n	800f5da <_vfiprintf_r+0x176>
 800f652:	fb0c 2101 	mla	r1, ip, r1, r2
 800f656:	4604      	mov	r4, r0
 800f658:	2301      	movs	r3, #1
 800f65a:	e7f0      	b.n	800f63e <_vfiprintf_r+0x1da>
 800f65c:	ab03      	add	r3, sp, #12
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	462a      	mov	r2, r5
 800f662:	4b16      	ldr	r3, [pc, #88]	; (800f6bc <_vfiprintf_r+0x258>)
 800f664:	a904      	add	r1, sp, #16
 800f666:	4630      	mov	r0, r6
 800f668:	f7fd fcde 	bl	800d028 <_printf_float>
 800f66c:	4607      	mov	r7, r0
 800f66e:	1c78      	adds	r0, r7, #1
 800f670:	d1d6      	bne.n	800f620 <_vfiprintf_r+0x1bc>
 800f672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f674:	07d9      	lsls	r1, r3, #31
 800f676:	d405      	bmi.n	800f684 <_vfiprintf_r+0x220>
 800f678:	89ab      	ldrh	r3, [r5, #12]
 800f67a:	059a      	lsls	r2, r3, #22
 800f67c:	d402      	bmi.n	800f684 <_vfiprintf_r+0x220>
 800f67e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f680:	f7ff fa20 	bl	800eac4 <__retarget_lock_release_recursive>
 800f684:	89ab      	ldrh	r3, [r5, #12]
 800f686:	065b      	lsls	r3, r3, #25
 800f688:	f53f af12 	bmi.w	800f4b0 <_vfiprintf_r+0x4c>
 800f68c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f68e:	e711      	b.n	800f4b4 <_vfiprintf_r+0x50>
 800f690:	ab03      	add	r3, sp, #12
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	462a      	mov	r2, r5
 800f696:	4b09      	ldr	r3, [pc, #36]	; (800f6bc <_vfiprintf_r+0x258>)
 800f698:	a904      	add	r1, sp, #16
 800f69a:	4630      	mov	r0, r6
 800f69c:	f7fd ff68 	bl	800d570 <_printf_i>
 800f6a0:	e7e4      	b.n	800f66c <_vfiprintf_r+0x208>
 800f6a2:	bf00      	nop
 800f6a4:	080127bc 	.word	0x080127bc
 800f6a8:	080127dc 	.word	0x080127dc
 800f6ac:	0801279c 	.word	0x0801279c
 800f6b0:	0801295c 	.word	0x0801295c
 800f6b4:	08012966 	.word	0x08012966
 800f6b8:	0800d029 	.word	0x0800d029
 800f6bc:	0800f43f 	.word	0x0800f43f
 800f6c0:	08012962 	.word	0x08012962

0800f6c4 <_sbrk_r>:
 800f6c4:	b538      	push	{r3, r4, r5, lr}
 800f6c6:	4d06      	ldr	r5, [pc, #24]	; (800f6e0 <_sbrk_r+0x1c>)
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	4608      	mov	r0, r1
 800f6ce:	602b      	str	r3, [r5, #0]
 800f6d0:	f7f2 fca0 	bl	8002014 <_sbrk>
 800f6d4:	1c43      	adds	r3, r0, #1
 800f6d6:	d102      	bne.n	800f6de <_sbrk_r+0x1a>
 800f6d8:	682b      	ldr	r3, [r5, #0]
 800f6da:	b103      	cbz	r3, 800f6de <_sbrk_r+0x1a>
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	bd38      	pop	{r3, r4, r5, pc}
 800f6e0:	20022124 	.word	0x20022124

0800f6e4 <__sread>:
 800f6e4:	b510      	push	{r4, lr}
 800f6e6:	460c      	mov	r4, r1
 800f6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ec:	f000 f8e2 	bl	800f8b4 <_read_r>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	bfab      	itete	ge
 800f6f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6f6:	89a3      	ldrhlt	r3, [r4, #12]
 800f6f8:	181b      	addge	r3, r3, r0
 800f6fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6fe:	bfac      	ite	ge
 800f700:	6563      	strge	r3, [r4, #84]	; 0x54
 800f702:	81a3      	strhlt	r3, [r4, #12]
 800f704:	bd10      	pop	{r4, pc}

0800f706 <__swrite>:
 800f706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f70a:	461f      	mov	r7, r3
 800f70c:	898b      	ldrh	r3, [r1, #12]
 800f70e:	05db      	lsls	r3, r3, #23
 800f710:	4605      	mov	r5, r0
 800f712:	460c      	mov	r4, r1
 800f714:	4616      	mov	r6, r2
 800f716:	d505      	bpl.n	800f724 <__swrite+0x1e>
 800f718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f71c:	2302      	movs	r3, #2
 800f71e:	2200      	movs	r2, #0
 800f720:	f000 f898 	bl	800f854 <_lseek_r>
 800f724:	89a3      	ldrh	r3, [r4, #12]
 800f726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f72a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f72e:	81a3      	strh	r3, [r4, #12]
 800f730:	4632      	mov	r2, r6
 800f732:	463b      	mov	r3, r7
 800f734:	4628      	mov	r0, r5
 800f736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f73a:	f000 b817 	b.w	800f76c <_write_r>

0800f73e <__sseek>:
 800f73e:	b510      	push	{r4, lr}
 800f740:	460c      	mov	r4, r1
 800f742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f746:	f000 f885 	bl	800f854 <_lseek_r>
 800f74a:	1c43      	adds	r3, r0, #1
 800f74c:	89a3      	ldrh	r3, [r4, #12]
 800f74e:	bf15      	itete	ne
 800f750:	6560      	strne	r0, [r4, #84]	; 0x54
 800f752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f75a:	81a3      	strheq	r3, [r4, #12]
 800f75c:	bf18      	it	ne
 800f75e:	81a3      	strhne	r3, [r4, #12]
 800f760:	bd10      	pop	{r4, pc}

0800f762 <__sclose>:
 800f762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f766:	f000 b831 	b.w	800f7cc <_close_r>
	...

0800f76c <_write_r>:
 800f76c:	b538      	push	{r3, r4, r5, lr}
 800f76e:	4d07      	ldr	r5, [pc, #28]	; (800f78c <_write_r+0x20>)
 800f770:	4604      	mov	r4, r0
 800f772:	4608      	mov	r0, r1
 800f774:	4611      	mov	r1, r2
 800f776:	2200      	movs	r2, #0
 800f778:	602a      	str	r2, [r5, #0]
 800f77a:	461a      	mov	r2, r3
 800f77c:	f7f2 fbf9 	bl	8001f72 <_write>
 800f780:	1c43      	adds	r3, r0, #1
 800f782:	d102      	bne.n	800f78a <_write_r+0x1e>
 800f784:	682b      	ldr	r3, [r5, #0]
 800f786:	b103      	cbz	r3, 800f78a <_write_r+0x1e>
 800f788:	6023      	str	r3, [r4, #0]
 800f78a:	bd38      	pop	{r3, r4, r5, pc}
 800f78c:	20022124 	.word	0x20022124

0800f790 <__assert_func>:
 800f790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f792:	4614      	mov	r4, r2
 800f794:	461a      	mov	r2, r3
 800f796:	4b09      	ldr	r3, [pc, #36]	; (800f7bc <__assert_func+0x2c>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	4605      	mov	r5, r0
 800f79c:	68d8      	ldr	r0, [r3, #12]
 800f79e:	b14c      	cbz	r4, 800f7b4 <__assert_func+0x24>
 800f7a0:	4b07      	ldr	r3, [pc, #28]	; (800f7c0 <__assert_func+0x30>)
 800f7a2:	9100      	str	r1, [sp, #0]
 800f7a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7a8:	4906      	ldr	r1, [pc, #24]	; (800f7c4 <__assert_func+0x34>)
 800f7aa:	462b      	mov	r3, r5
 800f7ac:	f000 f81e 	bl	800f7ec <fiprintf>
 800f7b0:	f000 f89f 	bl	800f8f2 <abort>
 800f7b4:	4b04      	ldr	r3, [pc, #16]	; (800f7c8 <__assert_func+0x38>)
 800f7b6:	461c      	mov	r4, r3
 800f7b8:	e7f3      	b.n	800f7a2 <__assert_func+0x12>
 800f7ba:	bf00      	nop
 800f7bc:	20000068 	.word	0x20000068
 800f7c0:	0801296d 	.word	0x0801296d
 800f7c4:	0801297a 	.word	0x0801297a
 800f7c8:	080129a8 	.word	0x080129a8

0800f7cc <_close_r>:
 800f7cc:	b538      	push	{r3, r4, r5, lr}
 800f7ce:	4d06      	ldr	r5, [pc, #24]	; (800f7e8 <_close_r+0x1c>)
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	4608      	mov	r0, r1
 800f7d6:	602b      	str	r3, [r5, #0]
 800f7d8:	f7f2 fbe7 	bl	8001faa <_close>
 800f7dc:	1c43      	adds	r3, r0, #1
 800f7de:	d102      	bne.n	800f7e6 <_close_r+0x1a>
 800f7e0:	682b      	ldr	r3, [r5, #0]
 800f7e2:	b103      	cbz	r3, 800f7e6 <_close_r+0x1a>
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	bd38      	pop	{r3, r4, r5, pc}
 800f7e8:	20022124 	.word	0x20022124

0800f7ec <fiprintf>:
 800f7ec:	b40e      	push	{r1, r2, r3}
 800f7ee:	b503      	push	{r0, r1, lr}
 800f7f0:	4601      	mov	r1, r0
 800f7f2:	ab03      	add	r3, sp, #12
 800f7f4:	4805      	ldr	r0, [pc, #20]	; (800f80c <fiprintf+0x20>)
 800f7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7fa:	6800      	ldr	r0, [r0, #0]
 800f7fc:	9301      	str	r3, [sp, #4]
 800f7fe:	f7ff fe31 	bl	800f464 <_vfiprintf_r>
 800f802:	b002      	add	sp, #8
 800f804:	f85d eb04 	ldr.w	lr, [sp], #4
 800f808:	b003      	add	sp, #12
 800f80a:	4770      	bx	lr
 800f80c:	20000068 	.word	0x20000068

0800f810 <_fstat_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	4d07      	ldr	r5, [pc, #28]	; (800f830 <_fstat_r+0x20>)
 800f814:	2300      	movs	r3, #0
 800f816:	4604      	mov	r4, r0
 800f818:	4608      	mov	r0, r1
 800f81a:	4611      	mov	r1, r2
 800f81c:	602b      	str	r3, [r5, #0]
 800f81e:	f7f2 fbd0 	bl	8001fc2 <_fstat>
 800f822:	1c43      	adds	r3, r0, #1
 800f824:	d102      	bne.n	800f82c <_fstat_r+0x1c>
 800f826:	682b      	ldr	r3, [r5, #0]
 800f828:	b103      	cbz	r3, 800f82c <_fstat_r+0x1c>
 800f82a:	6023      	str	r3, [r4, #0]
 800f82c:	bd38      	pop	{r3, r4, r5, pc}
 800f82e:	bf00      	nop
 800f830:	20022124 	.word	0x20022124

0800f834 <_isatty_r>:
 800f834:	b538      	push	{r3, r4, r5, lr}
 800f836:	4d06      	ldr	r5, [pc, #24]	; (800f850 <_isatty_r+0x1c>)
 800f838:	2300      	movs	r3, #0
 800f83a:	4604      	mov	r4, r0
 800f83c:	4608      	mov	r0, r1
 800f83e:	602b      	str	r3, [r5, #0]
 800f840:	f7f2 fbcf 	bl	8001fe2 <_isatty>
 800f844:	1c43      	adds	r3, r0, #1
 800f846:	d102      	bne.n	800f84e <_isatty_r+0x1a>
 800f848:	682b      	ldr	r3, [r5, #0]
 800f84a:	b103      	cbz	r3, 800f84e <_isatty_r+0x1a>
 800f84c:	6023      	str	r3, [r4, #0]
 800f84e:	bd38      	pop	{r3, r4, r5, pc}
 800f850:	20022124 	.word	0x20022124

0800f854 <_lseek_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4d07      	ldr	r5, [pc, #28]	; (800f874 <_lseek_r+0x20>)
 800f858:	4604      	mov	r4, r0
 800f85a:	4608      	mov	r0, r1
 800f85c:	4611      	mov	r1, r2
 800f85e:	2200      	movs	r2, #0
 800f860:	602a      	str	r2, [r5, #0]
 800f862:	461a      	mov	r2, r3
 800f864:	f7f2 fbc8 	bl	8001ff8 <_lseek>
 800f868:	1c43      	adds	r3, r0, #1
 800f86a:	d102      	bne.n	800f872 <_lseek_r+0x1e>
 800f86c:	682b      	ldr	r3, [r5, #0]
 800f86e:	b103      	cbz	r3, 800f872 <_lseek_r+0x1e>
 800f870:	6023      	str	r3, [r4, #0]
 800f872:	bd38      	pop	{r3, r4, r5, pc}
 800f874:	20022124 	.word	0x20022124

0800f878 <__ascii_mbtowc>:
 800f878:	b082      	sub	sp, #8
 800f87a:	b901      	cbnz	r1, 800f87e <__ascii_mbtowc+0x6>
 800f87c:	a901      	add	r1, sp, #4
 800f87e:	b142      	cbz	r2, 800f892 <__ascii_mbtowc+0x1a>
 800f880:	b14b      	cbz	r3, 800f896 <__ascii_mbtowc+0x1e>
 800f882:	7813      	ldrb	r3, [r2, #0]
 800f884:	600b      	str	r3, [r1, #0]
 800f886:	7812      	ldrb	r2, [r2, #0]
 800f888:	1e10      	subs	r0, r2, #0
 800f88a:	bf18      	it	ne
 800f88c:	2001      	movne	r0, #1
 800f88e:	b002      	add	sp, #8
 800f890:	4770      	bx	lr
 800f892:	4610      	mov	r0, r2
 800f894:	e7fb      	b.n	800f88e <__ascii_mbtowc+0x16>
 800f896:	f06f 0001 	mvn.w	r0, #1
 800f89a:	e7f8      	b.n	800f88e <__ascii_mbtowc+0x16>

0800f89c <__malloc_lock>:
 800f89c:	4801      	ldr	r0, [pc, #4]	; (800f8a4 <__malloc_lock+0x8>)
 800f89e:	f7ff b910 	b.w	800eac2 <__retarget_lock_acquire_recursive>
 800f8a2:	bf00      	nop
 800f8a4:	2002211c 	.word	0x2002211c

0800f8a8 <__malloc_unlock>:
 800f8a8:	4801      	ldr	r0, [pc, #4]	; (800f8b0 <__malloc_unlock+0x8>)
 800f8aa:	f7ff b90b 	b.w	800eac4 <__retarget_lock_release_recursive>
 800f8ae:	bf00      	nop
 800f8b0:	2002211c 	.word	0x2002211c

0800f8b4 <_read_r>:
 800f8b4:	b538      	push	{r3, r4, r5, lr}
 800f8b6:	4d07      	ldr	r5, [pc, #28]	; (800f8d4 <_read_r+0x20>)
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	4608      	mov	r0, r1
 800f8bc:	4611      	mov	r1, r2
 800f8be:	2200      	movs	r2, #0
 800f8c0:	602a      	str	r2, [r5, #0]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	f7f2 fb38 	bl	8001f38 <_read>
 800f8c8:	1c43      	adds	r3, r0, #1
 800f8ca:	d102      	bne.n	800f8d2 <_read_r+0x1e>
 800f8cc:	682b      	ldr	r3, [r5, #0]
 800f8ce:	b103      	cbz	r3, 800f8d2 <_read_r+0x1e>
 800f8d0:	6023      	str	r3, [r4, #0]
 800f8d2:	bd38      	pop	{r3, r4, r5, pc}
 800f8d4:	20022124 	.word	0x20022124

0800f8d8 <__ascii_wctomb>:
 800f8d8:	b149      	cbz	r1, 800f8ee <__ascii_wctomb+0x16>
 800f8da:	2aff      	cmp	r2, #255	; 0xff
 800f8dc:	bf85      	ittet	hi
 800f8de:	238a      	movhi	r3, #138	; 0x8a
 800f8e0:	6003      	strhi	r3, [r0, #0]
 800f8e2:	700a      	strbls	r2, [r1, #0]
 800f8e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f8e8:	bf98      	it	ls
 800f8ea:	2001      	movls	r0, #1
 800f8ec:	4770      	bx	lr
 800f8ee:	4608      	mov	r0, r1
 800f8f0:	4770      	bx	lr

0800f8f2 <abort>:
 800f8f2:	b508      	push	{r3, lr}
 800f8f4:	2006      	movs	r0, #6
 800f8f6:	f000 f82b 	bl	800f950 <raise>
 800f8fa:	2001      	movs	r0, #1
 800f8fc:	f7f2 fb12 	bl	8001f24 <_exit>

0800f900 <_raise_r>:
 800f900:	291f      	cmp	r1, #31
 800f902:	b538      	push	{r3, r4, r5, lr}
 800f904:	4604      	mov	r4, r0
 800f906:	460d      	mov	r5, r1
 800f908:	d904      	bls.n	800f914 <_raise_r+0x14>
 800f90a:	2316      	movs	r3, #22
 800f90c:	6003      	str	r3, [r0, #0]
 800f90e:	f04f 30ff 	mov.w	r0, #4294967295
 800f912:	bd38      	pop	{r3, r4, r5, pc}
 800f914:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f916:	b112      	cbz	r2, 800f91e <_raise_r+0x1e>
 800f918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f91c:	b94b      	cbnz	r3, 800f932 <_raise_r+0x32>
 800f91e:	4620      	mov	r0, r4
 800f920:	f000 f830 	bl	800f984 <_getpid_r>
 800f924:	462a      	mov	r2, r5
 800f926:	4601      	mov	r1, r0
 800f928:	4620      	mov	r0, r4
 800f92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f92e:	f000 b817 	b.w	800f960 <_kill_r>
 800f932:	2b01      	cmp	r3, #1
 800f934:	d00a      	beq.n	800f94c <_raise_r+0x4c>
 800f936:	1c59      	adds	r1, r3, #1
 800f938:	d103      	bne.n	800f942 <_raise_r+0x42>
 800f93a:	2316      	movs	r3, #22
 800f93c:	6003      	str	r3, [r0, #0]
 800f93e:	2001      	movs	r0, #1
 800f940:	e7e7      	b.n	800f912 <_raise_r+0x12>
 800f942:	2400      	movs	r4, #0
 800f944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f948:	4628      	mov	r0, r5
 800f94a:	4798      	blx	r3
 800f94c:	2000      	movs	r0, #0
 800f94e:	e7e0      	b.n	800f912 <_raise_r+0x12>

0800f950 <raise>:
 800f950:	4b02      	ldr	r3, [pc, #8]	; (800f95c <raise+0xc>)
 800f952:	4601      	mov	r1, r0
 800f954:	6818      	ldr	r0, [r3, #0]
 800f956:	f7ff bfd3 	b.w	800f900 <_raise_r>
 800f95a:	bf00      	nop
 800f95c:	20000068 	.word	0x20000068

0800f960 <_kill_r>:
 800f960:	b538      	push	{r3, r4, r5, lr}
 800f962:	4d07      	ldr	r5, [pc, #28]	; (800f980 <_kill_r+0x20>)
 800f964:	2300      	movs	r3, #0
 800f966:	4604      	mov	r4, r0
 800f968:	4608      	mov	r0, r1
 800f96a:	4611      	mov	r1, r2
 800f96c:	602b      	str	r3, [r5, #0]
 800f96e:	f7f2 fac9 	bl	8001f04 <_kill>
 800f972:	1c43      	adds	r3, r0, #1
 800f974:	d102      	bne.n	800f97c <_kill_r+0x1c>
 800f976:	682b      	ldr	r3, [r5, #0]
 800f978:	b103      	cbz	r3, 800f97c <_kill_r+0x1c>
 800f97a:	6023      	str	r3, [r4, #0]
 800f97c:	bd38      	pop	{r3, r4, r5, pc}
 800f97e:	bf00      	nop
 800f980:	20022124 	.word	0x20022124

0800f984 <_getpid_r>:
 800f984:	f7f2 bab6 	b.w	8001ef4 <_getpid>

0800f988 <_init>:
 800f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98a:	bf00      	nop
 800f98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f98e:	bc08      	pop	{r3}
 800f990:	469e      	mov	lr, r3
 800f992:	4770      	bx	lr

0800f994 <_fini>:
 800f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f996:	bf00      	nop
 800f998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f99a:	bc08      	pop	{r3}
 800f99c:	469e      	mov	lr, r3
 800f99e:	4770      	bx	lr
